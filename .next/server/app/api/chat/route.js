// runtime can't be in strict mode because a global variable is assign and maybe created.
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/api/chat/route"],{

/***/ "node:async_hooks":
/*!***********************************!*\
  !*** external "node:async_hooks" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:async_hooks");

/***/ }),

/***/ "buffer":
/*!******************************!*\
  !*** external "node:buffer" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:buffer");

/***/ }),

/***/ "(shared)/./node_modules/next/dist/esm/client/components/action-async-storage.external.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/client/components/action-async-storage.external.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   actionAsyncStorage: () => (/* binding */ actionAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var _async_local_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./async-local-storage */ \"(shared)/./node_modules/next/dist/esm/client/components/async-local-storage.js\");\n\nconst actionAsyncStorage = (0,_async_local_storage__WEBPACK_IMPORTED_MODULE_0__.createAsyncLocalStorage)();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNoYXJlZCkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9jbGllbnQvY29tcG9uZW50cy9hY3Rpb24tYXN5bmMtc3RvcmFnZS5leHRlcm5hbC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFnRTtBQUN6RCxNQUFNQyxrQkFBa0IsR0FBR0QsNkVBQXVCLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9jbGllbnQvY29tcG9uZW50cy9hY3Rpb24tYXN5bmMtc3RvcmFnZS5leHRlcm5hbC5qcz84ZGUwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUFzeW5jTG9jYWxTdG9yYWdlIH0gZnJvbSBcIi4vYXN5bmMtbG9jYWwtc3RvcmFnZVwiO1xuZXhwb3J0IGNvbnN0IGFjdGlvbkFzeW5jU3RvcmFnZSA9IGNyZWF0ZUFzeW5jTG9jYWxTdG9yYWdlKCk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjdGlvbi1hc3luYy1zdG9yYWdlLmV4dGVybmFsLmpzLm1hcCJdLCJuYW1lcyI6WyJjcmVhdGVBc3luY0xvY2FsU3RvcmFnZSIsImFjdGlvbkFzeW5jU3RvcmFnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(shared)/./node_modules/next/dist/esm/client/components/action-async-storage.external.js\n");

/***/ }),

/***/ "(shared)/./node_modules/next/dist/esm/client/components/async-local-storage.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/next/dist/esm/client/components/async-local-storage.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAsyncLocalStorage: () => (/* binding */ createAsyncLocalStorage)\n/* harmony export */ });\nconst sharedAsyncLocalStorageNotAvailableError = new Error(\"Invariant: AsyncLocalStorage accessed in runtime where it is not available\");\nclass FakeAsyncLocalStorage {\n  disable() {\n    throw sharedAsyncLocalStorageNotAvailableError;\n  }\n  getStore() {\n    // This fake implementation of AsyncLocalStorage always returns `undefined`.\n    return undefined;\n  }\n  run() {\n    throw sharedAsyncLocalStorageNotAvailableError;\n  }\n  exit() {\n    throw sharedAsyncLocalStorageNotAvailableError;\n  }\n  enterWith() {\n    throw sharedAsyncLocalStorageNotAvailableError;\n  }\n}\nconst maybeGlobalAsyncLocalStorage = globalThis.AsyncLocalStorage;\nfunction createAsyncLocalStorage() {\n  if (maybeGlobalAsyncLocalStorage) {\n    return new maybeGlobalAsyncLocalStorage();\n  }\n  return new FakeAsyncLocalStorage();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNoYXJlZCkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9jbGllbnQvY29tcG9uZW50cy9hc3luYy1sb2NhbC1zdG9yYWdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSx3Q0FBd0MsR0FBRyxJQUFJQyxLQUFLLENBQUMsNEVBQTRFLENBQUM7QUFDeEksTUFBTUMscUJBQXFCLENBQUM7RUFDeEJDLE9BQU9BLENBQUEsRUFBRztJQUNOLE1BQU1ILHdDQUF3QztFQUNsRDtFQUNBSSxRQUFRQSxDQUFBLEVBQUc7SUFDUDtJQUNBLE9BQU9DLFNBQVM7RUFDcEI7RUFDQUMsR0FBR0EsQ0FBQSxFQUFHO0lBQ0YsTUFBTU4sd0NBQXdDO0VBQ2xEO0VBQ0FPLElBQUlBLENBQUEsRUFBRztJQUNILE1BQU1QLHdDQUF3QztFQUNsRDtFQUNBUSxTQUFTQSxDQUFBLEVBQUc7SUFDUixNQUFNUix3Q0FBd0M7RUFDbEQ7QUFDSjtBQUNBLE1BQU1TLDRCQUE0QixHQUFHQyxVQUFVLENBQUNDLGlCQUFpQjtBQUMxRCxTQUFTQyx1QkFBdUJBLENBQUEsRUFBRztFQUN0QyxJQUFJSCw0QkFBNEIsRUFBRTtJQUM5QixPQUFPLElBQUlBLDRCQUE0QixDQUFDLENBQUM7RUFDN0M7RUFDQSxPQUFPLElBQUlQLHFCQUFxQixDQUFDLENBQUM7QUFDdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vY2xpZW50L2NvbXBvbmVudHMvYXN5bmMtbG9jYWwtc3RvcmFnZS5qcz9iNDJmIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHNoYXJlZEFzeW5jTG9jYWxTdG9yYWdlTm90QXZhaWxhYmxlRXJyb3IgPSBuZXcgRXJyb3IoXCJJbnZhcmlhbnQ6IEFzeW5jTG9jYWxTdG9yYWdlIGFjY2Vzc2VkIGluIHJ1bnRpbWUgd2hlcmUgaXQgaXMgbm90IGF2YWlsYWJsZVwiKTtcbmNsYXNzIEZha2VBc3luY0xvY2FsU3RvcmFnZSB7XG4gICAgZGlzYWJsZSgpIHtcbiAgICAgICAgdGhyb3cgc2hhcmVkQXN5bmNMb2NhbFN0b3JhZ2VOb3RBdmFpbGFibGVFcnJvcjtcbiAgICB9XG4gICAgZ2V0U3RvcmUoKSB7XG4gICAgICAgIC8vIFRoaXMgZmFrZSBpbXBsZW1lbnRhdGlvbiBvZiBBc3luY0xvY2FsU3RvcmFnZSBhbHdheXMgcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcnVuKCkge1xuICAgICAgICB0aHJvdyBzaGFyZWRBc3luY0xvY2FsU3RvcmFnZU5vdEF2YWlsYWJsZUVycm9yO1xuICAgIH1cbiAgICBleGl0KCkge1xuICAgICAgICB0aHJvdyBzaGFyZWRBc3luY0xvY2FsU3RvcmFnZU5vdEF2YWlsYWJsZUVycm9yO1xuICAgIH1cbiAgICBlbnRlcldpdGgoKSB7XG4gICAgICAgIHRocm93IHNoYXJlZEFzeW5jTG9jYWxTdG9yYWdlTm90QXZhaWxhYmxlRXJyb3I7XG4gICAgfVxufVxuY29uc3QgbWF5YmVHbG9iYWxBc3luY0xvY2FsU3RvcmFnZSA9IGdsb2JhbFRoaXMuQXN5bmNMb2NhbFN0b3JhZ2U7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQXN5bmNMb2NhbFN0b3JhZ2UoKSB7XG4gICAgaWYgKG1heWJlR2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBtYXliZUdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlKCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRmFrZUFzeW5jTG9jYWxTdG9yYWdlKCk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzeW5jLWxvY2FsLXN0b3JhZ2UuanMubWFwIl0sIm5hbWVzIjpbInNoYXJlZEFzeW5jTG9jYWxTdG9yYWdlTm90QXZhaWxhYmxlRXJyb3IiLCJFcnJvciIsIkZha2VBc3luY0xvY2FsU3RvcmFnZSIsImRpc2FibGUiLCJnZXRTdG9yZSIsInVuZGVmaW5lZCIsInJ1biIsImV4aXQiLCJlbnRlcldpdGgiLCJtYXliZUdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlIiwiZ2xvYmFsVGhpcyIsIkFzeW5jTG9jYWxTdG9yYWdlIiwiY3JlYXRlQXN5bmNMb2NhbFN0b3JhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(shared)/./node_modules/next/dist/esm/client/components/async-local-storage.js\n");

/***/ }),

/***/ "(shared)/./node_modules/next/dist/esm/client/components/request-async-storage.external.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/client/components/request-async-storage.external.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var _async_local_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./async-local-storage */ \"(shared)/./node_modules/next/dist/esm/client/components/async-local-storage.js\");\n\nconst requestAsyncStorage = (0,_async_local_storage__WEBPACK_IMPORTED_MODULE_0__.createAsyncLocalStorage)();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNoYXJlZCkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9jbGllbnQvY29tcG9uZW50cy9yZXF1ZXN0LWFzeW5jLXN0b3JhZ2UuZXh0ZXJuYWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBZ0U7QUFDekQsTUFBTUMsbUJBQW1CLEdBQUdELDZFQUF1QixDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vY2xpZW50L2NvbXBvbmVudHMvcmVxdWVzdC1hc3luYy1zdG9yYWdlLmV4dGVybmFsLmpzP2I3NjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQXN5bmNMb2NhbFN0b3JhZ2UgfSBmcm9tIFwiLi9hc3luYy1sb2NhbC1zdG9yYWdlXCI7XG5leHBvcnQgY29uc3QgcmVxdWVzdEFzeW5jU3RvcmFnZSA9IGNyZWF0ZUFzeW5jTG9jYWxTdG9yYWdlKCk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcXVlc3QtYXN5bmMtc3RvcmFnZS5leHRlcm5hbC5qcy5tYXAiXSwibmFtZXMiOlsiY3JlYXRlQXN5bmNMb2NhbFN0b3JhZ2UiLCJyZXF1ZXN0QXN5bmNTdG9yYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(shared)/./node_modules/next/dist/esm/client/components/request-async-storage.external.js\n");

/***/ }),

/***/ "(shared)/./node_modules/next/dist/esm/client/components/static-generation-async-storage.external.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/client/components/static-generation-async-storage.external.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var _async_local_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./async-local-storage */ \"(shared)/./node_modules/next/dist/esm/client/components/async-local-storage.js\");\n\nconst staticGenerationAsyncStorage = (0,_async_local_storage__WEBPACK_IMPORTED_MODULE_0__.createAsyncLocalStorage)();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNoYXJlZCkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9jbGllbnQvY29tcG9uZW50cy9zdGF0aWMtZ2VuZXJhdGlvbi1hc3luYy1zdG9yYWdlLmV4dGVybmFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWdFO0FBQ3pELE1BQU1DLDRCQUE0QixHQUFHRCw2RUFBdUIsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvZXNtL2NsaWVudC9jb21wb25lbnRzL3N0YXRpYy1nZW5lcmF0aW9uLWFzeW5jLXN0b3JhZ2UuZXh0ZXJuYWwuanM/MDExNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVBc3luY0xvY2FsU3RvcmFnZSB9IGZyb20gXCIuL2FzeW5jLWxvY2FsLXN0b3JhZ2VcIjtcbmV4cG9ydCBjb25zdCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlID0gY3JlYXRlQXN5bmNMb2NhbFN0b3JhZ2UoKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdGljLWdlbmVyYXRpb24tYXN5bmMtc3RvcmFnZS5leHRlcm5hbC5qcy5tYXAiXSwibmFtZXMiOlsiY3JlYXRlQXN5bmNMb2NhbFN0b3JhZ2UiLCJzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(shared)/./node_modules/next/dist/esm/client/components/static-generation-async-storage.external.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Fjimmullen%2FCascadeProjects%2Fpinelands-wildfire-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fjimmullen%2FCascadeProjects%2Fpinelands-wildfire-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!./app/api/chat/route.ts?__next_edge_ssr_entry__":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Fjimmullen%2FCascadeProjects%2Fpinelands-wildfire-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fjimmullen%2FCascadeProjects%2Fpinelands-wildfire-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!./app/api/chat/route.ts?__next_edge_ssr_entry__ ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/esm/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/esm/server/lib/patch-fetch.js\");\n/* harmony import */ var _Users_jimmullen_CascadeProjects_pinelands_wildfire_app_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/chat/route.ts */ \"(rsc)/./app/api/chat/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/chat/route\",\n        pathname: \"/api/chat\",\n        filename: \"route\",\n        bundlePath: \"app/api/chat/route\"\n    },\n    resolvedPagePath: \"/Users/jimmullen/CascadeProjects/pinelands-wildfire-app/app/api/chat/route.ts\",\n    nextConfigOutput,\n    userland: _Users_jimmullen_CascadeProjects_pinelands_wildfire_app_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/chat/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjaGF0JTJGcm91dGUmcGFnZT0lMkZhcGklMkZjaGF0JTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGY2hhdCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmppbW11bGxlbiUyRkNhc2NhZGVQcm9qZWN0cyUyRnBpbmVsYW5kcy13aWxkZmlyZS1hcHAlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGamltbXVsbGVuJTJGQ2FzY2FkZVByb2plY3RzJTJGcGluZWxhbmRzLXdpbGRmaXJlLWFwcCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEuL2FwcC9hcGkvY2hhdC9yb3V0ZS50cz9fX25leHRfZWRnZV9zc3JfZW50cnlfXyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUM2QjtBQUMxRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVHQUF1RztBQUMvRztBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzZKOztBQUU3SiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9hcHAvYXBpL2NoYXQvcm91dGUudHM/Mjc5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvamltbXVsbGVuL0Nhc2NhZGVQcm9qZWN0cy9waW5lbGFuZHMtd2lsZGZpcmUtYXBwL2FwcC9hcGkvY2hhdC9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvY2hhdC9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2NoYXRcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2NoYXQvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvamltbXVsbGVuL0Nhc2NhZGVQcm9qZWN0cy9waW5lbGFuZHMtd2lsZGZpcmUtYXBwL2FwcC9hcGkvY2hhdC9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9jaGF0L3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCwgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Fjimmullen%2FCascadeProjects%2Fpinelands-wildfire-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fjimmullen%2FCascadeProjects%2Fpinelands-wildfire-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!./app/api/chat/route.ts?__next_edge_ssr_entry__\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-edge-app-route-loader/index.js?absolutePagePath=%2FUsers%2Fjimmullen%2FCascadeProjects%2Fpinelands-wildfire-app%2Fapp%2Fapi%2Fchat%2Froute.ts&page=%2Fapi%2Fchat%2Froute&appDirLoader=bmV4dC1hcHAtbG9hZGVyP25hbWU9YXBwJTJGYXBpJTJGY2hhdCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGY2hhdCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmNoYXQlMkZyb3V0ZS50cyZhcHBEaXI9JTJGVXNlcnMlMkZqaW1tdWxsZW4lMkZDYXNjYWRlUHJvamVjdHMlMkZwaW5lbGFuZHMtd2lsZGZpcmUtYXBwJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRmppbW11bGxlbiUyRkNhc2NhZGVQcm9qZWN0cyUyRnBpbmVsYW5kcy13aWxkZmlyZS1hcHAmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0Qh&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-edge-app-route-loader/index.js?absolutePagePath=%2FUsers%2Fjimmullen%2FCascadeProjects%2Fpinelands-wildfire-app%2Fapp%2Fapi%2Fchat%2Froute.ts&page=%2Fapi%2Fchat%2Froute&appDirLoader=bmV4dC1hcHAtbG9hZGVyP25hbWU9YXBwJTJGYXBpJTJGY2hhdCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGY2hhdCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmNoYXQlMkZyb3V0ZS50cyZhcHBEaXI9JTJGVXNlcnMlMkZqaW1tdWxsZW4lMkZDYXNjYWRlUHJvamVjdHMlMkZwaW5lbGFuZHMtd2lsZGZpcmUtYXBwJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRmppbW11bGxlbiUyRkNhc2NhZGVQcm9qZWN0cyUyRnBpbmVsYW5kcy13aWxkZmlyZS1hcHAmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0Qh&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ComponentMod: () => (/* binding */ ComponentMod),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_edge_route_module_wrapper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/edge-route-module-wrapper */ \"(rsc)/./node_modules/next/dist/esm/server/web/edge-route-module-wrapper.js\");\n/* harmony import */ var next_app_loader_name_app_2Fapi_2Fchat_2Froute_page_2Fapi_2Fchat_2Froute_appPaths_pagePath_private_next_app_dir_2Fapi_2Fchat_2Froute_ts_appDir_2FUsers_2Fjimmullen_2FCascadeProjects_2Fpinelands_wildfire_app_2Fapp_pageExtensions_tsx_pageExtensions_ts_pageExtensions_jsx_pageExtensions_js_rootDir_2FUsers_2Fjimmullen_2FCascadeProjects_2Fpinelands_wildfire_app_isDev_true_tsconfigPath_tsconfig_json_basePath_assetPrefix_nextConfigOutput_preferredRegion_middlewareConfig_e30_3D_app_api_chat_route_ts_next_edge_ssr_entry___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-app-loader?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Fjimmullen%2FCascadeProjects%2Fpinelands-wildfire-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fjimmullen%2FCascadeProjects%2Fpinelands-wildfire-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!./app/api/chat/route.ts?__next_edge_ssr_entry__ */ \"(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Fjimmullen%2FCascadeProjects%2Fpinelands-wildfire-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fjimmullen%2FCascadeProjects%2Fpinelands-wildfire-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!./app/api/chat/route.ts?__next_edge_ssr_entry__\");\n\n// Import the userland code.\n\nconst ComponentMod = next_app_loader_name_app_2Fapi_2Fchat_2Froute_page_2Fapi_2Fchat_2Froute_appPaths_pagePath_private_next_app_dir_2Fapi_2Fchat_2Froute_ts_appDir_2FUsers_2Fjimmullen_2FCascadeProjects_2Fpinelands_wildfire_app_2Fapp_pageExtensions_tsx_pageExtensions_ts_pageExtensions_jsx_pageExtensions_js_rootDir_2FUsers_2Fjimmullen_2FCascadeProjects_2Fpinelands_wildfire_app_isDev_true_tsconfigPath_tsconfig_json_basePath_assetPrefix_nextConfigOutput_preferredRegion_middlewareConfig_e30_3D_app_api_chat_route_ts_next_edge_ssr_entry___WEBPACK_IMPORTED_MODULE_1__;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (next_dist_server_web_edge_route_module_wrapper__WEBPACK_IMPORTED_MODULE_0__.EdgeRouteModuleWrapper.wrap(next_app_loader_name_app_2Fapi_2Fchat_2Froute_page_2Fapi_2Fchat_2Froute_appPaths_pagePath_private_next_app_dir_2Fapi_2Fchat_2Froute_ts_appDir_2FUsers_2Fjimmullen_2FCascadeProjects_2Fpinelands_wildfire_app_2Fapp_pageExtensions_tsx_pageExtensions_ts_pageExtensions_jsx_pageExtensions_js_rootDir_2FUsers_2Fjimmullen_2FCascadeProjects_2Fpinelands_wildfire_app_isDev_true_tsconfigPath_tsconfig_json_basePath_assetPrefix_nextConfigOutput_preferredRegion_middlewareConfig_e30_3D_app_api_chat_route_ts_next_edge_ssr_entry___WEBPACK_IMPORTED_MODULE_1__.routeModule));\n\n//# sourceMappingURL=edge-app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWVkZ2UtYXBwLXJvdXRlLWxvYWRlci9pbmRleC5qcz9hYnNvbHV0ZVBhZ2VQYXRoPSUyRlVzZXJzJTJGamltbXVsbGVuJTJGQ2FzY2FkZVByb2plY3RzJTJGcGluZWxhbmRzLXdpbGRmaXJlLWFwcCUyRmFwcCUyRmFwaSUyRmNoYXQlMkZyb3V0ZS50cyZwYWdlPSUyRmFwaSUyRmNoYXQlMkZyb3V0ZSZhcHBEaXJMb2FkZXI9Ym1WNGRDMWhjSEF0Ykc5aFpHVnlQMjVoYldVOVlYQndKVEpHWVhCcEpUSkdZMmhoZENVeVJuSnZkWFJsSm5CaFoyVTlKVEpHWVhCcEpUSkdZMmhoZENVeVJuSnZkWFJsSm1Gd2NGQmhkR2h6UFNad1lXZGxVR0YwYUQxd2NtbDJZWFJsTFc1bGVIUXRZWEJ3TFdScGNpVXlSbUZ3YVNVeVJtTm9ZWFFsTWtaeWIzVjBaUzUwY3laaGNIQkVhWEk5SlRKR1ZYTmxjbk1sTWtacWFXMXRkV3hzWlc0bE1rWkRZWE5qWVdSbFVISnZhbVZqZEhNbE1rWndhVzVsYkdGdVpITXRkMmxzWkdacGNtVXRZWEJ3SlRKR1lYQndKbkJoWjJWRmVIUmxibk5wYjI1elBYUnplQ1p3WVdkbFJYaDBaVzV6YVc5dWN6MTBjeVp3WVdkbFJYaDBaVzV6YVc5dWN6MXFjM2dtY0dGblpVVjRkR1Z1YzJsdmJuTTlhbk1tY205dmRFUnBjajBsTWtaVmMyVnljeVV5Um1wcGJXMTFiR3hsYmlVeVJrTmhjMk5oWkdWUWNtOXFaV04wY3lVeVJuQnBibVZzWVc1a2N5MTNhV3hrWm1seVpTMWhjSEFtYVhORVpYWTlkSEoxWlNaMGMyTnZibVpwWjFCaGRHZzlkSE5qYjI1bWFXY3Vhbk52YmlaaVlYTmxVR0YwYUQwbVlYTnpaWFJRY21WbWFYZzlKbTVsZUhSRGIyNW1hV2RQZFhSd2RYUTlKbkJ5WldabGNuSmxaRkpsWjJsdmJqMG1iV2xrWkd4bGQyRnlaVU52Ym1acFp6MWxNekFsTTBRaCZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXdGO0FBQ3hGO0FBQzBpQjtBQUNuaUIscUJBQXFCLCtoQkFBTTtBQUNsQyxpRUFBZSxrR0FBc0IsTUFBTSwyaUJBQWtCLENBQUMsRUFBQzs7QUFFL0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLz82NTIzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVkZ2VSb3V0ZU1vZHVsZVdyYXBwZXIgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci93ZWIvZWRnZS1yb3V0ZS1tb2R1bGUtd3JhcHBlclwiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgbW9kdWxlIGZyb20gXCJuZXh0LWFwcC1sb2FkZXI/bmFtZT1hcHAlMkZhcGklMkZjaGF0JTJGcm91dGUmcGFnZT0lMkZhcGklMkZjaGF0JTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGY2hhdCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmppbW11bGxlbiUyRkNhc2NhZGVQcm9qZWN0cyUyRnBpbmVsYW5kcy13aWxkZmlyZS1hcHAlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGamltbXVsbGVuJTJGQ2FzY2FkZVByb2plY3RzJTJGcGluZWxhbmRzLXdpbGRmaXJlLWFwcCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEuL2FwcC9hcGkvY2hhdC9yb3V0ZS50cz9fX25leHRfZWRnZV9zc3JfZW50cnlfX1wiO1xuZXhwb3J0IGNvbnN0IENvbXBvbmVudE1vZCA9IG1vZHVsZTtcbmV4cG9ydCBkZWZhdWx0IEVkZ2VSb3V0ZU1vZHVsZVdyYXBwZXIud3JhcChtb2R1bGUucm91dGVNb2R1bGUpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1lZGdlLWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-edge-app-route-loader/index.js?absolutePagePath=%2FUsers%2Fjimmullen%2FCascadeProjects%2Fpinelands-wildfire-app%2Fapp%2Fapi%2Fchat%2Froute.ts&page=%2Fapi%2Fchat%2Froute&appDirLoader=bmV4dC1hcHAtbG9hZGVyP25hbWU9YXBwJTJGYXBpJTJGY2hhdCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGY2hhdCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmNoYXQlMkZyb3V0ZS50cyZhcHBEaXI9JTJGVXNlcnMlMkZqaW1tdWxsZW4lMkZDYXNjYWRlUHJvamVjdHMlMkZwaW5lbGFuZHMtd2lsZGZpcmUtYXBwJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRmppbW11bGxlbiUyRkNhc2NhZGVQcm9qZWN0cyUyRnBpbmVsYW5kcy13aWxkZmlyZS1hcHAmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0Qh&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/chat/route.ts":
/*!*******************************!*\
  !*** ./app/api/chat/route.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n\nif (!process.env.OPENAI_API_KEY) {\n    throw new Error(\"Missing environment variable OPENAI_API_KEY\");\n}\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\nconst runtime = \"edge\";\nasync function POST(req) {\n    try {\n        const body = await req.json();\n        const { messages } = body;\n        if (!messages) {\n            return new Response(\"Messages array is required\", {\n                status: 400\n            });\n        }\n        // Check for API key\n        const apiKey = process.env.OPENAI_API_KEY;\n        if (!apiKey) {\n            console.error(\"No API key provided\");\n            return new Response(\"No API key provided\", {\n                status: 500\n            });\n        }\n        // Create a streaming response\n        const stream = new ReadableStream({\n            async start (controller) {\n                try {\n                    const systemPrompt = `You are Firefighter Bill, an expert in wildfire prevention and response in the New Jersey Pinelands.\n\nYour expertise includes:\n- Wildfire prevention and safety\n- Fire risk assessment\n- Emergency preparedness\n- Evacuation procedures\n- Local fire history\n- Pinelands ecosystem and fire ecology\n\nRespond in a friendly, helpful manner while maintaining professionalism. Keep responses focused on wildfire-related topics.`;\n                    const response = await openai.chat.completions.create({\n                        messages: [\n                            {\n                                role: \"system\",\n                                content: systemPrompt\n                            },\n                            ...messages.map((msg)=>({\n                                    role: msg.role,\n                                    content: msg.content\n                                }))\n                        ],\n                        model: process.env.LLM_MODEL || \"gpt-3.5-turbo\",\n                        stream: true\n                    });\n                    for await (const chunk of response){\n                        if (chunk.choices[0]?.delta?.content) {\n                            const queue = new TextEncoder().encode(chunk.choices[0].delta.content);\n                            controller.enqueue(queue);\n                        }\n                    }\n                    controller.close();\n                } catch (error) {\n                    console.error(\"Error in stream:\", error);\n                    controller.error(error);\n                }\n            }\n        });\n        return new Response(stream);\n    } catch (error) {\n        console.error(\"Error:\", error);\n        return new Response(\"Internal Server Error\", {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2NoYXQvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQzJCO0FBRTNCLElBQUksQ0FBQ0MsUUFBUUMsR0FBRyxDQUFDQyxjQUFjLEVBQUU7SUFDL0IsTUFBTSxJQUFJQyxNQUFNO0FBQ2xCO0FBRUEsTUFBTUMsU0FBUyxJQUFJTCw4Q0FBTUEsQ0FBQztJQUN4Qk0sUUFBUUwsUUFBUUMsR0FBRyxDQUFDQyxjQUFBQTtBQUN0QjtBQUVPLE1BQU1JLFVBQVUsT0FBTTtBQU90QixlQUFlQyxLQUFLQyxHQUFnQjtJQUN6QyxJQUFJO1FBQ0YsTUFBTUMsT0FBTyxNQUFNRCxJQUFJRSxJQUFJO1FBQzNCLE1BQU0sRUFBRUMsUUFBQUEsRUFBVSxHQUFHRjtRQUNyQixJQUFJLENBQUNFLFVBQVU7WUFDYixPQUFPLElBQUlDLFNBQVMsOEJBQThCO2dCQUFFQyxRQUFRO1lBQUk7UUFDbEU7UUFFQTtRQUNBLE1BQU1SLFNBQVNMLFFBQVFDLEdBQUcsQ0FBQ0MsY0FBYztRQUN6QyxJQUFJLENBQUNHLFFBQVE7WUFDWFMsUUFBUUMsS0FBSyxDQUFDO1lBQ2QsT0FBTyxJQUFJSCxTQUFTLHVCQUF1QjtnQkFBRUMsUUFBUTtZQUFJO1FBQzNEO1FBRUE7UUFDQSxNQUFNRyxTQUFTLElBQUlDLGVBQWU7WUFDaEMsTUFBTUMsT0FBTUMsVUFBMkM7Z0JBQ3JELElBQUk7b0JBQ0YsTUFBTUMsZUFBZ0I7Ozs7Ozs7Ozs7MkhBVWhDLENBQTRIO29CQUVsSCxNQUFNQyxXQUFXLE1BQU1qQixPQUFPa0IsSUFBSSxDQUFDQyxXQUFXLENBQUNDLE1BQU0sQ0FBQzt3QkFDcERiLFVBQVU7NEJBQ1I7Z0NBQUVjLE1BQU07Z0NBQVVDLFNBQVNOOzRCQUFhOytCQUNyQ1QsU0FBU2dCLEdBQUcsQ0FBRUMsQ0FBQUEsTUFBc0I7b0NBQ3JDSCxNQUFNRyxJQUFJSCxJQUFJO29DQUNkQyxTQUFTRSxJQUFJRixPQUFBQTtnQ0FDZjt5QkFDRDt3QkFDREcsT0FBTzdCLFFBQVFDLEdBQUcsQ0FBQzZCLFNBQVMsSUFBSTt3QkFDaENkLFFBQVE7b0JBQ1Y7b0JBRUEsV0FBVyxNQUFNZSxTQUFTVixTQUFVO3dCQUNsQyxJQUFJVSxNQUFNQyxPQUFPLENBQUMsRUFBRSxFQUFFQyxPQUFPUCxTQUFTOzRCQUNwQyxNQUFNUSxRQUFRLElBQUlDLGNBQWNDLE1BQU0sQ0FBQ0wsTUFBTUMsT0FBTyxDQUFDLEVBQUUsQ0FBQ0MsS0FBSyxDQUFDUCxPQUFPOzRCQUNyRVAsV0FBV2tCLE9BQU8sQ0FBQ0g7d0JBQ3JCO29CQUNGO29CQUNBZixXQUFXbUIsS0FBSztnQkFDbEIsRUFBRSxPQUFPdkIsT0FBTztvQkFDZEQsUUFBUUMsS0FBSyxDQUFDLG9CQUFvQkE7b0JBQ2xDSSxXQUFXSixLQUFLLENBQUNBO2dCQUNuQjtZQUNGO1FBQ0Y7UUFFQSxPQUFPLElBQUlILFNBQVNJO0lBQ3RCLEVBQUUsT0FBT0QsT0FBTztRQUNkRCxRQUFRQyxLQUFLLENBQUMsVUFBVUE7UUFDeEIsT0FBTyxJQUFJSCxTQUFTLHlCQUF5QjtZQUFFQyxRQUFRO1FBQUk7SUFDN0Q7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9hcHAvYXBpL2NoYXQvcm91dGUudHM/ZGU0NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCBPcGVuQUkgZnJvbSAnb3BlbmFpJztcblxuaWYgKCFwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWSkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgZW52aXJvbm1lbnQgdmFyaWFibGUgT1BFTkFJX0FQSV9LRVknKTtcbn1cblxuY29uc3Qgb3BlbmFpID0gbmV3IE9wZW5BSSh7XG4gIGFwaUtleTogcHJvY2Vzcy5lbnYuT1BFTkFJX0FQSV9LRVksXG59KTtcblxuZXhwb3J0IGNvbnN0IHJ1bnRpbWUgPSAnZWRnZSc7XG5cbmludGVyZmFjZSBDaGF0TWVzc2FnZSB7XG4gIHJvbGU6ICdzeXN0ZW0nIHwgJ3VzZXInIHwgJ2Fzc2lzdGFudCc7XG4gIGNvbnRlbnQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxOiBOZXh0UmVxdWVzdCk6IFByb21pc2U8UmVzcG9uc2U+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxLmpzb24oKSBhcyB7IG1lc3NhZ2VzOiBDaGF0TWVzc2FnZVtdIH07XG4gICAgY29uc3QgeyBtZXNzYWdlcyB9ID0gYm9keTtcbiAgICBpZiAoIW1lc3NhZ2VzKSB7XG4gICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKCdNZXNzYWdlcyBhcnJheSBpcyByZXF1aXJlZCcsIHsgc3RhdHVzOiA0MDAgfSk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIEFQSSBrZXlcbiAgICBjb25zdCBhcGlLZXkgPSBwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWTtcbiAgICBpZiAoIWFwaUtleSkge1xuICAgICAgY29uc29sZS5lcnJvcignTm8gQVBJIGtleSBwcm92aWRlZCcpO1xuICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZSgnTm8gQVBJIGtleSBwcm92aWRlZCcsIHsgc3RhdHVzOiA1MDAgfSk7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGEgc3RyZWFtaW5nIHJlc3BvbnNlXG4gICAgY29uc3Qgc3RyZWFtID0gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICAgIGFzeW5jIHN0YXJ0KGNvbnRyb2xsZXI6IFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBzeXN0ZW1Qcm9tcHQgPSBgWW91IGFyZSBGaXJlZmlnaHRlciBCaWxsLCBhbiBleHBlcnQgaW4gd2lsZGZpcmUgcHJldmVudGlvbiBhbmQgcmVzcG9uc2UgaW4gdGhlIE5ldyBKZXJzZXkgUGluZWxhbmRzLlxuXG5Zb3VyIGV4cGVydGlzZSBpbmNsdWRlczpcbi0gV2lsZGZpcmUgcHJldmVudGlvbiBhbmQgc2FmZXR5XG4tIEZpcmUgcmlzayBhc3Nlc3NtZW50XG4tIEVtZXJnZW5jeSBwcmVwYXJlZG5lc3Ncbi0gRXZhY3VhdGlvbiBwcm9jZWR1cmVzXG4tIExvY2FsIGZpcmUgaGlzdG9yeVxuLSBQaW5lbGFuZHMgZWNvc3lzdGVtIGFuZCBmaXJlIGVjb2xvZ3lcblxuUmVzcG9uZCBpbiBhIGZyaWVuZGx5LCBoZWxwZnVsIG1hbm5lciB3aGlsZSBtYWludGFpbmluZyBwcm9mZXNzaW9uYWxpc20uIEtlZXAgcmVzcG9uc2VzIGZvY3VzZWQgb24gd2lsZGZpcmUtcmVsYXRlZCB0b3BpY3MuYDtcblxuICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgb3BlbmFpLmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKHtcbiAgICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICAgIHsgcm9sZTogJ3N5c3RlbScsIGNvbnRlbnQ6IHN5c3RlbVByb21wdCB9LFxuICAgICAgICAgICAgICAuLi5tZXNzYWdlcy5tYXAoKG1zZzogQ2hhdE1lc3NhZ2UpID0+ICh7XG4gICAgICAgICAgICAgICAgcm9sZTogbXNnLnJvbGUsXG4gICAgICAgICAgICAgICAgY29udGVudDogbXNnLmNvbnRlbnQsXG4gICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBtb2RlbDogcHJvY2Vzcy5lbnYuTExNX01PREVMIHx8ICdncHQtMy41LXR1cmJvJyxcbiAgICAgICAgICAgIHN0cmVhbTogdHJ1ZSxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2YgcmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmIChjaHVuay5jaG9pY2VzWzBdPy5kZWx0YT8uY29udGVudCkge1xuICAgICAgICAgICAgICBjb25zdCBxdWV1ZSA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShjaHVuay5jaG9pY2VzWzBdLmRlbHRhLmNvbnRlbnQpO1xuICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUocXVldWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gc3RyZWFtOicsIGVycm9yKTtcbiAgICAgICAgICBjb250cm9sbGVyLmVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBuZXcgUmVzcG9uc2Uoc3RyZWFtKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvcjonLCBlcnJvcik7XG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZSgnSW50ZXJuYWwgU2VydmVyIEVycm9yJywgeyBzdGF0dXM6IDUwMCB9KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIk9wZW5BSSIsInByb2Nlc3MiLCJlbnYiLCJPUEVOQUlfQVBJX0tFWSIsIkVycm9yIiwib3BlbmFpIiwiYXBpS2V5IiwicnVudGltZSIsIlBPU1QiLCJyZXEiLCJib2R5IiwianNvbiIsIm1lc3NhZ2VzIiwiUmVzcG9uc2UiLCJzdGF0dXMiLCJjb25zb2xlIiwiZXJyb3IiLCJzdHJlYW0iLCJSZWFkYWJsZVN0cmVhbSIsInN0YXJ0IiwiY29udHJvbGxlciIsInN5c3RlbVByb21wdCIsInJlc3BvbnNlIiwiY2hhdCIsImNvbXBsZXRpb25zIiwiY3JlYXRlIiwicm9sZSIsImNvbnRlbnQiLCJtYXAiLCJtc2ciLCJtb2RlbCIsIkxMTV9NT0RFTCIsImNodW5rIiwiY2hvaWNlcyIsImRlbHRhIiwicXVldWUiLCJUZXh0RW5jb2RlciIsImVuY29kZSIsImVucXVldWUiLCJjbG9zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./app/api/chat/route.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/@edge-runtime/cookies/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/@edge-runtime/cookies/index.js ***!
  \************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  RequestCookies: () => RequestCookies,\n  ResponseCookies: () => ResponseCookies,\n  parseCookie: () => parseCookie,\n  parseSetCookie: () => parseSetCookie,\n  stringifyCookie: () => stringifyCookie\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/serialize.ts\nfunction stringifyCookie(c) {\n  var _a;\n  const attrs = [\"path\" in c && c.path && `Path=${c.path}`, \"expires\" in c && (c.expires || c.expires === 0) && `Expires=${(typeof c.expires === \"number\" ? new Date(c.expires) : c.expires).toUTCString()}`, \"maxAge\" in c && typeof c.maxAge === \"number\" && `Max-Age=${c.maxAge}`, \"domain\" in c && c.domain && `Domain=${c.domain}`, \"secure\" in c && c.secure && \"Secure\", \"httpOnly\" in c && c.httpOnly && \"HttpOnly\", \"sameSite\" in c && c.sameSite && `SameSite=${c.sameSite}`, \"partitioned\" in c && c.partitioned && \"Partitioned\", \"priority\" in c && c.priority && `Priority=${c.priority}`].filter(Boolean);\n  return `${c.name}=${encodeURIComponent((_a = c.value) != null ? _a : \"\")}; ${attrs.join(\"; \")}`;\n}\nfunction parseCookie(cookie) {\n  const map = /* @__PURE__ */new Map();\n  for (const pair of cookie.split(/; */)) {\n    if (!pair) continue;\n    const splitAt = pair.indexOf(\"=\");\n    if (splitAt === -1) {\n      map.set(pair, \"true\");\n      continue;\n    }\n    const [key, value] = [pair.slice(0, splitAt), pair.slice(splitAt + 1)];\n    try {\n      map.set(key, decodeURIComponent(value != null ? value : \"true\"));\n    } catch {}\n  }\n  return map;\n}\nfunction parseSetCookie(setCookie) {\n  if (!setCookie) {\n    return void 0;\n  }\n  const [[name, value], ...attributes] = parseCookie(setCookie);\n  const {\n    domain,\n    expires,\n    httponly,\n    maxage,\n    path,\n    samesite,\n    secure,\n    partitioned,\n    priority\n  } = Object.fromEntries(attributes.map(([key, value2]) => [key.toLowerCase(), value2]));\n  const cookie = {\n    name,\n    value: decodeURIComponent(value),\n    domain,\n    ...(expires && {\n      expires: new Date(expires)\n    }),\n    ...(httponly && {\n      httpOnly: true\n    }),\n    ...(typeof maxage === \"string\" && {\n      maxAge: Number(maxage)\n    }),\n    path,\n    ...(samesite && {\n      sameSite: parseSameSite(samesite)\n    }),\n    ...(secure && {\n      secure: true\n    }),\n    ...(priority && {\n      priority: parsePriority(priority)\n    }),\n    ...(partitioned && {\n      partitioned: true\n    })\n  };\n  return compact(cookie);\n}\nfunction compact(t) {\n  const newT = {};\n  for (const key in t) {\n    if (t[key]) {\n      newT[key] = t[key];\n    }\n  }\n  return newT;\n}\nvar SAME_SITE = [\"strict\", \"lax\", \"none\"];\nfunction parseSameSite(string) {\n  string = string.toLowerCase();\n  return SAME_SITE.includes(string) ? string : void 0;\n}\nvar PRIORITY = [\"low\", \"medium\", \"high\"];\nfunction parsePriority(string) {\n  string = string.toLowerCase();\n  return PRIORITY.includes(string) ? string : void 0;\n}\nfunction splitCookiesString(cookiesString) {\n  if (!cookiesString) return [];\n  var cookiesStrings = [];\n  var pos = 0;\n  var start;\n  var ch;\n  var lastComma;\n  var nextStart;\n  var cookiesSeparatorFound;\n  function skipWhitespace() {\n    while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\n      pos += 1;\n    }\n    return pos < cookiesString.length;\n  }\n  function notSpecialChar() {\n    ch = cookiesString.charAt(pos);\n    return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n  }\n  while (pos < cookiesString.length) {\n    start = pos;\n    cookiesSeparatorFound = false;\n    while (skipWhitespace()) {\n      ch = cookiesString.charAt(pos);\n      if (ch === \",\") {\n        lastComma = pos;\n        pos += 1;\n        skipWhitespace();\n        nextStart = pos;\n        while (pos < cookiesString.length && notSpecialChar()) {\n          pos += 1;\n        }\n        if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n          cookiesSeparatorFound = true;\n          pos = nextStart;\n          cookiesStrings.push(cookiesString.substring(start, lastComma));\n          start = pos;\n        } else {\n          pos = lastComma + 1;\n        }\n      } else {\n        pos += 1;\n      }\n    }\n    if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n      cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n    }\n  }\n  return cookiesStrings;\n}\n\n// src/request-cookies.ts\nvar RequestCookies = class {\n  constructor(requestHeaders) {\n    /** @internal */\n    this._parsed = /* @__PURE__ */new Map();\n    this._headers = requestHeaders;\n    const header = requestHeaders.get(\"cookie\");\n    if (header) {\n      const parsed = parseCookie(header);\n      for (const [name, value] of parsed) {\n        this._parsed.set(name, {\n          name,\n          value\n        });\n      }\n    }\n  }\n  [Symbol.iterator]() {\n    return this._parsed[Symbol.iterator]();\n  }\n  /**\n   * The amount of cookies received from the client\n   */\n  get size() {\n    return this._parsed.size;\n  }\n  get(...args) {\n    const name = typeof args[0] === \"string\" ? args[0] : args[0].name;\n    return this._parsed.get(name);\n  }\n  getAll(...args) {\n    var _a;\n    const all = Array.from(this._parsed);\n    if (!args.length) {\n      return all.map(([_, value]) => value);\n    }\n    const name = typeof args[0] === \"string\" ? args[0] : (_a = args[0]) == null ? void 0 : _a.name;\n    return all.filter(([n]) => n === name).map(([_, value]) => value);\n  }\n  has(name) {\n    return this._parsed.has(name);\n  }\n  set(...args) {\n    const [name, value] = args.length === 1 ? [args[0].name, args[0].value] : args;\n    const map = this._parsed;\n    map.set(name, {\n      name,\n      value\n    });\n    this._headers.set(\"cookie\", Array.from(map).map(([_, value2]) => stringifyCookie(value2)).join(\"; \"));\n    return this;\n  }\n  /**\n   * Delete the cookies matching the passed name or names in the request.\n   */\n  delete(names) {\n    const map = this._parsed;\n    const result = !Array.isArray(names) ? map.delete(names) : names.map(name => map.delete(name));\n    this._headers.set(\"cookie\", Array.from(map).map(([_, value]) => stringifyCookie(value)).join(\"; \"));\n    return result;\n  }\n  /**\n   * Delete all the cookies in the cookies in the request.\n   */\n  clear() {\n    this.delete(Array.from(this._parsed.keys()));\n    return this;\n  }\n  /**\n   * Format the cookies in the request as a string for logging\n   */\n  [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n    return `RequestCookies ${JSON.stringify(Object.fromEntries(this._parsed))}`;\n  }\n  toString() {\n    return [...this._parsed.values()].map(v => `${v.name}=${encodeURIComponent(v.value)}`).join(\"; \");\n  }\n};\n\n// src/response-cookies.ts\nvar ResponseCookies = class {\n  constructor(responseHeaders) {\n    /** @internal */\n    this._parsed = /* @__PURE__ */new Map();\n    var _a, _b, _c;\n    this._headers = responseHeaders;\n    const setCookie = (_c = (_b = (_a = responseHeaders.getSetCookie) == null ? void 0 : _a.call(responseHeaders)) != null ? _b : responseHeaders.get(\"set-cookie\")) != null ? _c : [];\n    const cookieStrings = Array.isArray(setCookie) ? setCookie : splitCookiesString(setCookie);\n    for (const cookieString of cookieStrings) {\n      const parsed = parseSetCookie(cookieString);\n      if (parsed) this._parsed.set(parsed.name, parsed);\n    }\n  }\n  /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-get CookieStore#get} without the Promise.\n   */\n  get(...args) {\n    const key = typeof args[0] === \"string\" ? args[0] : args[0].name;\n    return this._parsed.get(key);\n  }\n  /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-getAll CookieStore#getAll} without the Promise.\n   */\n  getAll(...args) {\n    var _a;\n    const all = Array.from(this._parsed.values());\n    if (!args.length) {\n      return all;\n    }\n    const key = typeof args[0] === \"string\" ? args[0] : (_a = args[0]) == null ? void 0 : _a.name;\n    return all.filter(c => c.name === key);\n  }\n  has(name) {\n    return this._parsed.has(name);\n  }\n  /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-set CookieStore#set} without the Promise.\n   */\n  set(...args) {\n    const [name, value, cookie] = args.length === 1 ? [args[0].name, args[0].value, args[0]] : args;\n    const map = this._parsed;\n    map.set(name, normalizeCookie({\n      name,\n      value,\n      ...cookie\n    }));\n    replace(map, this._headers);\n    return this;\n  }\n  /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-delete CookieStore#delete} without the Promise.\n   */\n  delete(...args) {\n    const [name, path, domain] = typeof args[0] === \"string\" ? [args[0]] : [args[0].name, args[0].path, args[0].domain];\n    return this.set({\n      name,\n      path,\n      domain,\n      value: \"\",\n      expires: /* @__PURE__ */new Date(0)\n    });\n  }\n  [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n    return `ResponseCookies ${JSON.stringify(Object.fromEntries(this._parsed))}`;\n  }\n  toString() {\n    return [...this._parsed.values()].map(stringifyCookie).join(\"; \");\n  }\n};\nfunction replace(bag, headers) {\n  headers.delete(\"set-cookie\");\n  for (const [, value] of bag) {\n    const serialized = stringifyCookie(value);\n    headers.append(\"set-cookie\", serialized);\n  }\n}\nfunction normalizeCookie(cookie = {\n  name: \"\",\n  value: \"\"\n}) {\n  if (typeof cookie.expires === \"number\") {\n    cookie.expires = new Date(cookie.expires);\n  }\n  if (cookie.maxAge) {\n    cookie.expires = new Date(Date.now() + cookie.maxAge * 1e3);\n  }\n  if (cookie.path === null || cookie.path === void 0) {\n    cookie.path = \"/\";\n  }\n  return cookie;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/@edge-runtime/cookies/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/@opentelemetry/api/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/next/dist/compiled/@opentelemetry/api/index.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("var __dirname = \"/\";\n\n\n(() => {\n  \"use strict\";\n\n  var e = {\n    491: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.ContextAPI = void 0;\n      const n = r(223);\n      const a = r(172);\n      const o = r(930);\n      const i = \"context\";\n      const c = new n.NoopContextManager();\n      class ContextAPI {\n        constructor() {}\n        static getInstance() {\n          if (!this._instance) {\n            this._instance = new ContextAPI();\n          }\n          return this._instance;\n        }\n        setGlobalContextManager(e) {\n          return (0, a.registerGlobal)(i, e, o.DiagAPI.instance());\n        }\n        active() {\n          return this._getContextManager().active();\n        }\n        with(e, t, r, ...n) {\n          return this._getContextManager().with(e, t, r, ...n);\n        }\n        bind(e, t) {\n          return this._getContextManager().bind(e, t);\n        }\n        _getContextManager() {\n          return (0, a.getGlobal)(i) || c;\n        }\n        disable() {\n          this._getContextManager().disable();\n          (0, a.unregisterGlobal)(i, o.DiagAPI.instance());\n        }\n      }\n      t.ContextAPI = ContextAPI;\n    },\n    930: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.DiagAPI = void 0;\n      const n = r(56);\n      const a = r(912);\n      const o = r(957);\n      const i = r(172);\n      const c = \"diag\";\n      class DiagAPI {\n        constructor() {\n          function _logProxy(e) {\n            return function (...t) {\n              const r = (0, i.getGlobal)(\"diag\");\n              if (!r) return;\n              return r[e](...t);\n            };\n          }\n          const e = this;\n          const setLogger = (t, r = {\n            logLevel: o.DiagLogLevel.INFO\n          }) => {\n            var n, c, s;\n            if (t === e) {\n              const t = new Error(\"Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation\");\n              e.error((n = t.stack) !== null && n !== void 0 ? n : t.message);\n              return false;\n            }\n            if (typeof r === \"number\") {\n              r = {\n                logLevel: r\n              };\n            }\n            const u = (0, i.getGlobal)(\"diag\");\n            const l = (0, a.createLogLevelDiagLogger)((c = r.logLevel) !== null && c !== void 0 ? c : o.DiagLogLevel.INFO, t);\n            if (u && !r.suppressOverrideMessage) {\n              const e = (s = new Error().stack) !== null && s !== void 0 ? s : \"<failed to generate stacktrace>\";\n              u.warn(`Current logger will be overwritten from ${e}`);\n              l.warn(`Current logger will overwrite one already registered from ${e}`);\n            }\n            return (0, i.registerGlobal)(\"diag\", l, e, true);\n          };\n          e.setLogger = setLogger;\n          e.disable = () => {\n            (0, i.unregisterGlobal)(c, e);\n          };\n          e.createComponentLogger = e => new n.DiagComponentLogger(e);\n          e.verbose = _logProxy(\"verbose\");\n          e.debug = _logProxy(\"debug\");\n          e.info = _logProxy(\"info\");\n          e.warn = _logProxy(\"warn\");\n          e.error = _logProxy(\"error\");\n        }\n        static instance() {\n          if (!this._instance) {\n            this._instance = new DiagAPI();\n          }\n          return this._instance;\n        }\n      }\n      t.DiagAPI = DiagAPI;\n    },\n    653: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.MetricsAPI = void 0;\n      const n = r(660);\n      const a = r(172);\n      const o = r(930);\n      const i = \"metrics\";\n      class MetricsAPI {\n        constructor() {}\n        static getInstance() {\n          if (!this._instance) {\n            this._instance = new MetricsAPI();\n          }\n          return this._instance;\n        }\n        setGlobalMeterProvider(e) {\n          return (0, a.registerGlobal)(i, e, o.DiagAPI.instance());\n        }\n        getMeterProvider() {\n          return (0, a.getGlobal)(i) || n.NOOP_METER_PROVIDER;\n        }\n        getMeter(e, t, r) {\n          return this.getMeterProvider().getMeter(e, t, r);\n        }\n        disable() {\n          (0, a.unregisterGlobal)(i, o.DiagAPI.instance());\n        }\n      }\n      t.MetricsAPI = MetricsAPI;\n    },\n    181: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.PropagationAPI = void 0;\n      const n = r(172);\n      const a = r(874);\n      const o = r(194);\n      const i = r(277);\n      const c = r(369);\n      const s = r(930);\n      const u = \"propagation\";\n      const l = new a.NoopTextMapPropagator();\n      class PropagationAPI {\n        constructor() {\n          this.createBaggage = c.createBaggage;\n          this.getBaggage = i.getBaggage;\n          this.getActiveBaggage = i.getActiveBaggage;\n          this.setBaggage = i.setBaggage;\n          this.deleteBaggage = i.deleteBaggage;\n        }\n        static getInstance() {\n          if (!this._instance) {\n            this._instance = new PropagationAPI();\n          }\n          return this._instance;\n        }\n        setGlobalPropagator(e) {\n          return (0, n.registerGlobal)(u, e, s.DiagAPI.instance());\n        }\n        inject(e, t, r = o.defaultTextMapSetter) {\n          return this._getGlobalPropagator().inject(e, t, r);\n        }\n        extract(e, t, r = o.defaultTextMapGetter) {\n          return this._getGlobalPropagator().extract(e, t, r);\n        }\n        fields() {\n          return this._getGlobalPropagator().fields();\n        }\n        disable() {\n          (0, n.unregisterGlobal)(u, s.DiagAPI.instance());\n        }\n        _getGlobalPropagator() {\n          return (0, n.getGlobal)(u) || l;\n        }\n      }\n      t.PropagationAPI = PropagationAPI;\n    },\n    997: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.TraceAPI = void 0;\n      const n = r(172);\n      const a = r(846);\n      const o = r(139);\n      const i = r(607);\n      const c = r(930);\n      const s = \"trace\";\n      class TraceAPI {\n        constructor() {\n          this._proxyTracerProvider = new a.ProxyTracerProvider();\n          this.wrapSpanContext = o.wrapSpanContext;\n          this.isSpanContextValid = o.isSpanContextValid;\n          this.deleteSpan = i.deleteSpan;\n          this.getSpan = i.getSpan;\n          this.getActiveSpan = i.getActiveSpan;\n          this.getSpanContext = i.getSpanContext;\n          this.setSpan = i.setSpan;\n          this.setSpanContext = i.setSpanContext;\n        }\n        static getInstance() {\n          if (!this._instance) {\n            this._instance = new TraceAPI();\n          }\n          return this._instance;\n        }\n        setGlobalTracerProvider(e) {\n          const t = (0, n.registerGlobal)(s, this._proxyTracerProvider, c.DiagAPI.instance());\n          if (t) {\n            this._proxyTracerProvider.setDelegate(e);\n          }\n          return t;\n        }\n        getTracerProvider() {\n          return (0, n.getGlobal)(s) || this._proxyTracerProvider;\n        }\n        getTracer(e, t) {\n          return this.getTracerProvider().getTracer(e, t);\n        }\n        disable() {\n          (0, n.unregisterGlobal)(s, c.DiagAPI.instance());\n          this._proxyTracerProvider = new a.ProxyTracerProvider();\n        }\n      }\n      t.TraceAPI = TraceAPI;\n    },\n    277: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.deleteBaggage = t.setBaggage = t.getActiveBaggage = t.getBaggage = void 0;\n      const n = r(491);\n      const a = r(780);\n      const o = (0, a.createContextKey)(\"OpenTelemetry Baggage Key\");\n      function getBaggage(e) {\n        return e.getValue(o) || undefined;\n      }\n      t.getBaggage = getBaggage;\n      function getActiveBaggage() {\n        return getBaggage(n.ContextAPI.getInstance().active());\n      }\n      t.getActiveBaggage = getActiveBaggage;\n      function setBaggage(e, t) {\n        return e.setValue(o, t);\n      }\n      t.setBaggage = setBaggage;\n      function deleteBaggage(e) {\n        return e.deleteValue(o);\n      }\n      t.deleteBaggage = deleteBaggage;\n    },\n    993: (e, t) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.BaggageImpl = void 0;\n      class BaggageImpl {\n        constructor(e) {\n          this._entries = e ? new Map(e) : new Map();\n        }\n        getEntry(e) {\n          const t = this._entries.get(e);\n          if (!t) {\n            return undefined;\n          }\n          return Object.assign({}, t);\n        }\n        getAllEntries() {\n          return Array.from(this._entries.entries()).map(([e, t]) => [e, t]);\n        }\n        setEntry(e, t) {\n          const r = new BaggageImpl(this._entries);\n          r._entries.set(e, t);\n          return r;\n        }\n        removeEntry(e) {\n          const t = new BaggageImpl(this._entries);\n          t._entries.delete(e);\n          return t;\n        }\n        removeEntries(...e) {\n          const t = new BaggageImpl(this._entries);\n          for (const r of e) {\n            t._entries.delete(r);\n          }\n          return t;\n        }\n        clear() {\n          return new BaggageImpl();\n        }\n      }\n      t.BaggageImpl = BaggageImpl;\n    },\n    830: (e, t) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.baggageEntryMetadataSymbol = void 0;\n      t.baggageEntryMetadataSymbol = Symbol(\"BaggageEntryMetadata\");\n    },\n    369: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.baggageEntryMetadataFromString = t.createBaggage = void 0;\n      const n = r(930);\n      const a = r(993);\n      const o = r(830);\n      const i = n.DiagAPI.instance();\n      function createBaggage(e = {}) {\n        return new a.BaggageImpl(new Map(Object.entries(e)));\n      }\n      t.createBaggage = createBaggage;\n      function baggageEntryMetadataFromString(e) {\n        if (typeof e !== \"string\") {\n          i.error(`Cannot create baggage metadata from unknown type: ${typeof e}`);\n          e = \"\";\n        }\n        return {\n          __TYPE__: o.baggageEntryMetadataSymbol,\n          toString() {\n            return e;\n          }\n        };\n      }\n      t.baggageEntryMetadataFromString = baggageEntryMetadataFromString;\n    },\n    67: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.context = void 0;\n      const n = r(491);\n      t.context = n.ContextAPI.getInstance();\n    },\n    223: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.NoopContextManager = void 0;\n      const n = r(780);\n      class NoopContextManager {\n        active() {\n          return n.ROOT_CONTEXT;\n        }\n        with(e, t, r, ...n) {\n          return t.call(r, ...n);\n        }\n        bind(e, t) {\n          return t;\n        }\n        enable() {\n          return this;\n        }\n        disable() {\n          return this;\n        }\n      }\n      t.NoopContextManager = NoopContextManager;\n    },\n    780: (e, t) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.ROOT_CONTEXT = t.createContextKey = void 0;\n      function createContextKey(e) {\n        return Symbol.for(e);\n      }\n      t.createContextKey = createContextKey;\n      class BaseContext {\n        constructor(e) {\n          const t = this;\n          t._currentContext = e ? new Map(e) : new Map();\n          t.getValue = e => t._currentContext.get(e);\n          t.setValue = (e, r) => {\n            const n = new BaseContext(t._currentContext);\n            n._currentContext.set(e, r);\n            return n;\n          };\n          t.deleteValue = e => {\n            const r = new BaseContext(t._currentContext);\n            r._currentContext.delete(e);\n            return r;\n          };\n        }\n      }\n      t.ROOT_CONTEXT = new BaseContext();\n    },\n    506: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.diag = void 0;\n      const n = r(930);\n      t.diag = n.DiagAPI.instance();\n    },\n    56: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.DiagComponentLogger = void 0;\n      const n = r(172);\n      class DiagComponentLogger {\n        constructor(e) {\n          this._namespace = e.namespace || \"DiagComponentLogger\";\n        }\n        debug(...e) {\n          return logProxy(\"debug\", this._namespace, e);\n        }\n        error(...e) {\n          return logProxy(\"error\", this._namespace, e);\n        }\n        info(...e) {\n          return logProxy(\"info\", this._namespace, e);\n        }\n        warn(...e) {\n          return logProxy(\"warn\", this._namespace, e);\n        }\n        verbose(...e) {\n          return logProxy(\"verbose\", this._namespace, e);\n        }\n      }\n      t.DiagComponentLogger = DiagComponentLogger;\n      function logProxy(e, t, r) {\n        const a = (0, n.getGlobal)(\"diag\");\n        if (!a) {\n          return;\n        }\n        r.unshift(t);\n        return a[e](...r);\n      }\n    },\n    972: (e, t) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.DiagConsoleLogger = void 0;\n      const r = [{\n        n: \"error\",\n        c: \"error\"\n      }, {\n        n: \"warn\",\n        c: \"warn\"\n      }, {\n        n: \"info\",\n        c: \"info\"\n      }, {\n        n: \"debug\",\n        c: \"debug\"\n      }, {\n        n: \"verbose\",\n        c: \"trace\"\n      }];\n      class DiagConsoleLogger {\n        constructor() {\n          function _consoleFunc(e) {\n            return function (...t) {\n              if (console) {\n                let r = console[e];\n                if (typeof r !== \"function\") {\n                  r = console.log;\n                }\n                if (typeof r === \"function\") {\n                  return r.apply(console, t);\n                }\n              }\n            };\n          }\n          for (let e = 0; e < r.length; e++) {\n            this[r[e].n] = _consoleFunc(r[e].c);\n          }\n        }\n      }\n      t.DiagConsoleLogger = DiagConsoleLogger;\n    },\n    912: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.createLogLevelDiagLogger = void 0;\n      const n = r(957);\n      function createLogLevelDiagLogger(e, t) {\n        if (e < n.DiagLogLevel.NONE) {\n          e = n.DiagLogLevel.NONE;\n        } else if (e > n.DiagLogLevel.ALL) {\n          e = n.DiagLogLevel.ALL;\n        }\n        t = t || {};\n        function _filterFunc(r, n) {\n          const a = t[r];\n          if (typeof a === \"function\" && e >= n) {\n            return a.bind(t);\n          }\n          return function () {};\n        }\n        return {\n          error: _filterFunc(\"error\", n.DiagLogLevel.ERROR),\n          warn: _filterFunc(\"warn\", n.DiagLogLevel.WARN),\n          info: _filterFunc(\"info\", n.DiagLogLevel.INFO),\n          debug: _filterFunc(\"debug\", n.DiagLogLevel.DEBUG),\n          verbose: _filterFunc(\"verbose\", n.DiagLogLevel.VERBOSE)\n        };\n      }\n      t.createLogLevelDiagLogger = createLogLevelDiagLogger;\n    },\n    957: (e, t) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.DiagLogLevel = void 0;\n      var r;\n      (function (e) {\n        e[e[\"NONE\"] = 0] = \"NONE\";\n        e[e[\"ERROR\"] = 30] = \"ERROR\";\n        e[e[\"WARN\"] = 50] = \"WARN\";\n        e[e[\"INFO\"] = 60] = \"INFO\";\n        e[e[\"DEBUG\"] = 70] = \"DEBUG\";\n        e[e[\"VERBOSE\"] = 80] = \"VERBOSE\";\n        e[e[\"ALL\"] = 9999] = \"ALL\";\n      })(r = t.DiagLogLevel || (t.DiagLogLevel = {}));\n    },\n    172: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.unregisterGlobal = t.getGlobal = t.registerGlobal = void 0;\n      const n = r(200);\n      const a = r(521);\n      const o = r(130);\n      const i = a.VERSION.split(\".\")[0];\n      const c = Symbol.for(`opentelemetry.js.api.${i}`);\n      const s = n._globalThis;\n      function registerGlobal(e, t, r, n = false) {\n        var o;\n        const i = s[c] = (o = s[c]) !== null && o !== void 0 ? o : {\n          version: a.VERSION\n        };\n        if (!n && i[e]) {\n          const t = new Error(`@opentelemetry/api: Attempted duplicate registration of API: ${e}`);\n          r.error(t.stack || t.message);\n          return false;\n        }\n        if (i.version !== a.VERSION) {\n          const t = new Error(`@opentelemetry/api: Registration of version v${i.version} for ${e} does not match previously registered API v${a.VERSION}`);\n          r.error(t.stack || t.message);\n          return false;\n        }\n        i[e] = t;\n        r.debug(`@opentelemetry/api: Registered a global for ${e} v${a.VERSION}.`);\n        return true;\n      }\n      t.registerGlobal = registerGlobal;\n      function getGlobal(e) {\n        var t, r;\n        const n = (t = s[c]) === null || t === void 0 ? void 0 : t.version;\n        if (!n || !(0, o.isCompatible)(n)) {\n          return;\n        }\n        return (r = s[c]) === null || r === void 0 ? void 0 : r[e];\n      }\n      t.getGlobal = getGlobal;\n      function unregisterGlobal(e, t) {\n        t.debug(`@opentelemetry/api: Unregistering a global for ${e} v${a.VERSION}.`);\n        const r = s[c];\n        if (r) {\n          delete r[e];\n        }\n      }\n      t.unregisterGlobal = unregisterGlobal;\n    },\n    130: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.isCompatible = t._makeCompatibilityCheck = void 0;\n      const n = r(521);\n      const a = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n      function _makeCompatibilityCheck(e) {\n        const t = new Set([e]);\n        const r = new Set();\n        const n = e.match(a);\n        if (!n) {\n          return () => false;\n        }\n        const o = {\n          major: +n[1],\n          minor: +n[2],\n          patch: +n[3],\n          prerelease: n[4]\n        };\n        if (o.prerelease != null) {\n          return function isExactmatch(t) {\n            return t === e;\n          };\n        }\n        function _reject(e) {\n          r.add(e);\n          return false;\n        }\n        function _accept(e) {\n          t.add(e);\n          return true;\n        }\n        return function isCompatible(e) {\n          if (t.has(e)) {\n            return true;\n          }\n          if (r.has(e)) {\n            return false;\n          }\n          const n = e.match(a);\n          if (!n) {\n            return _reject(e);\n          }\n          const i = {\n            major: +n[1],\n            minor: +n[2],\n            patch: +n[3],\n            prerelease: n[4]\n          };\n          if (i.prerelease != null) {\n            return _reject(e);\n          }\n          if (o.major !== i.major) {\n            return _reject(e);\n          }\n          if (o.major === 0) {\n            if (o.minor === i.minor && o.patch <= i.patch) {\n              return _accept(e);\n            }\n            return _reject(e);\n          }\n          if (o.minor <= i.minor) {\n            return _accept(e);\n          }\n          return _reject(e);\n        };\n      }\n      t._makeCompatibilityCheck = _makeCompatibilityCheck;\n      t.isCompatible = _makeCompatibilityCheck(n.VERSION);\n    },\n    886: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.metrics = void 0;\n      const n = r(653);\n      t.metrics = n.MetricsAPI.getInstance();\n    },\n    901: (e, t) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.ValueType = void 0;\n      var r;\n      (function (e) {\n        e[e[\"INT\"] = 0] = \"INT\";\n        e[e[\"DOUBLE\"] = 1] = \"DOUBLE\";\n      })(r = t.ValueType || (t.ValueType = {}));\n    },\n    102: (e, t) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.createNoopMeter = t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = t.NOOP_OBSERVABLE_GAUGE_METRIC = t.NOOP_OBSERVABLE_COUNTER_METRIC = t.NOOP_UP_DOWN_COUNTER_METRIC = t.NOOP_HISTOGRAM_METRIC = t.NOOP_COUNTER_METRIC = t.NOOP_METER = t.NoopObservableUpDownCounterMetric = t.NoopObservableGaugeMetric = t.NoopObservableCounterMetric = t.NoopObservableMetric = t.NoopHistogramMetric = t.NoopUpDownCounterMetric = t.NoopCounterMetric = t.NoopMetric = t.NoopMeter = void 0;\n      class NoopMeter {\n        constructor() {}\n        createHistogram(e, r) {\n          return t.NOOP_HISTOGRAM_METRIC;\n        }\n        createCounter(e, r) {\n          return t.NOOP_COUNTER_METRIC;\n        }\n        createUpDownCounter(e, r) {\n          return t.NOOP_UP_DOWN_COUNTER_METRIC;\n        }\n        createObservableGauge(e, r) {\n          return t.NOOP_OBSERVABLE_GAUGE_METRIC;\n        }\n        createObservableCounter(e, r) {\n          return t.NOOP_OBSERVABLE_COUNTER_METRIC;\n        }\n        createObservableUpDownCounter(e, r) {\n          return t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n        }\n        addBatchObservableCallback(e, t) {}\n        removeBatchObservableCallback(e) {}\n      }\n      t.NoopMeter = NoopMeter;\n      class NoopMetric {}\n      t.NoopMetric = NoopMetric;\n      class NoopCounterMetric extends NoopMetric {\n        add(e, t) {}\n      }\n      t.NoopCounterMetric = NoopCounterMetric;\n      class NoopUpDownCounterMetric extends NoopMetric {\n        add(e, t) {}\n      }\n      t.NoopUpDownCounterMetric = NoopUpDownCounterMetric;\n      class NoopHistogramMetric extends NoopMetric {\n        record(e, t) {}\n      }\n      t.NoopHistogramMetric = NoopHistogramMetric;\n      class NoopObservableMetric {\n        addCallback(e) {}\n        removeCallback(e) {}\n      }\n      t.NoopObservableMetric = NoopObservableMetric;\n      class NoopObservableCounterMetric extends NoopObservableMetric {}\n      t.NoopObservableCounterMetric = NoopObservableCounterMetric;\n      class NoopObservableGaugeMetric extends NoopObservableMetric {}\n      t.NoopObservableGaugeMetric = NoopObservableGaugeMetric;\n      class NoopObservableUpDownCounterMetric extends NoopObservableMetric {}\n      t.NoopObservableUpDownCounterMetric = NoopObservableUpDownCounterMetric;\n      t.NOOP_METER = new NoopMeter();\n      t.NOOP_COUNTER_METRIC = new NoopCounterMetric();\n      t.NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();\n      t.NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();\n      t.NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();\n      t.NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();\n      t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = new NoopObservableUpDownCounterMetric();\n      function createNoopMeter() {\n        return t.NOOP_METER;\n      }\n      t.createNoopMeter = createNoopMeter;\n    },\n    660: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.NOOP_METER_PROVIDER = t.NoopMeterProvider = void 0;\n      const n = r(102);\n      class NoopMeterProvider {\n        getMeter(e, t, r) {\n          return n.NOOP_METER;\n        }\n      }\n      t.NoopMeterProvider = NoopMeterProvider;\n      t.NOOP_METER_PROVIDER = new NoopMeterProvider();\n    },\n    200: function (e, t, r) {\n      var n = this && this.__createBinding || (Object.create ? function (e, t, r, n) {\n        if (n === undefined) n = r;\n        Object.defineProperty(e, n, {\n          enumerable: true,\n          get: function () {\n            return t[r];\n          }\n        });\n      } : function (e, t, r, n) {\n        if (n === undefined) n = r;\n        e[n] = t[r];\n      });\n      var a = this && this.__exportStar || function (e, t) {\n        for (var r in e) if (r !== \"default\" && !Object.prototype.hasOwnProperty.call(t, r)) n(t, e, r);\n      };\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      a(r(46), t);\n    },\n    651: (e, t) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t._globalThis = void 0;\n      t._globalThis = typeof globalThis === \"object\" ? globalThis : __webpack_require__.g;\n    },\n    46: function (e, t, r) {\n      var n = this && this.__createBinding || (Object.create ? function (e, t, r, n) {\n        if (n === undefined) n = r;\n        Object.defineProperty(e, n, {\n          enumerable: true,\n          get: function () {\n            return t[r];\n          }\n        });\n      } : function (e, t, r, n) {\n        if (n === undefined) n = r;\n        e[n] = t[r];\n      });\n      var a = this && this.__exportStar || function (e, t) {\n        for (var r in e) if (r !== \"default\" && !Object.prototype.hasOwnProperty.call(t, r)) n(t, e, r);\n      };\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      a(r(651), t);\n    },\n    939: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.propagation = void 0;\n      const n = r(181);\n      t.propagation = n.PropagationAPI.getInstance();\n    },\n    874: (e, t) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.NoopTextMapPropagator = void 0;\n      class NoopTextMapPropagator {\n        inject(e, t) {}\n        extract(e, t) {\n          return e;\n        }\n        fields() {\n          return [];\n        }\n      }\n      t.NoopTextMapPropagator = NoopTextMapPropagator;\n    },\n    194: (e, t) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.defaultTextMapSetter = t.defaultTextMapGetter = void 0;\n      t.defaultTextMapGetter = {\n        get(e, t) {\n          if (e == null) {\n            return undefined;\n          }\n          return e[t];\n        },\n        keys(e) {\n          if (e == null) {\n            return [];\n          }\n          return Object.keys(e);\n        }\n      };\n      t.defaultTextMapSetter = {\n        set(e, t, r) {\n          if (e == null) {\n            return;\n          }\n          e[t] = r;\n        }\n      };\n    },\n    845: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.trace = void 0;\n      const n = r(997);\n      t.trace = n.TraceAPI.getInstance();\n    },\n    403: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.NonRecordingSpan = void 0;\n      const n = r(476);\n      class NonRecordingSpan {\n        constructor(e = n.INVALID_SPAN_CONTEXT) {\n          this._spanContext = e;\n        }\n        spanContext() {\n          return this._spanContext;\n        }\n        setAttribute(e, t) {\n          return this;\n        }\n        setAttributes(e) {\n          return this;\n        }\n        addEvent(e, t) {\n          return this;\n        }\n        setStatus(e) {\n          return this;\n        }\n        updateName(e) {\n          return this;\n        }\n        end(e) {}\n        isRecording() {\n          return false;\n        }\n        recordException(e, t) {}\n      }\n      t.NonRecordingSpan = NonRecordingSpan;\n    },\n    614: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.NoopTracer = void 0;\n      const n = r(491);\n      const a = r(607);\n      const o = r(403);\n      const i = r(139);\n      const c = n.ContextAPI.getInstance();\n      class NoopTracer {\n        startSpan(e, t, r = c.active()) {\n          const n = Boolean(t === null || t === void 0 ? void 0 : t.root);\n          if (n) {\n            return new o.NonRecordingSpan();\n          }\n          const s = r && (0, a.getSpanContext)(r);\n          if (isSpanContext(s) && (0, i.isSpanContextValid)(s)) {\n            return new o.NonRecordingSpan(s);\n          } else {\n            return new o.NonRecordingSpan();\n          }\n        }\n        startActiveSpan(e, t, r, n) {\n          let o;\n          let i;\n          let s;\n          if (arguments.length < 2) {\n            return;\n          } else if (arguments.length === 2) {\n            s = t;\n          } else if (arguments.length === 3) {\n            o = t;\n            s = r;\n          } else {\n            o = t;\n            i = r;\n            s = n;\n          }\n          const u = i !== null && i !== void 0 ? i : c.active();\n          const l = this.startSpan(e, o, u);\n          const g = (0, a.setSpan)(u, l);\n          return c.with(g, s, undefined, l);\n        }\n      }\n      t.NoopTracer = NoopTracer;\n      function isSpanContext(e) {\n        return typeof e === \"object\" && typeof e[\"spanId\"] === \"string\" && typeof e[\"traceId\"] === \"string\" && typeof e[\"traceFlags\"] === \"number\";\n      }\n    },\n    124: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.NoopTracerProvider = void 0;\n      const n = r(614);\n      class NoopTracerProvider {\n        getTracer(e, t, r) {\n          return new n.NoopTracer();\n        }\n      }\n      t.NoopTracerProvider = NoopTracerProvider;\n    },\n    125: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.ProxyTracer = void 0;\n      const n = r(614);\n      const a = new n.NoopTracer();\n      class ProxyTracer {\n        constructor(e, t, r, n) {\n          this._provider = e;\n          this.name = t;\n          this.version = r;\n          this.options = n;\n        }\n        startSpan(e, t, r) {\n          return this._getTracer().startSpan(e, t, r);\n        }\n        startActiveSpan(e, t, r, n) {\n          const a = this._getTracer();\n          return Reflect.apply(a.startActiveSpan, a, arguments);\n        }\n        _getTracer() {\n          if (this._delegate) {\n            return this._delegate;\n          }\n          const e = this._provider.getDelegateTracer(this.name, this.version, this.options);\n          if (!e) {\n            return a;\n          }\n          this._delegate = e;\n          return this._delegate;\n        }\n      }\n      t.ProxyTracer = ProxyTracer;\n    },\n    846: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.ProxyTracerProvider = void 0;\n      const n = r(125);\n      const a = r(124);\n      const o = new a.NoopTracerProvider();\n      class ProxyTracerProvider {\n        getTracer(e, t, r) {\n          var a;\n          return (a = this.getDelegateTracer(e, t, r)) !== null && a !== void 0 ? a : new n.ProxyTracer(this, e, t, r);\n        }\n        getDelegate() {\n          var e;\n          return (e = this._delegate) !== null && e !== void 0 ? e : o;\n        }\n        setDelegate(e) {\n          this._delegate = e;\n        }\n        getDelegateTracer(e, t, r) {\n          var n;\n          return (n = this._delegate) === null || n === void 0 ? void 0 : n.getTracer(e, t, r);\n        }\n      }\n      t.ProxyTracerProvider = ProxyTracerProvider;\n    },\n    996: (e, t) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.SamplingDecision = void 0;\n      var r;\n      (function (e) {\n        e[e[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n        e[e[\"RECORD\"] = 1] = \"RECORD\";\n        e[e[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n      })(r = t.SamplingDecision || (t.SamplingDecision = {}));\n    },\n    607: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.getSpanContext = t.setSpanContext = t.deleteSpan = t.setSpan = t.getActiveSpan = t.getSpan = void 0;\n      const n = r(780);\n      const a = r(403);\n      const o = r(491);\n      const i = (0, n.createContextKey)(\"OpenTelemetry Context Key SPAN\");\n      function getSpan(e) {\n        return e.getValue(i) || undefined;\n      }\n      t.getSpan = getSpan;\n      function getActiveSpan() {\n        return getSpan(o.ContextAPI.getInstance().active());\n      }\n      t.getActiveSpan = getActiveSpan;\n      function setSpan(e, t) {\n        return e.setValue(i, t);\n      }\n      t.setSpan = setSpan;\n      function deleteSpan(e) {\n        return e.deleteValue(i);\n      }\n      t.deleteSpan = deleteSpan;\n      function setSpanContext(e, t) {\n        return setSpan(e, new a.NonRecordingSpan(t));\n      }\n      t.setSpanContext = setSpanContext;\n      function getSpanContext(e) {\n        var t;\n        return (t = getSpan(e)) === null || t === void 0 ? void 0 : t.spanContext();\n      }\n      t.getSpanContext = getSpanContext;\n    },\n    325: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.TraceStateImpl = void 0;\n      const n = r(564);\n      const a = 32;\n      const o = 512;\n      const i = \",\";\n      const c = \"=\";\n      class TraceStateImpl {\n        constructor(e) {\n          this._internalState = new Map();\n          if (e) this._parse(e);\n        }\n        set(e, t) {\n          const r = this._clone();\n          if (r._internalState.has(e)) {\n            r._internalState.delete(e);\n          }\n          r._internalState.set(e, t);\n          return r;\n        }\n        unset(e) {\n          const t = this._clone();\n          t._internalState.delete(e);\n          return t;\n        }\n        get(e) {\n          return this._internalState.get(e);\n        }\n        serialize() {\n          return this._keys().reduce((e, t) => {\n            e.push(t + c + this.get(t));\n            return e;\n          }, []).join(i);\n        }\n        _parse(e) {\n          if (e.length > o) return;\n          this._internalState = e.split(i).reverse().reduce((e, t) => {\n            const r = t.trim();\n            const a = r.indexOf(c);\n            if (a !== -1) {\n              const o = r.slice(0, a);\n              const i = r.slice(a + 1, t.length);\n              if ((0, n.validateKey)(o) && (0, n.validateValue)(i)) {\n                e.set(o, i);\n              } else {}\n            }\n            return e;\n          }, new Map());\n          if (this._internalState.size > a) {\n            this._internalState = new Map(Array.from(this._internalState.entries()).reverse().slice(0, a));\n          }\n        }\n        _keys() {\n          return Array.from(this._internalState.keys()).reverse();\n        }\n        _clone() {\n          const e = new TraceStateImpl();\n          e._internalState = new Map(this._internalState);\n          return e;\n        }\n      }\n      t.TraceStateImpl = TraceStateImpl;\n    },\n    564: (e, t) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.validateValue = t.validateKey = void 0;\n      const r = \"[_0-9a-z-*/]\";\n      const n = `[a-z]${r}{0,255}`;\n      const a = `[a-z0-9]${r}{0,240}@[a-z]${r}{0,13}`;\n      const o = new RegExp(`^(?:${n}|${a})$`);\n      const i = /^[ -~]{0,255}[!-~]$/;\n      const c = /,|=/;\n      function validateKey(e) {\n        return o.test(e);\n      }\n      t.validateKey = validateKey;\n      function validateValue(e) {\n        return i.test(e) && !c.test(e);\n      }\n      t.validateValue = validateValue;\n    },\n    98: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.createTraceState = void 0;\n      const n = r(325);\n      function createTraceState(e) {\n        return new n.TraceStateImpl(e);\n      }\n      t.createTraceState = createTraceState;\n    },\n    476: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.INVALID_SPAN_CONTEXT = t.INVALID_TRACEID = t.INVALID_SPANID = void 0;\n      const n = r(475);\n      t.INVALID_SPANID = \"0000000000000000\";\n      t.INVALID_TRACEID = \"00000000000000000000000000000000\";\n      t.INVALID_SPAN_CONTEXT = {\n        traceId: t.INVALID_TRACEID,\n        spanId: t.INVALID_SPANID,\n        traceFlags: n.TraceFlags.NONE\n      };\n    },\n    357: (e, t) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.SpanKind = void 0;\n      var r;\n      (function (e) {\n        e[e[\"INTERNAL\"] = 0] = \"INTERNAL\";\n        e[e[\"SERVER\"] = 1] = \"SERVER\";\n        e[e[\"CLIENT\"] = 2] = \"CLIENT\";\n        e[e[\"PRODUCER\"] = 3] = \"PRODUCER\";\n        e[e[\"CONSUMER\"] = 4] = \"CONSUMER\";\n      })(r = t.SpanKind || (t.SpanKind = {}));\n    },\n    139: (e, t, r) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.wrapSpanContext = t.isSpanContextValid = t.isValidSpanId = t.isValidTraceId = void 0;\n      const n = r(476);\n      const a = r(403);\n      const o = /^([0-9a-f]{32})$/i;\n      const i = /^[0-9a-f]{16}$/i;\n      function isValidTraceId(e) {\n        return o.test(e) && e !== n.INVALID_TRACEID;\n      }\n      t.isValidTraceId = isValidTraceId;\n      function isValidSpanId(e) {\n        return i.test(e) && e !== n.INVALID_SPANID;\n      }\n      t.isValidSpanId = isValidSpanId;\n      function isSpanContextValid(e) {\n        return isValidTraceId(e.traceId) && isValidSpanId(e.spanId);\n      }\n      t.isSpanContextValid = isSpanContextValid;\n      function wrapSpanContext(e) {\n        return new a.NonRecordingSpan(e);\n      }\n      t.wrapSpanContext = wrapSpanContext;\n    },\n    847: (e, t) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.SpanStatusCode = void 0;\n      var r;\n      (function (e) {\n        e[e[\"UNSET\"] = 0] = \"UNSET\";\n        e[e[\"OK\"] = 1] = \"OK\";\n        e[e[\"ERROR\"] = 2] = \"ERROR\";\n      })(r = t.SpanStatusCode || (t.SpanStatusCode = {}));\n    },\n    475: (e, t) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.TraceFlags = void 0;\n      var r;\n      (function (e) {\n        e[e[\"NONE\"] = 0] = \"NONE\";\n        e[e[\"SAMPLED\"] = 1] = \"SAMPLED\";\n      })(r = t.TraceFlags || (t.TraceFlags = {}));\n    },\n    521: (e, t) => {\n      Object.defineProperty(t, \"__esModule\", {\n        value: true\n      });\n      t.VERSION = void 0;\n      t.VERSION = \"1.6.0\";\n    }\n  };\n  var t = {};\n  function __nccwpck_require__(r) {\n    var n = t[r];\n    if (n !== undefined) {\n      return n.exports;\n    }\n    var a = t[r] = {\n      exports: {}\n    };\n    var o = true;\n    try {\n      e[r].call(a.exports, a, a.exports, __nccwpck_require__);\n      o = false;\n    } finally {\n      if (o) delete t[r];\n    }\n    return a.exports;\n  }\n  if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n  var r = {};\n  (() => {\n    var e = r;\n    Object.defineProperty(e, \"__esModule\", {\n      value: true\n    });\n    e.trace = e.propagation = e.metrics = e.diag = e.context = e.INVALID_SPAN_CONTEXT = e.INVALID_TRACEID = e.INVALID_SPANID = e.isValidSpanId = e.isValidTraceId = e.isSpanContextValid = e.createTraceState = e.TraceFlags = e.SpanStatusCode = e.SpanKind = e.SamplingDecision = e.ProxyTracerProvider = e.ProxyTracer = e.defaultTextMapSetter = e.defaultTextMapGetter = e.ValueType = e.createNoopMeter = e.DiagLogLevel = e.DiagConsoleLogger = e.ROOT_CONTEXT = e.createContextKey = e.baggageEntryMetadataFromString = void 0;\n    var t = __nccwpck_require__(369);\n    Object.defineProperty(e, \"baggageEntryMetadataFromString\", {\n      enumerable: true,\n      get: function () {\n        return t.baggageEntryMetadataFromString;\n      }\n    });\n    var n = __nccwpck_require__(780);\n    Object.defineProperty(e, \"createContextKey\", {\n      enumerable: true,\n      get: function () {\n        return n.createContextKey;\n      }\n    });\n    Object.defineProperty(e, \"ROOT_CONTEXT\", {\n      enumerable: true,\n      get: function () {\n        return n.ROOT_CONTEXT;\n      }\n    });\n    var a = __nccwpck_require__(972);\n    Object.defineProperty(e, \"DiagConsoleLogger\", {\n      enumerable: true,\n      get: function () {\n        return a.DiagConsoleLogger;\n      }\n    });\n    var o = __nccwpck_require__(957);\n    Object.defineProperty(e, \"DiagLogLevel\", {\n      enumerable: true,\n      get: function () {\n        return o.DiagLogLevel;\n      }\n    });\n    var i = __nccwpck_require__(102);\n    Object.defineProperty(e, \"createNoopMeter\", {\n      enumerable: true,\n      get: function () {\n        return i.createNoopMeter;\n      }\n    });\n    var c = __nccwpck_require__(901);\n    Object.defineProperty(e, \"ValueType\", {\n      enumerable: true,\n      get: function () {\n        return c.ValueType;\n      }\n    });\n    var s = __nccwpck_require__(194);\n    Object.defineProperty(e, \"defaultTextMapGetter\", {\n      enumerable: true,\n      get: function () {\n        return s.defaultTextMapGetter;\n      }\n    });\n    Object.defineProperty(e, \"defaultTextMapSetter\", {\n      enumerable: true,\n      get: function () {\n        return s.defaultTextMapSetter;\n      }\n    });\n    var u = __nccwpck_require__(125);\n    Object.defineProperty(e, \"ProxyTracer\", {\n      enumerable: true,\n      get: function () {\n        return u.ProxyTracer;\n      }\n    });\n    var l = __nccwpck_require__(846);\n    Object.defineProperty(e, \"ProxyTracerProvider\", {\n      enumerable: true,\n      get: function () {\n        return l.ProxyTracerProvider;\n      }\n    });\n    var g = __nccwpck_require__(996);\n    Object.defineProperty(e, \"SamplingDecision\", {\n      enumerable: true,\n      get: function () {\n        return g.SamplingDecision;\n      }\n    });\n    var p = __nccwpck_require__(357);\n    Object.defineProperty(e, \"SpanKind\", {\n      enumerable: true,\n      get: function () {\n        return p.SpanKind;\n      }\n    });\n    var d = __nccwpck_require__(847);\n    Object.defineProperty(e, \"SpanStatusCode\", {\n      enumerable: true,\n      get: function () {\n        return d.SpanStatusCode;\n      }\n    });\n    var _ = __nccwpck_require__(475);\n    Object.defineProperty(e, \"TraceFlags\", {\n      enumerable: true,\n      get: function () {\n        return _.TraceFlags;\n      }\n    });\n    var f = __nccwpck_require__(98);\n    Object.defineProperty(e, \"createTraceState\", {\n      enumerable: true,\n      get: function () {\n        return f.createTraceState;\n      }\n    });\n    var b = __nccwpck_require__(139);\n    Object.defineProperty(e, \"isSpanContextValid\", {\n      enumerable: true,\n      get: function () {\n        return b.isSpanContextValid;\n      }\n    });\n    Object.defineProperty(e, \"isValidTraceId\", {\n      enumerable: true,\n      get: function () {\n        return b.isValidTraceId;\n      }\n    });\n    Object.defineProperty(e, \"isValidSpanId\", {\n      enumerable: true,\n      get: function () {\n        return b.isValidSpanId;\n      }\n    });\n    var v = __nccwpck_require__(476);\n    Object.defineProperty(e, \"INVALID_SPANID\", {\n      enumerable: true,\n      get: function () {\n        return v.INVALID_SPANID;\n      }\n    });\n    Object.defineProperty(e, \"INVALID_TRACEID\", {\n      enumerable: true,\n      get: function () {\n        return v.INVALID_TRACEID;\n      }\n    });\n    Object.defineProperty(e, \"INVALID_SPAN_CONTEXT\", {\n      enumerable: true,\n      get: function () {\n        return v.INVALID_SPAN_CONTEXT;\n      }\n    });\n    const O = __nccwpck_require__(67);\n    Object.defineProperty(e, \"context\", {\n      enumerable: true,\n      get: function () {\n        return O.context;\n      }\n    });\n    const P = __nccwpck_require__(506);\n    Object.defineProperty(e, \"diag\", {\n      enumerable: true,\n      get: function () {\n        return P.diag;\n      }\n    });\n    const N = __nccwpck_require__(886);\n    Object.defineProperty(e, \"metrics\", {\n      enumerable: true,\n      get: function () {\n        return N.metrics;\n      }\n    });\n    const S = __nccwpck_require__(939);\n    Object.defineProperty(e, \"propagation\", {\n      enumerable: true,\n      get: function () {\n        return S.propagation;\n      }\n    });\n    const C = __nccwpck_require__(845);\n    Object.defineProperty(e, \"trace\", {\n      enumerable: true,\n      get: function () {\n        return C.trace;\n      }\n    });\n    e[\"default\"] = {\n      context: O.context,\n      diag: P.diag,\n      metrics: N.metrics,\n      propagation: S.propagation,\n      trace: C.trace\n    };\n  })();\n  module.exports = r;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BvcGVudGVsZW1ldHJ5L2FwaS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxDQUFDLE1BQUk7RUFBQyxZQUFZOztFQUFDLElBQUlBLENBQUMsR0FBQztJQUFDLEdBQUcsRUFBQyxDQUFDQSxDQUFDLEVBQUNDLENBQUMsRUFBQ0MsQ0FBQyxLQUFHO01BQUNDLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDSCxDQUFDLEVBQUMsWUFBWSxFQUFDO1FBQUNJLEtBQUssRUFBQztNQUFJLENBQUMsQ0FBQztNQUFDSixDQUFDLENBQUNLLFVBQVUsR0FBQyxLQUFLLENBQUM7TUFBQyxNQUFNQyxDQUFDLEdBQUNMLENBQUMsQ0FBQyxHQUFHLENBQUM7TUFBQyxNQUFNTSxDQUFDLEdBQUNOLENBQUMsQ0FBQyxHQUFHLENBQUM7TUFBQyxNQUFNTyxDQUFDLEdBQUNQLENBQUMsQ0FBQyxHQUFHLENBQUM7TUFBQyxNQUFNUSxDQUFDLEdBQUMsU0FBUztNQUFDLE1BQU1DLENBQUMsR0FBQyxJQUFJSixDQUFDLENBQUNLLGtCQUFrQixDQUFELENBQUM7TUFBQyxNQUFNTixVQUFVO1FBQUNPLFdBQVdBLENBQUEsRUFBRSxDQUFDO1FBQUMsT0FBT0MsV0FBV0EsQ0FBQSxFQUFFO1VBQUMsSUFBRyxDQUFDLElBQUksQ0FBQ0MsU0FBUyxFQUFDO1lBQUMsSUFBSSxDQUFDQSxTQUFTLEdBQUMsSUFBSVQsVUFBVSxDQUFELENBQUM7VUFBQTtVQUFDLE9BQU8sSUFBSSxDQUFDUyxTQUFTO1FBQUE7UUFBQ0MsdUJBQXVCQSxDQUFDaEIsQ0FBQyxFQUFDO1VBQUMsT0FBTSxDQUFDLENBQUMsRUFBQ1EsQ0FBQyxDQUFDUyxjQUFjLEVBQUVQLENBQUMsRUFBQ1YsQ0FBQyxFQUFDUyxDQUFDLENBQUNTLE9BQU8sQ0FBQ0MsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUFBO1FBQUNDLE1BQU1BLENBQUEsRUFBRTtVQUFDLE9BQU8sSUFB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RUFBQyxPQUFPLEVBQUM7TUFBQ3VMLFVBQVUsRUFBQyxJQUFJO01BQUM3RixHQUFHLEVBQUMsU0FBQUEsQ0FBQSxFQUFVO1FBQUMsT0FBT2lMLENBQUMsQ0FBQzVFLEtBQUs7TUFBQTtJQUFDLENBQUMsQ0FBQztJQUFDL0wsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFDO01BQUM0RyxPQUFPLEVBQUMySixDQUFDLENBQUMzSixPQUFPO01BQUNPLElBQUksRUFBQ3FKLENBQUMsQ0FBQ3JKLElBQUk7TUFBQ21DLE9BQU8sRUFBQ21ILENBQUMsQ0FBQ25ILE9BQU87TUFBQ3VDLFdBQVcsRUFBQzZFLENBQUMsQ0FBQzdFLFdBQVc7TUFBQ0UsS0FBSyxFQUFDNEUsQ0FBQyxDQUFDNUU7SUFBSyxDQUFDO0VBQUEsQ0FBQyxFQUFFLENBQUM7RUFBQzZFLE1BQU0sQ0FBQ2QsT0FBTyxHQUFDNVAsQ0FBQztBQUFBLENBQUMsRUFBRSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvQG9wZW50ZWxlbWV0cnkvYXBpL2luZGV4LmpzPzE0ODMiXSwic291cmNlc0NvbnRlbnQiOlsiKCgpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9ezQ5MTooZSx0LHIpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LkNvbnRleHRBUEk9dm9pZCAwO2NvbnN0IG49cigyMjMpO2NvbnN0IGE9cigxNzIpO2NvbnN0IG89cig5MzApO2NvbnN0IGk9XCJjb250ZXh0XCI7Y29uc3QgYz1uZXcgbi5Ob29wQ29udGV4dE1hbmFnZXI7Y2xhc3MgQ29udGV4dEFQSXtjb25zdHJ1Y3Rvcigpe31zdGF0aWMgZ2V0SW5zdGFuY2UoKXtpZighdGhpcy5faW5zdGFuY2Upe3RoaXMuX2luc3RhbmNlPW5ldyBDb250ZXh0QVBJfXJldHVybiB0aGlzLl9pbnN0YW5jZX1zZXRHbG9iYWxDb250ZXh0TWFuYWdlcihlKXtyZXR1cm4oMCxhLnJlZ2lzdGVyR2xvYmFsKShpLGUsby5EaWFnQVBJLmluc3RhbmNlKCkpfWFjdGl2ZSgpe3JldHVybiB0aGlzLl9nZXRDb250ZXh0TWFuYWdlcigpLmFjdGl2ZSgpfXdpdGgoZSx0LHIsLi4ubil7cmV0dXJuIHRoaXMuX2dldENvbnRleHRNYW5hZ2VyKCkud2l0aChlLHQsciwuLi5uKX1iaW5kKGUsdCl7cmV0dXJuIHRoaXMuX2dldENvbnRleHRNYW5hZ2VyKCkuYmluZChlLHQpfV9nZXRDb250ZXh0TWFuYWdlcigpe3JldHVybigwLGEuZ2V0R2xvYmFsKShpKXx8Y31kaXNhYmxlKCl7dGhpcy5fZ2V0Q29udGV4dE1hbmFnZXIoKS5kaXNhYmxlKCk7KDAsYS51bnJlZ2lzdGVyR2xvYmFsKShpLG8uRGlhZ0FQSS5pbnN0YW5jZSgpKX19dC5Db250ZXh0QVBJPUNvbnRleHRBUEl9LDkzMDooZSx0LHIpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LkRpYWdBUEk9dm9pZCAwO2NvbnN0IG49cig1Nik7Y29uc3QgYT1yKDkxMik7Y29uc3Qgbz1yKDk1Nyk7Y29uc3QgaT1yKDE3Mik7Y29uc3QgYz1cImRpYWdcIjtjbGFzcyBEaWFnQVBJe2NvbnN0cnVjdG9yKCl7ZnVuY3Rpb24gX2xvZ1Byb3h5KGUpe3JldHVybiBmdW5jdGlvbiguLi50KXtjb25zdCByPSgwLGkuZ2V0R2xvYmFsKShcImRpYWdcIik7aWYoIXIpcmV0dXJuO3JldHVybiByW2VdKC4uLnQpfX1jb25zdCBlPXRoaXM7Y29uc3Qgc2V0TG9nZ2VyPSh0LHI9e2xvZ0xldmVsOm8uRGlhZ0xvZ0xldmVsLklORk99KT0+e3ZhciBuLGMscztpZih0PT09ZSl7Y29uc3QgdD1uZXcgRXJyb3IoXCJDYW5ub3QgdXNlIGRpYWcgYXMgdGhlIGxvZ2dlciBmb3IgaXRzZWxmLiBQbGVhc2UgdXNlIGEgRGlhZ0xvZ2dlciBpbXBsZW1lbnRhdGlvbiBsaWtlIENvbnNvbGVEaWFnTG9nZ2VyIG9yIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uXCIpO2UuZXJyb3IoKG49dC5zdGFjaykhPT1udWxsJiZuIT09dm9pZCAwP246dC5tZXNzYWdlKTtyZXR1cm4gZmFsc2V9aWYodHlwZW9mIHI9PT1cIm51bWJlclwiKXtyPXtsb2dMZXZlbDpyfX1jb25zdCB1PSgwLGkuZ2V0R2xvYmFsKShcImRpYWdcIik7Y29uc3QgbD0oMCxhLmNyZWF0ZUxvZ0xldmVsRGlhZ0xvZ2dlcikoKGM9ci5sb2dMZXZlbCkhPT1udWxsJiZjIT09dm9pZCAwP2M6by5EaWFnTG9nTGV2ZWwuSU5GTyx0KTtpZih1JiYhci5zdXBwcmVzc092ZXJyaWRlTWVzc2FnZSl7Y29uc3QgZT0ocz0obmV3IEVycm9yKS5zdGFjaykhPT1udWxsJiZzIT09dm9pZCAwP3M6XCI8ZmFpbGVkIHRvIGdlbmVyYXRlIHN0YWNrdHJhY2U+XCI7dS53YXJuKGBDdXJyZW50IGxvZ2dlciB3aWxsIGJlIG92ZXJ3cml0dGVuIGZyb20gJHtlfWApO2wud2FybihgQ3VycmVudCBsb2dnZXIgd2lsbCBvdmVyd3JpdGUgb25lIGFscmVhZHkgcmVnaXN0ZXJlZCBmcm9tICR7ZX1gKX1yZXR1cm4oMCxpLnJlZ2lzdGVyR2xvYmFsKShcImRpYWdcIixsLGUsdHJ1ZSl9O2Uuc2V0TG9nZ2VyPXNldExvZ2dlcjtlLmRpc2FibGU9KCk9PnsoMCxpLnVucmVnaXN0ZXJHbG9iYWwpKGMsZSl9O2UuY3JlYXRlQ29tcG9uZW50TG9nZ2VyPWU9Pm5ldyBuLkRpYWdDb21wb25lbnRMb2dnZXIoZSk7ZS52ZXJib3NlPV9sb2dQcm94eShcInZlcmJvc2VcIik7ZS5kZWJ1Zz1fbG9nUHJveHkoXCJkZWJ1Z1wiKTtlLmluZm89X2xvZ1Byb3h5KFwiaW5mb1wiKTtlLndhcm49X2xvZ1Byb3h5KFwid2FyblwiKTtlLmVycm9yPV9sb2dQcm94eShcImVycm9yXCIpfXN0YXRpYyBpbnN0YW5jZSgpe2lmKCF0aGlzLl9pbnN0YW5jZSl7dGhpcy5faW5zdGFuY2U9bmV3IERpYWdBUEl9cmV0dXJuIHRoaXMuX2luc3RhbmNlfX10LkRpYWdBUEk9RGlhZ0FQSX0sNjUzOihlLHQscik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuTWV0cmljc0FQST12b2lkIDA7Y29uc3Qgbj1yKDY2MCk7Y29uc3QgYT1yKDE3Mik7Y29uc3Qgbz1yKDkzMCk7Y29uc3QgaT1cIm1ldHJpY3NcIjtjbGFzcyBNZXRyaWNzQVBJe2NvbnN0cnVjdG9yKCl7fXN0YXRpYyBnZXRJbnN0YW5jZSgpe2lmKCF0aGlzLl9pbnN0YW5jZSl7dGhpcy5faW5zdGFuY2U9bmV3IE1ldHJpY3NBUEl9cmV0dXJuIHRoaXMuX2luc3RhbmNlfXNldEdsb2JhbE1ldGVyUHJvdmlkZXIoZSl7cmV0dXJuKDAsYS5yZWdpc3Rlckdsb2JhbCkoaSxlLG8uRGlhZ0FQSS5pbnN0YW5jZSgpKX1nZXRNZXRlclByb3ZpZGVyKCl7cmV0dXJuKDAsYS5nZXRHbG9iYWwpKGkpfHxuLk5PT1BfTUVURVJfUFJPVklERVJ9Z2V0TWV0ZXIoZSx0LHIpe3JldHVybiB0aGlzLmdldE1ldGVyUHJvdmlkZXIoKS5nZXRNZXRlcihlLHQscil9ZGlzYWJsZSgpeygwLGEudW5yZWdpc3Rlckdsb2JhbCkoaSxvLkRpYWdBUEkuaW5zdGFuY2UoKSl9fXQuTWV0cmljc0FQST1NZXRyaWNzQVBJfSwxODE6KGUsdCxyKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5Qcm9wYWdhdGlvbkFQST12b2lkIDA7Y29uc3Qgbj1yKDE3Mik7Y29uc3QgYT1yKDg3NCk7Y29uc3Qgbz1yKDE5NCk7Y29uc3QgaT1yKDI3Nyk7Y29uc3QgYz1yKDM2OSk7Y29uc3Qgcz1yKDkzMCk7Y29uc3QgdT1cInByb3BhZ2F0aW9uXCI7Y29uc3QgbD1uZXcgYS5Ob29wVGV4dE1hcFByb3BhZ2F0b3I7Y2xhc3MgUHJvcGFnYXRpb25BUEl7Y29uc3RydWN0b3IoKXt0aGlzLmNyZWF0ZUJhZ2dhZ2U9Yy5jcmVhdGVCYWdnYWdlO3RoaXMuZ2V0QmFnZ2FnZT1pLmdldEJhZ2dhZ2U7dGhpcy5nZXRBY3RpdmVCYWdnYWdlPWkuZ2V0QWN0aXZlQmFnZ2FnZTt0aGlzLnNldEJhZ2dhZ2U9aS5zZXRCYWdnYWdlO3RoaXMuZGVsZXRlQmFnZ2FnZT1pLmRlbGV0ZUJhZ2dhZ2V9c3RhdGljIGdldEluc3RhbmNlKCl7aWYoIXRoaXMuX2luc3RhbmNlKXt0aGlzLl9pbnN0YW5jZT1uZXcgUHJvcGFnYXRpb25BUEl9cmV0dXJuIHRoaXMuX2luc3RhbmNlfXNldEdsb2JhbFByb3BhZ2F0b3IoZSl7cmV0dXJuKDAsbi5yZWdpc3Rlckdsb2JhbCkodSxlLHMuRGlhZ0FQSS5pbnN0YW5jZSgpKX1pbmplY3QoZSx0LHI9by5kZWZhdWx0VGV4dE1hcFNldHRlcil7cmV0dXJuIHRoaXMuX2dldEdsb2JhbFByb3BhZ2F0b3IoKS5pbmplY3QoZSx0LHIpfWV4dHJhY3QoZSx0LHI9by5kZWZhdWx0VGV4dE1hcEdldHRlcil7cmV0dXJuIHRoaXMuX2dldEdsb2JhbFByb3BhZ2F0b3IoKS5leHRyYWN0KGUsdCxyKX1maWVsZHMoKXtyZXR1cm4gdGhpcy5fZ2V0R2xvYmFsUHJvcGFnYXRvcigpLmZpZWxkcygpfWRpc2FibGUoKXsoMCxuLnVucmVnaXN0ZXJHbG9iYWwpKHUscy5EaWFnQVBJLmluc3RhbmNlKCkpfV9nZXRHbG9iYWxQcm9wYWdhdG9yKCl7cmV0dXJuKDAsbi5nZXRHbG9iYWwpKHUpfHxsfX10LlByb3BhZ2F0aW9uQVBJPVByb3BhZ2F0aW9uQVBJfSw5OTc6KGUsdCxyKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5UcmFjZUFQST12b2lkIDA7Y29uc3Qgbj1yKDE3Mik7Y29uc3QgYT1yKDg0Nik7Y29uc3Qgbz1yKDEzOSk7Y29uc3QgaT1yKDYwNyk7Y29uc3QgYz1yKDkzMCk7Y29uc3Qgcz1cInRyYWNlXCI7Y2xhc3MgVHJhY2VBUEl7Y29uc3RydWN0b3IoKXt0aGlzLl9wcm94eVRyYWNlclByb3ZpZGVyPW5ldyBhLlByb3h5VHJhY2VyUHJvdmlkZXI7dGhpcy53cmFwU3BhbkNvbnRleHQ9by53cmFwU3BhbkNvbnRleHQ7dGhpcy5pc1NwYW5Db250ZXh0VmFsaWQ9by5pc1NwYW5Db250ZXh0VmFsaWQ7dGhpcy5kZWxldGVTcGFuPWkuZGVsZXRlU3Bhbjt0aGlzLmdldFNwYW49aS5nZXRTcGFuO3RoaXMuZ2V0QWN0aXZlU3Bhbj1pLmdldEFjdGl2ZVNwYW47dGhpcy5nZXRTcGFuQ29udGV4dD1pLmdldFNwYW5Db250ZXh0O3RoaXMuc2V0U3Bhbj1pLnNldFNwYW47dGhpcy5zZXRTcGFuQ29udGV4dD1pLnNldFNwYW5Db250ZXh0fXN0YXRpYyBnZXRJbnN0YW5jZSgpe2lmKCF0aGlzLl9pbnN0YW5jZSl7dGhpcy5faW5zdGFuY2U9bmV3IFRyYWNlQVBJfXJldHVybiB0aGlzLl9pbnN0YW5jZX1zZXRHbG9iYWxUcmFjZXJQcm92aWRlcihlKXtjb25zdCB0PSgwLG4ucmVnaXN0ZXJHbG9iYWwpKHMsdGhpcy5fcHJveHlUcmFjZXJQcm92aWRlcixjLkRpYWdBUEkuaW5zdGFuY2UoKSk7aWYodCl7dGhpcy5fcHJveHlUcmFjZXJQcm92aWRlci5zZXREZWxlZ2F0ZShlKX1yZXR1cm4gdH1nZXRUcmFjZXJQcm92aWRlcigpe3JldHVybigwLG4uZ2V0R2xvYmFsKShzKXx8dGhpcy5fcHJveHlUcmFjZXJQcm92aWRlcn1nZXRUcmFjZXIoZSx0KXtyZXR1cm4gdGhpcy5nZXRUcmFjZXJQcm92aWRlcigpLmdldFRyYWNlcihlLHQpfWRpc2FibGUoKXsoMCxuLnVucmVnaXN0ZXJHbG9iYWwpKHMsYy5EaWFnQVBJLmluc3RhbmNlKCkpO3RoaXMuX3Byb3h5VHJhY2VyUHJvdmlkZXI9bmV3IGEuUHJveHlUcmFjZXJQcm92aWRlcn19dC5UcmFjZUFQST1UcmFjZUFQSX0sMjc3OihlLHQscik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuZGVsZXRlQmFnZ2FnZT10LnNldEJhZ2dhZ2U9dC5nZXRBY3RpdmVCYWdnYWdlPXQuZ2V0QmFnZ2FnZT12b2lkIDA7Y29uc3Qgbj1yKDQ5MSk7Y29uc3QgYT1yKDc4MCk7Y29uc3Qgbz0oMCxhLmNyZWF0ZUNvbnRleHRLZXkpKFwiT3BlblRlbGVtZXRyeSBCYWdnYWdlIEtleVwiKTtmdW5jdGlvbiBnZXRCYWdnYWdlKGUpe3JldHVybiBlLmdldFZhbHVlKG8pfHx1bmRlZmluZWR9dC5nZXRCYWdnYWdlPWdldEJhZ2dhZ2U7ZnVuY3Rpb24gZ2V0QWN0aXZlQmFnZ2FnZSgpe3JldHVybiBnZXRCYWdnYWdlKG4uQ29udGV4dEFQSS5nZXRJbnN0YW5jZSgpLmFjdGl2ZSgpKX10LmdldEFjdGl2ZUJhZ2dhZ2U9Z2V0QWN0aXZlQmFnZ2FnZTtmdW5jdGlvbiBzZXRCYWdnYWdlKGUsdCl7cmV0dXJuIGUuc2V0VmFsdWUobyx0KX10LnNldEJhZ2dhZ2U9c2V0QmFnZ2FnZTtmdW5jdGlvbiBkZWxldGVCYWdnYWdlKGUpe3JldHVybiBlLmRlbGV0ZVZhbHVlKG8pfXQuZGVsZXRlQmFnZ2FnZT1kZWxldGVCYWdnYWdlfSw5OTM6KGUsdCk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuQmFnZ2FnZUltcGw9dm9pZCAwO2NsYXNzIEJhZ2dhZ2VJbXBse2NvbnN0cnVjdG9yKGUpe3RoaXMuX2VudHJpZXM9ZT9uZXcgTWFwKGUpOm5ldyBNYXB9Z2V0RW50cnkoZSl7Y29uc3QgdD10aGlzLl9lbnRyaWVzLmdldChlKTtpZighdCl7cmV0dXJuIHVuZGVmaW5lZH1yZXR1cm4gT2JqZWN0LmFzc2lnbih7fSx0KX1nZXRBbGxFbnRyaWVzKCl7cmV0dXJuIEFycmF5LmZyb20odGhpcy5fZW50cmllcy5lbnRyaWVzKCkpLm1hcCgoKFtlLHRdKT0+W2UsdF0pKX1zZXRFbnRyeShlLHQpe2NvbnN0IHI9bmV3IEJhZ2dhZ2VJbXBsKHRoaXMuX2VudHJpZXMpO3IuX2VudHJpZXMuc2V0KGUsdCk7cmV0dXJuIHJ9cmVtb3ZlRW50cnkoZSl7Y29uc3QgdD1uZXcgQmFnZ2FnZUltcGwodGhpcy5fZW50cmllcyk7dC5fZW50cmllcy5kZWxldGUoZSk7cmV0dXJuIHR9cmVtb3ZlRW50cmllcyguLi5lKXtjb25zdCB0PW5ldyBCYWdnYWdlSW1wbCh0aGlzLl9lbnRyaWVzKTtmb3IoY29uc3QgciBvZiBlKXt0Ll9lbnRyaWVzLmRlbGV0ZShyKX1yZXR1cm4gdH1jbGVhcigpe3JldHVybiBuZXcgQmFnZ2FnZUltcGx9fXQuQmFnZ2FnZUltcGw9QmFnZ2FnZUltcGx9LDgzMDooZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5iYWdnYWdlRW50cnlNZXRhZGF0YVN5bWJvbD12b2lkIDA7dC5iYWdnYWdlRW50cnlNZXRhZGF0YVN5bWJvbD1TeW1ib2woXCJCYWdnYWdlRW50cnlNZXRhZGF0YVwiKX0sMzY5OihlLHQscik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuYmFnZ2FnZUVudHJ5TWV0YWRhdGFGcm9tU3RyaW5nPXQuY3JlYXRlQmFnZ2FnZT12b2lkIDA7Y29uc3Qgbj1yKDkzMCk7Y29uc3QgYT1yKDk5Myk7Y29uc3Qgbz1yKDgzMCk7Y29uc3QgaT1uLkRpYWdBUEkuaW5zdGFuY2UoKTtmdW5jdGlvbiBjcmVhdGVCYWdnYWdlKGU9e30pe3JldHVybiBuZXcgYS5CYWdnYWdlSW1wbChuZXcgTWFwKE9iamVjdC5lbnRyaWVzKGUpKSl9dC5jcmVhdGVCYWdnYWdlPWNyZWF0ZUJhZ2dhZ2U7ZnVuY3Rpb24gYmFnZ2FnZUVudHJ5TWV0YWRhdGFGcm9tU3RyaW5nKGUpe2lmKHR5cGVvZiBlIT09XCJzdHJpbmdcIil7aS5lcnJvcihgQ2Fubm90IGNyZWF0ZSBiYWdnYWdlIG1ldGFkYXRhIGZyb20gdW5rbm93biB0eXBlOiAke3R5cGVvZiBlfWApO2U9XCJcIn1yZXR1cm57X19UWVBFX186by5iYWdnYWdlRW50cnlNZXRhZGF0YVN5bWJvbCx0b1N0cmluZygpe3JldHVybiBlfX19dC5iYWdnYWdlRW50cnlNZXRhZGF0YUZyb21TdHJpbmc9YmFnZ2FnZUVudHJ5TWV0YWRhdGFGcm9tU3RyaW5nfSw2NzooZSx0LHIpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LmNvbnRleHQ9dm9pZCAwO2NvbnN0IG49cig0OTEpO3QuY29udGV4dD1uLkNvbnRleHRBUEkuZ2V0SW5zdGFuY2UoKX0sMjIzOihlLHQscik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuTm9vcENvbnRleHRNYW5hZ2VyPXZvaWQgMDtjb25zdCBuPXIoNzgwKTtjbGFzcyBOb29wQ29udGV4dE1hbmFnZXJ7YWN0aXZlKCl7cmV0dXJuIG4uUk9PVF9DT05URVhUfXdpdGgoZSx0LHIsLi4ubil7cmV0dXJuIHQuY2FsbChyLC4uLm4pfWJpbmQoZSx0KXtyZXR1cm4gdH1lbmFibGUoKXtyZXR1cm4gdGhpc31kaXNhYmxlKCl7cmV0dXJuIHRoaXN9fXQuTm9vcENvbnRleHRNYW5hZ2VyPU5vb3BDb250ZXh0TWFuYWdlcn0sNzgwOihlLHQpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LlJPT1RfQ09OVEVYVD10LmNyZWF0ZUNvbnRleHRLZXk9dm9pZCAwO2Z1bmN0aW9uIGNyZWF0ZUNvbnRleHRLZXkoZSl7cmV0dXJuIFN5bWJvbC5mb3IoZSl9dC5jcmVhdGVDb250ZXh0S2V5PWNyZWF0ZUNvbnRleHRLZXk7Y2xhc3MgQmFzZUNvbnRleHR7Y29uc3RydWN0b3IoZSl7Y29uc3QgdD10aGlzO3QuX2N1cnJlbnRDb250ZXh0PWU/bmV3IE1hcChlKTpuZXcgTWFwO3QuZ2V0VmFsdWU9ZT0+dC5fY3VycmVudENvbnRleHQuZ2V0KGUpO3Quc2V0VmFsdWU9KGUscik9Pntjb25zdCBuPW5ldyBCYXNlQ29udGV4dCh0Ll9jdXJyZW50Q29udGV4dCk7bi5fY3VycmVudENvbnRleHQuc2V0KGUscik7cmV0dXJuIG59O3QuZGVsZXRlVmFsdWU9ZT0+e2NvbnN0IHI9bmV3IEJhc2VDb250ZXh0KHQuX2N1cnJlbnRDb250ZXh0KTtyLl9jdXJyZW50Q29udGV4dC5kZWxldGUoZSk7cmV0dXJuIHJ9fX10LlJPT1RfQ09OVEVYVD1uZXcgQmFzZUNvbnRleHR9LDUwNjooZSx0LHIpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LmRpYWc9dm9pZCAwO2NvbnN0IG49cig5MzApO3QuZGlhZz1uLkRpYWdBUEkuaW5zdGFuY2UoKX0sNTY6KGUsdCxyKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5EaWFnQ29tcG9uZW50TG9nZ2VyPXZvaWQgMDtjb25zdCBuPXIoMTcyKTtjbGFzcyBEaWFnQ29tcG9uZW50TG9nZ2Vye2NvbnN0cnVjdG9yKGUpe3RoaXMuX25hbWVzcGFjZT1lLm5hbWVzcGFjZXx8XCJEaWFnQ29tcG9uZW50TG9nZ2VyXCJ9ZGVidWcoLi4uZSl7cmV0dXJuIGxvZ1Byb3h5KFwiZGVidWdcIix0aGlzLl9uYW1lc3BhY2UsZSl9ZXJyb3IoLi4uZSl7cmV0dXJuIGxvZ1Byb3h5KFwiZXJyb3JcIix0aGlzLl9uYW1lc3BhY2UsZSl9aW5mbyguLi5lKXtyZXR1cm4gbG9nUHJveHkoXCJpbmZvXCIsdGhpcy5fbmFtZXNwYWNlLGUpfXdhcm4oLi4uZSl7cmV0dXJuIGxvZ1Byb3h5KFwid2FyblwiLHRoaXMuX25hbWVzcGFjZSxlKX12ZXJib3NlKC4uLmUpe3JldHVybiBsb2dQcm94eShcInZlcmJvc2VcIix0aGlzLl9uYW1lc3BhY2UsZSl9fXQuRGlhZ0NvbXBvbmVudExvZ2dlcj1EaWFnQ29tcG9uZW50TG9nZ2VyO2Z1bmN0aW9uIGxvZ1Byb3h5KGUsdCxyKXtjb25zdCBhPSgwLG4uZ2V0R2xvYmFsKShcImRpYWdcIik7aWYoIWEpe3JldHVybn1yLnVuc2hpZnQodCk7cmV0dXJuIGFbZV0oLi4ucil9fSw5NzI6KGUsdCk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuRGlhZ0NvbnNvbGVMb2dnZXI9dm9pZCAwO2NvbnN0IHI9W3tuOlwiZXJyb3JcIixjOlwiZXJyb3JcIn0se246XCJ3YXJuXCIsYzpcIndhcm5cIn0se246XCJpbmZvXCIsYzpcImluZm9cIn0se246XCJkZWJ1Z1wiLGM6XCJkZWJ1Z1wifSx7bjpcInZlcmJvc2VcIixjOlwidHJhY2VcIn1dO2NsYXNzIERpYWdDb25zb2xlTG9nZ2Vye2NvbnN0cnVjdG9yKCl7ZnVuY3Rpb24gX2NvbnNvbGVGdW5jKGUpe3JldHVybiBmdW5jdGlvbiguLi50KXtpZihjb25zb2xlKXtsZXQgcj1jb25zb2xlW2VdO2lmKHR5cGVvZiByIT09XCJmdW5jdGlvblwiKXtyPWNvbnNvbGUubG9nfWlmKHR5cGVvZiByPT09XCJmdW5jdGlvblwiKXtyZXR1cm4gci5hcHBseShjb25zb2xlLHQpfX19fWZvcihsZXQgZT0wO2U8ci5sZW5ndGg7ZSsrKXt0aGlzW3JbZV0ubl09X2NvbnNvbGVGdW5jKHJbZV0uYyl9fX10LkRpYWdDb25zb2xlTG9nZ2VyPURpYWdDb25zb2xlTG9nZ2VyfSw5MTI6KGUsdCxyKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5jcmVhdGVMb2dMZXZlbERpYWdMb2dnZXI9dm9pZCAwO2NvbnN0IG49cig5NTcpO2Z1bmN0aW9uIGNyZWF0ZUxvZ0xldmVsRGlhZ0xvZ2dlcihlLHQpe2lmKGU8bi5EaWFnTG9nTGV2ZWwuTk9ORSl7ZT1uLkRpYWdMb2dMZXZlbC5OT05FfWVsc2UgaWYoZT5uLkRpYWdMb2dMZXZlbC5BTEwpe2U9bi5EaWFnTG9nTGV2ZWwuQUxMfXQ9dHx8e307ZnVuY3Rpb24gX2ZpbHRlckZ1bmMocixuKXtjb25zdCBhPXRbcl07aWYodHlwZW9mIGE9PT1cImZ1bmN0aW9uXCImJmU+PW4pe3JldHVybiBhLmJpbmQodCl9cmV0dXJuIGZ1bmN0aW9uKCl7fX1yZXR1cm57ZXJyb3I6X2ZpbHRlckZ1bmMoXCJlcnJvclwiLG4uRGlhZ0xvZ0xldmVsLkVSUk9SKSx3YXJuOl9maWx0ZXJGdW5jKFwid2FyblwiLG4uRGlhZ0xvZ0xldmVsLldBUk4pLGluZm86X2ZpbHRlckZ1bmMoXCJpbmZvXCIsbi5EaWFnTG9nTGV2ZWwuSU5GTyksZGVidWc6X2ZpbHRlckZ1bmMoXCJkZWJ1Z1wiLG4uRGlhZ0xvZ0xldmVsLkRFQlVHKSx2ZXJib3NlOl9maWx0ZXJGdW5jKFwidmVyYm9zZVwiLG4uRGlhZ0xvZ0xldmVsLlZFUkJPU0UpfX10LmNyZWF0ZUxvZ0xldmVsRGlhZ0xvZ2dlcj1jcmVhdGVMb2dMZXZlbERpYWdMb2dnZXJ9LDk1NzooZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5EaWFnTG9nTGV2ZWw9dm9pZCAwO3ZhciByOyhmdW5jdGlvbihlKXtlW2VbXCJOT05FXCJdPTBdPVwiTk9ORVwiO2VbZVtcIkVSUk9SXCJdPTMwXT1cIkVSUk9SXCI7ZVtlW1wiV0FSTlwiXT01MF09XCJXQVJOXCI7ZVtlW1wiSU5GT1wiXT02MF09XCJJTkZPXCI7ZVtlW1wiREVCVUdcIl09NzBdPVwiREVCVUdcIjtlW2VbXCJWRVJCT1NFXCJdPTgwXT1cIlZFUkJPU0VcIjtlW2VbXCJBTExcIl09OTk5OV09XCJBTExcIn0pKHI9dC5EaWFnTG9nTGV2ZWx8fCh0LkRpYWdMb2dMZXZlbD17fSkpfSwxNzI6KGUsdCxyKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC51bnJlZ2lzdGVyR2xvYmFsPXQuZ2V0R2xvYmFsPXQucmVnaXN0ZXJHbG9iYWw9dm9pZCAwO2NvbnN0IG49cigyMDApO2NvbnN0IGE9cig1MjEpO2NvbnN0IG89cigxMzApO2NvbnN0IGk9YS5WRVJTSU9OLnNwbGl0KFwiLlwiKVswXTtjb25zdCBjPVN5bWJvbC5mb3IoYG9wZW50ZWxlbWV0cnkuanMuYXBpLiR7aX1gKTtjb25zdCBzPW4uX2dsb2JhbFRoaXM7ZnVuY3Rpb24gcmVnaXN0ZXJHbG9iYWwoZSx0LHIsbj1mYWxzZSl7dmFyIG87Y29uc3QgaT1zW2NdPShvPXNbY10pIT09bnVsbCYmbyE9PXZvaWQgMD9vOnt2ZXJzaW9uOmEuVkVSU0lPTn07aWYoIW4mJmlbZV0pe2NvbnN0IHQ9bmV3IEVycm9yKGBAb3BlbnRlbGVtZXRyeS9hcGk6IEF0dGVtcHRlZCBkdXBsaWNhdGUgcmVnaXN0cmF0aW9uIG9mIEFQSTogJHtlfWApO3IuZXJyb3IodC5zdGFja3x8dC5tZXNzYWdlKTtyZXR1cm4gZmFsc2V9aWYoaS52ZXJzaW9uIT09YS5WRVJTSU9OKXtjb25zdCB0PW5ldyBFcnJvcihgQG9wZW50ZWxlbWV0cnkvYXBpOiBSZWdpc3RyYXRpb24gb2YgdmVyc2lvbiB2JHtpLnZlcnNpb259IGZvciAke2V9IGRvZXMgbm90IG1hdGNoIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBBUEkgdiR7YS5WRVJTSU9OfWApO3IuZXJyb3IodC5zdGFja3x8dC5tZXNzYWdlKTtyZXR1cm4gZmFsc2V9aVtlXT10O3IuZGVidWcoYEBvcGVudGVsZW1ldHJ5L2FwaTogUmVnaXN0ZXJlZCBhIGdsb2JhbCBmb3IgJHtlfSB2JHthLlZFUlNJT059LmApO3JldHVybiB0cnVlfXQucmVnaXN0ZXJHbG9iYWw9cmVnaXN0ZXJHbG9iYWw7ZnVuY3Rpb24gZ2V0R2xvYmFsKGUpe3ZhciB0LHI7Y29uc3Qgbj0odD1zW2NdKT09PW51bGx8fHQ9PT12b2lkIDA/dm9pZCAwOnQudmVyc2lvbjtpZighbnx8ISgwLG8uaXNDb21wYXRpYmxlKShuKSl7cmV0dXJufXJldHVybihyPXNbY10pPT09bnVsbHx8cj09PXZvaWQgMD92b2lkIDA6cltlXX10LmdldEdsb2JhbD1nZXRHbG9iYWw7ZnVuY3Rpb24gdW5yZWdpc3Rlckdsb2JhbChlLHQpe3QuZGVidWcoYEBvcGVudGVsZW1ldHJ5L2FwaTogVW5yZWdpc3RlcmluZyBhIGdsb2JhbCBmb3IgJHtlfSB2JHthLlZFUlNJT059LmApO2NvbnN0IHI9c1tjXTtpZihyKXtkZWxldGUgcltlXX19dC51bnJlZ2lzdGVyR2xvYmFsPXVucmVnaXN0ZXJHbG9iYWx9LDEzMDooZSx0LHIpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LmlzQ29tcGF0aWJsZT10Ll9tYWtlQ29tcGF0aWJpbGl0eUNoZWNrPXZvaWQgMDtjb25zdCBuPXIoNTIxKTtjb25zdCBhPS9eKFxcZCspXFwuKFxcZCspXFwuKFxcZCspKC0oLispKT8kLztmdW5jdGlvbiBfbWFrZUNvbXBhdGliaWxpdHlDaGVjayhlKXtjb25zdCB0PW5ldyBTZXQoW2VdKTtjb25zdCByPW5ldyBTZXQ7Y29uc3Qgbj1lLm1hdGNoKGEpO2lmKCFuKXtyZXR1cm4oKT0+ZmFsc2V9Y29uc3Qgbz17bWFqb3I6K25bMV0sbWlub3I6K25bMl0scGF0Y2g6K25bM10scHJlcmVsZWFzZTpuWzRdfTtpZihvLnByZXJlbGVhc2UhPW51bGwpe3JldHVybiBmdW5jdGlvbiBpc0V4YWN0bWF0Y2godCl7cmV0dXJuIHQ9PT1lfX1mdW5jdGlvbiBfcmVqZWN0KGUpe3IuYWRkKGUpO3JldHVybiBmYWxzZX1mdW5jdGlvbiBfYWNjZXB0KGUpe3QuYWRkKGUpO3JldHVybiB0cnVlfXJldHVybiBmdW5jdGlvbiBpc0NvbXBhdGlibGUoZSl7aWYodC5oYXMoZSkpe3JldHVybiB0cnVlfWlmKHIuaGFzKGUpKXtyZXR1cm4gZmFsc2V9Y29uc3Qgbj1lLm1hdGNoKGEpO2lmKCFuKXtyZXR1cm4gX3JlamVjdChlKX1jb25zdCBpPXttYWpvcjorblsxXSxtaW5vcjorblsyXSxwYXRjaDorblszXSxwcmVyZWxlYXNlOm5bNF19O2lmKGkucHJlcmVsZWFzZSE9bnVsbCl7cmV0dXJuIF9yZWplY3QoZSl9aWYoby5tYWpvciE9PWkubWFqb3Ipe3JldHVybiBfcmVqZWN0KGUpfWlmKG8ubWFqb3I9PT0wKXtpZihvLm1pbm9yPT09aS5taW5vciYmby5wYXRjaDw9aS5wYXRjaCl7cmV0dXJuIF9hY2NlcHQoZSl9cmV0dXJuIF9yZWplY3QoZSl9aWYoby5taW5vcjw9aS5taW5vcil7cmV0dXJuIF9hY2NlcHQoZSl9cmV0dXJuIF9yZWplY3QoZSl9fXQuX21ha2VDb21wYXRpYmlsaXR5Q2hlY2s9X21ha2VDb21wYXRpYmlsaXR5Q2hlY2s7dC5pc0NvbXBhdGlibGU9X21ha2VDb21wYXRpYmlsaXR5Q2hlY2sobi5WRVJTSU9OKX0sODg2OihlLHQscik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QubWV0cmljcz12b2lkIDA7Y29uc3Qgbj1yKDY1Myk7dC5tZXRyaWNzPW4uTWV0cmljc0FQSS5nZXRJbnN0YW5jZSgpfSw5MDE6KGUsdCk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuVmFsdWVUeXBlPXZvaWQgMDt2YXIgcjsoZnVuY3Rpb24oZSl7ZVtlW1wiSU5UXCJdPTBdPVwiSU5UXCI7ZVtlW1wiRE9VQkxFXCJdPTFdPVwiRE9VQkxFXCJ9KShyPXQuVmFsdWVUeXBlfHwodC5WYWx1ZVR5cGU9e30pKX0sMTAyOihlLHQpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LmNyZWF0ZU5vb3BNZXRlcj10Lk5PT1BfT0JTRVJWQUJMRV9VUF9ET1dOX0NPVU5URVJfTUVUUklDPXQuTk9PUF9PQlNFUlZBQkxFX0dBVUdFX01FVFJJQz10Lk5PT1BfT0JTRVJWQUJMRV9DT1VOVEVSX01FVFJJQz10Lk5PT1BfVVBfRE9XTl9DT1VOVEVSX01FVFJJQz10Lk5PT1BfSElTVE9HUkFNX01FVFJJQz10Lk5PT1BfQ09VTlRFUl9NRVRSSUM9dC5OT09QX01FVEVSPXQuTm9vcE9ic2VydmFibGVVcERvd25Db3VudGVyTWV0cmljPXQuTm9vcE9ic2VydmFibGVHYXVnZU1ldHJpYz10Lk5vb3BPYnNlcnZhYmxlQ291bnRlck1ldHJpYz10Lk5vb3BPYnNlcnZhYmxlTWV0cmljPXQuTm9vcEhpc3RvZ3JhbU1ldHJpYz10Lk5vb3BVcERvd25Db3VudGVyTWV0cmljPXQuTm9vcENvdW50ZXJNZXRyaWM9dC5Ob29wTWV0cmljPXQuTm9vcE1ldGVyPXZvaWQgMDtjbGFzcyBOb29wTWV0ZXJ7Y29uc3RydWN0b3IoKXt9Y3JlYXRlSGlzdG9ncmFtKGUscil7cmV0dXJuIHQuTk9PUF9ISVNUT0dSQU1fTUVUUklDfWNyZWF0ZUNvdW50ZXIoZSxyKXtyZXR1cm4gdC5OT09QX0NPVU5URVJfTUVUUklDfWNyZWF0ZVVwRG93bkNvdW50ZXIoZSxyKXtyZXR1cm4gdC5OT09QX1VQX0RPV05fQ09VTlRFUl9NRVRSSUN9Y3JlYXRlT2JzZXJ2YWJsZUdhdWdlKGUscil7cmV0dXJuIHQuTk9PUF9PQlNFUlZBQkxFX0dBVUdFX01FVFJJQ31jcmVhdGVPYnNlcnZhYmxlQ291bnRlcihlLHIpe3JldHVybiB0Lk5PT1BfT0JTRVJWQUJMRV9DT1VOVEVSX01FVFJJQ31jcmVhdGVPYnNlcnZhYmxlVXBEb3duQ291bnRlcihlLHIpe3JldHVybiB0Lk5PT1BfT0JTRVJWQUJMRV9VUF9ET1dOX0NPVU5URVJfTUVUUklDfWFkZEJhdGNoT2JzZXJ2YWJsZUNhbGxiYWNrKGUsdCl7fXJlbW92ZUJhdGNoT2JzZXJ2YWJsZUNhbGxiYWNrKGUpe319dC5Ob29wTWV0ZXI9Tm9vcE1ldGVyO2NsYXNzIE5vb3BNZXRyaWN7fXQuTm9vcE1ldHJpYz1Ob29wTWV0cmljO2NsYXNzIE5vb3BDb3VudGVyTWV0cmljIGV4dGVuZHMgTm9vcE1ldHJpY3thZGQoZSx0KXt9fXQuTm9vcENvdW50ZXJNZXRyaWM9Tm9vcENvdW50ZXJNZXRyaWM7Y2xhc3MgTm9vcFVwRG93bkNvdW50ZXJNZXRyaWMgZXh0ZW5kcyBOb29wTWV0cmlje2FkZChlLHQpe319dC5Ob29wVXBEb3duQ291bnRlck1ldHJpYz1Ob29wVXBEb3duQ291bnRlck1ldHJpYztjbGFzcyBOb29wSGlzdG9ncmFtTWV0cmljIGV4dGVuZHMgTm9vcE1ldHJpY3tyZWNvcmQoZSx0KXt9fXQuTm9vcEhpc3RvZ3JhbU1ldHJpYz1Ob29wSGlzdG9ncmFtTWV0cmljO2NsYXNzIE5vb3BPYnNlcnZhYmxlTWV0cmlje2FkZENhbGxiYWNrKGUpe31yZW1vdmVDYWxsYmFjayhlKXt9fXQuTm9vcE9ic2VydmFibGVNZXRyaWM9Tm9vcE9ic2VydmFibGVNZXRyaWM7Y2xhc3MgTm9vcE9ic2VydmFibGVDb3VudGVyTWV0cmljIGV4dGVuZHMgTm9vcE9ic2VydmFibGVNZXRyaWN7fXQuTm9vcE9ic2VydmFibGVDb3VudGVyTWV0cmljPU5vb3BPYnNlcnZhYmxlQ291bnRlck1ldHJpYztjbGFzcyBOb29wT2JzZXJ2YWJsZUdhdWdlTWV0cmljIGV4dGVuZHMgTm9vcE9ic2VydmFibGVNZXRyaWN7fXQuTm9vcE9ic2VydmFibGVHYXVnZU1ldHJpYz1Ob29wT2JzZXJ2YWJsZUdhdWdlTWV0cmljO2NsYXNzIE5vb3BPYnNlcnZhYmxlVXBEb3duQ291bnRlck1ldHJpYyBleHRlbmRzIE5vb3BPYnNlcnZhYmxlTWV0cmlje310Lk5vb3BPYnNlcnZhYmxlVXBEb3duQ291bnRlck1ldHJpYz1Ob29wT2JzZXJ2YWJsZVVwRG93bkNvdW50ZXJNZXRyaWM7dC5OT09QX01FVEVSPW5ldyBOb29wTWV0ZXI7dC5OT09QX0NPVU5URVJfTUVUUklDPW5ldyBOb29wQ291bnRlck1ldHJpYzt0Lk5PT1BfSElTVE9HUkFNX01FVFJJQz1uZXcgTm9vcEhpc3RvZ3JhbU1ldHJpYzt0Lk5PT1BfVVBfRE9XTl9DT1VOVEVSX01FVFJJQz1uZXcgTm9vcFVwRG93bkNvdW50ZXJNZXRyaWM7dC5OT09QX09CU0VSVkFCTEVfQ09VTlRFUl9NRVRSSUM9bmV3IE5vb3BPYnNlcnZhYmxlQ291bnRlck1ldHJpYzt0Lk5PT1BfT0JTRVJWQUJMRV9HQVVHRV9NRVRSSUM9bmV3IE5vb3BPYnNlcnZhYmxlR2F1Z2VNZXRyaWM7dC5OT09QX09CU0VSVkFCTEVfVVBfRE9XTl9DT1VOVEVSX01FVFJJQz1uZXcgTm9vcE9ic2VydmFibGVVcERvd25Db3VudGVyTWV0cmljO2Z1bmN0aW9uIGNyZWF0ZU5vb3BNZXRlcigpe3JldHVybiB0Lk5PT1BfTUVURVJ9dC5jcmVhdGVOb29wTWV0ZXI9Y3JlYXRlTm9vcE1ldGVyfSw2NjA6KGUsdCxyKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5OT09QX01FVEVSX1BST1ZJREVSPXQuTm9vcE1ldGVyUHJvdmlkZXI9dm9pZCAwO2NvbnN0IG49cigxMDIpO2NsYXNzIE5vb3BNZXRlclByb3ZpZGVye2dldE1ldGVyKGUsdCxyKXtyZXR1cm4gbi5OT09QX01FVEVSfX10Lk5vb3BNZXRlclByb3ZpZGVyPU5vb3BNZXRlclByb3ZpZGVyO3QuTk9PUF9NRVRFUl9QUk9WSURFUj1uZXcgTm9vcE1ldGVyUHJvdmlkZXJ9LDIwMDpmdW5jdGlvbihlLHQscil7dmFyIG49dGhpcyYmdGhpcy5fX2NyZWF0ZUJpbmRpbmd8fChPYmplY3QuY3JlYXRlP2Z1bmN0aW9uKGUsdCxyLG4pe2lmKG49PT11bmRlZmluZWQpbj1yO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4se2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdFtyXX19KX06ZnVuY3Rpb24oZSx0LHIsbil7aWYobj09PXVuZGVmaW5lZCluPXI7ZVtuXT10W3JdfSk7dmFyIGE9dGhpcyYmdGhpcy5fX2V4cG9ydFN0YXJ8fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIGUpaWYociE9PVwiZGVmYXVsdFwiJiYhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQscikpbih0LGUscil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7YShyKDQ2KSx0KX0sNjUxOihlLHQpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0Ll9nbG9iYWxUaGlzPXZvaWQgMDt0Ll9nbG9iYWxUaGlzPXR5cGVvZiBnbG9iYWxUaGlzPT09XCJvYmplY3RcIj9nbG9iYWxUaGlzOmdsb2JhbH0sNDY6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXRoaXMmJnRoaXMuX19jcmVhdGVCaW5kaW5nfHwoT2JqZWN0LmNyZWF0ZT9mdW5jdGlvbihlLHQscixuKXtpZihuPT09dW5kZWZpbmVkKW49cjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRbcl19fSl9OmZ1bmN0aW9uKGUsdCxyLG4pe2lmKG49PT11bmRlZmluZWQpbj1yO2Vbbl09dFtyXX0pO3ZhciBhPXRoaXMmJnRoaXMuX19leHBvcnRTdGFyfHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiBlKWlmKHIhPT1cImRlZmF1bHRcIiYmIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LHIpKW4odCxlLHIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2Eocig2NTEpLHQpfSw5Mzk6KGUsdCxyKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5wcm9wYWdhdGlvbj12b2lkIDA7Y29uc3Qgbj1yKDE4MSk7dC5wcm9wYWdhdGlvbj1uLlByb3BhZ2F0aW9uQVBJLmdldEluc3RhbmNlKCl9LDg3NDooZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5Ob29wVGV4dE1hcFByb3BhZ2F0b3I9dm9pZCAwO2NsYXNzIE5vb3BUZXh0TWFwUHJvcGFnYXRvcntpbmplY3QoZSx0KXt9ZXh0cmFjdChlLHQpe3JldHVybiBlfWZpZWxkcygpe3JldHVybltdfX10Lk5vb3BUZXh0TWFwUHJvcGFnYXRvcj1Ob29wVGV4dE1hcFByb3BhZ2F0b3J9LDE5NDooZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5kZWZhdWx0VGV4dE1hcFNldHRlcj10LmRlZmF1bHRUZXh0TWFwR2V0dGVyPXZvaWQgMDt0LmRlZmF1bHRUZXh0TWFwR2V0dGVyPXtnZXQoZSx0KXtpZihlPT1udWxsKXtyZXR1cm4gdW5kZWZpbmVkfXJldHVybiBlW3RdfSxrZXlzKGUpe2lmKGU9PW51bGwpe3JldHVybltdfXJldHVybiBPYmplY3Qua2V5cyhlKX19O3QuZGVmYXVsdFRleHRNYXBTZXR0ZXI9e3NldChlLHQscil7aWYoZT09bnVsbCl7cmV0dXJufWVbdF09cn19fSw4NDU6KGUsdCxyKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC50cmFjZT12b2lkIDA7Y29uc3Qgbj1yKDk5Nyk7dC50cmFjZT1uLlRyYWNlQVBJLmdldEluc3RhbmNlKCl9LDQwMzooZSx0LHIpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0Lk5vblJlY29yZGluZ1NwYW49dm9pZCAwO2NvbnN0IG49cig0NzYpO2NsYXNzIE5vblJlY29yZGluZ1NwYW57Y29uc3RydWN0b3IoZT1uLklOVkFMSURfU1BBTl9DT05URVhUKXt0aGlzLl9zcGFuQ29udGV4dD1lfXNwYW5Db250ZXh0KCl7cmV0dXJuIHRoaXMuX3NwYW5Db250ZXh0fXNldEF0dHJpYnV0ZShlLHQpe3JldHVybiB0aGlzfXNldEF0dHJpYnV0ZXMoZSl7cmV0dXJuIHRoaXN9YWRkRXZlbnQoZSx0KXtyZXR1cm4gdGhpc31zZXRTdGF0dXMoZSl7cmV0dXJuIHRoaXN9dXBkYXRlTmFtZShlKXtyZXR1cm4gdGhpc31lbmQoZSl7fWlzUmVjb3JkaW5nKCl7cmV0dXJuIGZhbHNlfXJlY29yZEV4Y2VwdGlvbihlLHQpe319dC5Ob25SZWNvcmRpbmdTcGFuPU5vblJlY29yZGluZ1NwYW59LDYxNDooZSx0LHIpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0Lk5vb3BUcmFjZXI9dm9pZCAwO2NvbnN0IG49cig0OTEpO2NvbnN0IGE9cig2MDcpO2NvbnN0IG89cig0MDMpO2NvbnN0IGk9cigxMzkpO2NvbnN0IGM9bi5Db250ZXh0QVBJLmdldEluc3RhbmNlKCk7Y2xhc3MgTm9vcFRyYWNlcntzdGFydFNwYW4oZSx0LHI9Yy5hY3RpdmUoKSl7Y29uc3Qgbj1Cb29sZWFuKHQ9PT1udWxsfHx0PT09dm9pZCAwP3ZvaWQgMDp0LnJvb3QpO2lmKG4pe3JldHVybiBuZXcgby5Ob25SZWNvcmRpbmdTcGFufWNvbnN0IHM9ciYmKDAsYS5nZXRTcGFuQ29udGV4dCkocik7aWYoaXNTcGFuQ29udGV4dChzKSYmKDAsaS5pc1NwYW5Db250ZXh0VmFsaWQpKHMpKXtyZXR1cm4gbmV3IG8uTm9uUmVjb3JkaW5nU3BhbihzKX1lbHNle3JldHVybiBuZXcgby5Ob25SZWNvcmRpbmdTcGFufX1zdGFydEFjdGl2ZVNwYW4oZSx0LHIsbil7bGV0IG87bGV0IGk7bGV0IHM7aWYoYXJndW1lbnRzLmxlbmd0aDwyKXtyZXR1cm59ZWxzZSBpZihhcmd1bWVudHMubGVuZ3RoPT09Mil7cz10fWVsc2UgaWYoYXJndW1lbnRzLmxlbmd0aD09PTMpe289dDtzPXJ9ZWxzZXtvPXQ7aT1yO3M9bn1jb25zdCB1PWkhPT1udWxsJiZpIT09dm9pZCAwP2k6Yy5hY3RpdmUoKTtjb25zdCBsPXRoaXMuc3RhcnRTcGFuKGUsbyx1KTtjb25zdCBnPSgwLGEuc2V0U3BhbikodSxsKTtyZXR1cm4gYy53aXRoKGcscyx1bmRlZmluZWQsbCl9fXQuTm9vcFRyYWNlcj1Ob29wVHJhY2VyO2Z1bmN0aW9uIGlzU3BhbkNvbnRleHQoZSl7cmV0dXJuIHR5cGVvZiBlPT09XCJvYmplY3RcIiYmdHlwZW9mIGVbXCJzcGFuSWRcIl09PT1cInN0cmluZ1wiJiZ0eXBlb2YgZVtcInRyYWNlSWRcIl09PT1cInN0cmluZ1wiJiZ0eXBlb2YgZVtcInRyYWNlRmxhZ3NcIl09PT1cIm51bWJlclwifX0sMTI0OihlLHQscik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuTm9vcFRyYWNlclByb3ZpZGVyPXZvaWQgMDtjb25zdCBuPXIoNjE0KTtjbGFzcyBOb29wVHJhY2VyUHJvdmlkZXJ7Z2V0VHJhY2VyKGUsdCxyKXtyZXR1cm4gbmV3IG4uTm9vcFRyYWNlcn19dC5Ob29wVHJhY2VyUHJvdmlkZXI9Tm9vcFRyYWNlclByb3ZpZGVyfSwxMjU6KGUsdCxyKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5Qcm94eVRyYWNlcj12b2lkIDA7Y29uc3Qgbj1yKDYxNCk7Y29uc3QgYT1uZXcgbi5Ob29wVHJhY2VyO2NsYXNzIFByb3h5VHJhY2Vye2NvbnN0cnVjdG9yKGUsdCxyLG4pe3RoaXMuX3Byb3ZpZGVyPWU7dGhpcy5uYW1lPXQ7dGhpcy52ZXJzaW9uPXI7dGhpcy5vcHRpb25zPW59c3RhcnRTcGFuKGUsdCxyKXtyZXR1cm4gdGhpcy5fZ2V0VHJhY2VyKCkuc3RhcnRTcGFuKGUsdCxyKX1zdGFydEFjdGl2ZVNwYW4oZSx0LHIsbil7Y29uc3QgYT10aGlzLl9nZXRUcmFjZXIoKTtyZXR1cm4gUmVmbGVjdC5hcHBseShhLnN0YXJ0QWN0aXZlU3BhbixhLGFyZ3VtZW50cyl9X2dldFRyYWNlcigpe2lmKHRoaXMuX2RlbGVnYXRlKXtyZXR1cm4gdGhpcy5fZGVsZWdhdGV9Y29uc3QgZT10aGlzLl9wcm92aWRlci5nZXREZWxlZ2F0ZVRyYWNlcih0aGlzLm5hbWUsdGhpcy52ZXJzaW9uLHRoaXMub3B0aW9ucyk7aWYoIWUpe3JldHVybiBhfXRoaXMuX2RlbGVnYXRlPWU7cmV0dXJuIHRoaXMuX2RlbGVnYXRlfX10LlByb3h5VHJhY2VyPVByb3h5VHJhY2VyfSw4NDY6KGUsdCxyKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5Qcm94eVRyYWNlclByb3ZpZGVyPXZvaWQgMDtjb25zdCBuPXIoMTI1KTtjb25zdCBhPXIoMTI0KTtjb25zdCBvPW5ldyBhLk5vb3BUcmFjZXJQcm92aWRlcjtjbGFzcyBQcm94eVRyYWNlclByb3ZpZGVye2dldFRyYWNlcihlLHQscil7dmFyIGE7cmV0dXJuKGE9dGhpcy5nZXREZWxlZ2F0ZVRyYWNlcihlLHQscikpIT09bnVsbCYmYSE9PXZvaWQgMD9hOm5ldyBuLlByb3h5VHJhY2VyKHRoaXMsZSx0LHIpfWdldERlbGVnYXRlKCl7dmFyIGU7cmV0dXJuKGU9dGhpcy5fZGVsZWdhdGUpIT09bnVsbCYmZSE9PXZvaWQgMD9lOm99c2V0RGVsZWdhdGUoZSl7dGhpcy5fZGVsZWdhdGU9ZX1nZXREZWxlZ2F0ZVRyYWNlcihlLHQscil7dmFyIG47cmV0dXJuKG49dGhpcy5fZGVsZWdhdGUpPT09bnVsbHx8bj09PXZvaWQgMD92b2lkIDA6bi5nZXRUcmFjZXIoZSx0LHIpfX10LlByb3h5VHJhY2VyUHJvdmlkZXI9UHJveHlUcmFjZXJQcm92aWRlcn0sOTk2OihlLHQpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LlNhbXBsaW5nRGVjaXNpb249dm9pZCAwO3ZhciByOyhmdW5jdGlvbihlKXtlW2VbXCJOT1RfUkVDT1JEXCJdPTBdPVwiTk9UX1JFQ09SRFwiO2VbZVtcIlJFQ09SRFwiXT0xXT1cIlJFQ09SRFwiO2VbZVtcIlJFQ09SRF9BTkRfU0FNUExFRFwiXT0yXT1cIlJFQ09SRF9BTkRfU0FNUExFRFwifSkocj10LlNhbXBsaW5nRGVjaXNpb258fCh0LlNhbXBsaW5nRGVjaXNpb249e30pKX0sNjA3OihlLHQscik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuZ2V0U3BhbkNvbnRleHQ9dC5zZXRTcGFuQ29udGV4dD10LmRlbGV0ZVNwYW49dC5zZXRTcGFuPXQuZ2V0QWN0aXZlU3Bhbj10LmdldFNwYW49dm9pZCAwO2NvbnN0IG49cig3ODApO2NvbnN0IGE9cig0MDMpO2NvbnN0IG89cig0OTEpO2NvbnN0IGk9KDAsbi5jcmVhdGVDb250ZXh0S2V5KShcIk9wZW5UZWxlbWV0cnkgQ29udGV4dCBLZXkgU1BBTlwiKTtmdW5jdGlvbiBnZXRTcGFuKGUpe3JldHVybiBlLmdldFZhbHVlKGkpfHx1bmRlZmluZWR9dC5nZXRTcGFuPWdldFNwYW47ZnVuY3Rpb24gZ2V0QWN0aXZlU3Bhbigpe3JldHVybiBnZXRTcGFuKG8uQ29udGV4dEFQSS5nZXRJbnN0YW5jZSgpLmFjdGl2ZSgpKX10LmdldEFjdGl2ZVNwYW49Z2V0QWN0aXZlU3BhbjtmdW5jdGlvbiBzZXRTcGFuKGUsdCl7cmV0dXJuIGUuc2V0VmFsdWUoaSx0KX10LnNldFNwYW49c2V0U3BhbjtmdW5jdGlvbiBkZWxldGVTcGFuKGUpe3JldHVybiBlLmRlbGV0ZVZhbHVlKGkpfXQuZGVsZXRlU3Bhbj1kZWxldGVTcGFuO2Z1bmN0aW9uIHNldFNwYW5Db250ZXh0KGUsdCl7cmV0dXJuIHNldFNwYW4oZSxuZXcgYS5Ob25SZWNvcmRpbmdTcGFuKHQpKX10LnNldFNwYW5Db250ZXh0PXNldFNwYW5Db250ZXh0O2Z1bmN0aW9uIGdldFNwYW5Db250ZXh0KGUpe3ZhciB0O3JldHVybih0PWdldFNwYW4oZSkpPT09bnVsbHx8dD09PXZvaWQgMD92b2lkIDA6dC5zcGFuQ29udGV4dCgpfXQuZ2V0U3BhbkNvbnRleHQ9Z2V0U3BhbkNvbnRleHR9LDMyNTooZSx0LHIpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LlRyYWNlU3RhdGVJbXBsPXZvaWQgMDtjb25zdCBuPXIoNTY0KTtjb25zdCBhPTMyO2NvbnN0IG89NTEyO2NvbnN0IGk9XCIsXCI7Y29uc3QgYz1cIj1cIjtjbGFzcyBUcmFjZVN0YXRlSW1wbHtjb25zdHJ1Y3RvcihlKXt0aGlzLl9pbnRlcm5hbFN0YXRlPW5ldyBNYXA7aWYoZSl0aGlzLl9wYXJzZShlKX1zZXQoZSx0KXtjb25zdCByPXRoaXMuX2Nsb25lKCk7aWYoci5faW50ZXJuYWxTdGF0ZS5oYXMoZSkpe3IuX2ludGVybmFsU3RhdGUuZGVsZXRlKGUpfXIuX2ludGVybmFsU3RhdGUuc2V0KGUsdCk7cmV0dXJuIHJ9dW5zZXQoZSl7Y29uc3QgdD10aGlzLl9jbG9uZSgpO3QuX2ludGVybmFsU3RhdGUuZGVsZXRlKGUpO3JldHVybiB0fWdldChlKXtyZXR1cm4gdGhpcy5faW50ZXJuYWxTdGF0ZS5nZXQoZSl9c2VyaWFsaXplKCl7cmV0dXJuIHRoaXMuX2tleXMoKS5yZWR1Y2UoKChlLHQpPT57ZS5wdXNoKHQrYyt0aGlzLmdldCh0KSk7cmV0dXJuIGV9KSxbXSkuam9pbihpKX1fcGFyc2UoZSl7aWYoZS5sZW5ndGg+bylyZXR1cm47dGhpcy5faW50ZXJuYWxTdGF0ZT1lLnNwbGl0KGkpLnJldmVyc2UoKS5yZWR1Y2UoKChlLHQpPT57Y29uc3Qgcj10LnRyaW0oKTtjb25zdCBhPXIuaW5kZXhPZihjKTtpZihhIT09LTEpe2NvbnN0IG89ci5zbGljZSgwLGEpO2NvbnN0IGk9ci5zbGljZShhKzEsdC5sZW5ndGgpO2lmKCgwLG4udmFsaWRhdGVLZXkpKG8pJiYoMCxuLnZhbGlkYXRlVmFsdWUpKGkpKXtlLnNldChvLGkpfWVsc2V7fX1yZXR1cm4gZX0pLG5ldyBNYXApO2lmKHRoaXMuX2ludGVybmFsU3RhdGUuc2l6ZT5hKXt0aGlzLl9pbnRlcm5hbFN0YXRlPW5ldyBNYXAoQXJyYXkuZnJvbSh0aGlzLl9pbnRlcm5hbFN0YXRlLmVudHJpZXMoKSkucmV2ZXJzZSgpLnNsaWNlKDAsYSkpfX1fa2V5cygpe3JldHVybiBBcnJheS5mcm9tKHRoaXMuX2ludGVybmFsU3RhdGUua2V5cygpKS5yZXZlcnNlKCl9X2Nsb25lKCl7Y29uc3QgZT1uZXcgVHJhY2VTdGF0ZUltcGw7ZS5faW50ZXJuYWxTdGF0ZT1uZXcgTWFwKHRoaXMuX2ludGVybmFsU3RhdGUpO3JldHVybiBlfX10LlRyYWNlU3RhdGVJbXBsPVRyYWNlU3RhdGVJbXBsfSw1NjQ6KGUsdCk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QudmFsaWRhdGVWYWx1ZT10LnZhbGlkYXRlS2V5PXZvaWQgMDtjb25zdCByPVwiW18wLTlhLXotKi9dXCI7Y29uc3Qgbj1gW2Etel0ke3J9ezAsMjU1fWA7Y29uc3QgYT1gW2EtejAtOV0ke3J9ezAsMjQwfUBbYS16XSR7cn17MCwxM31gO2NvbnN0IG89bmV3IFJlZ0V4cChgXig/OiR7bn18JHthfSkkYCk7Y29uc3QgaT0vXlsgLX5dezAsMjU1fVshLX5dJC87Y29uc3QgYz0vLHw9LztmdW5jdGlvbiB2YWxpZGF0ZUtleShlKXtyZXR1cm4gby50ZXN0KGUpfXQudmFsaWRhdGVLZXk9dmFsaWRhdGVLZXk7ZnVuY3Rpb24gdmFsaWRhdGVWYWx1ZShlKXtyZXR1cm4gaS50ZXN0KGUpJiYhYy50ZXN0KGUpfXQudmFsaWRhdGVWYWx1ZT12YWxpZGF0ZVZhbHVlfSw5ODooZSx0LHIpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LmNyZWF0ZVRyYWNlU3RhdGU9dm9pZCAwO2NvbnN0IG49cigzMjUpO2Z1bmN0aW9uIGNyZWF0ZVRyYWNlU3RhdGUoZSl7cmV0dXJuIG5ldyBuLlRyYWNlU3RhdGVJbXBsKGUpfXQuY3JlYXRlVHJhY2VTdGF0ZT1jcmVhdGVUcmFjZVN0YXRlfSw0NzY6KGUsdCxyKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5JTlZBTElEX1NQQU5fQ09OVEVYVD10LklOVkFMSURfVFJBQ0VJRD10LklOVkFMSURfU1BBTklEPXZvaWQgMDtjb25zdCBuPXIoNDc1KTt0LklOVkFMSURfU1BBTklEPVwiMDAwMDAwMDAwMDAwMDAwMFwiO3QuSU5WQUxJRF9UUkFDRUlEPVwiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIjt0LklOVkFMSURfU1BBTl9DT05URVhUPXt0cmFjZUlkOnQuSU5WQUxJRF9UUkFDRUlELHNwYW5JZDp0LklOVkFMSURfU1BBTklELHRyYWNlRmxhZ3M6bi5UcmFjZUZsYWdzLk5PTkV9fSwzNTc6KGUsdCk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuU3BhbktpbmQ9dm9pZCAwO3ZhciByOyhmdW5jdGlvbihlKXtlW2VbXCJJTlRFUk5BTFwiXT0wXT1cIklOVEVSTkFMXCI7ZVtlW1wiU0VSVkVSXCJdPTFdPVwiU0VSVkVSXCI7ZVtlW1wiQ0xJRU5UXCJdPTJdPVwiQ0xJRU5UXCI7ZVtlW1wiUFJPRFVDRVJcIl09M109XCJQUk9EVUNFUlwiO2VbZVtcIkNPTlNVTUVSXCJdPTRdPVwiQ09OU1VNRVJcIn0pKHI9dC5TcGFuS2luZHx8KHQuU3BhbktpbmQ9e30pKX0sMTM5OihlLHQscik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3Qud3JhcFNwYW5Db250ZXh0PXQuaXNTcGFuQ29udGV4dFZhbGlkPXQuaXNWYWxpZFNwYW5JZD10LmlzVmFsaWRUcmFjZUlkPXZvaWQgMDtjb25zdCBuPXIoNDc2KTtjb25zdCBhPXIoNDAzKTtjb25zdCBvPS9eKFswLTlhLWZdezMyfSkkL2k7Y29uc3QgaT0vXlswLTlhLWZdezE2fSQvaTtmdW5jdGlvbiBpc1ZhbGlkVHJhY2VJZChlKXtyZXR1cm4gby50ZXN0KGUpJiZlIT09bi5JTlZBTElEX1RSQUNFSUR9dC5pc1ZhbGlkVHJhY2VJZD1pc1ZhbGlkVHJhY2VJZDtmdW5jdGlvbiBpc1ZhbGlkU3BhbklkKGUpe3JldHVybiBpLnRlc3QoZSkmJmUhPT1uLklOVkFMSURfU1BBTklEfXQuaXNWYWxpZFNwYW5JZD1pc1ZhbGlkU3BhbklkO2Z1bmN0aW9uIGlzU3BhbkNvbnRleHRWYWxpZChlKXtyZXR1cm4gaXNWYWxpZFRyYWNlSWQoZS50cmFjZUlkKSYmaXNWYWxpZFNwYW5JZChlLnNwYW5JZCl9dC5pc1NwYW5Db250ZXh0VmFsaWQ9aXNTcGFuQ29udGV4dFZhbGlkO2Z1bmN0aW9uIHdyYXBTcGFuQ29udGV4dChlKXtyZXR1cm4gbmV3IGEuTm9uUmVjb3JkaW5nU3BhbihlKX10LndyYXBTcGFuQ29udGV4dD13cmFwU3BhbkNvbnRleHR9LDg0NzooZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5TcGFuU3RhdHVzQ29kZT12b2lkIDA7dmFyIHI7KGZ1bmN0aW9uKGUpe2VbZVtcIlVOU0VUXCJdPTBdPVwiVU5TRVRcIjtlW2VbXCJPS1wiXT0xXT1cIk9LXCI7ZVtlW1wiRVJST1JcIl09Ml09XCJFUlJPUlwifSkocj10LlNwYW5TdGF0dXNDb2RlfHwodC5TcGFuU3RhdHVzQ29kZT17fSkpfSw0NzU6KGUsdCk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuVHJhY2VGbGFncz12b2lkIDA7dmFyIHI7KGZ1bmN0aW9uKGUpe2VbZVtcIk5PTkVcIl09MF09XCJOT05FXCI7ZVtlW1wiU0FNUExFRFwiXT0xXT1cIlNBTVBMRURcIn0pKHI9dC5UcmFjZUZsYWdzfHwodC5UcmFjZUZsYWdzPXt9KSl9LDUyMTooZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5WRVJTSU9OPXZvaWQgMDt0LlZFUlNJT049XCIxLjYuMFwifX07dmFyIHQ9e307ZnVuY3Rpb24gX19uY2N3cGNrX3JlcXVpcmVfXyhyKXt2YXIgbj10W3JdO2lmKG4hPT11bmRlZmluZWQpe3JldHVybiBuLmV4cG9ydHN9dmFyIGE9dFtyXT17ZXhwb3J0czp7fX07dmFyIG89dHJ1ZTt0cnl7ZVtyXS5jYWxsKGEuZXhwb3J0cyxhLGEuZXhwb3J0cyxfX25jY3dwY2tfcmVxdWlyZV9fKTtvPWZhbHNlfWZpbmFsbHl7aWYobylkZWxldGUgdFtyXX1yZXR1cm4gYS5leHBvcnRzfWlmKHR5cGVvZiBfX25jY3dwY2tfcmVxdWlyZV9fIT09XCJ1bmRlZmluZWRcIilfX25jY3dwY2tfcmVxdWlyZV9fLmFiPV9fZGlybmFtZStcIi9cIjt2YXIgcj17fTsoKCk9Pnt2YXIgZT1yO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZS50cmFjZT1lLnByb3BhZ2F0aW9uPWUubWV0cmljcz1lLmRpYWc9ZS5jb250ZXh0PWUuSU5WQUxJRF9TUEFOX0NPTlRFWFQ9ZS5JTlZBTElEX1RSQUNFSUQ9ZS5JTlZBTElEX1NQQU5JRD1lLmlzVmFsaWRTcGFuSWQ9ZS5pc1ZhbGlkVHJhY2VJZD1lLmlzU3BhbkNvbnRleHRWYWxpZD1lLmNyZWF0ZVRyYWNlU3RhdGU9ZS5UcmFjZUZsYWdzPWUuU3BhblN0YXR1c0NvZGU9ZS5TcGFuS2luZD1lLlNhbXBsaW5nRGVjaXNpb249ZS5Qcm94eVRyYWNlclByb3ZpZGVyPWUuUHJveHlUcmFjZXI9ZS5kZWZhdWx0VGV4dE1hcFNldHRlcj1lLmRlZmF1bHRUZXh0TWFwR2V0dGVyPWUuVmFsdWVUeXBlPWUuY3JlYXRlTm9vcE1ldGVyPWUuRGlhZ0xvZ0xldmVsPWUuRGlhZ0NvbnNvbGVMb2dnZXI9ZS5ST09UX0NPTlRFWFQ9ZS5jcmVhdGVDb250ZXh0S2V5PWUuYmFnZ2FnZUVudHJ5TWV0YWRhdGFGcm9tU3RyaW5nPXZvaWQgMDt2YXIgdD1fX25jY3dwY2tfcmVxdWlyZV9fKDM2OSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJiYWdnYWdlRW50cnlNZXRhZGF0YUZyb21TdHJpbmdcIix7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbigpe3JldHVybiB0LmJhZ2dhZ2VFbnRyeU1ldGFkYXRhRnJvbVN0cmluZ319KTt2YXIgbj1fX25jY3dwY2tfcmVxdWlyZV9fKDc4MCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJjcmVhdGVDb250ZXh0S2V5XCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbi5jcmVhdGVDb250ZXh0S2V5fX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiUk9PVF9DT05URVhUXCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbi5ST09UX0NPTlRFWFR9fSk7dmFyIGE9X19uY2N3cGNrX3JlcXVpcmVfXyg5NzIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRGlhZ0NvbnNvbGVMb2dnZXJcIix7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbigpe3JldHVybiBhLkRpYWdDb25zb2xlTG9nZ2VyfX0pO3ZhciBvPV9fbmNjd3Bja19yZXF1aXJlX18oOTU3KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIkRpYWdMb2dMZXZlbFwiLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG8uRGlhZ0xvZ0xldmVsfX0pO3ZhciBpPV9fbmNjd3Bja19yZXF1aXJlX18oMTAyKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImNyZWF0ZU5vb3BNZXRlclwiLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGkuY3JlYXRlTm9vcE1ldGVyfX0pO3ZhciBjPV9fbmNjd3Bja19yZXF1aXJlX18oOTAxKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlZhbHVlVHlwZVwiLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGMuVmFsdWVUeXBlfX0pO3ZhciBzPV9fbmNjd3Bja19yZXF1aXJlX18oMTk0KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImRlZmF1bHRUZXh0TWFwR2V0dGVyXCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcy5kZWZhdWx0VGV4dE1hcEdldHRlcn19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImRlZmF1bHRUZXh0TWFwU2V0dGVyXCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcy5kZWZhdWx0VGV4dE1hcFNldHRlcn19KTt2YXIgdT1fX25jY3dwY2tfcmVxdWlyZV9fKDEyNSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJQcm94eVRyYWNlclwiLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHUuUHJveHlUcmFjZXJ9fSk7dmFyIGw9X19uY2N3cGNrX3JlcXVpcmVfXyg4NDYpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiUHJveHlUcmFjZXJQcm92aWRlclwiLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGwuUHJveHlUcmFjZXJQcm92aWRlcn19KTt2YXIgZz1fX25jY3dwY2tfcmVxdWlyZV9fKDk5Nik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJTYW1wbGluZ0RlY2lzaW9uXCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZy5TYW1wbGluZ0RlY2lzaW9ufX0pO3ZhciBwPV9fbmNjd3Bja19yZXF1aXJlX18oMzU3KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlNwYW5LaW5kXCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcC5TcGFuS2luZH19KTt2YXIgZD1fX25jY3dwY2tfcmVxdWlyZV9fKDg0Nyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJTcGFuU3RhdHVzQ29kZVwiLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGQuU3BhblN0YXR1c0NvZGV9fSk7dmFyIF89X19uY2N3cGNrX3JlcXVpcmVfXyg0NzUpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiVHJhY2VGbGFnc1wiLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIF8uVHJhY2VGbGFnc319KTt2YXIgZj1fX25jY3dwY2tfcmVxdWlyZV9fKDk4KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImNyZWF0ZVRyYWNlU3RhdGVcIix7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbigpe3JldHVybiBmLmNyZWF0ZVRyYWNlU3RhdGV9fSk7dmFyIGI9X19uY2N3cGNrX3JlcXVpcmVfXygxMzkpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiaXNTcGFuQ29udGV4dFZhbGlkXCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYi5pc1NwYW5Db250ZXh0VmFsaWR9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJpc1ZhbGlkVHJhY2VJZFwiLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGIuaXNWYWxpZFRyYWNlSWR9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJpc1ZhbGlkU3BhbklkXCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYi5pc1ZhbGlkU3BhbklkfX0pO3ZhciB2PV9fbmNjd3Bja19yZXF1aXJlX18oNDc2KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIklOVkFMSURfU1BBTklEXCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdi5JTlZBTElEX1NQQU5JRH19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIklOVkFMSURfVFJBQ0VJRFwiLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHYuSU5WQUxJRF9UUkFDRUlEfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiSU5WQUxJRF9TUEFOX0NPTlRFWFRcIix7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbigpe3JldHVybiB2LklOVkFMSURfU1BBTl9DT05URVhUfX0pO2NvbnN0IE89X19uY2N3cGNrX3JlcXVpcmVfXyg2Nyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJjb250ZXh0XCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gTy5jb250ZXh0fX0pO2NvbnN0IFA9X19uY2N3cGNrX3JlcXVpcmVfXyg1MDYpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiZGlhZ1wiLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFAuZGlhZ319KTtjb25zdCBOPV9fbmNjd3Bja19yZXF1aXJlX18oODg2KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIm1ldHJpY3NcIix7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbigpe3JldHVybiBOLm1ldHJpY3N9fSk7Y29uc3QgUz1fX25jY3dwY2tfcmVxdWlyZV9fKDkzOSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm9wYWdhdGlvblwiLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFMucHJvcGFnYXRpb259fSk7Y29uc3QgQz1fX25jY3dwY2tfcmVxdWlyZV9fKDg0NSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJ0cmFjZVwiLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEMudHJhY2V9fSk7ZVtcImRlZmF1bHRcIl09e2NvbnRleHQ6Ty5jb250ZXh0LGRpYWc6UC5kaWFnLG1ldHJpY3M6Ti5tZXRyaWNzLHByb3BhZ2F0aW9uOlMucHJvcGFnYXRpb24sdHJhY2U6Qy50cmFjZX19KSgpO21vZHVsZS5leHBvcnRzPXJ9KSgpOyJdLCJuYW1lcyI6WyJlIiwidCIsInIiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiQ29udGV4dEFQSSIsIm4iLCJhIiwibyIsImkiLCJjIiwiTm9vcENvbnRleHRNYW5hZ2VyIiwiY29uc3RydWN0b3IiLCJnZXRJbnN0YW5jZSIsIl9pbnN0YW5jZSIsInNldEdsb2JhbENvbnRleHRNYW5hZ2VyIiwicmVnaXN0ZXJHbG9iYWwiLCJEaWFnQVBJIiwiaW5zdGFuY2UiLCJhY3RpdmUiLCJfZ2V0Q29udGV4dE1hbmFnZXIiLCJ3aXRoIiwiYmluZCIsImdldEdsb2JhbCIsImRpc2FibGUiLCJ1bnJlZ2lzdGVyR2xvYmFsIiwiX2xvZ1Byb3h5Iiwic2V0TG9nZ2VyIiwibG9nTGV2ZWwiLCJEaWFnTG9nTGV2ZWwiLCJJTkZPIiwicyIsIkVycm9yIiwiZXJyb3IiLCJzdGFjayIsIm1lc3NhZ2UiLCJ1IiwibCIsImNyZWF0ZUxvZ0xldmVsRGlhZ0xvZ2dlciIsInN1cHByZXNzT3ZlcnJpZGVNZXNzYWdlIiwid2FybiIsImNyZWF0ZUNvbXBvbmVudExvZ2dlciIsIkRpYWdDb21wb25lbnRMb2dnZXIiLCJ2ZXJib3NlIiwiZGVidWciLCJpbmZvIiwiTWV0cmljc0FQSSIsInNldEdsb2JhbE1ldGVyUHJvdmlkZXIiLCJnZXRNZXRlclByb3ZpZGVyIiwiTk9PUF9NRVRFUl9QUk9WSURFUiIsImdldE1ldGVyIiwiUHJvcGFnYXRpb25BUEkiLCJOb29wVGV4dE1hcFByb3BhZ2F0b3IiLCJjcmVhdGVCYWdnYWdlIiwiZ2V0QmFnZ2FnZSIsImdldEFjdGl2ZUJhZ2dhZ2UiLCJzZXRCYWdnYWdlIiwiZGVsZXRlQmFnZ2FnZSIsInNldEdsb2JhbFByb3BhZ2F0b3IiLCJpbmplY3QiLCJkZWZhdWx0VGV4dE1hcFNldHRlciIsIl9nZXRHbG9iYWxQcm9wYWdhdG9yIiwiZXh0cmFjdCIsImRlZmF1bHRUZXh0TWFwR2V0dGVyIiwiZmllbGRzIiwiVHJhY2VBUEkiLCJfcHJveHlUcmFjZXJQcm92aWRlciIsIlByb3h5VHJhY2VyUHJvdmlkZXIiLCJ3cmFwU3BhbkNvbnRleHQiLCJpc1NwYW5Db250ZXh0VmFsaWQiLCJkZWxldGVTcGFuIiwiZ2V0U3BhbiIsImdldEFjdGl2ZVNwYW4iLCJnZXRTcGFuQ29udGV4dCIsInNldFNwYW4iLCJzZXRTcGFuQ29udGV4dCIsInNldEdsb2JhbFRyYWNlclByb3ZpZGVyIiwic2V0RGVsZWdhdGUiLCJnZXRUcmFjZXJQcm92aWRlciIsImdldFRyYWNlciIsImNyZWF0ZUNvbnRleHRLZXkiLCJnZXRWYWx1ZSIsInVuZGVmaW5lZCIsInNldFZhbHVlIiwiZGVsZXRlVmFsdWUiLCJCYWdnYWdlSW1wbCIsIl9lbnRyaWVzIiwiTWFwIiwiZ2V0RW50cnkiLCJnZXQiLCJhc3NpZ24iLCJnZXRBbGxFbnRyaWVzIiwiQXJyYXkiLCJmcm9tIiwiZW50cmllcyIsIm1hcCIsInNldEVudHJ5Iiwic2V0IiwicmVtb3ZlRW50cnkiLCJkZWxldGUiLCJyZW1vdmVFbnRyaWVzIiwiY2xlYXIiLCJiYWdnYWdlRW50cnlNZXRhZGF0YVN5bWJvbCIsIlN5bWJvbCIsImJhZ2dhZ2VFbnRyeU1ldGFkYXRhRnJvbVN0cmluZyIsIl9fVFlQRV9fIiwidG9TdHJpbmciLCJjb250ZXh0IiwiUk9PVF9DT05URVhUIiwiY2FsbCIsImVuYWJsZSIsImZvciIsIkJhc2VDb250ZXh0IiwiX2N1cnJlbnRDb250ZXh0IiwiZGlhZyIsIl9uYW1lc3BhY2UiLCJuYW1lc3BhY2UiLCJsb2dQcm94eSIsInVuc2hpZnQiLCJEaWFnQ29uc29sZUxvZ2dlciIsIl9jb25zb2xlRnVuYyIsImNvbnNvbGUiLCJsb2ciLCJhcHBseSIsImxlbmd0aCIsIk5PTkUiLCJBTEwiLCJfZmlsdGVyRnVuYyIsIkVSUk9SIiwiV0FSTiIsIkRFQlVHIiwiVkVSQk9TRSIsIlZFUlNJT04iLCJzcGxpdCIsIl9nbG9iYWxUaGlzIiwidmVyc2lvbiIsImlzQ29tcGF0aWJsZSIsIl9tYWtlQ29tcGF0aWJpbGl0eUNoZWNrIiwiU2V0IiwibWF0Y2giLCJtYWpvciIsIm1pbm9yIiwicGF0Y2giLCJwcmVyZWxlYXNlIiwiaXNFeGFjdG1hdGNoIiwiX3JlamVjdCIsImFkZCIsIl9hY2NlcHQiLCJoYXMiLCJtZXRyaWNzIiwiVmFsdWVUeXBlIiwiY3JlYXRlTm9vcE1ldGVyIiwiTk9PUF9PQlNFUlZBQkxFX1VQX0RPV05fQ09VTlRFUl9NRVRSSUMiLCJOT09QX09CU0VSVkFCTEVfR0FVR0VfTUVUUklDIiwiTk9PUF9PQlNFUlZBQkxFX0NPVU5URVJfTUVUUklDIiwiTk9PUF9VUF9ET1dOX0NPVU5URVJfTUVUUklDIiwiTk9PUF9ISVNUT0dSQU1fTUVUUklDIiwiTk9PUF9DT1VOVEVSX01FVFJJQyIsIk5PT1BfTUVURVIiLCJOb29wT2JzZXJ2YWJsZVVwRG93bkNvdW50ZXJNZXRyaWMiLCJOb29wT2JzZXJ2YWJsZUdhdWdlTWV0cmljIiwiTm9vcE9ic2VydmFibGVDb3VudGVyTWV0cmljIiwiTm9vcE9ic2VydmFibGVNZXRyaWMiLCJOb29wSGlzdG9ncmFtTWV0cmljIiwiTm9vcFVwRG93bkNvdW50ZXJNZXRyaWMiLCJOb29wQ291bnRlck1ldHJpYyIsIk5vb3BNZXRyaWMiLCJOb29wTWV0ZXIiLCJjcmVhdGVIaXN0b2dyYW0iLCJjcmVhdGVDb3VudGVyIiwiY3JlYXRlVXBEb3duQ291bnRlciIsImNyZWF0ZU9ic2VydmFibGVHYXVnZSIsImNyZWF0ZU9ic2VydmFibGVDb3VudGVyIiwiY3JlYXRlT2JzZXJ2YWJsZVVwRG93bkNvdW50ZXIiLCJhZGRCYXRjaE9ic2VydmFibGVDYWxsYmFjayIsInJlbW92ZUJhdGNoT2JzZXJ2YWJsZUNhbGxiYWNrIiwicmVjb3JkIiwiYWRkQ2FsbGJhY2siLCJyZW1vdmVDYWxsYmFjayIsIk5vb3BNZXRlclByb3ZpZGVyIiwiX19jcmVhdGVCaW5kaW5nIiwiY3JlYXRlIiwiZW51bWVyYWJsZSIsIl9fZXhwb3J0U3RhciIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiZ2xvYmFsVGhpcyIsImdsb2JhbCIsInByb3BhZ2F0aW9uIiwia2V5cyIsInRyYWNlIiwiTm9uUmVjb3JkaW5nU3BhbiIsIklOVkFMSURfU1BBTl9DT05URVhUIiwiX3NwYW5Db250ZXh0Iiwic3BhbkNvbnRleHQiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVzIiwiYWRkRXZlbnQiLCJzZXRTdGF0dXMiLCJ1cGRhdGVOYW1lIiwiZW5kIiwiaXNSZWNvcmRpbmciLCJyZWNvcmRFeGNlcHRpb24iLCJOb29wVHJhY2VyIiwic3RhcnRTcGFuIiwiQm9vbGVhbiIsInJvb3QiLCJpc1NwYW5Db250ZXh0Iiwic3RhcnRBY3RpdmVTcGFuIiwiYXJndW1lbnRzIiwiZyIsIk5vb3BUcmFjZXJQcm92aWRlciIsIlByb3h5VHJhY2VyIiwiX3Byb3ZpZGVyIiwibmFtZSIsIm9wdGlvbnMiLCJfZ2V0VHJhY2VyIiwiUmVmbGVjdCIsIl9kZWxlZ2F0ZSIsImdldERlbGVnYXRlVHJhY2VyIiwiZ2V0RGVsZWdhdGUiLCJTYW1wbGluZ0RlY2lzaW9uIiwiVHJhY2VTdGF0ZUltcGwiLCJfaW50ZXJuYWxTdGF0ZSIsIl9wYXJzZSIsIl9jbG9uZSIsInVuc2V0Iiwic2VyaWFsaXplIiwiX2tleXMiLCJyZWR1Y2UiLCJwdXNoIiwiam9pbiIsInJldmVyc2UiLCJ0cmltIiwiaW5kZXhPZiIsInNsaWNlIiwidmFsaWRhdGVLZXkiLCJ2YWxpZGF0ZVZhbHVlIiwic2l6ZSIsIlJlZ0V4cCIsInRlc3QiLCJjcmVhdGVUcmFjZVN0YXRlIiwiSU5WQUxJRF9UUkFDRUlEIiwiSU5WQUxJRF9TUEFOSUQiLCJ0cmFjZUlkIiwic3BhbklkIiwidHJhY2VGbGFncyIsIlRyYWNlRmxhZ3MiLCJTcGFuS2luZCIsImlzVmFsaWRTcGFuSWQiLCJpc1ZhbGlkVHJhY2VJZCIsIlNwYW5TdGF0dXNDb2RlIiwiX19uY2N3cGNrX3JlcXVpcmVfXyIsImV4cG9ydHMiLCJhYiIsIl9fZGlybmFtZSIsInAiLCJkIiwiXyIsImYiLCJiIiwidiIsIk8iLCJQIiwiTiIsIlMiLCJDIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/@opentelemetry/api/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/cookie/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/next/dist/compiled/cookie/index.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
eval("var __dirname = \"/\";\n\n\n(() => {\n  \"use strict\";\n\n  if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n  var e = {};\n  (() => {\n    var r = e;\n    /*!\n     * cookie\n     * Copyright(c) 2012-2014 Roman Shtylman\n     * Copyright(c) 2015 Douglas Christopher Wilson\n     * MIT Licensed\n     */\n    r.parse = parse;\n    r.serialize = serialize;\n    var i = decodeURIComponent;\n    var t = encodeURIComponent;\n    var a = /; */;\n    var n = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n    function parse(e, r) {\n      if (typeof e !== \"string\") {\n        throw new TypeError(\"argument str must be a string\");\n      }\n      var t = {};\n      var n = r || {};\n      var o = e.split(a);\n      var s = n.decode || i;\n      for (var p = 0; p < o.length; p++) {\n        var f = o[p];\n        var u = f.indexOf(\"=\");\n        if (u < 0) {\n          continue;\n        }\n        var v = f.substr(0, u).trim();\n        var c = f.substr(++u, f.length).trim();\n        if ('\"' == c[0]) {\n          c = c.slice(1, -1);\n        }\n        if (undefined == t[v]) {\n          t[v] = tryDecode(c, s);\n        }\n      }\n      return t;\n    }\n    function serialize(e, r, i) {\n      var a = i || {};\n      var o = a.encode || t;\n      if (typeof o !== \"function\") {\n        throw new TypeError(\"option encode is invalid\");\n      }\n      if (!n.test(e)) {\n        throw new TypeError(\"argument name is invalid\");\n      }\n      var s = o(r);\n      if (s && !n.test(s)) {\n        throw new TypeError(\"argument val is invalid\");\n      }\n      var p = e + \"=\" + s;\n      if (null != a.maxAge) {\n        var f = a.maxAge - 0;\n        if (isNaN(f) || !isFinite(f)) {\n          throw new TypeError(\"option maxAge is invalid\");\n        }\n        p += \"; Max-Age=\" + Math.floor(f);\n      }\n      if (a.domain) {\n        if (!n.test(a.domain)) {\n          throw new TypeError(\"option domain is invalid\");\n        }\n        p += \"; Domain=\" + a.domain;\n      }\n      if (a.path) {\n        if (!n.test(a.path)) {\n          throw new TypeError(\"option path is invalid\");\n        }\n        p += \"; Path=\" + a.path;\n      }\n      if (a.expires) {\n        if (typeof a.expires.toUTCString !== \"function\") {\n          throw new TypeError(\"option expires is invalid\");\n        }\n        p += \"; Expires=\" + a.expires.toUTCString();\n      }\n      if (a.httpOnly) {\n        p += \"; HttpOnly\";\n      }\n      if (a.secure) {\n        p += \"; Secure\";\n      }\n      if (a.sameSite) {\n        var u = typeof a.sameSite === \"string\" ? a.sameSite.toLowerCase() : a.sameSite;\n        switch (u) {\n          case true:\n            p += \"; SameSite=Strict\";\n            break;\n          case \"lax\":\n            p += \"; SameSite=Lax\";\n            break;\n          case \"strict\":\n            p += \"; SameSite=Strict\";\n            break;\n          case \"none\":\n            p += \"; SameSite=None\";\n            break;\n          default:\n            throw new TypeError(\"option sameSite is invalid\");\n        }\n      }\n      return p;\n    }\n    function tryDecode(e, r) {\n      try {\n        return r(e);\n      } catch (r) {\n        return e;\n      }\n    }\n  })();\n  module.exports = e;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/cookie/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/lru-cache/index.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/compiled/lru-cache/index.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
eval("var __dirname = \"/\";\n\n\n(() => {\n  \"use strict\";\n\n  var t = {\n    806: (t, e, i) => {\n      const s = i(190);\n      const n = Symbol(\"max\");\n      const l = Symbol(\"length\");\n      const r = Symbol(\"lengthCalculator\");\n      const h = Symbol(\"allowStale\");\n      const a = Symbol(\"maxAge\");\n      const o = Symbol(\"dispose\");\n      const u = Symbol(\"noDisposeOnSet\");\n      const f = Symbol(\"lruList\");\n      const p = Symbol(\"cache\");\n      const v = Symbol(\"updateAgeOnGet\");\n      const naiveLength = () => 1;\n      class LRUCache {\n        constructor(t) {\n          if (typeof t === \"number\") t = {\n            max: t\n          };\n          if (!t) t = {};\n          if (t.max && (typeof t.max !== \"number\" || t.max < 0)) throw new TypeError(\"max must be a non-negative number\");\n          const e = this[n] = t.max || Infinity;\n          const i = t.length || naiveLength;\n          this[r] = typeof i !== \"function\" ? naiveLength : i;\n          this[h] = t.stale || false;\n          if (t.maxAge && typeof t.maxAge !== \"number\") throw new TypeError(\"maxAge must be a number\");\n          this[a] = t.maxAge || 0;\n          this[o] = t.dispose;\n          this[u] = t.noDisposeOnSet || false;\n          this[v] = t.updateAgeOnGet || false;\n          this.reset();\n        }\n        set max(t) {\n          if (typeof t !== \"number\" || t < 0) throw new TypeError(\"max must be a non-negative number\");\n          this[n] = t || Infinity;\n          trim(this);\n        }\n        get max() {\n          return this[n];\n        }\n        set allowStale(t) {\n          this[h] = !!t;\n        }\n        get allowStale() {\n          return this[h];\n        }\n        set maxAge(t) {\n          if (typeof t !== \"number\") throw new TypeError(\"maxAge must be a non-negative number\");\n          this[a] = t;\n          trim(this);\n        }\n        get maxAge() {\n          return this[a];\n        }\n        set lengthCalculator(t) {\n          if (typeof t !== \"function\") t = naiveLength;\n          if (t !== this[r]) {\n            this[r] = t;\n            this[l] = 0;\n            this[f].forEach(t => {\n              t.length = this[r](t.value, t.key);\n              this[l] += t.length;\n            });\n          }\n          trim(this);\n        }\n        get lengthCalculator() {\n          return this[r];\n        }\n        get length() {\n          return this[l];\n        }\n        get itemCount() {\n          return this[f].length;\n        }\n        rforEach(t, e) {\n          e = e || this;\n          for (let i = this[f].tail; i !== null;) {\n            const s = i.prev;\n            forEachStep(this, t, i, e);\n            i = s;\n          }\n        }\n        forEach(t, e) {\n          e = e || this;\n          for (let i = this[f].head; i !== null;) {\n            const s = i.next;\n            forEachStep(this, t, i, e);\n            i = s;\n          }\n        }\n        keys() {\n          return this[f].toArray().map(t => t.key);\n        }\n        values() {\n          return this[f].toArray().map(t => t.value);\n        }\n        reset() {\n          if (this[o] && this[f] && this[f].length) {\n            this[f].forEach(t => this[o](t.key, t.value));\n          }\n          this[p] = new Map();\n          this[f] = new s();\n          this[l] = 0;\n        }\n        dump() {\n          return this[f].map(t => isStale(this, t) ? false : {\n            k: t.key,\n            v: t.value,\n            e: t.now + (t.maxAge || 0)\n          }).toArray().filter(t => t);\n        }\n        dumpLru() {\n          return this[f];\n        }\n        set(t, e, i) {\n          i = i || this[a];\n          if (i && typeof i !== \"number\") throw new TypeError(\"maxAge must be a number\");\n          const s = i ? Date.now() : 0;\n          const h = this[r](e, t);\n          if (this[p].has(t)) {\n            if (h > this[n]) {\n              del(this, this[p].get(t));\n              return false;\n            }\n            const r = this[p].get(t);\n            const a = r.value;\n            if (this[o]) {\n              if (!this[u]) this[o](t, a.value);\n            }\n            a.now = s;\n            a.maxAge = i;\n            a.value = e;\n            this[l] += h - a.length;\n            a.length = h;\n            this.get(t);\n            trim(this);\n            return true;\n          }\n          const v = new Entry(t, e, h, s, i);\n          if (v.length > this[n]) {\n            if (this[o]) this[o](t, e);\n            return false;\n          }\n          this[l] += v.length;\n          this[f].unshift(v);\n          this[p].set(t, this[f].head);\n          trim(this);\n          return true;\n        }\n        has(t) {\n          if (!this[p].has(t)) return false;\n          const e = this[p].get(t).value;\n          return !isStale(this, e);\n        }\n        get(t) {\n          return get(this, t, true);\n        }\n        peek(t) {\n          return get(this, t, false);\n        }\n        pop() {\n          const t = this[f].tail;\n          if (!t) return null;\n          del(this, t);\n          return t.value;\n        }\n        del(t) {\n          del(this, this[p].get(t));\n        }\n        load(t) {\n          this.reset();\n          const e = Date.now();\n          for (let i = t.length - 1; i >= 0; i--) {\n            const s = t[i];\n            const n = s.e || 0;\n            if (n === 0) this.set(s.k, s.v);else {\n              const t = n - e;\n              if (t > 0) {\n                this.set(s.k, s.v, t);\n              }\n            }\n          }\n        }\n        prune() {\n          this[p].forEach((t, e) => get(this, e, false));\n        }\n      }\n      const get = (t, e, i) => {\n        const s = t[p].get(e);\n        if (s) {\n          const e = s.value;\n          if (isStale(t, e)) {\n            del(t, s);\n            if (!t[h]) return undefined;\n          } else {\n            if (i) {\n              if (t[v]) s.value.now = Date.now();\n              t[f].unshiftNode(s);\n            }\n          }\n          return e.value;\n        }\n      };\n      const isStale = (t, e) => {\n        if (!e || !e.maxAge && !t[a]) return false;\n        const i = Date.now() - e.now;\n        return e.maxAge ? i > e.maxAge : t[a] && i > t[a];\n      };\n      const trim = t => {\n        if (t[l] > t[n]) {\n          for (let e = t[f].tail; t[l] > t[n] && e !== null;) {\n            const i = e.prev;\n            del(t, e);\n            e = i;\n          }\n        }\n      };\n      const del = (t, e) => {\n        if (e) {\n          const i = e.value;\n          if (t[o]) t[o](i.key, i.value);\n          t[l] -= i.length;\n          t[p].delete(i.key);\n          t[f].removeNode(e);\n        }\n      };\n      class Entry {\n        constructor(t, e, i, s, n) {\n          this.key = t;\n          this.value = e;\n          this.length = i;\n          this.now = s;\n          this.maxAge = n || 0;\n        }\n      }\n      const forEachStep = (t, e, i, s) => {\n        let n = i.value;\n        if (isStale(t, n)) {\n          del(t, i);\n          if (!t[h]) n = undefined;\n        }\n        if (n) e.call(s, n.value, n.key, t);\n      };\n      t.exports = LRUCache;\n    },\n    76: t => {\n      t.exports = function (t) {\n        t.prototype[Symbol.iterator] = function* () {\n          for (let t = this.head; t; t = t.next) {\n            yield t.value;\n          }\n        };\n      };\n    },\n    190: (t, e, i) => {\n      t.exports = Yallist;\n      Yallist.Node = Node;\n      Yallist.create = Yallist;\n      function Yallist(t) {\n        var e = this;\n        if (!(e instanceof Yallist)) {\n          e = new Yallist();\n        }\n        e.tail = null;\n        e.head = null;\n        e.length = 0;\n        if (t && typeof t.forEach === \"function\") {\n          t.forEach(function (t) {\n            e.push(t);\n          });\n        } else if (arguments.length > 0) {\n          for (var i = 0, s = arguments.length; i < s; i++) {\n            e.push(arguments[i]);\n          }\n        }\n        return e;\n      }\n      Yallist.prototype.removeNode = function (t) {\n        if (t.list !== this) {\n          throw new Error(\"removing node which does not belong to this list\");\n        }\n        var e = t.next;\n        var i = t.prev;\n        if (e) {\n          e.prev = i;\n        }\n        if (i) {\n          i.next = e;\n        }\n        if (t === this.head) {\n          this.head = e;\n        }\n        if (t === this.tail) {\n          this.tail = i;\n        }\n        t.list.length--;\n        t.next = null;\n        t.prev = null;\n        t.list = null;\n        return e;\n      };\n      Yallist.prototype.unshiftNode = function (t) {\n        if (t === this.head) {\n          return;\n        }\n        if (t.list) {\n          t.list.removeNode(t);\n        }\n        var e = this.head;\n        t.list = this;\n        t.next = e;\n        if (e) {\n          e.prev = t;\n        }\n        this.head = t;\n        if (!this.tail) {\n          this.tail = t;\n        }\n        this.length++;\n      };\n      Yallist.prototype.pushNode = function (t) {\n        if (t === this.tail) {\n          return;\n        }\n        if (t.list) {\n          t.list.removeNode(t);\n        }\n        var e = this.tail;\n        t.list = this;\n        t.prev = e;\n        if (e) {\n          e.next = t;\n        }\n        this.tail = t;\n        if (!this.head) {\n          this.head = t;\n        }\n        this.length++;\n      };\n      Yallist.prototype.push = function () {\n        for (var t = 0, e = arguments.length; t < e; t++) {\n          push(this, arguments[t]);\n        }\n        return this.length;\n      };\n      Yallist.prototype.unshift = function () {\n        for (var t = 0, e = arguments.length; t < e; t++) {\n          unshift(this, arguments[t]);\n        }\n        return this.length;\n      };\n      Yallist.prototype.pop = function () {\n        if (!this.tail) {\n          return undefined;\n        }\n        var t = this.tail.value;\n        this.tail = this.tail.prev;\n        if (this.tail) {\n          this.tail.next = null;\n        } else {\n          this.head = null;\n        }\n        this.length--;\n        return t;\n      };\n      Yallist.prototype.shift = function () {\n        if (!this.head) {\n          return undefined;\n        }\n        var t = this.head.value;\n        this.head = this.head.next;\n        if (this.head) {\n          this.head.prev = null;\n        } else {\n          this.tail = null;\n        }\n        this.length--;\n        return t;\n      };\n      Yallist.prototype.forEach = function (t, e) {\n        e = e || this;\n        for (var i = this.head, s = 0; i !== null; s++) {\n          t.call(e, i.value, s, this);\n          i = i.next;\n        }\n      };\n      Yallist.prototype.forEachReverse = function (t, e) {\n        e = e || this;\n        for (var i = this.tail, s = this.length - 1; i !== null; s--) {\n          t.call(e, i.value, s, this);\n          i = i.prev;\n        }\n      };\n      Yallist.prototype.get = function (t) {\n        for (var e = 0, i = this.head; i !== null && e < t; e++) {\n          i = i.next;\n        }\n        if (e === t && i !== null) {\n          return i.value;\n        }\n      };\n      Yallist.prototype.getReverse = function (t) {\n        for (var e = 0, i = this.tail; i !== null && e < t; e++) {\n          i = i.prev;\n        }\n        if (e === t && i !== null) {\n          return i.value;\n        }\n      };\n      Yallist.prototype.map = function (t, e) {\n        e = e || this;\n        var i = new Yallist();\n        for (var s = this.head; s !== null;) {\n          i.push(t.call(e, s.value, this));\n          s = s.next;\n        }\n        return i;\n      };\n      Yallist.prototype.mapReverse = function (t, e) {\n        e = e || this;\n        var i = new Yallist();\n        for (var s = this.tail; s !== null;) {\n          i.push(t.call(e, s.value, this));\n          s = s.prev;\n        }\n        return i;\n      };\n      Yallist.prototype.reduce = function (t, e) {\n        var i;\n        var s = this.head;\n        if (arguments.length > 1) {\n          i = e;\n        } else if (this.head) {\n          s = this.head.next;\n          i = this.head.value;\n        } else {\n          throw new TypeError(\"Reduce of empty list with no initial value\");\n        }\n        for (var n = 0; s !== null; n++) {\n          i = t(i, s.value, n);\n          s = s.next;\n        }\n        return i;\n      };\n      Yallist.prototype.reduceReverse = function (t, e) {\n        var i;\n        var s = this.tail;\n        if (arguments.length > 1) {\n          i = e;\n        } else if (this.tail) {\n          s = this.tail.prev;\n          i = this.tail.value;\n        } else {\n          throw new TypeError(\"Reduce of empty list with no initial value\");\n        }\n        for (var n = this.length - 1; s !== null; n--) {\n          i = t(i, s.value, n);\n          s = s.prev;\n        }\n        return i;\n      };\n      Yallist.prototype.toArray = function () {\n        var t = new Array(this.length);\n        for (var e = 0, i = this.head; i !== null; e++) {\n          t[e] = i.value;\n          i = i.next;\n        }\n        return t;\n      };\n      Yallist.prototype.toArrayReverse = function () {\n        var t = new Array(this.length);\n        for (var e = 0, i = this.tail; i !== null; e++) {\n          t[e] = i.value;\n          i = i.prev;\n        }\n        return t;\n      };\n      Yallist.prototype.slice = function (t, e) {\n        e = e || this.length;\n        if (e < 0) {\n          e += this.length;\n        }\n        t = t || 0;\n        if (t < 0) {\n          t += this.length;\n        }\n        var i = new Yallist();\n        if (e < t || e < 0) {\n          return i;\n        }\n        if (t < 0) {\n          t = 0;\n        }\n        if (e > this.length) {\n          e = this.length;\n        }\n        for (var s = 0, n = this.head; n !== null && s < t; s++) {\n          n = n.next;\n        }\n        for (; n !== null && s < e; s++, n = n.next) {\n          i.push(n.value);\n        }\n        return i;\n      };\n      Yallist.prototype.sliceReverse = function (t, e) {\n        e = e || this.length;\n        if (e < 0) {\n          e += this.length;\n        }\n        t = t || 0;\n        if (t < 0) {\n          t += this.length;\n        }\n        var i = new Yallist();\n        if (e < t || e < 0) {\n          return i;\n        }\n        if (t < 0) {\n          t = 0;\n        }\n        if (e > this.length) {\n          e = this.length;\n        }\n        for (var s = this.length, n = this.tail; n !== null && s > e; s--) {\n          n = n.prev;\n        }\n        for (; n !== null && s > t; s--, n = n.prev) {\n          i.push(n.value);\n        }\n        return i;\n      };\n      Yallist.prototype.splice = function (t, e) {\n        if (t > this.length) {\n          t = this.length - 1;\n        }\n        if (t < 0) {\n          t = this.length + t;\n        }\n        for (var i = 0, s = this.head; s !== null && i < t; i++) {\n          s = s.next;\n        }\n        var n = [];\n        for (var i = 0; s && i < e; i++) {\n          n.push(s.value);\n          s = this.removeNode(s);\n        }\n        if (s === null) {\n          s = this.tail;\n        }\n        if (s !== this.head && s !== this.tail) {\n          s = s.prev;\n        }\n        for (var i = 2; i < arguments.length; i++) {\n          s = insert(this, s, arguments[i]);\n        }\n        return n;\n      };\n      Yallist.prototype.reverse = function () {\n        var t = this.head;\n        var e = this.tail;\n        for (var i = t; i !== null; i = i.prev) {\n          var s = i.prev;\n          i.prev = i.next;\n          i.next = s;\n        }\n        this.head = e;\n        this.tail = t;\n        return this;\n      };\n      function insert(t, e, i) {\n        var s = e === t.head ? new Node(i, null, e, t) : new Node(i, e, e.next, t);\n        if (s.next === null) {\n          t.tail = s;\n        }\n        if (s.prev === null) {\n          t.head = s;\n        }\n        t.length++;\n        return s;\n      }\n      function push(t, e) {\n        t.tail = new Node(e, t.tail, null, t);\n        if (!t.head) {\n          t.head = t.tail;\n        }\n        t.length++;\n      }\n      function unshift(t, e) {\n        t.head = new Node(e, null, t.head, t);\n        if (!t.tail) {\n          t.tail = t.head;\n        }\n        t.length++;\n      }\n      function Node(t, e, i, s) {\n        if (!(this instanceof Node)) {\n          return new Node(t, e, i, s);\n        }\n        this.list = s;\n        this.value = t;\n        if (e) {\n          e.next = this;\n          this.prev = e;\n        } else {\n          this.prev = null;\n        }\n        if (i) {\n          i.prev = this;\n          this.next = i;\n        } else {\n          this.next = null;\n        }\n      }\n      try {\n        i(76)(Yallist);\n      } catch (t) {}\n    }\n  };\n  var e = {};\n  function __nccwpck_require__(i) {\n    var s = e[i];\n    if (s !== undefined) {\n      return s.exports;\n    }\n    var n = e[i] = {\n      exports: {}\n    };\n    var l = true;\n    try {\n      t[i](n, n.exports, __nccwpck_require__);\n      l = false;\n    } finally {\n      if (l) delete e[i];\n    }\n    return n.exports;\n  }\n  if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n  var i = __nccwpck_require__(806);\n  module.exports = i;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/lru-cache/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/native-url/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/next/dist/compiled/native-url/index.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("var __dirname = \"/\";\n\n\n(function () {\n  var e = {\n    452: function (e) {\n      \"use strict\";\n\n      e.exports = __webpack_require__(/*! next/dist/compiled/querystring-es3 */ \"(rsc)/./node_modules/next/dist/compiled/querystring-es3/index.js\");\n    }\n  };\n  var t = {};\n  function __nccwpck_require__(o) {\n    var a = t[o];\n    if (a !== undefined) {\n      return a.exports;\n    }\n    var s = t[o] = {\n      exports: {}\n    };\n    var n = true;\n    try {\n      e[o](s, s.exports, __nccwpck_require__);\n      n = false;\n    } finally {\n      if (n) delete t[o];\n    }\n    return s.exports;\n  }\n  if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n  var o = {};\n  !function () {\n    var e = o;\n    var t,\n      a = (t = __nccwpck_require__(452)) && \"object\" == typeof t && \"default\" in t ? t.default : t,\n      s = /https?|ftp|gopher|file/;\n    function r(e) {\n      \"string\" == typeof e && (e = d(e));\n      var t = function (e, t, o) {\n        var a = e.auth,\n          s = e.hostname,\n          n = e.protocol || \"\",\n          p = e.pathname || \"\",\n          c = e.hash || \"\",\n          i = e.query || \"\",\n          u = !1;\n        a = a ? encodeURIComponent(a).replace(/%3A/i, \":\") + \"@\" : \"\", e.host ? u = a + e.host : s && (u = a + (~s.indexOf(\":\") ? \"[\" + s + \"]\" : s), e.port && (u += \":\" + e.port)), i && \"object\" == typeof i && (i = t.encode(i));\n        var f = e.search || i && \"?\" + i || \"\";\n        return n && \":\" !== n.substr(-1) && (n += \":\"), e.slashes || (!n || o.test(n)) && !1 !== u ? (u = \"//\" + (u || \"\"), p && \"/\" !== p[0] && (p = \"/\" + p)) : u || (u = \"\"), c && \"#\" !== c[0] && (c = \"#\" + c), f && \"?\" !== f[0] && (f = \"?\" + f), {\n          protocol: n,\n          host: u,\n          pathname: p = p.replace(/[?#]/g, encodeURIComponent),\n          search: f = f.replace(\"#\", \"%23\"),\n          hash: c\n        };\n      }(e, a, s);\n      return \"\" + t.protocol + t.host + t.pathname + t.search + t.hash;\n    }\n    var n = \"http://\",\n      p = \"w.w\",\n      c = n + p,\n      i = /^([a-z0-9.+-]*:\\/\\/\\/)([a-z0-9.+-]:\\/*)?/i,\n      u = /https?|ftp|gopher|file/;\n    function h(e, t) {\n      var o = \"string\" == typeof e ? d(e) : e;\n      e = \"object\" == typeof e ? r(e) : e;\n      var a = d(t),\n        s = \"\";\n      o.protocol && !o.slashes && (s = o.protocol, e = e.replace(o.protocol, \"\"), s += \"/\" === t[0] || \"/\" === e[0] ? \"/\" : \"\"), s && a.protocol && (s = \"\", a.slashes || (s = a.protocol, t = t.replace(a.protocol, \"\")));\n      var p = e.match(i);\n      p && !a.protocol && (e = e.substr((s = p[1] + (p[2] || \"\")).length), /^\\/\\/[^/]/.test(t) && (s = s.slice(0, -1)));\n      var f = new URL(e, c + \"/\"),\n        m = new URL(t, f).toString().replace(c, \"\"),\n        v = a.protocol || o.protocol;\n      return v += o.slashes || a.slashes ? \"//\" : \"\", !s && v ? m = m.replace(n, v) : s && (m = m.replace(n, \"\")), u.test(m) || ~t.indexOf(\".\") || \"/\" === e.slice(-1) || \"/\" === t.slice(-1) || \"/\" !== m.slice(-1) || (m = m.slice(0, -1)), s && (m = s + (\"/\" === m[0] ? m.substr(1) : m)), m;\n    }\n    function l() {}\n    l.prototype.parse = d, l.prototype.format = r, l.prototype.resolve = h, l.prototype.resolveObject = h;\n    var f = /^https?|ftp|gopher|file/,\n      m = /^(.*?)([#?].*)/,\n      v = /^([a-z0-9.+-]*:)(\\/{0,3})(.*)/i,\n      _ = /^([a-z0-9.+-]*:)?\\/\\/\\/*/i,\n      b = /^([a-z0-9.+-]*:)(\\/{0,2})\\[(.*)\\]$/i;\n    function d(e, t, o) {\n      if (void 0 === t && (t = !1), void 0 === o && (o = !1), e && \"object\" == typeof e && e instanceof l) return e;\n      var s = (e = e.trim()).match(m);\n      e = s ? s[1].replace(/\\\\/g, \"/\") + s[2] : e.replace(/\\\\/g, \"/\"), b.test(e) && \"/\" !== e.slice(-1) && (e += \"/\");\n      var n = !/(^javascript)/.test(e) && e.match(v),\n        i = _.test(e),\n        u = \"\";\n      n && (f.test(n[1]) || (u = n[1].toLowerCase(), e = \"\" + n[2] + n[3]), n[2] || (i = !1, f.test(n[1]) ? (u = n[1], e = \"\" + n[3]) : e = \"//\" + n[3]), 3 !== n[2].length && 1 !== n[2].length || (u = n[1], e = \"/\" + n[3]));\n      var g,\n        y = (s ? s[1] : e).match(/^https?:\\/\\/[^/]+(:[0-9]+)(?=\\/|$)/),\n        w = y && y[1],\n        x = new l(),\n        C = \"\",\n        U = \"\";\n      try {\n        g = new URL(e);\n      } catch (t) {\n        C = t, u || o || !/^\\/\\//.test(e) || /^\\/\\/.+[@.]/.test(e) || (U = \"/\", e = e.substr(1));\n        try {\n          g = new URL(e, c);\n        } catch (e) {\n          return x.protocol = u, x.href = u, x;\n        }\n      }\n      x.slashes = i && !U, x.host = g.host === p ? \"\" : g.host, x.hostname = g.hostname === p ? \"\" : g.hostname.replace(/(\\[|\\])/g, \"\"), x.protocol = C ? u || null : g.protocol, x.search = g.search.replace(/\\\\/g, \"%5C\"), x.hash = g.hash.replace(/\\\\/g, \"%5C\");\n      var j = e.split(\"#\");\n      !x.search && ~j[0].indexOf(\"?\") && (x.search = \"?\"), x.hash || \"\" !== j[1] || (x.hash = \"#\"), x.query = t ? a.decode(g.search.substr(1)) : x.search.substr(1), x.pathname = U + (n ? function (e) {\n        return e.replace(/['^|`]/g, function (e) {\n          return \"%\" + e.charCodeAt().toString(16).toUpperCase();\n        }).replace(/((?:%[0-9A-F]{2})+)/g, function (e, t) {\n          try {\n            return decodeURIComponent(t).split(\"\").map(function (e) {\n              var t = e.charCodeAt();\n              return t > 256 || /^[a-z0-9]$/i.test(e) ? e : \"%\" + t.toString(16).toUpperCase();\n            }).join(\"\");\n          } catch (e) {\n            return t;\n          }\n        });\n      }(g.pathname) : g.pathname), \"about:\" === x.protocol && \"blank\" === x.pathname && (x.protocol = \"\", x.pathname = \"\"), C && \"/\" !== e[0] && (x.pathname = x.pathname.substr(1)), u && !f.test(u) && \"/\" !== e.slice(-1) && \"/\" === x.pathname && (x.pathname = \"\"), x.path = x.pathname + x.search, x.auth = [g.username, g.password].map(decodeURIComponent).filter(Boolean).join(\":\"), x.port = g.port, w && !x.host.endsWith(w) && (x.host += w, x.port = w.slice(1)), x.href = U ? \"\" + x.pathname + x.search + x.hash : r(x);\n      var q = /^(file)/.test(x.href) ? [\"host\", \"hostname\"] : [];\n      return Object.keys(x).forEach(function (e) {\n        ~q.indexOf(e) || (x[e] = x[e] || null);\n      }), x;\n    }\n    e.parse = d, e.format = r, e.resolve = h, e.resolveObject = function (e, t) {\n      return d(h(e, t));\n    }, e.Url = l;\n  }();\n  module.exports = o;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/native-url/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/path-browserify/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/path-browserify/index.js ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
eval("var __dirname = \"/\";\n\n\n(function () {\n  \"use strict\";\n\n  var e = {\n    114: function (e) {\n      function assertPath(e) {\n        if (typeof e !== \"string\") {\n          throw new TypeError(\"Path must be a string. Received \" + JSON.stringify(e));\n        }\n      }\n      function normalizeStringPosix(e, r) {\n        var t = \"\";\n        var i = 0;\n        var n = -1;\n        var a = 0;\n        var f;\n        for (var l = 0; l <= e.length; ++l) {\n          if (l < e.length) f = e.charCodeAt(l);else if (f === 47) break;else f = 47;\n          if (f === 47) {\n            if (n === l - 1 || a === 1) {} else if (n !== l - 1 && a === 2) {\n              if (t.length < 2 || i !== 2 || t.charCodeAt(t.length - 1) !== 46 || t.charCodeAt(t.length - 2) !== 46) {\n                if (t.length > 2) {\n                  var s = t.lastIndexOf(\"/\");\n                  if (s !== t.length - 1) {\n                    if (s === -1) {\n                      t = \"\";\n                      i = 0;\n                    } else {\n                      t = t.slice(0, s);\n                      i = t.length - 1 - t.lastIndexOf(\"/\");\n                    }\n                    n = l;\n                    a = 0;\n                    continue;\n                  }\n                } else if (t.length === 2 || t.length === 1) {\n                  t = \"\";\n                  i = 0;\n                  n = l;\n                  a = 0;\n                  continue;\n                }\n              }\n              if (r) {\n                if (t.length > 0) t += \"/..\";else t = \"..\";\n                i = 2;\n              }\n            } else {\n              if (t.length > 0) t += \"/\" + e.slice(n + 1, l);else t = e.slice(n + 1, l);\n              i = l - n - 1;\n            }\n            n = l;\n            a = 0;\n          } else if (f === 46 && a !== -1) {\n            ++a;\n          } else {\n            a = -1;\n          }\n        }\n        return t;\n      }\n      function _format(e, r) {\n        var t = r.dir || r.root;\n        var i = r.base || (r.name || \"\") + (r.ext || \"\");\n        if (!t) {\n          return i;\n        }\n        if (t === r.root) {\n          return t + i;\n        }\n        return t + e + i;\n      }\n      var r = {\n        resolve: function resolve() {\n          var e = \"\";\n          var r = false;\n          var t;\n          for (var i = arguments.length - 1; i >= -1 && !r; i--) {\n            var n;\n            if (i >= 0) n = arguments[i];else {\n              if (t === undefined) t = \"\";\n              n = t;\n            }\n            assertPath(n);\n            if (n.length === 0) {\n              continue;\n            }\n            e = n + \"/\" + e;\n            r = n.charCodeAt(0) === 47;\n          }\n          e = normalizeStringPosix(e, !r);\n          if (r) {\n            if (e.length > 0) return \"/\" + e;else return \"/\";\n          } else if (e.length > 0) {\n            return e;\n          } else {\n            return \".\";\n          }\n        },\n        normalize: function normalize(e) {\n          assertPath(e);\n          if (e.length === 0) return \".\";\n          var r = e.charCodeAt(0) === 47;\n          var t = e.charCodeAt(e.length - 1) === 47;\n          e = normalizeStringPosix(e, !r);\n          if (e.length === 0 && !r) e = \".\";\n          if (e.length > 0 && t) e += \"/\";\n          if (r) return \"/\" + e;\n          return e;\n        },\n        isAbsolute: function isAbsolute(e) {\n          assertPath(e);\n          return e.length > 0 && e.charCodeAt(0) === 47;\n        },\n        join: function join() {\n          if (arguments.length === 0) return \".\";\n          var e;\n          for (var t = 0; t < arguments.length; ++t) {\n            var i = arguments[t];\n            assertPath(i);\n            if (i.length > 0) {\n              if (e === undefined) e = i;else e += \"/\" + i;\n            }\n          }\n          if (e === undefined) return \".\";\n          return r.normalize(e);\n        },\n        relative: function relative(e, t) {\n          assertPath(e);\n          assertPath(t);\n          if (e === t) return \"\";\n          e = r.resolve(e);\n          t = r.resolve(t);\n          if (e === t) return \"\";\n          var i = 1;\n          for (; i < e.length; ++i) {\n            if (e.charCodeAt(i) !== 47) break;\n          }\n          var n = e.length;\n          var a = n - i;\n          var f = 1;\n          for (; f < t.length; ++f) {\n            if (t.charCodeAt(f) !== 47) break;\n          }\n          var l = t.length;\n          var s = l - f;\n          var o = a < s ? a : s;\n          var u = -1;\n          var h = 0;\n          for (; h <= o; ++h) {\n            if (h === o) {\n              if (s > o) {\n                if (t.charCodeAt(f + h) === 47) {\n                  return t.slice(f + h + 1);\n                } else if (h === 0) {\n                  return t.slice(f + h);\n                }\n              } else if (a > o) {\n                if (e.charCodeAt(i + h) === 47) {\n                  u = h;\n                } else if (h === 0) {\n                  u = 0;\n                }\n              }\n              break;\n            }\n            var c = e.charCodeAt(i + h);\n            var v = t.charCodeAt(f + h);\n            if (c !== v) break;else if (c === 47) u = h;\n          }\n          var g = \"\";\n          for (h = i + u + 1; h <= n; ++h) {\n            if (h === n || e.charCodeAt(h) === 47) {\n              if (g.length === 0) g += \"..\";else g += \"/..\";\n            }\n          }\n          if (g.length > 0) return g + t.slice(f + u);else {\n            f += u;\n            if (t.charCodeAt(f) === 47) ++f;\n            return t.slice(f);\n          }\n        },\n        _makeLong: function _makeLong(e) {\n          return e;\n        },\n        dirname: function dirname(e) {\n          assertPath(e);\n          if (e.length === 0) return \".\";\n          var r = e.charCodeAt(0);\n          var t = r === 47;\n          var i = -1;\n          var n = true;\n          for (var a = e.length - 1; a >= 1; --a) {\n            r = e.charCodeAt(a);\n            if (r === 47) {\n              if (!n) {\n                i = a;\n                break;\n              }\n            } else {\n              n = false;\n            }\n          }\n          if (i === -1) return t ? \"/\" : \".\";\n          if (t && i === 1) return \"//\";\n          return e.slice(0, i);\n        },\n        basename: function basename(e, r) {\n          if (r !== undefined && typeof r !== \"string\") throw new TypeError('\"ext\" argument must be a string');\n          assertPath(e);\n          var t = 0;\n          var i = -1;\n          var n = true;\n          var a;\n          if (r !== undefined && r.length > 0 && r.length <= e.length) {\n            if (r.length === e.length && r === e) return \"\";\n            var f = r.length - 1;\n            var l = -1;\n            for (a = e.length - 1; a >= 0; --a) {\n              var s = e.charCodeAt(a);\n              if (s === 47) {\n                if (!n) {\n                  t = a + 1;\n                  break;\n                }\n              } else {\n                if (l === -1) {\n                  n = false;\n                  l = a + 1;\n                }\n                if (f >= 0) {\n                  if (s === r.charCodeAt(f)) {\n                    if (--f === -1) {\n                      i = a;\n                    }\n                  } else {\n                    f = -1;\n                    i = l;\n                  }\n                }\n              }\n            }\n            if (t === i) i = l;else if (i === -1) i = e.length;\n            return e.slice(t, i);\n          } else {\n            for (a = e.length - 1; a >= 0; --a) {\n              if (e.charCodeAt(a) === 47) {\n                if (!n) {\n                  t = a + 1;\n                  break;\n                }\n              } else if (i === -1) {\n                n = false;\n                i = a + 1;\n              }\n            }\n            if (i === -1) return \"\";\n            return e.slice(t, i);\n          }\n        },\n        extname: function extname(e) {\n          assertPath(e);\n          var r = -1;\n          var t = 0;\n          var i = -1;\n          var n = true;\n          var a = 0;\n          for (var f = e.length - 1; f >= 0; --f) {\n            var l = e.charCodeAt(f);\n            if (l === 47) {\n              if (!n) {\n                t = f + 1;\n                break;\n              }\n              continue;\n            }\n            if (i === -1) {\n              n = false;\n              i = f + 1;\n            }\n            if (l === 46) {\n              if (r === -1) r = f;else if (a !== 1) a = 1;\n            } else if (r !== -1) {\n              a = -1;\n            }\n          }\n          if (r === -1 || i === -1 || a === 0 || a === 1 && r === i - 1 && r === t + 1) {\n            return \"\";\n          }\n          return e.slice(r, i);\n        },\n        format: function format(e) {\n          if (e === null || typeof e !== \"object\") {\n            throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof e);\n          }\n          return _format(\"/\", e);\n        },\n        parse: function parse(e) {\n          assertPath(e);\n          var r = {\n            root: \"\",\n            dir: \"\",\n            base: \"\",\n            ext: \"\",\n            name: \"\"\n          };\n          if (e.length === 0) return r;\n          var t = e.charCodeAt(0);\n          var i = t === 47;\n          var n;\n          if (i) {\n            r.root = \"/\";\n            n = 1;\n          } else {\n            n = 0;\n          }\n          var a = -1;\n          var f = 0;\n          var l = -1;\n          var s = true;\n          var o = e.length - 1;\n          var u = 0;\n          for (; o >= n; --o) {\n            t = e.charCodeAt(o);\n            if (t === 47) {\n              if (!s) {\n                f = o + 1;\n                break;\n              }\n              continue;\n            }\n            if (l === -1) {\n              s = false;\n              l = o + 1;\n            }\n            if (t === 46) {\n              if (a === -1) a = o;else if (u !== 1) u = 1;\n            } else if (a !== -1) {\n              u = -1;\n            }\n          }\n          if (a === -1 || l === -1 || u === 0 || u === 1 && a === l - 1 && a === f + 1) {\n            if (l !== -1) {\n              if (f === 0 && i) r.base = r.name = e.slice(1, l);else r.base = r.name = e.slice(f, l);\n            }\n          } else {\n            if (f === 0 && i) {\n              r.name = e.slice(1, a);\n              r.base = e.slice(1, l);\n            } else {\n              r.name = e.slice(f, a);\n              r.base = e.slice(f, l);\n            }\n            r.ext = e.slice(a, l);\n          }\n          if (f > 0) r.dir = e.slice(0, f - 1);else if (i) r.dir = \"/\";\n          return r;\n        },\n        sep: \"/\",\n        delimiter: \":\",\n        win32: null,\n        posix: null\n      };\n      r.posix = r;\n      e.exports = r;\n    }\n  };\n  var r = {};\n  function __nccwpck_require__(t) {\n    var i = r[t];\n    if (i !== undefined) {\n      return i.exports;\n    }\n    var n = r[t] = {\n      exports: {}\n    };\n    var a = true;\n    try {\n      e[t](n, n.exports, __nccwpck_require__);\n      a = false;\n    } finally {\n      if (a) delete r[t];\n    }\n    return n.exports;\n  }\n  if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n  var t = __nccwpck_require__(114);\n  module.exports = t;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/path-browserify/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/path-to-regexp/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/compiled/path-to-regexp/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/**\n * Tokenize input string.\n */\nfunction lexer(str) {\n  var tokens = [];\n  var i = 0;\n  while (i < str.length) {\n    var char = str[i];\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({\n        type: \"MODIFIER\",\n        index: i,\n        value: str[i++]\n      });\n      continue;\n    }\n    if (char === \"\\\\\") {\n      tokens.push({\n        type: \"ESCAPED_CHAR\",\n        index: i++,\n        value: str[i++]\n      });\n      continue;\n    }\n    if (char === \"{\") {\n      tokens.push({\n        type: \"OPEN\",\n        index: i,\n        value: str[i++]\n      });\n      continue;\n    }\n    if (char === \"}\") {\n      tokens.push({\n        type: \"CLOSE\",\n        index: i,\n        value: str[i++]\n      });\n      continue;\n    }\n    if (char === \":\") {\n      var name = \"\";\n      var j = i + 1;\n      while (j < str.length) {\n        var code = str.charCodeAt(j);\n        if (\n        // `0-9`\n        code >= 48 && code <= 57 ||\n        // `A-Z`\n        code >= 65 && code <= 90 ||\n        // `a-z`\n        code >= 97 && code <= 122 ||\n        // `_`\n        code === 95) {\n          name += str[j++];\n          continue;\n        }\n        break;\n      }\n      if (!name) throw new TypeError(\"Missing parameter name at \" + i);\n      tokens.push({\n        type: \"NAME\",\n        index: i,\n        value: name\n      });\n      i = j;\n      continue;\n    }\n    if (char === \"(\") {\n      var count = 1;\n      var pattern = \"\";\n      var j = i + 1;\n      if (str[j] === \"?\") {\n        throw new TypeError(\"Pattern cannot start with \\\"?\\\" at \" + j);\n      }\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(\"Capturing groups are not allowed at \" + j);\n          }\n        }\n        pattern += str[j++];\n      }\n      if (count) throw new TypeError(\"Unbalanced pattern at \" + i);\n      if (!pattern) throw new TypeError(\"Missing pattern at \" + i);\n      tokens.push({\n        type: \"PATTERN\",\n        index: i,\n        value: pattern\n      });\n      i = j;\n      continue;\n    }\n    tokens.push({\n      type: \"CHAR\",\n      index: i,\n      value: str[i++]\n    });\n  }\n  tokens.push({\n    type: \"END\",\n    index: i,\n    value: \"\"\n  });\n  return tokens;\n}\n/**\n * Parse a string for the raw tokens.\n */\nfunction parse(str, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var tokens = lexer(str);\n  var _a = options.prefixes,\n    prefixes = _a === void 0 ? \"./\" : _a;\n  var defaultPattern = \"[^\" + escapeString(options.delimiter || \"/#?\") + \"]+?\";\n  var result = [];\n  var key = 0;\n  var i = 0;\n  var path = \"\";\n  var tryConsume = function (type) {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n  var mustConsume = function (type) {\n    var value = tryConsume(type);\n    if (value !== undefined) return value;\n    var _a = tokens[i],\n      nextType = _a.type,\n      index = _a.index;\n    throw new TypeError(\"Unexpected \" + nextType + \" at \" + index + \", expected \" + type);\n  };\n  var consumeText = function () {\n    var result = \"\";\n    var value;\n    // tslint:disable-next-line\n    while (value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\")) {\n      result += value;\n    }\n    return result;\n  };\n  while (i < tokens.length) {\n    var char = tryConsume(\"CHAR\");\n    var name = tryConsume(\"NAME\");\n    var pattern = tryConsume(\"PATTERN\");\n    if (name || pattern) {\n      var prefix = char || \"\";\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n      result.push({\n        name: name || key++,\n        prefix: prefix,\n        suffix: \"\",\n        pattern: pattern || defaultPattern,\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n    var value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n    var open = tryConsume(\"OPEN\");\n    if (open) {\n      var prefix = consumeText();\n      var name_1 = tryConsume(\"NAME\") || \"\";\n      var pattern_1 = tryConsume(\"PATTERN\") || \"\";\n      var suffix = consumeText();\n      mustConsume(\"CLOSE\");\n      result.push({\n        name: name_1 || (pattern_1 ? key++ : \"\"),\n        pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,\n        prefix: prefix,\n        suffix: suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n    mustConsume(\"END\");\n  }\n  return result;\n}\nexports.parse = parse;\n/**\n * Compile a string to a template function for the path.\n */\nfunction compile(str, options) {\n  return tokensToFunction(parse(str, options), options);\n}\nexports.compile = compile;\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction(tokens, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var reFlags = flags(options);\n  var _a = options.encode,\n    encode = _a === void 0 ? function (x) {\n      return x;\n    } : _a,\n    _b = options.validate,\n    validate = _b === void 0 ? true : _b;\n  // Compile all the tokens into regexps.\n  var matches = tokens.map(function (token) {\n    if (typeof token === \"object\") {\n      return new RegExp(\"^(?:\" + token.pattern + \")$\", reFlags);\n    }\n  });\n  return function (data) {\n    var path = \"\";\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n      var value = data ? data[token.name] : undefined;\n      var optional = token.modifier === \"?\" || token.modifier === \"*\";\n      var repeat = token.modifier === \"*\" || token.modifier === \"+\";\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to not repeat, but got an array\");\n        }\n        if (value.length === 0) {\n          if (optional) continue;\n          throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to not be empty\");\n        }\n        for (var j = 0; j < value.length; j++) {\n          var segment = encode(value[j], token);\n          if (validate && !matches[i].test(segment)) {\n            throw new TypeError(\"Expected all \\\"\" + token.name + \"\\\" to match \\\"\" + token.pattern + \"\\\", but got \\\"\" + segment + \"\\\"\");\n          }\n          path += token.prefix + segment + token.suffix;\n        }\n        continue;\n      }\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        var segment = encode(String(value), token);\n        if (validate && !matches[i].test(segment)) {\n          throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to match \\\"\" + token.pattern + \"\\\", but got \\\"\" + segment + \"\\\"\");\n        }\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n      if (optional) continue;\n      var typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to be \" + typeOfMessage);\n    }\n    return path;\n  };\n}\nexports.tokensToFunction = tokensToFunction;\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nfunction match(str, options) {\n  var keys = [];\n  var re = pathToRegexp(str, keys, options);\n  return regexpToFunction(re, keys, options);\n}\nexports.match = match;\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nfunction regexpToFunction(re, keys, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _a = options.decode,\n    decode = _a === void 0 ? function (x) {\n      return x;\n    } : _a;\n  return function (pathname) {\n    var m = re.exec(pathname);\n    if (!m) return false;\n    var path = m[0],\n      index = m.index;\n    var params = Object.create(null);\n    var _loop_1 = function (i) {\n      // tslint:disable-next-line\n      if (m[i] === undefined) return \"continue\";\n      var key = keys[i - 1];\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map(function (value) {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    };\n    for (var i = 1; i < m.length; i++) {\n      _loop_1(i);\n    }\n    return {\n      path: path,\n      index: index,\n      params: params\n    };\n  };\n}\nexports.regexpToFunction = regexpToFunction;\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path, keys) {\n  if (!keys) return path;\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g);\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: \"\",\n        suffix: \"\",\n        modifier: \"\",\n        pattern: \"\"\n      });\n    }\n  }\n  return path;\n}\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(paths, keys, options) {\n  var parts = paths.map(function (path) {\n    return pathToRegexp(path, keys, options).source;\n  });\n  return new RegExp(\"(?:\" + parts.join(\"|\") + \")\", flags(options));\n}\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(path, keys, options) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nfunction tokensToRegexp(tokens, keys, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _a = options.strict,\n    strict = _a === void 0 ? false : _a,\n    _b = options.start,\n    start = _b === void 0 ? true : _b,\n    _c = options.end,\n    end = _c === void 0 ? true : _c,\n    _d = options.encode,\n    encode = _d === void 0 ? function (x) {\n      return x;\n    } : _d;\n  var endsWith = \"[\" + escapeString(options.endsWith || \"\") + \"]|$\";\n  var delimiter = \"[\" + escapeString(options.delimiter || \"/#?\") + \"]\";\n  var route = start ? \"^\" : \"\";\n  // Iterate over the tokens and create our regexp string.\n  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n    var token = tokens_1[_i];\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      var prefix = escapeString(encode(token.prefix));\n      var suffix = escapeString(encode(token.suffix));\n      if (token.pattern) {\n        if (keys) keys.push(token);\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            var mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += \"(?:\" + prefix + \"((?:\" + token.pattern + \")(?:\" + suffix + prefix + \"(?:\" + token.pattern + \"))*)\" + suffix + \")\" + mod;\n          } else {\n            route += \"(?:\" + prefix + \"(\" + token.pattern + \")\" + suffix + \")\" + token.modifier;\n          }\n        } else {\n          route += \"(\" + token.pattern + \")\" + token.modifier;\n        }\n      } else {\n        route += \"(?:\" + prefix + suffix + \")\" + token.modifier;\n      }\n    }\n  }\n  if (end) {\n    if (!strict) route += delimiter + \"?\";\n    route += !options.endsWith ? \"$\" : \"(?=\" + endsWith + \")\";\n  } else {\n    var endToken = tokens[tokens.length - 1];\n    var isEndDelimited = typeof endToken === \"string\" ? delimiter.indexOf(endToken[endToken.length - 1]) > -1 :\n    // tslint:disable-next-line\n    endToken === undefined;\n    if (!strict) {\n      route += \"(?:\" + delimiter + \"(?=\" + endsWith + \"))?\";\n    }\n    if (!isEndDelimited) {\n      route += \"(?=\" + delimiter + \"|\" + endsWith + \")\";\n    }\n  }\n  return new RegExp(route, flags(options));\n}\nexports.tokensToRegexp = tokensToRegexp;\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nfunction pathToRegexp(path, keys, options) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\nexports.pathToRegexp = pathToRegexp;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/path-to-regexp/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/querystring-es3/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/querystring-es3/index.js ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
eval("var __dirname = \"/\";\n\n\n(function () {\n  \"use strict\";\n\n  var e = {\n    815: function (e) {\n      function hasOwnProperty(e, r) {\n        return Object.prototype.hasOwnProperty.call(e, r);\n      }\n      e.exports = function (e, n, t, o) {\n        n = n || \"&\";\n        t = t || \"=\";\n        var a = {};\n        if (typeof e !== \"string\" || e.length === 0) {\n          return a;\n        }\n        var i = /\\+/g;\n        e = e.split(n);\n        var u = 1e3;\n        if (o && typeof o.maxKeys === \"number\") {\n          u = o.maxKeys;\n        }\n        var c = e.length;\n        if (u > 0 && c > u) {\n          c = u;\n        }\n        for (var p = 0; p < c; ++p) {\n          var f = e[p].replace(i, \"%20\"),\n            s = f.indexOf(t),\n            _,\n            l,\n            y,\n            d;\n          if (s >= 0) {\n            _ = f.substr(0, s);\n            l = f.substr(s + 1);\n          } else {\n            _ = f;\n            l = \"\";\n          }\n          y = decodeURIComponent(_);\n          d = decodeURIComponent(l);\n          if (!hasOwnProperty(a, y)) {\n            a[y] = d;\n          } else if (r(a[y])) {\n            a[y].push(d);\n          } else {\n            a[y] = [a[y], d];\n          }\n        }\n        return a;\n      };\n      var r = Array.isArray || function (e) {\n        return Object.prototype.toString.call(e) === \"[object Array]\";\n      };\n    },\n    577: function (e) {\n      var stringifyPrimitive = function (e) {\n        switch (typeof e) {\n          case \"string\":\n            return e;\n          case \"boolean\":\n            return e ? \"true\" : \"false\";\n          case \"number\":\n            return isFinite(e) ? e : \"\";\n          default:\n            return \"\";\n        }\n      };\n      e.exports = function (e, t, o, a) {\n        t = t || \"&\";\n        o = o || \"=\";\n        if (e === null) {\n          e = undefined;\n        }\n        if (typeof e === \"object\") {\n          return map(n(e), function (n) {\n            var a = encodeURIComponent(stringifyPrimitive(n)) + o;\n            if (r(e[n])) {\n              return map(e[n], function (e) {\n                return a + encodeURIComponent(stringifyPrimitive(e));\n              }).join(t);\n            } else {\n              return a + encodeURIComponent(stringifyPrimitive(e[n]));\n            }\n          }).join(t);\n        }\n        if (!a) return \"\";\n        return encodeURIComponent(stringifyPrimitive(a)) + o + encodeURIComponent(stringifyPrimitive(e));\n      };\n      var r = Array.isArray || function (e) {\n        return Object.prototype.toString.call(e) === \"[object Array]\";\n      };\n      function map(e, r) {\n        if (e.map) return e.map(r);\n        var n = [];\n        for (var t = 0; t < e.length; t++) {\n          n.push(r(e[t], t));\n        }\n        return n;\n      }\n      var n = Object.keys || function (e) {\n        var r = [];\n        for (var n in e) {\n          if (Object.prototype.hasOwnProperty.call(e, n)) r.push(n);\n        }\n        return r;\n      };\n    }\n  };\n  var r = {};\n  function __nccwpck_require__(n) {\n    var t = r[n];\n    if (t !== undefined) {\n      return t.exports;\n    }\n    var o = r[n] = {\n      exports: {}\n    };\n    var a = true;\n    try {\n      e[n](o, o.exports, __nccwpck_require__);\n      a = false;\n    } finally {\n      if (a) delete r[n];\n    }\n    return o.exports;\n  }\n  if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n  var n = {};\n  !function () {\n    var e = n;\n    e.decode = e.parse = __nccwpck_require__(815);\n    e.encode = e.stringify = __nccwpck_require__(577);\n  }();\n  module.exports = n;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/querystring-es3/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server-rendering-stub.development.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server-rendering-stub.development.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/**\n * @license React\n * react-dom-server-rendering-stub.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function () {\n    'use strict';\n\n    var React = __webpack_require__(/*! next/dist/compiled/react */ \"(rsc)/./node_modules/next/dist/compiled/react/index.js\");\n    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n    function error(format) {\n      {\n        {\n          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            args[_key2 - 1] = arguments[_key2];\n          }\n          printWarning('error', format, args);\n        }\n      }\n    }\n    function printWarning(level, format, args) {\n      // When changing this logic, you might want to also\n      // update consoleWithStackDev.www.js as well.\n      {\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var stack = ReactDebugCurrentFrame.getStackAddendum();\n        if (stack !== '') {\n          format += '%s';\n          args = args.concat([stack]);\n        } // eslint-disable-next-line react-internal/safe-string-coercion\n\n        var argsWithFormat = args.map(function (item) {\n          return String(item);\n        }); // Careful: RN currently depends on this prefix\n\n        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n        // breaks IE9: https://github.com/facebook/react/issues/13610\n        // eslint-disable-next-line react-internal/no-production-logging\n\n        Function.prototype.apply.call(console[level], console, argsWithFormat);\n      }\n    }\n    var ReactVersion = '18.3.0-canary-60a927d04-20240113';\n    var Internals = {\n      usingClientEntryPoint: false,\n      Events: null,\n      Dispatcher: {\n        current: null\n      }\n    };\n    function getCrossOriginString(input) {\n      if (typeof input === 'string') {\n        return input === 'use-credentials' ? input : '';\n      }\n      return undefined;\n    }\n    function getCrossOriginStringAs(as, input) {\n      if (as === 'font') {\n        return '';\n      }\n      if (typeof input === 'string') {\n        return input === 'use-credentials' ? input : '';\n      }\n      return undefined;\n    }\n    var Dispatcher = Internals.Dispatcher;\n    function prefetchDNS(href) {\n      {\n        if (typeof href !== 'string' || !href) {\n          error('ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.', getValueDescriptorExpectingObjectForWarning(href));\n        } else if (arguments.length > 1) {\n          var options = arguments[1];\n          if (typeof options === 'object' && options.hasOwnProperty('crossOrigin')) {\n            error('ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.', getValueDescriptorExpectingEnumForWarning(options));\n          } else {\n            error('ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.', getValueDescriptorExpectingEnumForWarning(options));\n          }\n        }\n      }\n      var dispatcher = Dispatcher.current;\n      if (dispatcher && typeof href === 'string') {\n        dispatcher.prefetchDNS(href);\n      } // We don't error because preconnect needs to be resilient to being called in a variety of scopes\n      // and the runtime may not be capable of responding. The function is optimistic and not critical\n      // so we favor silent bailout over warning or erroring.\n    }\n\n    function preconnect(href, options) {\n      {\n        if (typeof href !== 'string' || !href) {\n          error('ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.', getValueDescriptorExpectingObjectForWarning(href));\n        } else if (options != null && typeof options !== 'object') {\n          error('ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.', getValueDescriptorExpectingEnumForWarning(options));\n        } else if (options != null && typeof options.crossOrigin !== 'string') {\n          error('ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.', getValueDescriptorExpectingObjectForWarning(options.crossOrigin));\n        }\n      }\n      var dispatcher = Dispatcher.current;\n      if (dispatcher && typeof href === 'string') {\n        var crossOrigin = options ? getCrossOriginString(options.crossOrigin) : null;\n        dispatcher.preconnect(href, crossOrigin);\n      } // We don't error because preconnect needs to be resilient to being called in a variety of scopes\n      // and the runtime may not be capable of responding. The function is optimistic and not critical\n      // so we favor silent bailout over warning or erroring.\n    }\n\n    function preload(href, options) {\n      {\n        var encountered = '';\n        if (typeof href !== 'string' || !href) {\n          encountered += \" The `href` argument encountered was \" + getValueDescriptorExpectingObjectForWarning(href) + \".\";\n        }\n        if (options == null || typeof options !== 'object') {\n          encountered += \" The `options` argument encountered was \" + getValueDescriptorExpectingObjectForWarning(options) + \".\";\n        } else if (typeof options.as !== 'string' || !options.as) {\n          encountered += \" The `as` option encountered was \" + getValueDescriptorExpectingObjectForWarning(options.as) + \".\";\n        }\n        if (encountered) {\n          error('ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel=\"preload\" as=\"...\" />` tag.%s', encountered);\n        }\n      }\n      var dispatcher = Dispatcher.current;\n      if (dispatcher && typeof href === 'string' &&\n      // We check existence because we cannot enforce this function is actually called with the stated type\n      typeof options === 'object' && options !== null && typeof options.as === 'string') {\n        var as = options.as;\n        var crossOrigin = getCrossOriginStringAs(as, options.crossOrigin);\n        dispatcher.preload(href, as, {\n          crossOrigin: crossOrigin,\n          integrity: typeof options.integrity === 'string' ? options.integrity : undefined,\n          nonce: typeof options.nonce === 'string' ? options.nonce : undefined,\n          type: typeof options.type === 'string' ? options.type : undefined,\n          fetchPriority: typeof options.fetchPriority === 'string' ? options.fetchPriority : undefined,\n          referrerPolicy: typeof options.referrerPolicy === 'string' ? options.referrerPolicy : undefined,\n          imageSrcSet: typeof options.imageSrcSet === 'string' ? options.imageSrcSet : undefined,\n          imageSizes: typeof options.imageSizes === 'string' ? options.imageSizes : undefined\n        });\n      } // We don't error because preload needs to be resilient to being called in a variety of scopes\n      // and the runtime may not be capable of responding. The function is optimistic and not critical\n      // so we favor silent bailout over warning or erroring.\n    }\n\n    function preloadModule(href, options) {\n      {\n        var encountered = '';\n        if (typeof href !== 'string' || !href) {\n          encountered += \" The `href` argument encountered was \" + getValueDescriptorExpectingObjectForWarning(href) + \".\";\n        }\n        if (options !== undefined && typeof options !== 'object') {\n          encountered += \" The `options` argument encountered was \" + getValueDescriptorExpectingObjectForWarning(options) + \".\";\n        } else if (options && 'as' in options && typeof options.as !== 'string') {\n          encountered += \" The `as` option encountered was \" + getValueDescriptorExpectingObjectForWarning(options.as) + \".\";\n        }\n        if (encountered) {\n          error('ReactDOM.preloadModule(): Expected two arguments, a non-empty `href` string and, optionally, an `options` object with an `as` property valid for a `<link rel=\"modulepreload\" as=\"...\" />` tag.%s', encountered);\n        }\n      }\n      var dispatcher = Dispatcher.current;\n      if (dispatcher && typeof href === 'string') {\n        if (options) {\n          var crossOrigin = getCrossOriginStringAs(options.as, options.crossOrigin);\n          dispatcher.preloadModule(href, {\n            as: typeof options.as === 'string' && options.as !== 'script' ? options.as : undefined,\n            crossOrigin: crossOrigin,\n            integrity: typeof options.integrity === 'string' ? options.integrity : undefined\n          });\n        } else {\n          dispatcher.preloadModule(href);\n        }\n      } // We don't error because preload needs to be resilient to being called in a variety of scopes\n      // and the runtime may not be capable of responding. The function is optimistic and not critical\n      // so we favor silent bailout over warning or erroring.\n    }\n\n    function preinit(href, options) {\n      {\n        if (typeof href !== 'string' || !href) {\n          error('ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.', getValueDescriptorExpectingObjectForWarning(href));\n        } else if (options == null || typeof options !== 'object') {\n          error('ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.', getValueDescriptorExpectingEnumForWarning(options));\n        } else if (options.as !== 'style' && options.as !== 'script') {\n          error('ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are \"style\" and \"script\".', getValueDescriptorExpectingEnumForWarning(options.as));\n        }\n      }\n      var dispatcher = Dispatcher.current;\n      if (dispatcher && typeof href === 'string' && options && typeof options.as === 'string') {\n        var as = options.as;\n        var crossOrigin = getCrossOriginStringAs(as, options.crossOrigin);\n        var integrity = typeof options.integrity === 'string' ? options.integrity : undefined;\n        var fetchPriority = typeof options.fetchPriority === 'string' ? options.fetchPriority : undefined;\n        if (as === 'style') {\n          dispatcher.preinitStyle(href, typeof options.precedence === 'string' ? options.precedence : undefined, {\n            crossOrigin: crossOrigin,\n            integrity: integrity,\n            fetchPriority: fetchPriority\n          });\n        } else if (as === 'script') {\n          dispatcher.preinitScript(href, {\n            crossOrigin: crossOrigin,\n            integrity: integrity,\n            fetchPriority: fetchPriority,\n            nonce: typeof options.nonce === 'string' ? options.nonce : undefined\n          });\n        }\n      } // We don't error because preinit needs to be resilient to being called in a variety of scopes\n      // and the runtime may not be capable of responding. The function is optimistic and not critical\n      // so we favor silent bailout over warning or erroring.\n    }\n\n    function preinitModule(href, options) {\n      {\n        var encountered = '';\n        if (typeof href !== 'string' || !href) {\n          encountered += \" The `href` argument encountered was \" + getValueDescriptorExpectingObjectForWarning(href) + \".\";\n        }\n        if (options !== undefined && typeof options !== 'object') {\n          encountered += \" The `options` argument encountered was \" + getValueDescriptorExpectingObjectForWarning(options) + \".\";\n        } else if (options && 'as' in options && options.as !== 'script') {\n          encountered += \" The `as` option encountered was \" + getValueDescriptorExpectingEnumForWarning(options.as) + \".\";\n        }\n        if (encountered) {\n          error('ReactDOM.preinitModule(): Expected up to two arguments, a non-empty `href` string and, optionally, an `options` object with a valid `as` property.%s', encountered);\n        } else {\n          var as = options && typeof options.as === 'string' ? options.as : 'script';\n          switch (as) {\n            case 'script':\n              {\n                break;\n              }\n            // We have an invalid as type and need to warn\n\n            default:\n              {\n                var typeOfAs = getValueDescriptorExpectingEnumForWarning(as);\n                error('ReactDOM.preinitModule(): Currently the only supported \"as\" type for this function is \"script\"' + ' but received \"%s\" instead. This warning was generated for `href` \"%s\". In the future other' + ' module types will be supported, aligning with the import-attributes proposal. Learn more here:' + ' (https://github.com/tc39/proposal-import-attributes)', typeOfAs, href);\n              }\n          }\n        }\n      }\n      var dispatcher = Dispatcher.current;\n      if (dispatcher && typeof href === 'string') {\n        if (typeof options === 'object' && options !== null) {\n          if (options.as == null || options.as === 'script') {\n            var crossOrigin = getCrossOriginStringAs(options.as, options.crossOrigin);\n            dispatcher.preinitModuleScript(href, {\n              crossOrigin: crossOrigin,\n              integrity: typeof options.integrity === 'string' ? options.integrity : undefined,\n              nonce: typeof options.nonce === 'string' ? options.nonce : undefined\n            });\n          }\n        } else if (options == null) {\n          dispatcher.preinitModuleScript(href);\n        }\n      } // We don't error because preinit needs to be resilient to being called in a variety of scopes\n      // and the runtime may not be capable of responding. The function is optimistic and not critical\n      // so we favor silent bailout over warning or erroring.\n    }\n\n    function getValueDescriptorExpectingObjectForWarning(thing) {\n      return thing === null ? '`null`' : thing === undefined ? '`undefined`' : thing === '' ? 'an empty string' : \"something with type \\\"\" + typeof thing + \"\\\"\";\n    }\n    function getValueDescriptorExpectingEnumForWarning(thing) {\n      return thing === null ? '`null`' : thing === undefined ? '`undefined`' : thing === '' ? 'an empty string' : typeof thing === 'string' ? JSON.stringify(thing) : typeof thing === 'number' ? '`' + thing + '`' : \"something with type \\\"\" + typeof thing + \"\\\"\";\n    }\n    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher; // Since the \"not pending\" value is always the same, we can reuse the\n\n    function resolveDispatcher() {\n      // Copied from react/src/ReactHooks.js. It's the same thing but in a\n      // different package.\n      var dispatcher = ReactCurrentDispatcher.current;\n      {\n        if (dispatcher === null) {\n          error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\n        }\n      } // Will result in a null access error if accessed outside render phase. We\n      // intentionally don't throw our own error because this is in a hot path.\n      // Also helps ensure this is inlined.\n\n      return dispatcher;\n    }\n    function useFormStatus() {\n      {\n        var dispatcher = resolveDispatcher(); // $FlowFixMe[not-a-function] We know this exists because of the feature check above.\n\n        return dispatcher.useHostTransitionStatus();\n      }\n    }\n    function useFormState(action, initialState, permalink) {\n      {\n        var dispatcher = resolveDispatcher(); // $FlowFixMe[not-a-function] This is unstable, thus optional\n\n        return dispatcher.useFormState(action, initialState, permalink);\n      }\n    }\n    function createPortal() {\n      throw new Error('createPortal was called on the server. Portals are not currently' + ' supported on the server. Update your program to conditionally call' + ' createPortal on the client only.');\n    }\n    function flushSync() {\n      throw new Error('flushSync was called on the server. This is likely caused by a' + ' function being called during render or in module scope that was' + ' intended to be called from an effect or event handler. Update your' + ' to not call flushSync no the server.');\n    } // on the server we just call the callback because there is\n    // not update mechanism. Really this should not be called on the\n    // server but since the semantics are generally clear enough we\n    // can provide this trivial implementation.\n\n    function batchedUpdates(fn, a) {\n      return fn(a);\n    }\n    function experimental_useFormStatus() {\n      {\n        error('useFormStatus is now in canary. Remove the experimental_ prefix. ' + 'The prefixed alias will be removed in an upcoming release.');\n      }\n      return useFormStatus();\n    }\n    function experimental_useFormState(action, initialState, permalink) {\n      {\n        error('useFormState is now in canary. Remove the experimental_ prefix. ' + 'The prefixed alias will be removed in an upcoming release.');\n      }\n      return useFormState(action, initialState, permalink);\n    }\n    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;\n    exports.createPortal = createPortal;\n    exports.experimental_useFormState = experimental_useFormState;\n    exports.experimental_useFormStatus = experimental_useFormStatus;\n    exports.flushSync = flushSync;\n    exports.preconnect = preconnect;\n    exports.prefetchDNS = prefetchDNS;\n    exports.preinit = preinit;\n    exports.preinitModule = preinitModule;\n    exports.preload = preload;\n    exports.preloadModule = preloadModule;\n    exports.unstable_batchedUpdates = batchedUpdates;\n    exports.useFormState = useFormState;\n    exports.useFormStatus = useFormStatus;\n    exports.version = ReactVersion;\n  })();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server-rendering-stub.development.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/react-dom/server-rendering-stub.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-dom/server-rendering-stub.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-dom-server-rendering-stub.development.js */ \"(rsc)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server-rendering-stub.development.js\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0LWRvbS9zZXJ2ZXItcmVuZGVyaW5nLXN0dWIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSSxPQUF1QyxFQUUxQyxNQUFNO0VBQ0xBLHdNQUFnRjtBQUNsRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0LWRvbS9zZXJ2ZXItcmVuZGVyaW5nLXN0dWIuanM/ZGZhYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLXNlcnZlci1yZW5kZXJpbmctc3R1Yi5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20tc2VydmVyLXJlbmRlcmluZy1zdHViLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react-dom/server-rendering-stub.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.edge.development.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.edge.development.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/**\n * @license React\n * react-server-dom-webpack-server.edge.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        var React = __webpack_require__(/*! react */ \"(rsc)/./node_modules/next/dist/compiled/react/react.shared-subset.js\");\n        var ReactDOM = __webpack_require__(/*! react-dom */ \"(rsc)/./node_modules/next/dist/compiled/react-dom/server-rendering-stub.js\");\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        // -----------------------------------------------------------------------------\n        var enablePostpone = false;\n        function scheduleWork(callback) {\n            setTimeout(callback, 0);\n        }\n        var VIEW_SIZE = 512;\n        var currentView = null;\n        var writtenBytes = 0;\n        function beginWriting(destination) {\n            currentView = new Uint8Array(VIEW_SIZE);\n            writtenBytes = 0;\n        }\n        function writeChunk(destination, chunk) {\n            if (chunk.byteLength === 0) {\n                return;\n            }\n            if (chunk.byteLength > VIEW_SIZE) {\n                {\n                    if (precomputedChunkSet.has(chunk)) {\n                        error(\"A large precomputed chunk was passed to writeChunk without being copied.\" + \" Large chunks get enqueued directly and are not copied. This is incompatible with precomputed chunks because you cannot enqueue the same precomputed chunk twice.\" + ' Use \"cloneChunk\" to make a copy of this large precomputed chunk before writing it. This is a bug in React.');\n                    }\n                }\n                // one that is cached by the streaming renderer. We will enqueu\n                // it directly and expect it is not re-used\n                if (writtenBytes > 0) {\n                    destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes));\n                    currentView = new Uint8Array(VIEW_SIZE);\n                    writtenBytes = 0;\n                }\n                destination.enqueue(chunk);\n                return;\n            }\n            var bytesToWrite = chunk;\n            var allowableBytes = currentView.length - writtenBytes;\n            if (allowableBytes < bytesToWrite.byteLength) {\n                // this chunk would overflow the current view. We enqueue a full view\n                // and start a new view with the remaining chunk\n                if (allowableBytes === 0) {\n                    // the current view is already full, send it\n                    destination.enqueue(currentView);\n                } else {\n                    // fill up the current view and apply the remaining chunk bytes\n                    // to a new view.\n                    currentView.set(bytesToWrite.subarray(0, allowableBytes), writtenBytes); // writtenBytes += allowableBytes; // this can be skipped because we are going to immediately reset the view\n                    destination.enqueue(currentView);\n                    bytesToWrite = bytesToWrite.subarray(allowableBytes);\n                }\n                currentView = new Uint8Array(VIEW_SIZE);\n                writtenBytes = 0;\n            }\n            currentView.set(bytesToWrite, writtenBytes);\n            writtenBytes += bytesToWrite.byteLength;\n        }\n        function writeChunkAndReturn(destination, chunk) {\n            writeChunk(destination, chunk); // in web streams there is no backpressure so we can alwas write more\n            return true;\n        }\n        function completeWriting(destination) {\n            if (currentView && writtenBytes > 0) {\n                destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes));\n                currentView = null;\n                writtenBytes = 0;\n            }\n        }\n        function close$1(destination) {\n            destination.close();\n        }\n        var textEncoder = new TextEncoder();\n        function stringToChunk(content) {\n            return textEncoder.encode(content);\n        }\n        var precomputedChunkSet = new Set();\n        function byteLengthOfChunk(chunk) {\n            return chunk.byteLength;\n        }\n        function closeWithError(destination, error) {\n            // $FlowFixMe[method-unbinding]\n            if (typeof destination.error === \"function\") {\n                // $FlowFixMe[incompatible-call]: This is an Error object or the destination accepts other types.\n                destination.error(error);\n            } else {\n                // Earlier implementations doesn't support this method. In that environment you're\n                // supposed to throw from a promise returned but we don't return a promise in our\n                // approach. We could fork this implementation but this is environment is an edge\n                // case to begin with. It's even less common to run this in an older environment.\n                // Even then, this is not where errors are supposed to happen and they get reported\n                // to a global callback in addition to this anyway. So it's fine just to close this.\n                destination.close();\n            }\n        }\n        // eslint-disable-next-line no-unused-vars\n        var CLIENT_REFERENCE_TAG = Symbol.for(\"react.client.reference\");\n        var SERVER_REFERENCE_TAG = Symbol.for(\"react.server.reference\");\n        function isClientReference(reference) {\n            return reference.$$typeof === CLIENT_REFERENCE_TAG;\n        }\n        function isServerReference(reference) {\n            return reference.$$typeof === SERVER_REFERENCE_TAG;\n        }\n        function registerClientReference(proxyImplementation, id, exportName) {\n            return registerClientReferenceImpl(proxyImplementation, id + \"#\" + exportName, false);\n        }\n        function registerClientReferenceImpl(proxyImplementation, id, async) {\n            return Object.defineProperties(proxyImplementation, {\n                $$typeof: {\n                    value: CLIENT_REFERENCE_TAG\n                },\n                $$id: {\n                    value: id\n                },\n                $$async: {\n                    value: async\n                }\n            });\n        } // $FlowFixMe[method-unbinding]\n        var FunctionBind = Function.prototype.bind; // $FlowFixMe[method-unbinding]\n        var ArraySlice = Array.prototype.slice;\n        function bind() {\n            // $FlowFixMe[unsupported-syntax]\n            var newFn = FunctionBind.apply(this, arguments);\n            if (this.$$typeof === SERVER_REFERENCE_TAG) {\n                var args = ArraySlice.call(arguments, 1);\n                return Object.defineProperties(newFn, {\n                    $$typeof: {\n                        value: SERVER_REFERENCE_TAG\n                    },\n                    $$id: {\n                        value: this.$$id\n                    },\n                    $$bound: {\n                        value: this.$$bound ? this.$$bound.concat(args) : args\n                    },\n                    bind: {\n                        value: bind\n                    }\n                });\n            }\n            return newFn;\n        }\n        function registerServerReference(reference, id, exportName) {\n            return Object.defineProperties(reference, {\n                $$typeof: {\n                    value: SERVER_REFERENCE_TAG\n                },\n                $$id: {\n                    value: exportName === null ? id : id + \"#\" + exportName\n                },\n                $$bound: {\n                    value: null\n                },\n                bind: {\n                    value: bind\n                }\n            });\n        }\n        var PROMISE_PROTOTYPE = Promise.prototype;\n        var deepProxyHandlers = {\n            get: function(target, name, receiver) {\n                switch(name){\n                    // These names are read by the Flight runtime if you end up using the exports object.\n                    case \"$$typeof\":\n                        // These names are a little too common. We should probably have a way to\n                        // have the Flight runtime extract the inner target instead.\n                        return target.$$typeof;\n                    case \"$$id\":\n                        return target.$$id;\n                    case \"$$async\":\n                        return target.$$async;\n                    case \"name\":\n                        return target.name;\n                    case \"displayName\":\n                        return undefined;\n                    // We need to special case this because createElement reads it if we pass this\n                    // reference.\n                    case \"defaultProps\":\n                        return undefined;\n                    // Avoid this attempting to be serialized.\n                    case \"toJSON\":\n                        return undefined;\n                    case Symbol.toPrimitive:\n                        // $FlowFixMe[prop-missing]\n                        return Object.prototype[Symbol.toPrimitive];\n                    case \"Provider\":\n                        throw new Error(\"Cannot render a Client Context Provider on the Server. \" + \"Instead, you can export a Client Component wrapper \" + \"that itself renders a Client Context Provider.\");\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var expression = String(target.name) + \".\" + String(name);\n                throw new Error(\"Cannot access \" + expression + \" on the server. \" + \"You cannot dot into a client module from a server component. \" + \"You can only pass the imported name through.\");\n            },\n            set: function() {\n                throw new Error(\"Cannot assign to a client module from a server module.\");\n            }\n        };\n        function getReference(target, name) {\n            switch(name){\n                // These names are read by the Flight runtime if you end up using the exports object.\n                case \"$$typeof\":\n                    return target.$$typeof;\n                case \"$$id\":\n                    return target.$$id;\n                case \"$$async\":\n                    return target.$$async;\n                case \"name\":\n                    return target.name;\n                // We need to special case this because createElement reads it if we pass this\n                // reference.\n                case \"defaultProps\":\n                    return undefined;\n                // Avoid this attempting to be serialized.\n                case \"toJSON\":\n                    return undefined;\n                case Symbol.toPrimitive:\n                    // $FlowFixMe[prop-missing]\n                    return Object.prototype[Symbol.toPrimitive];\n                case \"__esModule\":\n                    // Something is conditionally checking which export to use. We'll pretend to be\n                    // an ESM compat module but then we'll check again on the client.\n                    var moduleId = target.$$id;\n                    target.default = registerClientReferenceImpl(function() {\n                        throw new Error(\"Attempted to call the default export of \" + moduleId + \" from the server \" + \"but it's on the client. It's not possible to invoke a client function from \" + \"the server, it can only be rendered as a Component or passed to props of a \" + \"Client Component.\");\n                    }, target.$$id + \"#\", target.$$async);\n                    return true;\n                case \"then\":\n                    if (target.then) {\n                        // Use a cached value\n                        return target.then;\n                    }\n                    if (!target.$$async) {\n                        // If this module is expected to return a Promise (such as an AsyncModule) then\n                        // we should resolve that with a client reference that unwraps the Promise on\n                        // the client.\n                        var clientReference = registerClientReferenceImpl({}, target.$$id, true);\n                        var proxy = new Proxy(clientReference, proxyHandlers); // Treat this as a resolved Promise for React's use()\n                        target.status = \"fulfilled\";\n                        target.value = proxy;\n                        var then = target.then = registerClientReferenceImpl(function then(resolve, reject) {\n                            // Expose to React.\n                            return Promise.resolve(resolve(proxy));\n                        }, // If this is not used as a Promise but is treated as a reference to a `.then`\n                        // export then we should treat it as a reference to that name.\n                        target.$$id + \"#then\", false);\n                        return then;\n                    } else {\n                        // Since typeof .then === 'function' is a feature test we'd continue recursing\n                        // indefinitely if we return a function. Instead, we return an object reference\n                        // if we check further.\n                        return undefined;\n                    }\n            }\n            var cachedReference = target[name];\n            if (!cachedReference) {\n                var reference = registerClientReferenceImpl(function() {\n                    throw new Error(// eslint-disable-next-line react-internal/safe-string-coercion\n                    \"Attempted to call \" + String(name) + \"() from the server but \" + String(name) + \" is on the client. \" + \"It's not possible to invoke a client function from the server, it can \" + \"only be rendered as a Component or passed to props of a Client Component.\");\n                }, target.$$id + \"#\" + name, target.$$async);\n                Object.defineProperty(reference, \"name\", {\n                    value: name\n                });\n                cachedReference = target[name] = new Proxy(reference, deepProxyHandlers);\n            }\n            return cachedReference;\n        }\n        var proxyHandlers = {\n            get: function(target, name, receiver) {\n                return getReference(target, name);\n            },\n            getOwnPropertyDescriptor: function(target, name) {\n                var descriptor = Object.getOwnPropertyDescriptor(target, name);\n                if (!descriptor) {\n                    descriptor = {\n                        value: getReference(target, name),\n                        writable: false,\n                        configurable: false,\n                        enumerable: false\n                    };\n                    Object.defineProperty(target, name, descriptor);\n                }\n                return descriptor;\n            },\n            getPrototypeOf: function(target) {\n                // Pretend to be a Promise in case anyone asks.\n                return PROMISE_PROTOTYPE;\n            },\n            set: function() {\n                throw new Error(\"Cannot assign to a client module from a server module.\");\n            }\n        };\n        function createClientModuleProxy(moduleId) {\n            var clientReference = registerClientReferenceImpl({}, // Represents the whole Module object instead of a particular import.\n            moduleId, false);\n            return new Proxy(clientReference, proxyHandlers);\n        }\n        function getClientReferenceKey(reference) {\n            return reference.$$async ? reference.$$id + \"#async\" : reference.$$id;\n        }\n        function resolveClientReferenceMetadata(config, clientReference) {\n            var modulePath = clientReference.$$id;\n            var name = \"\";\n            var resolvedModuleData = config[modulePath];\n            if (resolvedModuleData) {\n                // The potentially aliased name.\n                name = resolvedModuleData.name;\n            } else {\n                // We didn't find this specific export name but we might have the * export\n                // which contains this name as well.\n                // TODO: It's unfortunate that we now have to parse this string. We should\n                // probably go back to encoding path and name separately on the client reference.\n                var idx = modulePath.lastIndexOf(\"#\");\n                if (idx !== -1) {\n                    name = modulePath.slice(idx + 1);\n                    resolvedModuleData = config[modulePath.slice(0, idx)];\n                }\n                if (!resolvedModuleData) {\n                    throw new Error('Could not find the module \"' + modulePath + '\" in the React Client Manifest. ' + \"This is probably a bug in the React Server Components bundler.\");\n                }\n            }\n            if (clientReference.$$async === true) {\n                return [\n                    resolvedModuleData.id,\n                    resolvedModuleData.chunks,\n                    name,\n                    1\n                ];\n            } else {\n                return [\n                    resolvedModuleData.id,\n                    resolvedModuleData.chunks,\n                    name\n                ];\n            }\n        }\n        function getServerReferenceId(config, serverReference) {\n            return serverReference.$$id;\n        }\n        function getServerReferenceBoundArguments(config, serverReference) {\n            return serverReference.$$bound;\n        }\n        var ReactDOMSharedInternals = ReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        var ReactDOMFlightServerDispatcher = {\n            prefetchDNS: prefetchDNS,\n            preconnect: preconnect,\n            preload: preload,\n            preloadModule: preloadModule$1,\n            preinitStyle: preinitStyle,\n            preinitScript: preinitScript,\n            preinitModuleScript: preinitModuleScript\n        };\n        function prefetchDNS(href) {\n            {\n                if (typeof href === \"string\" && href) {\n                    var request = resolveRequest();\n                    if (request) {\n                        var hints = getHints(request);\n                        var key = \"D|\" + href;\n                        if (hints.has(key)) {\n                            // duplicate hint\n                            return;\n                        }\n                        hints.add(key);\n                        emitHint(request, \"D\", href);\n                    }\n                }\n            }\n        }\n        function preconnect(href, crossOrigin) {\n            {\n                if (typeof href === \"string\") {\n                    var request = resolveRequest();\n                    if (request) {\n                        var hints = getHints(request);\n                        var key = \"C|\" + (crossOrigin == null ? \"null\" : crossOrigin) + \"|\" + href;\n                        if (hints.has(key)) {\n                            // duplicate hint\n                            return;\n                        }\n                        hints.add(key);\n                        if (typeof crossOrigin === \"string\") {\n                            emitHint(request, \"C\", [\n                                href,\n                                crossOrigin\n                            ]);\n                        } else {\n                            emitHint(request, \"C\", href);\n                        }\n                    }\n                }\n            }\n        }\n        function preload(href, as, options) {\n            {\n                if (typeof href === \"string\") {\n                    var request = resolveRequest();\n                    if (request) {\n                        var hints = getHints(request);\n                        var key = \"L\";\n                        if (as === \"image\" && options) {\n                            key += getImagePreloadKey(href, options.imageSrcSet, options.imageSizes);\n                        } else {\n                            key += \"[\" + as + \"]\" + href;\n                        }\n                        if (hints.has(key)) {\n                            // duplicate hint\n                            return;\n                        }\n                        hints.add(key);\n                        var trimmed = trimOptions(options);\n                        if (trimmed) {\n                            emitHint(request, \"L\", [\n                                href,\n                                as,\n                                trimmed\n                            ]);\n                        } else {\n                            emitHint(request, \"L\", [\n                                href,\n                                as\n                            ]);\n                        }\n                    }\n                }\n            }\n        }\n        function preloadModule$1(href, options) {\n            {\n                if (typeof href === \"string\") {\n                    var request = resolveRequest();\n                    if (request) {\n                        var hints = getHints(request);\n                        var key = \"m|\" + href;\n                        if (hints.has(key)) {\n                            // duplicate hint\n                            return;\n                        }\n                        hints.add(key);\n                        var trimmed = trimOptions(options);\n                        if (trimmed) {\n                            return emitHint(request, \"m\", [\n                                href,\n                                trimmed\n                            ]);\n                        } else {\n                            return emitHint(request, \"m\", href);\n                        }\n                    }\n                }\n            }\n        }\n        function preinitStyle(href, precedence, options) {\n            {\n                if (typeof href === \"string\") {\n                    var request = resolveRequest();\n                    if (request) {\n                        var hints = getHints(request);\n                        var key = \"S|\" + href;\n                        if (hints.has(key)) {\n                            // duplicate hint\n                            return;\n                        }\n                        hints.add(key);\n                        var trimmed = trimOptions(options);\n                        if (trimmed) {\n                            return emitHint(request, \"S\", [\n                                href,\n                                typeof precedence === \"string\" ? precedence : 0,\n                                trimmed\n                            ]);\n                        } else if (typeof precedence === \"string\") {\n                            return emitHint(request, \"S\", [\n                                href,\n                                precedence\n                            ]);\n                        } else {\n                            return emitHint(request, \"S\", href);\n                        }\n                    }\n                }\n            }\n        }\n        function preinitScript(href, options) {\n            {\n                if (typeof href === \"string\") {\n                    var request = resolveRequest();\n                    if (request) {\n                        var hints = getHints(request);\n                        var key = \"X|\" + href;\n                        if (hints.has(key)) {\n                            // duplicate hint\n                            return;\n                        }\n                        hints.add(key);\n                        var trimmed = trimOptions(options);\n                        if (trimmed) {\n                            return emitHint(request, \"X\", [\n                                href,\n                                trimmed\n                            ]);\n                        } else {\n                            return emitHint(request, \"X\", href);\n                        }\n                    }\n                }\n            }\n        }\n        function preinitModuleScript(href, options) {\n            {\n                if (typeof href === \"string\") {\n                    var request = resolveRequest();\n                    if (request) {\n                        var hints = getHints(request);\n                        var key = \"M|\" + href;\n                        if (hints.has(key)) {\n                            // duplicate hint\n                            return;\n                        }\n                        hints.add(key);\n                        var trimmed = trimOptions(options);\n                        if (trimmed) {\n                            return emitHint(request, \"M\", [\n                                href,\n                                trimmed\n                            ]);\n                        } else {\n                            return emitHint(request, \"M\", href);\n                        }\n                    }\n                }\n            }\n        } // Flight normally encodes undefined as a special character however for directive option\n        // arguments we don't want to send unnecessary keys and bloat the payload so we create a\n        // trimmed object which omits any keys with null or undefined values.\n        // This is only typesafe because these option objects have entirely optional fields where\n        // null and undefined represent the same thing as no property.\n        function trimOptions(options) {\n            if (options == null) return null;\n            var hasProperties = false;\n            var trimmed = {};\n            for(var key in options){\n                if (options[key] != null) {\n                    hasProperties = true;\n                    trimmed[key] = options[key];\n                }\n            }\n            return hasProperties ? trimmed : null;\n        }\n        function getImagePreloadKey(href, imageSrcSet, imageSizes) {\n            var uniquePart = \"\";\n            if (typeof imageSrcSet === \"string\" && imageSrcSet !== \"\") {\n                uniquePart += \"[\" + imageSrcSet + \"]\";\n                if (typeof imageSizes === \"string\") {\n                    uniquePart += \"[\" + imageSizes + \"]\";\n                }\n            } else {\n                uniquePart += \"[][]\" + href;\n            }\n            return \"[image]\" + uniquePart;\n        }\n        var ReactDOMCurrentDispatcher = ReactDOMSharedInternals.Dispatcher;\n        function prepareHostDispatcher() {\n            ReactDOMCurrentDispatcher.current = ReactDOMFlightServerDispatcher;\n        } // Used to distinguish these contexts from ones used in other renderers.\n        // small, smaller than how we encode undefined, and is unambiguous. We could use\n        // a different tuple structure to encode this instead but this makes the runtime\n        // cost cheaper by eliminating a type checks in more positions.\n        // prettier-ignore\n        function createHints() {\n            return new Set();\n        }\n        var supportsRequestStorage = typeof AsyncLocalStorage === \"function\";\n        var requestStorage = supportsRequestStorage ? new AsyncLocalStorage() : null; // We use the Node version but get access to async_hooks from a global.\n        typeof async_hooks === \"object\" ? async_hooks.createHook : function() {\n            return {\n                enable: function() {},\n                disable: function() {}\n            };\n        };\n        typeof async_hooks === \"object\" ? async_hooks.executionAsyncId : null;\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_SERVER_CONTEXT_TYPE = Symbol.for(\"react.server_context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_MEMO_CACHE_SENTINEL = Symbol.for(\"react.memo_cache_sentinel\");\n        var REACT_POSTPONE_TYPE = Symbol.for(\"react.postpone\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        // Forming a reverse tree.\n        // The structure of a context snapshot is an implementation of this file.\n        // Currently, it's implemented as tracking the current active node.\n        var rootContextSnapshot = null; // We assume that this runtime owns the \"current\" field on all ReactContext instances.\n        // This global (actually thread local) state represents what state all those \"current\",\n        // fields are currently in.\n        var currentActiveSnapshot = null;\n        function popNode(prev) {\n            {\n                prev.context._currentValue = prev.parentValue;\n            }\n        }\n        function pushNode(next) {\n            {\n                next.context._currentValue = next.value;\n            }\n        }\n        function popToNearestCommonAncestor(prev, next) {\n            if (prev === next) ;\n            else {\n                popNode(prev);\n                var parentPrev = prev.parent;\n                var parentNext = next.parent;\n                if (parentPrev === null) {\n                    if (parentNext !== null) {\n                        throw new Error(\"The stacks must reach the root at the same time. This is a bug in React.\");\n                    }\n                } else {\n                    if (parentNext === null) {\n                        throw new Error(\"The stacks must reach the root at the same time. This is a bug in React.\");\n                    }\n                    popToNearestCommonAncestor(parentPrev, parentNext); // On the way back, we push the new ones that weren't common.\n                    pushNode(next);\n                }\n            }\n        }\n        function popAllPrevious(prev) {\n            popNode(prev);\n            var parentPrev = prev.parent;\n            if (parentPrev !== null) {\n                popAllPrevious(parentPrev);\n            }\n        }\n        function pushAllNext(next) {\n            var parentNext = next.parent;\n            if (parentNext !== null) {\n                pushAllNext(parentNext);\n            }\n            pushNode(next);\n        }\n        function popPreviousToCommonLevel(prev, next) {\n            popNode(prev);\n            var parentPrev = prev.parent;\n            if (parentPrev === null) {\n                throw new Error(\"The depth must equal at least at zero before reaching the root. This is a bug in React.\");\n            }\n            if (parentPrev.depth === next.depth) {\n                // We found the same level. Now we just need to find a shared ancestor.\n                popToNearestCommonAncestor(parentPrev, next);\n            } else {\n                // We must still be deeper.\n                popPreviousToCommonLevel(parentPrev, next);\n            }\n        }\n        function popNextToCommonLevel(prev, next) {\n            var parentNext = next.parent;\n            if (parentNext === null) {\n                throw new Error(\"The depth must equal at least at zero before reaching the root. This is a bug in React.\");\n            }\n            if (prev.depth === parentNext.depth) {\n                // We found the same level. Now we just need to find a shared ancestor.\n                popToNearestCommonAncestor(prev, parentNext);\n            } else {\n                // We must still be deeper.\n                popNextToCommonLevel(prev, parentNext);\n            }\n            pushNode(next);\n        } // Perform context switching to the new snapshot.\n        // To make it cheap to read many contexts, while not suspending, we make the switch eagerly by\n        // updating all the context's current values. That way reads, always just read the current value.\n        // At the cost of updating contexts even if they're never read by this subtree.\n        function switchContext(newSnapshot) {\n            // The basic algorithm we need to do is to pop back any contexts that are no longer on the stack.\n            // We also need to update any new contexts that are now on the stack with the deepest value.\n            // The easiest way to update new contexts is to just reapply them in reverse order from the\n            // perspective of the backpointers. To avoid allocating a lot when switching, we use the stack\n            // for that. Therefore this algorithm is recursive.\n            // 1) First we pop which ever snapshot tree was deepest. Popping old contexts as we go.\n            // 2) Then we find the nearest common ancestor from there. Popping old contexts as we go.\n            // 3) Then we reapply new contexts on the way back up the stack.\n            var prev = currentActiveSnapshot;\n            var next = newSnapshot;\n            if (prev !== next) {\n                if (prev === null) {\n                    // $FlowFixMe[incompatible-call]: This has to be non-null since it's not equal to prev.\n                    pushAllNext(next);\n                } else if (next === null) {\n                    popAllPrevious(prev);\n                } else if (prev.depth === next.depth) {\n                    popToNearestCommonAncestor(prev, next);\n                } else if (prev.depth > next.depth) {\n                    popPreviousToCommonLevel(prev, next);\n                } else {\n                    popNextToCommonLevel(prev, next);\n                }\n                currentActiveSnapshot = next;\n            }\n        }\n        function getActiveContext() {\n            return currentActiveSnapshot;\n        }\n        function readContext$1(context) {\n            var value = context._currentValue;\n            return value;\n        }\n        // Corresponds to ReactFiberWakeable and ReactFizzWakeable modules. Generally,\n        // changes to one module should be reflected in the others.\n        // TODO: Rename this module and the corresponding Fiber one to \"Thenable\"\n        // instead of \"Wakeable\". Or some other more appropriate name.\n        // An error that is thrown (e.g. by `use`) to trigger Suspense. If we\n        // detect this is caught by userspace, we'll log a warning in development.\n        var SuspenseException = new Error(\"Suspense Exception: This is not a real error! It's an implementation \" + \"detail of `use` to interrupt the current render. You must either \" + \"rethrow it immediately, or move the `use` call outside of the \" + \"`try/catch` block. Capturing without rethrowing will lead to \" + \"unexpected behavior.\\n\\n\" + \"To handle async errors, wrap your component in an error boundary, or \" + \"call the promise's `.catch` method and pass the result to `use`\");\n        function createThenableState() {\n            // The ThenableState is created the first time a component suspends. If it\n            // suspends again, we'll reuse the same state.\n            return [];\n        }\n        function noop() {}\n        function trackUsedThenable(thenableState, thenable, index) {\n            var previous = thenableState[index];\n            if (previous === undefined) {\n                thenableState.push(thenable);\n            } else {\n                if (previous !== thenable) {\n                    // Reuse the previous thenable, and drop the new one. We can assume\n                    // they represent the same value, because components are idempotent.\n                    // Avoid an unhandled rejection errors for the Promises that we'll\n                    // intentionally ignore.\n                    thenable.then(noop, noop);\n                    thenable = previous;\n                }\n            } // We use an expando to track the status and result of a thenable so that we\n            // can synchronously unwrap the value. Think of this as an extension of the\n            // Promise API, or a custom interface that is a superset of Thenable.\n            //\n            // If the thenable doesn't have a status, set it to \"pending\" and attach\n            // a listener that will update its status and result when it resolves.\n            switch(thenable.status){\n                case \"fulfilled\":\n                    {\n                        var fulfilledValue = thenable.value;\n                        return fulfilledValue;\n                    }\n                case \"rejected\":\n                    {\n                        var rejectedError = thenable.reason;\n                        throw rejectedError;\n                    }\n                default:\n                    {\n                        if (typeof thenable.status === \"string\") ;\n                        else {\n                            var pendingThenable = thenable;\n                            pendingThenable.status = \"pending\";\n                            pendingThenable.then(function(fulfilledValue) {\n                                if (thenable.status === \"pending\") {\n                                    var fulfilledThenable = thenable;\n                                    fulfilledThenable.status = \"fulfilled\";\n                                    fulfilledThenable.value = fulfilledValue;\n                                }\n                            }, function(error) {\n                                if (thenable.status === \"pending\") {\n                                    var rejectedThenable = thenable;\n                                    rejectedThenable.status = \"rejected\";\n                                    rejectedThenable.reason = error;\n                                }\n                            }); // Check one more time in case the thenable resolved synchronously\n                            switch(thenable.status){\n                                case \"fulfilled\":\n                                    {\n                                        var fulfilledThenable = thenable;\n                                        return fulfilledThenable.value;\n                                    }\n                                case \"rejected\":\n                                    {\n                                        var rejectedThenable = thenable;\n                                        throw rejectedThenable.reason;\n                                    }\n                            }\n                        } // Suspend.\n                        //\n                        // Throwing here is an implementation detail that allows us to unwind the\n                        // call stack. But we shouldn't allow it to leak into userspace. Throw an\n                        // opaque placeholder value instead of the actual thenable. If it doesn't\n                        // get captured by the work loop, log a warning, because that means\n                        // something in userspace must have caught it.\n                        suspendedThenable = thenable;\n                        throw SuspenseException;\n                    }\n            }\n        } // This is used to track the actual thenable that suspended so it can be\n        // passed to the rest of the Suspense implementation — which, for historical\n        // reasons, expects to receive a thenable.\n        var suspendedThenable = null;\n        function getSuspendedThenable() {\n            // This is called right after `use` suspends by throwing an exception. `use`\n            // throws an opaque value instead of the thenable itself so that it can't be\n            // caught in userspace. Then the work loop accesses the actual thenable using\n            // this function.\n            if (suspendedThenable === null) {\n                throw new Error(\"Expected a suspended thenable. This is a bug in React. Please file \" + \"an issue.\");\n            }\n            var thenable = suspendedThenable;\n            suspendedThenable = null;\n            return thenable;\n        }\n        var currentRequest$1 = null;\n        var thenableIndexCounter = 0;\n        var thenableState = null;\n        function prepareToUseHooksForRequest(request) {\n            currentRequest$1 = request;\n        }\n        function resetHooksForRequest() {\n            currentRequest$1 = null;\n        }\n        function prepareToUseHooksForComponent(prevThenableState) {\n            thenableIndexCounter = 0;\n            thenableState = prevThenableState;\n        }\n        function getThenableStateAfterSuspending() {\n            var state = thenableState;\n            thenableState = null;\n            return state;\n        }\n        function readContext(context) {\n            {\n                if (context.$$typeof !== REACT_SERVER_CONTEXT_TYPE) {\n                    if (isClientReference(context)) {\n                        error(\"Cannot read a Client Context from a Server Component.\");\n                    } else {\n                        error(\"Only createServerContext is supported in Server Components.\");\n                    }\n                }\n                if (currentRequest$1 === null) {\n                    error(\"Context can only be read while React is rendering. \" + \"In classes, you can read it in the render method or getDerivedStateFromProps. \" + \"In function components, you can read it directly in the function body, but not \" + \"inside Hooks like useReducer() or useMemo().\");\n                }\n            }\n            return readContext$1(context);\n        }\n        var HooksDispatcher = {\n            useMemo: function(nextCreate) {\n                return nextCreate();\n            },\n            useCallback: function(callback) {\n                return callback;\n            },\n            useDebugValue: function() {},\n            useDeferredValue: unsupportedHook,\n            useTransition: unsupportedHook,\n            readContext: readContext,\n            useContext: readContext,\n            useReducer: unsupportedHook,\n            useRef: unsupportedHook,\n            useState: unsupportedHook,\n            useInsertionEffect: unsupportedHook,\n            useLayoutEffect: unsupportedHook,\n            useImperativeHandle: unsupportedHook,\n            useEffect: unsupportedHook,\n            useId: useId,\n            useSyncExternalStore: unsupportedHook,\n            useCacheRefresh: function() {\n                return unsupportedRefresh;\n            },\n            useMemoCache: function(size) {\n                var data = new Array(size);\n                for(var i = 0; i < size; i++){\n                    data[i] = REACT_MEMO_CACHE_SENTINEL;\n                }\n                return data;\n            },\n            use: use\n        };\n        function unsupportedHook() {\n            throw new Error(\"This Hook is not supported in Server Components.\");\n        }\n        function unsupportedRefresh() {\n            throw new Error(\"Refreshing the cache is not supported in Server Components.\");\n        }\n        function useId() {\n            if (currentRequest$1 === null) {\n                throw new Error(\"useId can only be used while React is rendering\");\n            }\n            var id = currentRequest$1.identifierCount++; // use 'S' for Flight components to distinguish from 'R' and 'r' in Fizz/Client\n            return \":\" + currentRequest$1.identifierPrefix + \"S\" + id.toString(32) + \":\";\n        }\n        function use(usable) {\n            if (usable !== null && typeof usable === \"object\" || typeof usable === \"function\") {\n                // $FlowFixMe[method-unbinding]\n                if (typeof usable.then === \"function\") {\n                    // This is a thenable.\n                    var thenable = usable; // Track the position of the thenable within this fiber.\n                    var index = thenableIndexCounter;\n                    thenableIndexCounter += 1;\n                    if (thenableState === null) {\n                        thenableState = createThenableState();\n                    }\n                    return trackUsedThenable(thenableState, thenable, index);\n                } else if (usable.$$typeof === REACT_SERVER_CONTEXT_TYPE) {\n                    var context = usable;\n                    return readContext(context);\n                }\n            }\n            {\n                if (isClientReference(usable)) {\n                    error(\"Cannot use() an already resolved Client Reference.\");\n                }\n            }\n            throw new Error(\"An unsupported type was passed to use(): \" + String(usable));\n        }\n        function createSignal() {\n            return new AbortController().signal;\n        }\n        function resolveCache() {\n            var request = resolveRequest();\n            if (request) {\n                return getCache(request);\n            }\n            return new Map();\n        }\n        var DefaultCacheDispatcher = {\n            getCacheSignal: function() {\n                var cache = resolveCache();\n                var entry = cache.get(createSignal);\n                if (entry === undefined) {\n                    entry = createSignal();\n                    cache.set(createSignal, entry);\n                }\n                return entry;\n            },\n            getCacheForType: function(resourceType) {\n                var cache = resolveCache();\n                var entry = cache.get(resourceType);\n                if (entry === undefined) {\n                    entry = resourceType(); // TODO: Warn if undefined?\n                    cache.set(resourceType, entry);\n                }\n                return entry;\n            }\n        };\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        var getPrototypeOf = Object.getPrototypeOf;\n        // in case they error.\n        var jsxPropsParents = new WeakMap();\n        var jsxChildrenParents = new WeakMap();\n        function isObjectPrototype(object) {\n            if (!object) {\n                return false;\n            }\n            var ObjectPrototype = Object.prototype;\n            if (object === ObjectPrototype) {\n                return true;\n            } // It might be an object from a different Realm which is\n            // still just a plain simple object.\n            if (getPrototypeOf(object)) {\n                return false;\n            }\n            var names = Object.getOwnPropertyNames(object);\n            for(var i = 0; i < names.length; i++){\n                if (!(names[i] in ObjectPrototype)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        function isSimpleObject(object) {\n            if (!isObjectPrototype(getPrototypeOf(object))) {\n                return false;\n            }\n            var names = Object.getOwnPropertyNames(object);\n            for(var i = 0; i < names.length; i++){\n                var descriptor = Object.getOwnPropertyDescriptor(object, names[i]);\n                if (!descriptor) {\n                    return false;\n                }\n                if (!descriptor.enumerable) {\n                    if ((names[i] === \"key\" || names[i] === \"ref\") && typeof descriptor.get === \"function\") {\n                        continue;\n                    }\n                    return false;\n                }\n            }\n            return true;\n        }\n        function objectName(object) {\n            // $FlowFixMe[method-unbinding]\n            var name = Object.prototype.toString.call(object);\n            return name.replace(/^\\[object (.*)\\]$/, function(m, p0) {\n                return p0;\n            });\n        }\n        function describeKeyForErrorMessage(key) {\n            var encodedKey = JSON.stringify(key);\n            return '\"' + key + '\"' === encodedKey ? key : encodedKey;\n        }\n        function describeValueForErrorMessage(value) {\n            switch(typeof value){\n                case \"string\":\n                    {\n                        return JSON.stringify(value.length <= 10 ? value : value.slice(0, 10) + \"...\");\n                    }\n                case \"object\":\n                    {\n                        if (isArray(value)) {\n                            return \"[...]\";\n                        }\n                        var name = objectName(value);\n                        if (name === \"Object\") {\n                            return \"{...}\";\n                        }\n                        return name;\n                    }\n                case \"function\":\n                    return \"function\";\n                default:\n                    // eslint-disable-next-line react-internal/safe-string-coercion\n                    return String(value);\n            }\n        }\n        function describeElementType(type) {\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeElementType(type.render);\n                    case REACT_MEMO_TYPE:\n                        return describeElementType(type.type);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeElementType(init(payload));\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        function describeObjectForErrorMessage(objectOrArray, expandedName) {\n            var objKind = objectName(objectOrArray);\n            if (objKind !== \"Object\" && objKind !== \"Array\") {\n                return objKind;\n            }\n            var str = \"\";\n            var start = -1;\n            var length = 0;\n            if (isArray(objectOrArray)) {\n                if (jsxChildrenParents.has(objectOrArray)) {\n                    // Print JSX Children\n                    var type = jsxChildrenParents.get(objectOrArray);\n                    str = \"<\" + describeElementType(type) + \">\";\n                    var array = objectOrArray;\n                    for(var i = 0; i < array.length; i++){\n                        var value = array[i];\n                        var substr = void 0;\n                        if (typeof value === \"string\") {\n                            substr = value;\n                        } else if (typeof value === \"object\" && value !== null) {\n                            substr = \"{\" + describeObjectForErrorMessage(value) + \"}\";\n                        } else {\n                            substr = \"{\" + describeValueForErrorMessage(value) + \"}\";\n                        }\n                        if (\"\" + i === expandedName) {\n                            start = str.length;\n                            length = substr.length;\n                            str += substr;\n                        } else if (substr.length < 15 && str.length + substr.length < 40) {\n                            str += substr;\n                        } else {\n                            str += \"{...}\";\n                        }\n                    }\n                    str += \"</\" + describeElementType(type) + \">\";\n                } else {\n                    // Print Array\n                    str = \"[\";\n                    var _array = objectOrArray;\n                    for(var _i = 0; _i < _array.length; _i++){\n                        if (_i > 0) {\n                            str += \", \";\n                        }\n                        var _value = _array[_i];\n                        var _substr = void 0;\n                        if (typeof _value === \"object\" && _value !== null) {\n                            _substr = describeObjectForErrorMessage(_value);\n                        } else {\n                            _substr = describeValueForErrorMessage(_value);\n                        }\n                        if (\"\" + _i === expandedName) {\n                            start = str.length;\n                            length = _substr.length;\n                            str += _substr;\n                        } else if (_substr.length < 10 && str.length + _substr.length < 40) {\n                            str += _substr;\n                        } else {\n                            str += \"...\";\n                        }\n                    }\n                    str += \"]\";\n                }\n            } else {\n                if (objectOrArray.$$typeof === REACT_ELEMENT_TYPE) {\n                    str = \"<\" + describeElementType(objectOrArray.type) + \"/>\";\n                } else if (jsxPropsParents.has(objectOrArray)) {\n                    // Print JSX\n                    var _type = jsxPropsParents.get(objectOrArray);\n                    str = \"<\" + (describeElementType(_type) || \"...\");\n                    var object = objectOrArray;\n                    var names = Object.keys(object);\n                    for(var _i2 = 0; _i2 < names.length; _i2++){\n                        str += \" \";\n                        var name = names[_i2];\n                        str += describeKeyForErrorMessage(name) + \"=\";\n                        var _value2 = object[name];\n                        var _substr2 = void 0;\n                        if (name === expandedName && typeof _value2 === \"object\" && _value2 !== null) {\n                            _substr2 = describeObjectForErrorMessage(_value2);\n                        } else {\n                            _substr2 = describeValueForErrorMessage(_value2);\n                        }\n                        if (typeof _value2 !== \"string\") {\n                            _substr2 = \"{\" + _substr2 + \"}\";\n                        }\n                        if (name === expandedName) {\n                            start = str.length;\n                            length = _substr2.length;\n                            str += _substr2;\n                        } else if (_substr2.length < 10 && str.length + _substr2.length < 40) {\n                            str += _substr2;\n                        } else {\n                            str += \"...\";\n                        }\n                    }\n                    str += \">\";\n                } else {\n                    // Print Object\n                    str = \"{\";\n                    var _object = objectOrArray;\n                    var _names = Object.keys(_object);\n                    for(var _i3 = 0; _i3 < _names.length; _i3++){\n                        if (_i3 > 0) {\n                            str += \", \";\n                        }\n                        var _name = _names[_i3];\n                        str += describeKeyForErrorMessage(_name) + \": \";\n                        var _value3 = _object[_name];\n                        var _substr3 = void 0;\n                        if (typeof _value3 === \"object\" && _value3 !== null) {\n                            _substr3 = describeObjectForErrorMessage(_value3);\n                        } else {\n                            _substr3 = describeValueForErrorMessage(_value3);\n                        }\n                        if (_name === expandedName) {\n                            start = str.length;\n                            length = _substr3.length;\n                            str += _substr3;\n                        } else if (_substr3.length < 10 && str.length + _substr3.length < 40) {\n                            str += _substr3;\n                        } else {\n                            str += \"...\";\n                        }\n                    }\n                    str += \"}\";\n                }\n            }\n            if (expandedName === undefined) {\n                return str;\n            }\n            if (start > -1 && length > 0) {\n                var highlight = \" \".repeat(start) + \"^\".repeat(length);\n                return \"\\n  \" + str + \"\\n  \" + highlight;\n            }\n            return \"\\n  \" + str;\n        }\n        var ReactSharedServerInternals = // $FlowFixMe: It's defined in the one we resolve to.\n        React.__SECRET_SERVER_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        if (!ReactSharedServerInternals) {\n            throw new Error('The \"react\" package in this environment is not configured correctly. ' + 'The \"react-server\" condition must be enabled in any environment that ' + \"runs React Server Components.\");\n        }\n        var ObjectPrototype = Object.prototype;\n        var stringify = JSON.stringify; // Serializable values\n        // Thenable<ReactClientValue>\n        var PENDING$1 = 0;\n        var COMPLETED = 1;\n        var ABORTED = 3;\n        var ERRORED$1 = 4;\n        var ReactCurrentCache = ReactSharedServerInternals.ReactCurrentCache;\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        function defaultErrorHandler(error) {\n            console[\"error\"](error); // Don't transform to our wrapper\n        }\n        function defaultPostponeHandler(reason) {}\n        var OPEN = 0;\n        var CLOSING = 1;\n        var CLOSED = 2;\n        function createRequest(model, bundlerConfig, onError, context, identifierPrefix, onPostpone) {\n            if (ReactCurrentCache.current !== null && ReactCurrentCache.current !== DefaultCacheDispatcher) {\n                throw new Error(\"Currently React only supports one RSC renderer at a time.\");\n            }\n            prepareHostDispatcher();\n            ReactCurrentCache.current = DefaultCacheDispatcher;\n            var abortSet = new Set();\n            var pingedTasks = [];\n            var cleanupQueue = [];\n            var hints = createHints();\n            var request = {\n                status: OPEN,\n                flushScheduled: false,\n                fatalError: null,\n                destination: null,\n                bundlerConfig: bundlerConfig,\n                cache: new Map(),\n                nextChunkId: 0,\n                pendingChunks: 0,\n                hints: hints,\n                abortableTasks: abortSet,\n                pingedTasks: pingedTasks,\n                completedImportChunks: [],\n                completedHintChunks: [],\n                completedRegularChunks: [],\n                completedErrorChunks: [],\n                writtenSymbols: new Map(),\n                writtenClientReferences: new Map(),\n                writtenServerReferences: new Map(),\n                writtenProviders: new Map(),\n                writtenObjects: new WeakMap(),\n                identifierPrefix: identifierPrefix || \"\",\n                identifierCount: 1,\n                taintCleanupQueue: cleanupQueue,\n                onError: onError === undefined ? defaultErrorHandler : onError,\n                onPostpone: onPostpone === undefined ? defaultPostponeHandler : onPostpone,\n                // $FlowFixMe[missing-this-annot]\n                toJSON: function(key, value) {\n                    return resolveModelToJSON(request, this, key, value);\n                }\n            };\n            request.pendingChunks++;\n            var rootContext = createRootContext();\n            var rootTask = createTask(request, model, rootContext, abortSet);\n            pingedTasks.push(rootTask);\n            return request;\n        }\n        var currentRequest = null;\n        function resolveRequest() {\n            if (currentRequest) return currentRequest;\n            if (supportsRequestStorage) {\n                var store = requestStorage.getStore();\n                if (store) return store;\n            }\n            return null;\n        }\n        function createRootContext(reqContext) {\n            return importServerContexts();\n        }\n        function serializeThenable(request, thenable) {\n            request.pendingChunks++;\n            var newTask = createTask(request, null, getActiveContext(), request.abortableTasks);\n            switch(thenable.status){\n                case \"fulfilled\":\n                    {\n                        // We have the resolved value, we can go ahead and schedule it for serialization.\n                        newTask.model = thenable.value;\n                        pingTask(request, newTask);\n                        return newTask.id;\n                    }\n                case \"rejected\":\n                    {\n                        var x = thenable.reason;\n                        {\n                            var digest = logRecoverableError(request, x);\n                            emitErrorChunk(request, newTask.id, digest, x);\n                        }\n                        return newTask.id;\n                    }\n                default:\n                    {\n                        if (typeof thenable.status === \"string\") {\n                            break;\n                        }\n                        var pendingThenable = thenable;\n                        pendingThenable.status = \"pending\";\n                        pendingThenable.then(function(fulfilledValue) {\n                            if (thenable.status === \"pending\") {\n                                var fulfilledThenable = thenable;\n                                fulfilledThenable.status = \"fulfilled\";\n                                fulfilledThenable.value = fulfilledValue;\n                            }\n                        }, function(error) {\n                            if (thenable.status === \"pending\") {\n                                var rejectedThenable = thenable;\n                                rejectedThenable.status = \"rejected\";\n                                rejectedThenable.reason = error;\n                            }\n                        });\n                        break;\n                    }\n            }\n            thenable.then(function(value) {\n                newTask.model = value;\n                pingTask(request, newTask);\n            }, function(reason) {\n                {\n                    newTask.status = ERRORED$1;\n                    var _digest = logRecoverableError(request, reason);\n                    emitErrorChunk(request, newTask.id, _digest, reason);\n                }\n                request.abortableTasks.delete(newTask);\n                if (request.destination !== null) {\n                    flushCompletedChunks(request, request.destination);\n                }\n            });\n            return newTask.id;\n        }\n        function emitHint(request, code, model) {\n            emitHintChunk(request, code, model);\n            enqueueFlush(request);\n        }\n        function getHints(request) {\n            return request.hints;\n        }\n        function getCache(request) {\n            return request.cache;\n        }\n        function readThenable(thenable) {\n            if (thenable.status === \"fulfilled\") {\n                return thenable.value;\n            } else if (thenable.status === \"rejected\") {\n                throw thenable.reason;\n            }\n            throw thenable;\n        }\n        function createLazyWrapperAroundWakeable(wakeable) {\n            // This is a temporary fork of the `use` implementation until we accept\n            // promises everywhere.\n            var thenable = wakeable;\n            switch(thenable.status){\n                case \"fulfilled\":\n                case \"rejected\":\n                    break;\n                default:\n                    {\n                        if (typeof thenable.status === \"string\") {\n                            break;\n                        }\n                        var pendingThenable = thenable;\n                        pendingThenable.status = \"pending\";\n                        pendingThenable.then(function(fulfilledValue) {\n                            if (thenable.status === \"pending\") {\n                                var fulfilledThenable = thenable;\n                                fulfilledThenable.status = \"fulfilled\";\n                                fulfilledThenable.value = fulfilledValue;\n                            }\n                        }, function(error) {\n                            if (thenable.status === \"pending\") {\n                                var rejectedThenable = thenable;\n                                rejectedThenable.status = \"rejected\";\n                                rejectedThenable.reason = error;\n                            }\n                        });\n                        break;\n                    }\n            }\n            var lazyType = {\n                $$typeof: REACT_LAZY_TYPE,\n                _payload: thenable,\n                _init: readThenable\n            };\n            return lazyType;\n        }\n        function attemptResolveElement(request, type, key, ref, props, prevThenableState) {\n            if (ref !== null && ref !== undefined) {\n                // When the ref moves to the regular props object this will implicitly\n                // throw for functions. We could probably relax it to a DEV warning for other\n                // cases.\n                throw new Error(\"Refs cannot be used in Server Components, nor passed to Client Components.\");\n            }\n            {\n                jsxPropsParents.set(props, type);\n                if (typeof props.children === \"object\" && props.children !== null) {\n                    jsxChildrenParents.set(props.children, type);\n                }\n            }\n            if (typeof type === \"function\") {\n                if (isClientReference(type)) {\n                    // This is a reference to a Client Component.\n                    return [\n                        REACT_ELEMENT_TYPE,\n                        type,\n                        key,\n                        props\n                    ];\n                } // This is a server-side component.\n                prepareToUseHooksForComponent(prevThenableState);\n                var result = type(props);\n                if (typeof result === \"object\" && result !== null && typeof result.then === \"function\") {\n                    // When the return value is in children position we can resolve it immediately,\n                    // to its value without a wrapper if it's synchronously available.\n                    var thenable = result;\n                    if (thenable.status === \"fulfilled\") {\n                        return thenable.value;\n                    } // TODO: Once we accept Promises as children on the client, we can just return\n                    // the thenable here.\n                    return createLazyWrapperAroundWakeable(result);\n                }\n                return result;\n            } else if (typeof type === \"string\") {\n                // This is a host element. E.g. HTML.\n                return [\n                    REACT_ELEMENT_TYPE,\n                    type,\n                    key,\n                    props\n                ];\n            } else if (typeof type === \"symbol\") {\n                if (type === REACT_FRAGMENT_TYPE) {\n                    // For key-less fragments, we add a small optimization to avoid serializing\n                    // it as a wrapper.\n                    // TODO: If a key is specified, we should propagate its key to any children.\n                    // Same as if a Server Component has a key.\n                    return props.children;\n                } // This might be a built-in React component. We'll let the client decide.\n                // Any built-in works as long as its props are serializable.\n                return [\n                    REACT_ELEMENT_TYPE,\n                    type,\n                    key,\n                    props\n                ];\n            } else if (type != null && typeof type === \"object\") {\n                if (isClientReference(type)) {\n                    // This is a reference to a Client Component.\n                    return [\n                        REACT_ELEMENT_TYPE,\n                        type,\n                        key,\n                        props\n                    ];\n                }\n                switch(type.$$typeof){\n                    case REACT_LAZY_TYPE:\n                        {\n                            var payload = type._payload;\n                            var init = type._init;\n                            var wrappedType = init(payload);\n                            return attemptResolveElement(request, wrappedType, key, ref, props, prevThenableState);\n                        }\n                    case REACT_FORWARD_REF_TYPE:\n                        {\n                            var render = type.render;\n                            prepareToUseHooksForComponent(prevThenableState);\n                            return render(props, undefined);\n                        }\n                    case REACT_MEMO_TYPE:\n                        {\n                            return attemptResolveElement(request, type.type, key, ref, props, prevThenableState);\n                        }\n                }\n            }\n            throw new Error(\"Unsupported Server Component type: \" + describeValueForErrorMessage(type));\n        }\n        function pingTask(request, task) {\n            var pingedTasks = request.pingedTasks;\n            pingedTasks.push(task);\n            if (pingedTasks.length === 1) {\n                request.flushScheduled = request.destination !== null;\n                scheduleWork(function() {\n                    return performWork(request);\n                });\n            }\n        }\n        function createTask(request, model, context, abortSet) {\n            var id = request.nextChunkId++;\n            var task = {\n                id: id,\n                status: PENDING$1,\n                model: model,\n                context: context,\n                ping: function() {\n                    return pingTask(request, task);\n                },\n                thenableState: null\n            };\n            abortSet.add(task);\n            return task;\n        }\n        function serializeByValueID(id) {\n            return \"$\" + id.toString(16);\n        }\n        function serializeLazyID(id) {\n            return \"$L\" + id.toString(16);\n        }\n        function serializePromiseID(id) {\n            return \"$@\" + id.toString(16);\n        }\n        function serializeServerReferenceID(id) {\n            return \"$F\" + id.toString(16);\n        }\n        function serializeSymbolReference(name) {\n            return \"$S\" + name;\n        }\n        function serializeNumber(number) {\n            if (Number.isFinite(number)) {\n                if (number === 0 && 1 / number === -Infinity) {\n                    return \"$-0\";\n                } else {\n                    return number;\n                }\n            } else {\n                if (number === Infinity) {\n                    return \"$Infinity\";\n                } else if (number === -Infinity) {\n                    return \"$-Infinity\";\n                } else {\n                    return \"$NaN\";\n                }\n            }\n        }\n        function serializeUndefined() {\n            return \"$undefined\";\n        }\n        function serializeDateFromDateJSON(dateJSON) {\n            // JSON.stringify automatically calls Date.prototype.toJSON which calls toISOString.\n            // We need only tack on a $D prefix.\n            return \"$D\" + dateJSON;\n        }\n        function serializeBigInt(n) {\n            return \"$n\" + n.toString(10);\n        }\n        function serializeRowHeader(tag, id) {\n            return id.toString(16) + \":\" + tag;\n        }\n        function encodeReferenceChunk(request, id, reference) {\n            var json = stringify(reference);\n            var row = id.toString(16) + \":\" + json + \"\\n\";\n            return stringToChunk(row);\n        }\n        function serializeClientReference(request, parent, key, clientReference) {\n            var clientReferenceKey = getClientReferenceKey(clientReference);\n            var writtenClientReferences = request.writtenClientReferences;\n            var existingId = writtenClientReferences.get(clientReferenceKey);\n            if (existingId !== undefined) {\n                if (parent[0] === REACT_ELEMENT_TYPE && key === \"1\") {\n                    // If we're encoding the \"type\" of an element, we can refer\n                    // to that by a lazy reference instead of directly since React\n                    // knows how to deal with lazy values. This lets us suspend\n                    // on this component rather than its parent until the code has\n                    // loaded.\n                    return serializeLazyID(existingId);\n                }\n                return serializeByValueID(existingId);\n            }\n            try {\n                var clientReferenceMetadata = resolveClientReferenceMetadata(request.bundlerConfig, clientReference);\n                request.pendingChunks++;\n                var importId = request.nextChunkId++;\n                emitImportChunk(request, importId, clientReferenceMetadata);\n                writtenClientReferences.set(clientReferenceKey, importId);\n                if (parent[0] === REACT_ELEMENT_TYPE && key === \"1\") {\n                    // If we're encoding the \"type\" of an element, we can refer\n                    // to that by a lazy reference instead of directly since React\n                    // knows how to deal with lazy values. This lets us suspend\n                    // on this component rather than its parent until the code has\n                    // loaded.\n                    return serializeLazyID(importId);\n                }\n                return serializeByValueID(importId);\n            } catch (x) {\n                request.pendingChunks++;\n                var errorId = request.nextChunkId++;\n                var digest = logRecoverableError(request, x);\n                emitErrorChunk(request, errorId, digest, x);\n                return serializeByValueID(errorId);\n            }\n        }\n        function outlineModel(request, value) {\n            request.pendingChunks++;\n            var newTask = createTask(request, value, getActiveContext(), request.abortableTasks);\n            retryTask(request, newTask);\n            return newTask.id;\n        }\n        function serializeServerReference(request, parent, key, serverReference) {\n            var writtenServerReferences = request.writtenServerReferences;\n            var existingId = writtenServerReferences.get(serverReference);\n            if (existingId !== undefined) {\n                return serializeServerReferenceID(existingId);\n            }\n            var bound = getServerReferenceBoundArguments(request.bundlerConfig, serverReference);\n            var serverReferenceMetadata = {\n                id: getServerReferenceId(request.bundlerConfig, serverReference),\n                bound: bound ? Promise.resolve(bound) : null\n            };\n            var metadataId = outlineModel(request, serverReferenceMetadata);\n            writtenServerReferences.set(serverReference, metadataId);\n            return serializeServerReferenceID(metadataId);\n        }\n        function serializeLargeTextString(request, text) {\n            request.pendingChunks += 2;\n            var textId = request.nextChunkId++;\n            var textChunk = stringToChunk(text);\n            var binaryLength = byteLengthOfChunk(textChunk);\n            var row = textId.toString(16) + \":T\" + binaryLength.toString(16) + \",\";\n            var headerChunk = stringToChunk(row);\n            request.completedRegularChunks.push(headerChunk, textChunk);\n            return serializeByValueID(textId);\n        }\n        function serializeMap(request, map) {\n            var entries = Array.from(map);\n            for(var i = 0; i < entries.length; i++){\n                var key = entries[i][0];\n                if (typeof key === \"object\" && key !== null) {\n                    var writtenObjects = request.writtenObjects;\n                    var existingId = writtenObjects.get(key);\n                    if (existingId === undefined) {\n                        // Mark all object keys as seen so that they're always outlined.\n                        writtenObjects.set(key, -1);\n                    }\n                }\n            }\n            var id = outlineModel(request, entries);\n            return \"$Q\" + id.toString(16);\n        }\n        function serializeSet(request, set) {\n            var entries = Array.from(set);\n            for(var i = 0; i < entries.length; i++){\n                var key = entries[i];\n                if (typeof key === \"object\" && key !== null) {\n                    var writtenObjects = request.writtenObjects;\n                    var existingId = writtenObjects.get(key);\n                    if (existingId === undefined) {\n                        // Mark all object keys as seen so that they're always outlined.\n                        writtenObjects.set(key, -1);\n                    }\n                }\n            }\n            var id = outlineModel(request, entries);\n            return \"$W\" + id.toString(16);\n        }\n        function escapeStringValue(value) {\n            if (value[0] === \"$\") {\n                // We need to escape $ prefixed strings since we use those to encode\n                // references to IDs and as special symbol values.\n                return \"$\" + value;\n            } else {\n                return value;\n            }\n        }\n        var modelRoot = false;\n        function resolveModelToJSON(request, parent, key, value) {\n            // Make sure that `parent[key]` wasn't JSONified before `value` was passed to us\n            {\n                // $FlowFixMe[incompatible-use]\n                var originalValue = parent[key];\n                if (typeof originalValue === \"object\" && originalValue !== value && !(originalValue instanceof Date)) {\n                    if (objectName(originalValue) !== \"Object\") {\n                        var jsxParentType = jsxChildrenParents.get(parent);\n                        if (typeof jsxParentType === \"string\") {\n                            error(\"%s objects cannot be rendered as text children. Try formatting it using toString().%s\", objectName(originalValue), describeObjectForErrorMessage(parent, key));\n                        } else {\n                            error(\"Only plain objects can be passed to Client Components from Server Components. \" + \"%s objects are not supported.%s\", objectName(originalValue), describeObjectForErrorMessage(parent, key));\n                        }\n                    } else {\n                        error(\"Only plain objects can be passed to Client Components from Server Components. \" + \"Objects with toJSON methods are not supported. Convert it manually \" + \"to a simple value before passing it to props.%s\", describeObjectForErrorMessage(parent, key));\n                    }\n                }\n            }\n            switch(value){\n                case REACT_ELEMENT_TYPE:\n                    return \"$\";\n            }\n            while(typeof value === \"object\" && value !== null && (value.$$typeof === REACT_ELEMENT_TYPE || value.$$typeof === REACT_LAZY_TYPE)){\n                try {\n                    switch(value.$$typeof){\n                        case REACT_ELEMENT_TYPE:\n                            {\n                                var writtenObjects = request.writtenObjects;\n                                var existingId = writtenObjects.get(value);\n                                if (existingId !== undefined) {\n                                    if (existingId === -1) {\n                                        // Seen but not yet outlined.\n                                        var newId = outlineModel(request, value);\n                                        return serializeByValueID(newId);\n                                    } else if (modelRoot === value) {\n                                        // This is the ID we're currently emitting so we need to write it\n                                        // once but if we discover it again, we refer to it by id.\n                                        modelRoot = null;\n                                    } else {\n                                        // We've already emitted this as an outlined object, so we can\n                                        // just refer to that by its existing ID.\n                                        return serializeByValueID(existingId);\n                                    }\n                                } else {\n                                    // This is the first time we've seen this object. We may never see it again\n                                    // so we'll inline it. Mark it as seen. If we see it again, we'll outline.\n                                    writtenObjects.set(value, -1);\n                                } // TODO: Concatenate keys of parents onto children.\n                                var element = value; // Attempt to render the Server Component.\n                                value = attemptResolveElement(request, element.type, element.key, element.ref, element.props, null);\n                                break;\n                            }\n                        case REACT_LAZY_TYPE:\n                            {\n                                var payload = value._payload;\n                                var init = value._init;\n                                value = init(payload);\n                                break;\n                            }\n                    }\n                } catch (thrownValue) {\n                    var x = thrownValue === SuspenseException ? // This is a special type of exception used for Suspense. For historical\n                    // reasons, the rest of the Suspense implementation expects the thrown\n                    // value to be a thenable, because before `use` existed that was the\n                    // (unstable) API for suspending. This implementation detail can change\n                    // later, once we deprecate the old API in favor of `use`.\n                    getSuspendedThenable() : thrownValue;\n                    if (typeof x === \"object\" && x !== null) {\n                        // $FlowFixMe[method-unbinding]\n                        if (typeof x.then === \"function\") {\n                            // Something suspended, we'll need to create a new task and resolve it later.\n                            request.pendingChunks++;\n                            var newTask = createTask(request, value, getActiveContext(), request.abortableTasks);\n                            var ping = newTask.ping;\n                            x.then(ping, ping);\n                            newTask.thenableState = getThenableStateAfterSuspending();\n                            return serializeLazyID(newTask.id);\n                        }\n                    } // Something errored. We'll still send everything we have up until this point.\n                    // We'll replace this element with a lazy reference that throws on the client\n                    // once it gets rendered.\n                    request.pendingChunks++;\n                    var errorId = request.nextChunkId++;\n                    var digest = logRecoverableError(request, x);\n                    emitErrorChunk(request, errorId, digest, x);\n                    return serializeLazyID(errorId);\n                }\n            }\n            if (value === null) {\n                return null;\n            }\n            if (typeof value === \"object\") {\n                if (isClientReference(value)) {\n                    return serializeClientReference(request, parent, key, value);\n                }\n                var _writtenObjects = request.writtenObjects;\n                var _existingId = _writtenObjects.get(value); // $FlowFixMe[method-unbinding]\n                if (typeof value.then === \"function\") {\n                    if (_existingId !== undefined) {\n                        if (modelRoot === value) {\n                            // This is the ID we're currently emitting so we need to write it\n                            // once but if we discover it again, we refer to it by id.\n                            modelRoot = null;\n                        } else {\n                            // We've seen this promise before, so we can just refer to the same result.\n                            return serializePromiseID(_existingId);\n                        }\n                    } // We assume that any object with a .then property is a \"Thenable\" type,\n                    // or a Promise type. Either of which can be represented by a Promise.\n                    var promiseId = serializeThenable(request, value);\n                    _writtenObjects.set(value, promiseId);\n                    return serializePromiseID(promiseId);\n                }\n                if (_existingId !== undefined) {\n                    if (_existingId === -1) {\n                        // Seen but not yet outlined.\n                        var _newId = outlineModel(request, value);\n                        return serializeByValueID(_newId);\n                    } else if (modelRoot === value) {\n                        // This is the ID we're currently emitting so we need to write it\n                        // once but if we discover it again, we refer to it by id.\n                        modelRoot = null;\n                    } else {\n                        // We've already emitted this as an outlined object, so we can\n                        // just refer to that by its existing ID.\n                        return serializeByValueID(_existingId);\n                    }\n                } else {\n                    // This is the first time we've seen this object. We may never see it again\n                    // so we'll inline it. Mark it as seen. If we see it again, we'll outline.\n                    _writtenObjects.set(value, -1);\n                }\n                if (isArray(value)) {\n                    // $FlowFixMe[incompatible-return]\n                    return value;\n                }\n                if (value instanceof Map) {\n                    return serializeMap(request, value);\n                }\n                if (value instanceof Set) {\n                    return serializeSet(request, value);\n                }\n                var iteratorFn = getIteratorFn(value);\n                if (iteratorFn) {\n                    return Array.from(value);\n                } // Verify that this is a simple plain object.\n                var proto = getPrototypeOf(value);\n                if (proto !== ObjectPrototype && (proto === null || getPrototypeOf(proto) !== null)) {\n                    throw new Error(\"Only plain objects, and a few built-ins, can be passed to Client Components \" + \"from Server Components. Classes or null prototypes are not supported.\");\n                }\n                {\n                    if (objectName(value) !== \"Object\") {\n                        error(\"Only plain objects can be passed to Client Components from Server Components. \" + \"%s objects are not supported.%s\", objectName(value), describeObjectForErrorMessage(parent, key));\n                    } else if (!isSimpleObject(value)) {\n                        error(\"Only plain objects can be passed to Client Components from Server Components. \" + \"Classes or other objects with methods are not supported.%s\", describeObjectForErrorMessage(parent, key));\n                    } else if (Object.getOwnPropertySymbols) {\n                        var symbols = Object.getOwnPropertySymbols(value);\n                        if (symbols.length > 0) {\n                            error(\"Only plain objects can be passed to Client Components from Server Components. \" + \"Objects with symbol properties like %s are not supported.%s\", symbols[0].description, describeObjectForErrorMessage(parent, key));\n                        }\n                    }\n                }\n                return value;\n            }\n            if (typeof value === \"string\") {\n                if (value[value.length - 1] === \"Z\") {\n                    // Possibly a Date, whose toJSON automatically calls toISOString\n                    // $FlowFixMe[incompatible-use]\n                    var _originalValue = parent[key];\n                    if (_originalValue instanceof Date) {\n                        return serializeDateFromDateJSON(value);\n                    }\n                }\n                if (value.length >= 1024) {\n                    // For large strings, we encode them outside the JSON payload so that we\n                    // don't have to double encode and double parse the strings. This can also\n                    // be more compact in case the string has a lot of escaped characters.\n                    return serializeLargeTextString(request, value);\n                }\n                return escapeStringValue(value);\n            }\n            if (typeof value === \"boolean\") {\n                return value;\n            }\n            if (typeof value === \"number\") {\n                return serializeNumber(value);\n            }\n            if (typeof value === \"undefined\") {\n                return serializeUndefined();\n            }\n            if (typeof value === \"function\") {\n                if (isClientReference(value)) {\n                    return serializeClientReference(request, parent, key, value);\n                }\n                if (isServerReference(value)) {\n                    return serializeServerReference(request, parent, key, value);\n                }\n                if (/^on[A-Z]/.test(key)) {\n                    throw new Error(\"Event handlers cannot be passed to Client Component props.\" + describeObjectForErrorMessage(parent, key) + \"\\nIf you need interactivity, consider converting part of this to a Client Component.\");\n                } else {\n                    throw new Error(\"Functions cannot be passed directly to Client Components \" + 'unless you explicitly expose it by marking it with \"use server\".' + describeObjectForErrorMessage(parent, key));\n                }\n            }\n            if (typeof value === \"symbol\") {\n                var writtenSymbols = request.writtenSymbols;\n                var _existingId2 = writtenSymbols.get(value);\n                if (_existingId2 !== undefined) {\n                    return serializeByValueID(_existingId2);\n                } // $FlowFixMe[incompatible-type] `description` might be undefined\n                var name = value.description;\n                if (Symbol.for(name) !== value) {\n                    throw new Error(\"Only global symbols received from Symbol.for(...) can be passed to Client Components. \" + (\"The symbol Symbol.for(\" + // $FlowFixMe[incompatible-type] `description` might be undefined\n                    value.description + \") cannot be found among global symbols.\") + describeObjectForErrorMessage(parent, key));\n                }\n                request.pendingChunks++;\n                var symbolId = request.nextChunkId++;\n                emitSymbolChunk(request, symbolId, name);\n                writtenSymbols.set(value, symbolId);\n                return serializeByValueID(symbolId);\n            }\n            if (typeof value === \"bigint\") {\n                return serializeBigInt(value);\n            }\n            throw new Error(\"Type \" + typeof value + \" is not supported in Client Component props.\" + describeObjectForErrorMessage(parent, key));\n        }\n        function logPostpone(request, reason) {\n            var onPostpone = request.onPostpone;\n            onPostpone(reason);\n        }\n        function logRecoverableError(request, error) {\n            var onError = request.onError;\n            var errorDigest = onError(error);\n            if (errorDigest != null && typeof errorDigest !== \"string\") {\n                // eslint-disable-next-line react-internal/prod-error-codes\n                throw new Error('onError returned something with a type other than \"string\". onError should return a string and may return null or undefined but must not return anything else. It received something of type \"' + typeof errorDigest + '\" instead');\n            }\n            return errorDigest || \"\";\n        }\n        function fatalError(request, error) {\n            if (request.destination !== null) {\n                request.status = CLOSED;\n                closeWithError(request.destination, error);\n            } else {\n                request.status = CLOSING;\n                request.fatalError = error;\n            }\n        }\n        function emitPostponeChunk(request, id, postponeInstance) {\n            var row;\n            {\n                var reason = \"\";\n                var stack = \"\";\n                try {\n                    // eslint-disable-next-line react-internal/safe-string-coercion\n                    reason = String(postponeInstance.message); // eslint-disable-next-line react-internal/safe-string-coercion\n                    stack = String(postponeInstance.stack);\n                } catch (x) {}\n                row = serializeRowHeader(\"P\", id) + stringify({\n                    reason: reason,\n                    stack: stack\n                }) + \"\\n\";\n            }\n            var processedChunk = stringToChunk(row);\n            request.completedErrorChunks.push(processedChunk);\n        }\n        function emitErrorChunk(request, id, digest, error) {\n            var errorInfo;\n            {\n                var message;\n                var stack = \"\";\n                try {\n                    if (error instanceof Error) {\n                        // eslint-disable-next-line react-internal/safe-string-coercion\n                        message = String(error.message); // eslint-disable-next-line react-internal/safe-string-coercion\n                        stack = String(error.stack);\n                    } else {\n                        message = \"Error: \" + error;\n                    }\n                } catch (x) {\n                    message = \"An error occurred but serializing the error message failed.\";\n                }\n                errorInfo = {\n                    digest: digest,\n                    message: message,\n                    stack: stack\n                };\n            }\n            var row = serializeRowHeader(\"E\", id) + stringify(errorInfo) + \"\\n\";\n            var processedChunk = stringToChunk(row);\n            request.completedErrorChunks.push(processedChunk);\n        }\n        function emitImportChunk(request, id, clientReferenceMetadata) {\n            // $FlowFixMe[incompatible-type] stringify can return null\n            var json = stringify(clientReferenceMetadata);\n            var row = serializeRowHeader(\"I\", id) + json + \"\\n\";\n            var processedChunk = stringToChunk(row);\n            request.completedImportChunks.push(processedChunk);\n        }\n        function emitHintChunk(request, code, model) {\n            var json = stringify(model);\n            var id = request.nextChunkId++;\n            var row = serializeRowHeader(\"H\" + code, id) + json + \"\\n\";\n            var processedChunk = stringToChunk(row);\n            request.completedHintChunks.push(processedChunk);\n        }\n        function emitSymbolChunk(request, id, name) {\n            var symbolReference = serializeSymbolReference(name);\n            var processedChunk = encodeReferenceChunk(request, id, symbolReference);\n            request.completedImportChunks.push(processedChunk);\n        }\n        function emitModelChunk(request, id, model) {\n            // Track the root so we know that we have to emit this object even though it\n            // already has an ID. This is needed because we might see this object twice\n            // in the same toJSON if it is cyclic.\n            modelRoot = model; // $FlowFixMe[incompatible-type] stringify can return null\n            var json = stringify(model, request.toJSON);\n            var row = id.toString(16) + \":\" + json + \"\\n\";\n            var processedChunk = stringToChunk(row);\n            request.completedRegularChunks.push(processedChunk);\n        }\n        function retryTask(request, task) {\n            if (task.status !== PENDING$1) {\n                // We completed this by other means before we had a chance to retry it.\n                return;\n            }\n            switchContext(task.context);\n            try {\n                var value = task.model;\n                if (typeof value === \"object\" && value !== null && value.$$typeof === REACT_ELEMENT_TYPE) {\n                    request.writtenObjects.set(value, task.id); // TODO: Concatenate keys of parents onto children.\n                    var element = value; // When retrying a component, reuse the thenableState from the\n                    // previous attempt.\n                    var prevThenableState = task.thenableState; // Attempt to render the Server Component.\n                    // Doing this here lets us reuse this same task if the next component\n                    // also suspends.\n                    task.model = value;\n                    value = attemptResolveElement(request, element.type, element.key, element.ref, element.props, prevThenableState); // Successfully finished this component. We're going to keep rendering\n                    // using the same task, but we reset its thenable state before continuing.\n                    task.thenableState = null; // Keep rendering and reuse the same task. This inner loop is separate\n                    // from the render above because we don't need to reset the thenable state\n                    // until the next time something suspends and retries.\n                    while(typeof value === \"object\" && value !== null && value.$$typeof === REACT_ELEMENT_TYPE){\n                        request.writtenObjects.set(value, task.id); // TODO: Concatenate keys of parents onto children.\n                        var nextElement = value;\n                        task.model = value;\n                        value = attemptResolveElement(request, nextElement.type, nextElement.key, nextElement.ref, nextElement.props, null);\n                    }\n                } // Track that this object is outlined and has an id.\n                if (typeof value === \"object\" && value !== null) {\n                    request.writtenObjects.set(value, task.id);\n                }\n                emitModelChunk(request, task.id, value);\n                request.abortableTasks.delete(task);\n                task.status = COMPLETED;\n            } catch (thrownValue) {\n                var x = thrownValue === SuspenseException ? // This is a special type of exception used for Suspense. For historical\n                // reasons, the rest of the Suspense implementation expects the thrown\n                // value to be a thenable, because before `use` existed that was the\n                // (unstable) API for suspending. This implementation detail can change\n                // later, once we deprecate the old API in favor of `use`.\n                getSuspendedThenable() : thrownValue;\n                if (typeof x === \"object\" && x !== null) {\n                    // $FlowFixMe[method-unbinding]\n                    if (typeof x.then === \"function\") {\n                        // Something suspended again, let's pick it back up later.\n                        var ping = task.ping;\n                        x.then(ping, ping);\n                        task.thenableState = getThenableStateAfterSuspending();\n                        return;\n                    }\n                }\n                request.abortableTasks.delete(task);\n                task.status = ERRORED$1;\n                var digest = logRecoverableError(request, x);\n                emitErrorChunk(request, task.id, digest, x);\n            }\n        }\n        function performWork(request) {\n            var prevDispatcher = ReactCurrentDispatcher.current;\n            ReactCurrentDispatcher.current = HooksDispatcher;\n            var prevRequest = currentRequest;\n            currentRequest = request;\n            prepareToUseHooksForRequest(request);\n            try {\n                var pingedTasks = request.pingedTasks;\n                request.pingedTasks = [];\n                for(var i = 0; i < pingedTasks.length; i++){\n                    var task = pingedTasks[i];\n                    retryTask(request, task);\n                }\n                if (request.destination !== null) {\n                    flushCompletedChunks(request, request.destination);\n                }\n            } catch (error) {\n                logRecoverableError(request, error);\n                fatalError(request, error);\n            } finally{\n                ReactCurrentDispatcher.current = prevDispatcher;\n                resetHooksForRequest();\n                currentRequest = prevRequest;\n            }\n        }\n        function abortTask(task, request, errorId) {\n            task.status = ABORTED; // Instead of emitting an error per task.id, we emit a model that only\n            // has a single value referencing the error.\n            var ref = serializeByValueID(errorId);\n            var processedChunk = encodeReferenceChunk(request, task.id, ref);\n            request.completedErrorChunks.push(processedChunk);\n        }\n        function flushCompletedChunks(request, destination) {\n            beginWriting();\n            try {\n                // We emit module chunks first in the stream so that\n                // they can be preloaded as early as possible.\n                var importsChunks = request.completedImportChunks;\n                var i = 0;\n                for(; i < importsChunks.length; i++){\n                    request.pendingChunks--;\n                    var chunk = importsChunks[i];\n                    var keepWriting = writeChunkAndReturn(destination, chunk);\n                    if (!keepWriting) {\n                        request.destination = null;\n                        i++;\n                        break;\n                    }\n                }\n                importsChunks.splice(0, i); // Next comes hints.\n                var hintChunks = request.completedHintChunks;\n                i = 0;\n                for(; i < hintChunks.length; i++){\n                    var _chunk = hintChunks[i];\n                    var _keepWriting = writeChunkAndReturn(destination, _chunk);\n                    if (!_keepWriting) {\n                        request.destination = null;\n                        i++;\n                        break;\n                    }\n                }\n                hintChunks.splice(0, i); // Next comes model data.\n                var regularChunks = request.completedRegularChunks;\n                i = 0;\n                for(; i < regularChunks.length; i++){\n                    request.pendingChunks--;\n                    var _chunk2 = regularChunks[i];\n                    var _keepWriting2 = writeChunkAndReturn(destination, _chunk2);\n                    if (!_keepWriting2) {\n                        request.destination = null;\n                        i++;\n                        break;\n                    }\n                }\n                regularChunks.splice(0, i); // Finally, errors are sent. The idea is that it's ok to delay\n                // any error messages and prioritize display of other parts of\n                // the page.\n                var errorChunks = request.completedErrorChunks;\n                i = 0;\n                for(; i < errorChunks.length; i++){\n                    request.pendingChunks--;\n                    var _chunk3 = errorChunks[i];\n                    var _keepWriting3 = writeChunkAndReturn(destination, _chunk3);\n                    if (!_keepWriting3) {\n                        request.destination = null;\n                        i++;\n                        break;\n                    }\n                }\n                errorChunks.splice(0, i);\n            } finally{\n                request.flushScheduled = false;\n                completeWriting(destination);\n            }\n            if (request.pendingChunks === 0) {\n                close$1(destination);\n            }\n        }\n        function startWork(request) {\n            request.flushScheduled = request.destination !== null;\n            if (supportsRequestStorage) {\n                scheduleWork(function() {\n                    return requestStorage.run(request, performWork, request);\n                });\n            } else {\n                scheduleWork(function() {\n                    return performWork(request);\n                });\n            }\n        }\n        function enqueueFlush(request) {\n            if (request.flushScheduled === false && // If there are pinged tasks we are going to flush anyway after work completes\n            request.pingedTasks.length === 0 && // If there is no destination there is nothing we can flush to. A flush will\n            // happen when we start flowing again\n            request.destination !== null) {\n                var destination = request.destination;\n                request.flushScheduled = true;\n                scheduleWork(function() {\n                    return flushCompletedChunks(request, destination);\n                });\n            }\n        }\n        function startFlowing(request, destination) {\n            if (request.status === CLOSING) {\n                request.status = CLOSED;\n                closeWithError(destination, request.fatalError);\n                return;\n            }\n            if (request.status === CLOSED) {\n                return;\n            }\n            if (request.destination !== null) {\n                // We're already flowing.\n                return;\n            }\n            request.destination = destination;\n            try {\n                flushCompletedChunks(request, destination);\n            } catch (error) {\n                logRecoverableError(request, error);\n                fatalError(request, error);\n            }\n        }\n        function stopFlowing(request) {\n            request.destination = null;\n        } // This is called to early terminate a request. It creates an error at all pending tasks.\n        function abort(request, reason) {\n            try {\n                var abortableTasks = request.abortableTasks;\n                if (abortableTasks.size > 0) {\n                    // We have tasks to abort. We'll emit one error row and then emit a reference\n                    // to that row from every row that's still remaining.\n                    request.pendingChunks++;\n                    var errorId = request.nextChunkId++;\n                    var postponeInstance;\n                    if (enablePostpone && typeof reason === \"object\" && reason !== null && reason.$$typeof === REACT_POSTPONE_TYPE) ;\n                    else {\n                        var error = reason === undefined ? new Error(\"The render was aborted by the server without a reason.\") : reason;\n                        var digest = logRecoverableError(request, error);\n                        emitErrorChunk(request, errorId, digest, error);\n                    }\n                    abortableTasks.forEach(function(task) {\n                        return abortTask(task, request, errorId);\n                    });\n                    abortableTasks.clear();\n                }\n                if (request.destination !== null) {\n                    flushCompletedChunks(request, request.destination);\n                }\n            } catch (error) {\n                logRecoverableError(request, error);\n                fatalError(request, error);\n            }\n        }\n        function importServerContexts(contexts) {\n            return rootContextSnapshot;\n        }\n        // This is the parsed shape of the wire format which is why it is\n        // condensed to only the essentialy information\n        var ID = 0;\n        var CHUNKS = 1;\n        var NAME = 2; // export const ASYNC = 3;\n        // This logic is correct because currently only include the 4th tuple member\n        // when the module is async. If that changes we will need to actually assert\n        // the value is true. We don't index into the 4th slot because flow does not\n        // like the potential out of bounds access\n        function isAsyncImport(metadata) {\n            return metadata.length === 4;\n        }\n        function resolveServerReference(bundlerConfig, id) {\n            var name = \"\";\n            var resolvedModuleData = bundlerConfig[id];\n            if (resolvedModuleData) {\n                // The potentially aliased name.\n                name = resolvedModuleData.name;\n            } else {\n                // We didn't find this specific export name but we might have the * export\n                // which contains this name as well.\n                // TODO: It's unfortunate that we now have to parse this string. We should\n                // probably go back to encoding path and name separately on the client reference.\n                var idx = id.lastIndexOf(\"#\");\n                if (idx !== -1) {\n                    name = id.slice(idx + 1);\n                    resolvedModuleData = bundlerConfig[id.slice(0, idx)];\n                }\n                if (!resolvedModuleData) {\n                    throw new Error('Could not find the module \"' + id + '\" in the React Server Manifest. ' + \"This is probably a bug in the React Server Components bundler.\");\n                }\n            } // TODO: This needs to return async: true if it's an async module.\n            return [\n                resolvedModuleData.id,\n                resolvedModuleData.chunks,\n                name\n            ];\n        } // The chunk cache contains all the chunks we've preloaded so far.\n        // If they're still pending they're a thenable. This map also exists\n        // in Webpack but unfortunately it's not exposed so we have to\n        // replicate it in user space. null means that it has already loaded.\n        var chunkCache = new Map();\n        function requireAsyncModule(id) {\n            // We've already loaded all the chunks. We can require the module.\n            var promise = globalThis.__next_require__(id);\n            if (typeof promise.then !== \"function\") {\n                // This wasn't a promise after all.\n                return null;\n            } else if (promise.status === \"fulfilled\") {\n                // This module was already resolved earlier.\n                return null;\n            } else {\n                // Instrument the Promise to stash the result.\n                promise.then(function(value) {\n                    var fulfilledThenable = promise;\n                    fulfilledThenable.status = \"fulfilled\";\n                    fulfilledThenable.value = value;\n                }, function(reason) {\n                    var rejectedThenable = promise;\n                    rejectedThenable.status = \"rejected\";\n                    rejectedThenable.reason = reason;\n                });\n                return promise;\n            }\n        }\n        function ignoreReject() {} // Start preloading the modules since we might need them soon.\n        // This function doesn't suspend.\n        function preloadModule(metadata) {\n            var chunks = metadata[CHUNKS];\n            var promises = [];\n            var i = 0;\n            while(i < chunks.length){\n                var chunkId = chunks[i++];\n                chunks[i++];\n                var entry = chunkCache.get(chunkId);\n                if (entry === undefined) {\n                    var thenable = loadChunk(chunkId);\n                    promises.push(thenable); // $FlowFixMe[method-unbinding]\n                    var resolve = chunkCache.set.bind(chunkCache, chunkId, null);\n                    thenable.then(resolve, ignoreReject);\n                    chunkCache.set(chunkId, thenable);\n                } else if (entry !== null) {\n                    promises.push(entry);\n                }\n            }\n            if (isAsyncImport(metadata)) {\n                if (promises.length === 0) {\n                    return requireAsyncModule(metadata[ID]);\n                } else {\n                    return Promise.all(promises).then(function() {\n                        return requireAsyncModule(metadata[ID]);\n                    });\n                }\n            } else if (promises.length > 0) {\n                return Promise.all(promises);\n            } else {\n                return null;\n            }\n        } // Actually require the module or suspend if it's not yet ready.\n        // Increase priority if necessary.\n        function requireModule(metadata) {\n            var moduleExports = globalThis.__next_require__(metadata[ID]);\n            if (isAsyncImport(metadata)) {\n                if (typeof moduleExports.then !== \"function\") ;\n                else if (moduleExports.status === \"fulfilled\") {\n                    // This Promise should've been instrumented by preloadModule.\n                    moduleExports = moduleExports.value;\n                } else {\n                    throw moduleExports.reason;\n                }\n            }\n            if (metadata[NAME] === \"*\") {\n                // This is a placeholder value that represents that the caller imported this\n                // as a CommonJS module as is.\n                return moduleExports;\n            }\n            if (metadata[NAME] === \"\") {\n                // This is a placeholder value that represents that the caller accessed the\n                // default property of this if it was an ESM interop module.\n                return moduleExports.__esModule ? moduleExports.default : moduleExports;\n            }\n            return moduleExports[metadata[NAME]];\n        }\n        function loadChunk(chunkId, filename) {\n            return __webpack_require__.e(chunkId);\n        }\n        // The server acts as a Client of itself when resolving Server References.\n        var PENDING = \"pending\";\n        var BLOCKED = \"blocked\";\n        var RESOLVED_MODEL = \"resolved_model\";\n        var INITIALIZED = \"fulfilled\";\n        var ERRORED = \"rejected\"; // $FlowFixMe[missing-this-annot]\n        function Chunk(status, value, reason, response) {\n            this.status = status;\n            this.value = value;\n            this.reason = reason;\n            this._response = response;\n        } // We subclass Promise.prototype so that we get other methods like .catch\n        Chunk.prototype = Object.create(Promise.prototype); // TODO: This doesn't return a new Promise chain unlike the real .then\n        Chunk.prototype.then = function(resolve, reject) {\n            var chunk = this; // If we have resolved content, we try to initialize it first which\n            // might put us back into one of the other states.\n            switch(chunk.status){\n                case RESOLVED_MODEL:\n                    initializeModelChunk(chunk);\n                    break;\n            } // The status might have changed after initialization.\n            switch(chunk.status){\n                case INITIALIZED:\n                    resolve(chunk.value);\n                    break;\n                case PENDING:\n                case BLOCKED:\n                    if (resolve) {\n                        if (chunk.value === null) {\n                            chunk.value = [];\n                        }\n                        chunk.value.push(resolve);\n                    }\n                    if (reject) {\n                        if (chunk.reason === null) {\n                            chunk.reason = [];\n                        }\n                        chunk.reason.push(reject);\n                    }\n                    break;\n                default:\n                    reject(chunk.reason);\n                    break;\n            }\n        };\n        function getRoot(response) {\n            var chunk = getChunk(response, 0);\n            return chunk;\n        }\n        function createPendingChunk(response) {\n            // $FlowFixMe[invalid-constructor] Flow doesn't support functions as constructors\n            return new Chunk(PENDING, null, null, response);\n        }\n        function wakeChunk(listeners, value) {\n            for(var i = 0; i < listeners.length; i++){\n                var listener = listeners[i];\n                listener(value);\n            }\n        }\n        function triggerErrorOnChunk(chunk, error) {\n            if (chunk.status !== PENDING && chunk.status !== BLOCKED) {\n                // We already resolved. We didn't expect to see this.\n                return;\n            }\n            var listeners = chunk.reason;\n            var erroredChunk = chunk;\n            erroredChunk.status = ERRORED;\n            erroredChunk.reason = error;\n            if (listeners !== null) {\n                wakeChunk(listeners, error);\n            }\n        }\n        function createResolvedModelChunk(response, value) {\n            // $FlowFixMe[invalid-constructor] Flow doesn't support functions as constructors\n            return new Chunk(RESOLVED_MODEL, value, null, response);\n        }\n        function bindArgs$1(fn, args) {\n            return fn.bind.apply(fn, [\n                null\n            ].concat(args));\n        }\n        function loadServerReference$1(response, id, bound, parentChunk, parentObject, key) {\n            var serverReference = resolveServerReference(response._bundlerConfig, id); // We expect most servers to not really need this because you'd just have all\n            // the relevant modules already loaded but it allows for lazy loading of code\n            // if needed.\n            var preloadPromise = preloadModule(serverReference);\n            var promise;\n            if (bound) {\n                promise = Promise.all([\n                    bound,\n                    preloadPromise\n                ]).then(function(_ref) {\n                    var args = _ref[0];\n                    return bindArgs$1(requireModule(serverReference), args);\n                });\n            } else {\n                if (preloadPromise) {\n                    promise = Promise.resolve(preloadPromise).then(function() {\n                        return requireModule(serverReference);\n                    });\n                } else {\n                    // Synchronously available\n                    return requireModule(serverReference);\n                }\n            }\n            promise.then(createModelResolver(parentChunk, parentObject, key), createModelReject(parentChunk)); // We need a placeholder value that will be replaced later.\n            return null;\n        }\n        var initializingChunk = null;\n        var initializingChunkBlockedModel = null;\n        function initializeModelChunk(chunk) {\n            var prevChunk = initializingChunk;\n            var prevBlocked = initializingChunkBlockedModel;\n            initializingChunk = chunk;\n            initializingChunkBlockedModel = null;\n            try {\n                var value = JSON.parse(chunk.value, chunk._response._fromJSON);\n                if (initializingChunkBlockedModel !== null && initializingChunkBlockedModel.deps > 0) {\n                    initializingChunkBlockedModel.value = value; // We discovered new dependencies on modules that are not yet resolved.\n                    // We have to go the BLOCKED state until they're resolved.\n                    var blockedChunk = chunk;\n                    blockedChunk.status = BLOCKED;\n                    blockedChunk.value = null;\n                    blockedChunk.reason = null;\n                } else {\n                    var initializedChunk = chunk;\n                    initializedChunk.status = INITIALIZED;\n                    initializedChunk.value = value;\n                }\n            } catch (error) {\n                var erroredChunk = chunk;\n                erroredChunk.status = ERRORED;\n                erroredChunk.reason = error;\n            } finally{\n                initializingChunk = prevChunk;\n                initializingChunkBlockedModel = prevBlocked;\n            }\n        } // Report that any missing chunks in the model is now going to throw this\n        // error upon read. Also notify any pending promises.\n        function reportGlobalError(response, error) {\n            response._chunks.forEach(function(chunk) {\n                // If this chunk was already resolved or errored, it won't\n                // trigger an error but if it wasn't then we need to\n                // because we won't be getting any new data to resolve it.\n                if (chunk.status === PENDING) {\n                    triggerErrorOnChunk(chunk, error);\n                }\n            });\n        }\n        function getChunk(response, id) {\n            var chunks = response._chunks;\n            var chunk = chunks.get(id);\n            if (!chunk) {\n                var prefix = response._prefix;\n                var key = prefix + id; // Check if we have this field in the backing store already.\n                var backingEntry = response._formData.get(key);\n                if (backingEntry != null) {\n                    // We assume that this is a string entry for now.\n                    chunk = createResolvedModelChunk(response, backingEntry);\n                } else {\n                    // We're still waiting on this entry to stream in.\n                    chunk = createPendingChunk(response);\n                }\n                chunks.set(id, chunk);\n            }\n            return chunk;\n        }\n        function createModelResolver(chunk, parentObject, key) {\n            var blocked;\n            if (initializingChunkBlockedModel) {\n                blocked = initializingChunkBlockedModel;\n                blocked.deps++;\n            } else {\n                blocked = initializingChunkBlockedModel = {\n                    deps: 1,\n                    value: null\n                };\n            }\n            return function(value) {\n                parentObject[key] = value;\n                blocked.deps--;\n                if (blocked.deps === 0) {\n                    if (chunk.status !== BLOCKED) {\n                        return;\n                    }\n                    var resolveListeners = chunk.value;\n                    var initializedChunk = chunk;\n                    initializedChunk.status = INITIALIZED;\n                    initializedChunk.value = blocked.value;\n                    if (resolveListeners !== null) {\n                        wakeChunk(resolveListeners, blocked.value);\n                    }\n                }\n            };\n        }\n        function createModelReject(chunk) {\n            return function(error) {\n                return triggerErrorOnChunk(chunk, error);\n            };\n        }\n        function getOutlinedModel(response, id) {\n            var chunk = getChunk(response, id);\n            if (chunk.status === RESOLVED_MODEL) {\n                initializeModelChunk(chunk);\n            }\n            if (chunk.status !== INITIALIZED) {\n                // We know that this is emitted earlier so otherwise it's an error.\n                throw chunk.reason;\n            }\n            return chunk.value;\n        }\n        function parseModelString(response, parentObject, key, value) {\n            if (value[0] === \"$\") {\n                switch(value[1]){\n                    case \"$\":\n                        {\n                            // This was an escaped string value.\n                            return value.slice(1);\n                        }\n                    case \"@\":\n                        {\n                            // Promise\n                            var id = parseInt(value.slice(2), 16);\n                            var chunk = getChunk(response, id);\n                            return chunk;\n                        }\n                    case \"S\":\n                        {\n                            // Symbol\n                            return Symbol.for(value.slice(2));\n                        }\n                    case \"F\":\n                        {\n                            // Server Reference\n                            var _id = parseInt(value.slice(2), 16); // TODO: Just encode this in the reference inline instead of as a model.\n                            var metaData = getOutlinedModel(response, _id);\n                            return loadServerReference$1(response, metaData.id, metaData.bound, initializingChunk, parentObject, key);\n                        }\n                    case \"Q\":\n                        {\n                            // Map\n                            var _id2 = parseInt(value.slice(2), 16);\n                            var data = getOutlinedModel(response, _id2);\n                            return new Map(data);\n                        }\n                    case \"W\":\n                        {\n                            // Set\n                            var _id3 = parseInt(value.slice(2), 16);\n                            var _data = getOutlinedModel(response, _id3);\n                            return new Set(_data);\n                        }\n                    case \"K\":\n                        {\n                            // FormData\n                            var stringId = value.slice(2);\n                            var formPrefix = response._prefix + stringId + \"_\";\n                            var _data2 = new FormData();\n                            var backingFormData = response._formData; // We assume that the reference to FormData always comes after each\n                            // entry that it references so we can assume they all exist in the\n                            // backing store already.\n                            // $FlowFixMe[prop-missing] FormData has forEach on it.\n                            backingFormData.forEach(function(entry, entryKey) {\n                                if (entryKey.startsWith(formPrefix)) {\n                                    _data2.append(entryKey.slice(formPrefix.length), entry);\n                                }\n                            });\n                            return _data2;\n                        }\n                    case \"I\":\n                        {\n                            // $Infinity\n                            return Infinity;\n                        }\n                    case \"-\":\n                        {\n                            // $-0 or $-Infinity\n                            if (value === \"$-0\") {\n                                return -0;\n                            } else {\n                                return -Infinity;\n                            }\n                        }\n                    case \"N\":\n                        {\n                            // $NaN\n                            return NaN;\n                        }\n                    case \"u\":\n                        {\n                            // matches \"$undefined\"\n                            // Special encoding for `undefined` which can't be serialized as JSON otherwise.\n                            return undefined;\n                        }\n                    case \"D\":\n                        {\n                            // Date\n                            return new Date(Date.parse(value.slice(2)));\n                        }\n                    case \"n\":\n                        {\n                            // BigInt\n                            return BigInt(value.slice(2));\n                        }\n                    default:\n                        {\n                            // We assume that anything else is a reference ID.\n                            var _id4 = parseInt(value.slice(1), 16);\n                            var _chunk = getChunk(response, _id4);\n                            switch(_chunk.status){\n                                case RESOLVED_MODEL:\n                                    initializeModelChunk(_chunk);\n                                    break;\n                            } // The status might have changed after initialization.\n                            switch(_chunk.status){\n                                case INITIALIZED:\n                                    return _chunk.value;\n                                case PENDING:\n                                case BLOCKED:\n                                    var parentChunk = initializingChunk;\n                                    _chunk.then(createModelResolver(parentChunk, parentObject, key), createModelReject(parentChunk));\n                                    return null;\n                                default:\n                                    throw _chunk.reason;\n                            }\n                        }\n                }\n            }\n            return value;\n        }\n        function createResponse(bundlerConfig, formFieldPrefix) {\n            var backingFormData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new FormData();\n            var chunks = new Map();\n            var response = {\n                _bundlerConfig: bundlerConfig,\n                _prefix: formFieldPrefix,\n                _formData: backingFormData,\n                _chunks: chunks,\n                _fromJSON: function(key, value) {\n                    if (typeof value === \"string\") {\n                        // We can't use .bind here because we need the \"this\" value.\n                        return parseModelString(response, this, key, value);\n                    }\n                    return value;\n                }\n            };\n            return response;\n        }\n        function close(response) {\n            // In case there are any remaining unresolved chunks, they won't\n            // be resolved now. So we need to issue an error to those.\n            // Ideally we should be able to early bail out if we kept a\n            // ref count of pending chunks.\n            reportGlobalError(response, new Error(\"Connection closed.\"));\n        }\n        function bindArgs(fn, args) {\n            return fn.bind.apply(fn, [\n                null\n            ].concat(args));\n        }\n        function loadServerReference(bundlerConfig, id, bound) {\n            var serverReference = resolveServerReference(bundlerConfig, id); // We expect most servers to not really need this because you'd just have all\n            // the relevant modules already loaded but it allows for lazy loading of code\n            // if needed.\n            var preloadPromise = preloadModule(serverReference);\n            if (bound) {\n                return Promise.all([\n                    bound,\n                    preloadPromise\n                ]).then(function(_ref) {\n                    var args = _ref[0];\n                    return bindArgs(requireModule(serverReference), args);\n                });\n            } else if (preloadPromise) {\n                return Promise.resolve(preloadPromise).then(function() {\n                    return requireModule(serverReference);\n                });\n            } else {\n                // Synchronously available\n                return Promise.resolve(requireModule(serverReference));\n            }\n        }\n        function decodeBoundActionMetaData(body, serverManifest, formFieldPrefix) {\n            // The data for this reference is encoded in multiple fields under this prefix.\n            var actionResponse = createResponse(serverManifest, formFieldPrefix, body);\n            close(actionResponse);\n            var refPromise = getRoot(actionResponse); // Force it to initialize\n            // $FlowFixMe\n            refPromise.then(function() {});\n            if (refPromise.status !== \"fulfilled\") {\n                // $FlowFixMe\n                throw refPromise.reason;\n            }\n            return refPromise.value;\n        }\n        function decodeAction(body, serverManifest) {\n            // We're going to create a new formData object that holds all the fields except\n            // the implementation details of the action data.\n            var formData = new FormData();\n            var action = null; // $FlowFixMe[prop-missing]\n            body.forEach(function(value, key) {\n                if (!key.startsWith(\"$ACTION_\")) {\n                    formData.append(key, value);\n                    return;\n                } // Later actions may override earlier actions if a button is used to override the default\n                // form action.\n                if (key.startsWith(\"$ACTION_REF_\")) {\n                    var formFieldPrefix = \"$ACTION_\" + key.slice(12) + \":\";\n                    var metaData = decodeBoundActionMetaData(body, serverManifest, formFieldPrefix);\n                    action = loadServerReference(serverManifest, metaData.id, metaData.bound);\n                    return;\n                }\n                if (key.startsWith(\"$ACTION_ID_\")) {\n                    var id = key.slice(11);\n                    action = loadServerReference(serverManifest, id, null);\n                    return;\n                }\n            });\n            if (action === null) {\n                return null;\n            } // Return the action with the remaining FormData bound to the first argument.\n            return action.then(function(fn) {\n                return fn.bind(null, formData);\n            });\n        }\n        function decodeFormState(actionResult, body, serverManifest) {\n            var keyPath = body.get(\"$ACTION_KEY\");\n            if (typeof keyPath !== \"string\") {\n                // This form submission did not include any form state.\n                return Promise.resolve(null);\n            } // Search through the form data object to get the reference id and the number\n            // of bound arguments. This repeats some of the work done in decodeAction.\n            var metaData = null; // $FlowFixMe[prop-missing]\n            body.forEach(function(value, key) {\n                if (key.startsWith(\"$ACTION_REF_\")) {\n                    var formFieldPrefix = \"$ACTION_\" + key.slice(12) + \":\";\n                    metaData = decodeBoundActionMetaData(body, serverManifest, formFieldPrefix);\n                } // We don't check for the simple $ACTION_ID_ case because form state actions\n            // are always bound to the state argument.\n            });\n            if (metaData === null) {\n                // Should be unreachable.\n                return Promise.resolve(null);\n            }\n            var referenceId = metaData.id;\n            return Promise.resolve(metaData.bound).then(function(bound) {\n                if (bound === null) {\n                    // Should be unreachable because form state actions are always bound to the\n                    // state argument.\n                    return null;\n                } // The form action dispatch method is always bound to the initial state.\n                // But when comparing signatures, we compare to the original unbound action.\n                // Subtract one from the arity to account for this.\n                var boundArity = bound.length - 1;\n                return [\n                    actionResult,\n                    keyPath,\n                    referenceId,\n                    boundArity\n                ];\n            });\n        }\n        function renderToReadableStream(model, webpackMap, options) {\n            var request = createRequest(model, webpackMap, options ? options.onError : undefined, options ? options.context : undefined, options ? options.identifierPrefix : undefined, options ? options.onPostpone : undefined);\n            if (options && options.signal) {\n                var signal = options.signal;\n                if (signal.aborted) {\n                    abort(request, signal.reason);\n                } else {\n                    var listener = function() {\n                        abort(request, signal.reason);\n                        signal.removeEventListener(\"abort\", listener);\n                    };\n                    signal.addEventListener(\"abort\", listener);\n                }\n            }\n            var stream = new ReadableStream({\n                type: \"bytes\",\n                start: function(controller) {\n                    startWork(request);\n                },\n                pull: function(controller) {\n                    startFlowing(request, controller);\n                },\n                cancel: function(reason) {\n                    stopFlowing(request);\n                    abort(request, reason);\n                }\n            }, // $FlowFixMe[prop-missing] size() methods are not allowed on byte streams.\n            {\n                highWaterMark: 0\n            });\n            return stream;\n        }\n        function decodeReply(body, webpackMap) {\n            if (typeof body === \"string\") {\n                var form = new FormData();\n                form.append(\"0\", body);\n                body = form;\n            }\n            var response = createResponse(webpackMap, \"\", body);\n            var root = getRoot(response);\n            close(response);\n            return root;\n        }\n        exports.createClientModuleProxy = createClientModuleProxy;\n        exports.decodeAction = decodeAction;\n        exports.decodeFormState = decodeFormState;\n        exports.decodeReply = decodeReply;\n        exports.registerClientReference = registerClientReference;\n        exports.registerServerReference = registerServerReference;\n        exports.renderToReadableStream = renderToReadableStream;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.edge.development.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/react-server-dom-webpack/server.edge.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-server-dom-webpack/server.edge.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-server-dom-webpack-server.edge.development.js */ \"(rsc)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.edge.development.js\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0LXNlcnZlci1kb20td2VicGFjay9zZXJ2ZXIuZWRnZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJLE9BQXVDLEVBRTFDLE1BQU07RUFDTEEsaU9BQXFGO0FBQ3ZGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3Qtc2VydmVyLWRvbS13ZWJwYWNrL3NlcnZlci5lZGdlLmpzPzg3ZWIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LXNlcnZlci1kb20td2VicGFjay1zZXJ2ZXIuZWRnZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1zZXJ2ZXItZG9tLXdlYnBhY2stc2VydmVyLmVkZ2UuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react-server-dom-webpack/server.edge.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/react/cjs/react.development.js":
/*!************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react.development.js ***!
  \************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n/**\n * @license React\n * react.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function () {\n    'use strict';\n\n    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') {\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n    }\n    var ReactVersion = '18.3.0-canary-60a927d04-20240113';\n\n    // ATTENTION\n    // When adding new symbols to this file,\n    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n    // The Symbol used to tag the ReactElement-like types.\n    var REACT_ELEMENT_TYPE = Symbol.for('react.element');\n    var REACT_PORTAL_TYPE = Symbol.for('react.portal');\n    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\n    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\n    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');\n    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');\n    var REACT_CONTEXT_TYPE = Symbol.for('react.context');\n    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\n    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\n    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\n    var REACT_MEMO_TYPE = Symbol.for('react.memo');\n    var REACT_LAZY_TYPE = Symbol.for('react.lazy');\n    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\n    var REACT_CACHE_TYPE = Symbol.for('react.cache');\n    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n    var FAUX_ITERATOR_SYMBOL = '@@iterator';\n    function getIteratorFn(maybeIterable) {\n      if (maybeIterable === null || typeof maybeIterable !== 'object') {\n        return null;\n      }\n      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n      if (typeof maybeIterator === 'function') {\n        return maybeIterator;\n      }\n      return null;\n    }\n\n    /**\n     * Keeps track of the current dispatcher.\n     */\n    var ReactCurrentDispatcher$1 = {\n      current: null\n    };\n\n    /**\n     * Keeps track of the current Cache dispatcher.\n     */\n    var ReactCurrentCache = {\n      current: null\n    };\n\n    /**\n     * Keeps track of the current batch's configuration such as how long an update\n     * should suspend for if it needs to.\n     */\n    var ReactCurrentBatchConfig = {\n      transition: null\n    };\n    var ReactCurrentActQueue = {\n      current: null,\n      // Used to reproduce behavior of `batchedUpdates` in legacy mode.\n      isBatchingLegacy: false,\n      didScheduleLegacyUpdate: false,\n      // Tracks whether something called `use` during the current batch of work.\n      // Determines whether we should yield to microtasks to unwrap already resolved\n      // promises without suspending.\n      didUsePromise: false\n    };\n\n    /**\n     * Keeps track of the current owner.\n     *\n     * The current owner is the component who should own any components that are\n     * currently being constructed.\n     */\n    var ReactCurrentOwner = {\n      /**\n       * @internal\n       * @type {ReactComponent}\n       */\n      current: null\n    };\n    var ReactDebugCurrentFrame$1 = {};\n    var currentExtraStackFrame = null;\n    function setExtraStackFrame(stack) {\n      {\n        currentExtraStackFrame = stack;\n      }\n    }\n    {\n      ReactDebugCurrentFrame$1.setExtraStackFrame = function (stack) {\n        {\n          currentExtraStackFrame = stack;\n        }\n      }; // Stack implementation injected by the current renderer.\n\n      ReactDebugCurrentFrame$1.getCurrentStack = null;\n      ReactDebugCurrentFrame$1.getStackAddendum = function () {\n        var stack = ''; // Add an extra top frame while an element is being validated\n\n        if (currentExtraStackFrame) {\n          stack += currentExtraStackFrame;\n        } // Delegate to the injected renderer-specific implementation\n\n        var impl = ReactDebugCurrentFrame$1.getCurrentStack;\n        if (impl) {\n          stack += impl() || '';\n        }\n        return stack;\n      };\n    }\n\n    // -----------------------------------------------------------------------------\n\n    var enableScopeAPI = false; // Experimental Create Event Handle API.\n    var enableCacheElement = false;\n    var enableTransitionTracing = false; // No known bugs, but needs performance testing\n\n    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n    // stuff. Intended to enable React core members to more easily debug scheduling\n    // issues in DEV builds.\n\n    var enableDebugTracing = false;\n    var ReactSharedInternals = {\n      ReactCurrentDispatcher: ReactCurrentDispatcher$1,\n      ReactCurrentCache: ReactCurrentCache,\n      ReactCurrentBatchConfig: ReactCurrentBatchConfig,\n      ReactCurrentOwner: ReactCurrentOwner\n    };\n    {\n      ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame$1;\n      ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;\n    }\n\n    // by calls to these methods by a Babel plugin.\n    //\n    // In PROD (or in packages without access to React internals),\n    // they are left as they are instead.\n\n    function warn(format) {\n      {\n        {\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n          printWarning('warn', format, args);\n        }\n      }\n    }\n    function error(format) {\n      {\n        {\n          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            args[_key2 - 1] = arguments[_key2];\n          }\n          printWarning('error', format, args);\n        }\n      }\n    }\n    function printWarning(level, format, args) {\n      // When changing this logic, you might want to also\n      // update consoleWithStackDev.www.js as well.\n      {\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var stack = ReactDebugCurrentFrame.getStackAddendum();\n        if (stack !== '') {\n          format += '%s';\n          args = args.concat([stack]);\n        } // eslint-disable-next-line react-internal/safe-string-coercion\n\n        var argsWithFormat = args.map(function (item) {\n          return String(item);\n        }); // Careful: RN currently depends on this prefix\n\n        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n        // breaks IE9: https://github.com/facebook/react/issues/13610\n        // eslint-disable-next-line react-internal/no-production-logging\n\n        Function.prototype.apply.call(console[level], console, argsWithFormat);\n      }\n    }\n    var didWarnStateUpdateForUnmountedComponent = {};\n    function warnNoop(publicInstance, callerName) {\n      {\n        var _constructor = publicInstance.constructor;\n        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';\n        var warningKey = componentName + \".\" + callerName;\n        if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n          return;\n        }\n        error(\"Can't call %s on a component that is not yet mounted. \" + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);\n        didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n      }\n    }\n    /**\n     * This is the abstract API for an update queue.\n     */\n\n    var ReactNoopUpdateQueue = {\n      /**\n       * Checks whether or not this composite component is mounted.\n       * @param {ReactClass} publicInstance The instance we want to test.\n       * @return {boolean} True if mounted, false otherwise.\n       * @protected\n       * @final\n       */\n      isMounted: function (publicInstance) {\n        return false;\n      },\n      /**\n       * Forces an update. This should only be invoked when it is known with\n       * certainty that we are **not** in a DOM transaction.\n       *\n       * You may want to call this when you know that some deeper aspect of the\n       * component's state has changed but `setState` was not called.\n       *\n       * This will not invoke `shouldComponentUpdate`, but it will invoke\n       * `componentWillUpdate` and `componentDidUpdate`.\n       *\n       * @param {ReactClass} publicInstance The instance that should rerender.\n       * @param {?function} callback Called after component is updated.\n       * @param {?string} callerName name of the calling function in the public API.\n       * @internal\n       */\n      enqueueForceUpdate: function (publicInstance, callback, callerName) {\n        warnNoop(publicInstance, 'forceUpdate');\n      },\n      /**\n       * Replaces all of the state. Always use this or `setState` to mutate state.\n       * You should treat `this.state` as immutable.\n       *\n       * There is no guarantee that `this.state` will be immediately updated, so\n       * accessing `this.state` after calling this method may return the old value.\n       *\n       * @param {ReactClass} publicInstance The instance that should rerender.\n       * @param {object} completeState Next state.\n       * @param {?function} callback Called after component is updated.\n       * @param {?string} callerName name of the calling function in the public API.\n       * @internal\n       */\n      enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n        warnNoop(publicInstance, 'replaceState');\n      },\n      /**\n       * Sets a subset of the state. This only exists because _pendingState is\n       * internal. This provides a merging strategy that is not available to deep\n       * properties which is confusing. TODO: Expose pendingState or don't use it\n       * during the merge.\n       *\n       * @param {ReactClass} publicInstance The instance that should rerender.\n       * @param {object} partialState Next partial state to be merged with state.\n       * @param {?function} callback Called after component is updated.\n       * @param {?string} Name of the calling function in the public API.\n       * @internal\n       */\n      enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n        warnNoop(publicInstance, 'setState');\n      }\n    };\n    var assign = Object.assign;\n    var emptyObject = {};\n    {\n      Object.freeze(emptyObject);\n    }\n    /**\n     * Base class helpers for the updating state of a component.\n     */\n\n    function Component(props, context, updater) {\n      this.props = props;\n      this.context = context; // If a component has string refs, we will assign a different object later.\n\n      this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n      // renderer.\n\n      this.updater = updater || ReactNoopUpdateQueue;\n    }\n    Component.prototype.isReactComponent = {};\n    /**\n     * Sets a subset of the state. Always use this to mutate\n     * state. You should treat `this.state` as immutable.\n     *\n     * There is no guarantee that `this.state` will be immediately updated, so\n     * accessing `this.state` after calling this method may return the old value.\n     *\n     * There is no guarantee that calls to `setState` will run synchronously,\n     * as they may eventually be batched together.  You can provide an optional\n     * callback that will be executed when the call to setState is actually\n     * completed.\n     *\n     * When a function is provided to setState, it will be called at some point in\n     * the future (not synchronously). It will be called with the up to date\n     * component arguments (state, props, context). These values can be different\n     * from this.* because your function may be called after receiveProps but before\n     * shouldComponentUpdate, and this new state, props, and context will not yet be\n     * assigned to this.\n     *\n     * @param {object|function} partialState Next partial state or function to\n     *        produce next partial state to be merged with current state.\n     * @param {?function} callback Called after state is updated.\n     * @final\n     * @protected\n     */\n\n    Component.prototype.setState = function (partialState, callback) {\n      if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) {\n        throw new Error('setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.');\n      }\n      this.updater.enqueueSetState(this, partialState, callback, 'setState');\n    };\n    /**\n     * Forces an update. This should only be invoked when it is known with\n     * certainty that we are **not** in a DOM transaction.\n     *\n     * You may want to call this when you know that some deeper aspect of the\n     * component's state has changed but `setState` was not called.\n     *\n     * This will not invoke `shouldComponentUpdate`, but it will invoke\n     * `componentWillUpdate` and `componentDidUpdate`.\n     *\n     * @param {?function} callback Called after update is complete.\n     * @final\n     * @protected\n     */\n\n    Component.prototype.forceUpdate = function (callback) {\n      this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n    };\n    /**\n     * Deprecated APIs. These APIs used to exist on classic React classes but since\n     * we would like to deprecate them, we're not going to move them over to this\n     * modern base class. Instead, we define a getter that warns if it's accessed.\n     */\n\n    {\n      var deprecatedAPIs = {\n        isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n        replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n      };\n      var defineDeprecationWarning = function (methodName, info) {\n        Object.defineProperty(Component.prototype, methodName, {\n          get: function () {\n            warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n            return undefined;\n          }\n        });\n      };\n      for (var fnName in deprecatedAPIs) {\n        if (deprecatedAPIs.hasOwnProperty(fnName)) {\n          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n        }\n      }\n    }\n    function ComponentDummy() {}\n    ComponentDummy.prototype = Component.prototype;\n    /**\n     * Convenience component with default shallow equality check for sCU.\n     */\n\n    function PureComponent(props, context, updater) {\n      this.props = props;\n      this.context = context; // If a component has string refs, we will assign a different object later.\n\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n    }\n    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\n    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n\n    assign(pureComponentPrototype, Component.prototype);\n    pureComponentPrototype.isPureReactComponent = true;\n\n    // an immutable object with a single mutable value\n    function createRef() {\n      var refObject = {\n        current: null\n      };\n      {\n        Object.seal(refObject);\n      }\n      return refObject;\n    }\n    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\n    function isArray(a) {\n      return isArrayImpl(a);\n    }\n\n    /*\n     * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n     * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n     *\n     * The functions in this module will throw an easier-to-understand,\n     * easier-to-debug exception with a clear errors message message explaining the\n     * problem. (Instead of a confusing exception thrown inside the implementation\n     * of the `value` object).\n     */\n    // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n    function typeName(value) {\n      {\n        // toStringTag is needed for namespaced types like Temporal.Instant\n        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n        return type;\n      }\n    } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n    function willCoercionThrow(value) {\n      {\n        try {\n          testStringCoercion(value);\n          return false;\n        } catch (e) {\n          return true;\n        }\n      }\n    }\n    function testStringCoercion(value) {\n      // If you ended up here by following an exception call stack, here's what's\n      // happened: you supplied an object or symbol value to React (as a prop, key,\n      // DOM attribute, CSS property, string ref, etc.) and when React tried to\n      // coerce it to a string using `'' + value`, an exception was thrown.\n      //\n      // The most common types that will cause this exception are `Symbol` instances\n      // and Temporal objects like `Temporal.Instant`. But any object that has a\n      // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n      // exception. (Library authors do this to prevent users from using built-in\n      // numeric operators like `+` or comparison operators like `>=` because custom\n      // methods are needed to perform accurate arithmetic or comparison.)\n      //\n      // To fix the problem, coerce this object or symbol value to a string before\n      // passing it to React. The most reliable way is usually `String(value)`.\n      //\n      // To find which value is throwing, check the browser or debugger console.\n      // Before this exception was thrown, there should be `console.error` output\n      // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n      // problem and how that type was used: key, atrribute, input value prop, etc.\n      // In most cases, this console output also shows the component and its\n      // ancestor components where the exception happened.\n      //\n      // eslint-disable-next-line react-internal/safe-string-coercion\n      return '' + value;\n    }\n    function checkKeyStringCoercion(value) {\n      {\n        if (willCoercionThrow(value)) {\n          error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n          return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n        }\n      }\n    }\n\n    function getWrappedName(outerType, innerType, wrapperName) {\n      var displayName = outerType.displayName;\n      if (displayName) {\n        return displayName;\n      }\n      var functionName = innerType.displayName || innerType.name || '';\n      return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n    } // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n    function getContextName(type) {\n      return type.displayName || 'Context';\n    }\n    var REACT_CLIENT_REFERENCE$2 = Symbol.for('react.client.reference'); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n    function getComponentNameFromType(type) {\n      if (type == null) {\n        // Host root, text node or just invalid type.\n        return null;\n      }\n      if (typeof type === 'function') {\n        if (type.$$typeof === REACT_CLIENT_REFERENCE$2) {\n          // TODO: Create a convention for naming client references with debug info.\n          return null;\n        }\n        return type.displayName || type.name || null;\n      }\n      if (typeof type === 'string') {\n        return type;\n      }\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return 'Fragment';\n        case REACT_PORTAL_TYPE:\n          return 'Portal';\n        case REACT_PROFILER_TYPE:\n          return 'Profiler';\n        case REACT_STRICT_MODE_TYPE:\n          return 'StrictMode';\n        case REACT_SUSPENSE_TYPE:\n          return 'Suspense';\n        case REACT_SUSPENSE_LIST_TYPE:\n          return 'SuspenseList';\n        case REACT_CACHE_TYPE:\n          {\n            return 'Cache';\n          }\n      }\n      if (typeof type === 'object') {\n        {\n          if (typeof type.tag === 'number') {\n            error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n          }\n        }\n        switch (type.$$typeof) {\n          case REACT_CONTEXT_TYPE:\n            var context = type;\n            return getContextName(context) + '.Consumer';\n          case REACT_PROVIDER_TYPE:\n            var provider = type;\n            return getContextName(provider._context) + '.Provider';\n          case REACT_FORWARD_REF_TYPE:\n            return getWrappedName(type, type.render, 'ForwardRef');\n          case REACT_MEMO_TYPE:\n            var outerName = type.displayName || null;\n            if (outerName !== null) {\n              return outerName;\n            }\n            return getComponentNameFromType(type.type) || 'Memo';\n          case REACT_LAZY_TYPE:\n            {\n              var lazyComponent = type;\n              var payload = lazyComponent._payload;\n              var init = lazyComponent._init;\n              try {\n                return getComponentNameFromType(init(payload));\n              } catch (x) {\n                return null;\n              }\n            }\n        }\n      }\n      return null;\n    }\n\n    // $FlowFixMe[method-unbinding]\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    var RESERVED_PROPS = {\n      key: true,\n      ref: true,\n      __self: true,\n      __source: true\n    };\n    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;\n    {\n      didWarnAboutStringRefs = {};\n    }\n    function hasValidRef(config) {\n      {\n        if (hasOwnProperty.call(config, 'ref')) {\n          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n          if (getter && getter.isReactWarning) {\n            return false;\n          }\n        }\n      }\n      return config.ref !== undefined;\n    }\n    function hasValidKey(config) {\n      {\n        if (hasOwnProperty.call(config, 'key')) {\n          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n          if (getter && getter.isReactWarning) {\n            return false;\n          }\n        }\n      }\n      return config.key !== undefined;\n    }\n    function defineKeyPropWarningGetter(props, displayName) {\n      var warnAboutAccessingKey = function () {\n        {\n          if (!specialPropKeyWarningShown) {\n            specialPropKeyWarningShown = true;\n            error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n          }\n        }\n      };\n      warnAboutAccessingKey.isReactWarning = true;\n      Object.defineProperty(props, 'key', {\n        get: warnAboutAccessingKey,\n        configurable: true\n      });\n    }\n    function defineRefPropWarningGetter(props, displayName) {\n      var warnAboutAccessingRef = function () {\n        {\n          if (!specialPropRefWarningShown) {\n            specialPropRefWarningShown = true;\n            error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n          }\n        }\n      };\n      warnAboutAccessingRef.isReactWarning = true;\n      Object.defineProperty(props, 'ref', {\n        get: warnAboutAccessingRef,\n        configurable: true\n      });\n    }\n    function warnIfStringRefCannotBeAutoConverted(config) {\n      {\n        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {\n          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n          if (!didWarnAboutStringRefs[componentName]) {\n            error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);\n            didWarnAboutStringRefs[componentName] = true;\n          }\n        }\n      }\n    }\n    /**\n     * Factory method to create a new React element. This no longer adheres to\n     * the class pattern, so do not use new to call it. Also, instanceof check\n     * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n     * if something is a React Element.\n     *\n     * @param {*} type\n     * @param {*} props\n     * @param {*} key\n     * @param {string|object} ref\n     * @param {*} owner\n     * @param {*} self A *temporary* helper to detect places where `this` is\n     * different from the `owner` when React.createElement is called, so that we\n     * can warn. We want to get rid of owner and replace string `ref`s with arrow\n     * functions, and as long as `this` and owner are the same, there will be no\n     * change in behavior.\n     * @param {*} source An annotation object (added by a transpiler or otherwise)\n     * indicating filename, line number, and/or other information.\n     * @internal\n     */\n\n    function ReactElement(type, key, ref, self, source, owner, props) {\n      var element = {\n        // This tag allows us to uniquely identify this as a React Element\n        $$typeof: REACT_ELEMENT_TYPE,\n        // Built-in properties that belong on the element\n        type: type,\n        key: key,\n        ref: ref,\n        props: props,\n        // Record the component responsible for creating this element.\n        _owner: owner\n      };\n      {\n        // The validation flag is currently mutative. We put it on\n        // an external backing store so that we can freeze the whole object.\n        // This can be replaced with a WeakMap once they are implemented in\n        // commonly used development environments.\n        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n        // the validation flag non-enumerable (where possible, which should\n        // include every environment we run tests in), so the test framework\n        // ignores it.\n\n        Object.defineProperty(element._store, 'validated', {\n          configurable: false,\n          enumerable: false,\n          writable: true,\n          value: false\n        }); // self and source are DEV only properties.\n\n        Object.defineProperty(element, '_self', {\n          configurable: false,\n          enumerable: false,\n          writable: false,\n          value: self\n        }); // Two elements created in two different places should be considered\n        // equal for testing purposes and therefore we hide it from enumeration.\n\n        Object.defineProperty(element, '_source', {\n          configurable: false,\n          enumerable: false,\n          writable: false,\n          value: source\n        });\n        if (Object.freeze) {\n          Object.freeze(element.props);\n          Object.freeze(element);\n        }\n      }\n      return element;\n    }\n    /**\n     * Create and return a new ReactElement of the given type.\n     * See https://reactjs.org/docs/react-api.html#createelement\n     */\n\n    function createElement$1(type, config, children) {\n      var propName; // Reserved names are extracted\n\n      var props = {};\n      var key = null;\n      var ref = null;\n      var self = null;\n      var source = null;\n      if (config != null) {\n        if (hasValidRef(config)) {\n          ref = config.ref;\n          {\n            warnIfStringRefCannotBeAutoConverted(config);\n          }\n        }\n        if (hasValidKey(config)) {\n          {\n            checkKeyStringCoercion(config.key);\n          }\n          key = '' + config.key;\n        }\n        self = config.__self === undefined ? null : config.__self;\n        source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n\n        for (propName in config) {\n          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n            props[propName] = config[propName];\n          }\n        }\n      } // Children can be more than one argument, and those are transferred onto\n      // the newly allocated props object.\n\n      var childrenLength = arguments.length - 2;\n      if (childrenLength === 1) {\n        props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = Array(childrenLength);\n        for (var i = 0; i < childrenLength; i++) {\n          childArray[i] = arguments[i + 2];\n        }\n        {\n          if (Object.freeze) {\n            Object.freeze(childArray);\n          }\n        }\n        props.children = childArray;\n      } // Resolve default props\n\n      if (type && type.defaultProps) {\n        var defaultProps = type.defaultProps;\n        for (propName in defaultProps) {\n          if (props[propName] === undefined) {\n            props[propName] = defaultProps[propName];\n          }\n        }\n      }\n      {\n        if (key || ref) {\n          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n          if (key) {\n            defineKeyPropWarningGetter(props, displayName);\n          }\n          if (ref) {\n            defineRefPropWarningGetter(props, displayName);\n          }\n        }\n      }\n      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n    }\n    function cloneAndReplaceKey(oldElement, newKey) {\n      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n      return newElement;\n    }\n    /**\n     * Clone and return a new ReactElement using element as the starting point.\n     * See https://reactjs.org/docs/react-api.html#cloneelement\n     */\n\n    function cloneElement$1(element, config, children) {\n      if (element === null || element === undefined) {\n        throw new Error(\"React.cloneElement(...): The argument must be a React element, but you passed \" + element + \".\");\n      }\n      var propName; // Original props are copied\n\n      var props = assign({}, element.props); // Reserved names are extracted\n\n      var key = element.key;\n      var ref = element.ref; // Self is preserved since the owner is preserved.\n\n      var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n      // transpiler, and the original source is probably a better indicator of the\n      // true owner.\n\n      var source = element._source; // Owner will be preserved, unless ref is overridden\n\n      var owner = element._owner;\n      if (config != null) {\n        if (hasValidRef(config)) {\n          // Silently steal the ref from the parent.\n          ref = config.ref;\n          owner = ReactCurrentOwner.current;\n        }\n        if (hasValidKey(config)) {\n          {\n            checkKeyStringCoercion(config.key);\n          }\n          key = '' + config.key;\n        } // Remaining properties override existing props\n\n        var defaultProps;\n        if (element.type && element.type.defaultProps) {\n          defaultProps = element.type.defaultProps;\n        }\n        for (propName in config) {\n          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n            if (config[propName] === undefined && defaultProps !== undefined) {\n              // Resolve default props\n              props[propName] = defaultProps[propName];\n            } else {\n              props[propName] = config[propName];\n            }\n          }\n        }\n      } // Children can be more than one argument, and those are transferred onto\n      // the newly allocated props object.\n\n      var childrenLength = arguments.length - 2;\n      if (childrenLength === 1) {\n        props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = Array(childrenLength);\n        for (var i = 0; i < childrenLength; i++) {\n          childArray[i] = arguments[i + 2];\n        }\n        props.children = childArray;\n      }\n      return ReactElement(element.type, key, ref, self, source, owner, props);\n    }\n    /**\n     * Verifies the object is a ReactElement.\n     * See https://reactjs.org/docs/react-api.html#isvalidelement\n     * @param {?object} object\n     * @return {boolean} True if `object` is a ReactElement.\n     * @final\n     */\n\n    function isValidElement(object) {\n      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n    }\n    var SEPARATOR = '.';\n    var SUBSEPARATOR = ':';\n    /**\n     * Escape and wrap key so it is safe to use as a reactid\n     *\n     * @param {string} key to be escaped.\n     * @return {string} the escaped key.\n     */\n\n    function escape(key) {\n      var escapeRegex = /[=:]/g;\n      var escaperLookup = {\n        '=': '=0',\n        ':': '=2'\n      };\n      var escapedString = key.replace(escapeRegex, function (match) {\n        return escaperLookup[match];\n      });\n      return '$' + escapedString;\n    }\n    /**\n     * TODO: Test that a single child and an array with one item have the same key\n     * pattern.\n     */\n\n    var didWarnAboutMaps = false;\n    var userProvidedKeyEscapeRegex = /\\/+/g;\n    function escapeUserProvidedKey(text) {\n      return text.replace(userProvidedKeyEscapeRegex, '$&/');\n    }\n    /**\n     * Generate a key string that identifies a element within a set.\n     *\n     * @param {*} element A element that could contain a manual key.\n     * @param {number} index Index that is used if a manual key is not provided.\n     * @return {string}\n     */\n\n    function getElementKey(element, index) {\n      // Do some typechecking here since we call this blindly. We want to ensure\n      // that we don't block potential future ES APIs.\n      if (typeof element === 'object' && element !== null && element.key != null) {\n        // Explicit key\n        {\n          checkKeyStringCoercion(element.key);\n        }\n        return escape('' + element.key);\n      } // Implicit key determined by the index in the set\n\n      return index.toString(36);\n    }\n    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {\n      var type = typeof children;\n      if (type === 'undefined' || type === 'boolean') {\n        // All of the above are perceived as null.\n        children = null;\n      }\n      var invokeCallback = false;\n      if (children === null) {\n        invokeCallback = true;\n      } else {\n        switch (type) {\n          case 'string':\n          case 'number':\n            invokeCallback = true;\n            break;\n          case 'object':\n            switch (children.$$typeof) {\n              case REACT_ELEMENT_TYPE:\n              case REACT_PORTAL_TYPE:\n                invokeCallback = true;\n            }\n        }\n      }\n      if (invokeCallback) {\n        var _child = children;\n        var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array\n        // so that it's consistent if the number of children grows:\n\n        var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;\n        if (isArray(mappedChild)) {\n          var escapedChildKey = '';\n          if (childKey != null) {\n            escapedChildKey = escapeUserProvidedKey(childKey) + '/';\n          }\n          mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {\n            return c;\n          });\n        } else if (mappedChild != null) {\n          if (isValidElement(mappedChild)) {\n            {\n              // The `if` statement here prevents auto-disabling of the safe\n              // coercion ESLint rule, so we must manually disable it below.\n              // $FlowFixMe[incompatible-type] Flow incorrectly thinks React.Portal doesn't have a key\n              if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {\n                checkKeyStringCoercion(mappedChild.key);\n              }\n            }\n            mappedChild = cloneAndReplaceKey(mappedChild,\n            // Keep both the (mapped) and old keys if they differ, just as\n            // traverseAllChildren used to do for objects as children\n            escapedPrefix + (\n            // $FlowFixMe[incompatible-type] Flow incorrectly thinks React.Portal doesn't have a key\n            mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey(\n            // $FlowFixMe[unsafe-addition]\n            '' + mappedChild.key // eslint-disable-line react-internal/safe-string-coercion\n            ) + '/' : '') + childKey);\n          }\n          array.push(mappedChild);\n        }\n        return 1;\n      }\n      var child;\n      var nextName;\n      var subtreeCount = 0; // Count of children found in the current subtree.\n\n      var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n      if (isArray(children)) {\n        for (var i = 0; i < children.length; i++) {\n          child = children[i];\n          nextName = nextNamePrefix + getElementKey(child, i);\n          subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n        }\n      } else {\n        var iteratorFn = getIteratorFn(children);\n        if (typeof iteratorFn === 'function') {\n          var iterableChildren = children;\n          {\n            // Warn about using Maps as children\n            if (iteratorFn === iterableChildren.entries) {\n              if (!didWarnAboutMaps) {\n                warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n              }\n              didWarnAboutMaps = true;\n            }\n          }\n          var iterator = iteratorFn.call(iterableChildren);\n          var step;\n          var ii = 0; // $FlowFixMe[incompatible-use] `iteratorFn` might return null according to typing.\n\n          while (!(step = iterator.next()).done) {\n            child = step.value;\n            nextName = nextNamePrefix + getElementKey(child, ii++);\n            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n          }\n        } else if (type === 'object') {\n          // eslint-disable-next-line react-internal/safe-string-coercion\n          var childrenString = String(children);\n          throw new Error(\"Objects are not valid as a React child (found: \" + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + \"). \" + 'If you meant to render a collection of children, use an array ' + 'instead.');\n        }\n      }\n      return subtreeCount;\n    }\n    /**\n     * Maps children that are typically specified as `props.children`.\n     *\n     * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n     *\n     * The provided mapFunction(child, index) will be called for each\n     * leaf child.\n     *\n     * @param {?*} children Children tree container.\n     * @param {function(*, int)} func The map function.\n     * @param {*} context Context for mapFunction.\n     * @return {object} Object containing the ordered map of results.\n     */\n\n    function mapChildren(children, func, context) {\n      if (children == null) {\n        // $FlowFixMe limitation refining abstract types in Flow\n        return children;\n      }\n      var result = [];\n      var count = 0;\n      mapIntoArray(children, result, '', '', function (child) {\n        return func.call(context, child, count++);\n      });\n      return result;\n    }\n    /**\n     * Count the number of children that are typically specified as\n     * `props.children`.\n     *\n     * See https://reactjs.org/docs/react-api.html#reactchildrencount\n     *\n     * @param {?*} children Children tree container.\n     * @return {number} The number of children.\n     */\n\n    function countChildren(children) {\n      var n = 0;\n      mapChildren(children, function () {\n        n++; // Don't return anything\n      });\n\n      return n;\n    }\n    /**\n     * Iterates through children that are typically specified as `props.children`.\n     *\n     * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n     *\n     * The provided forEachFunc(child, index) will be called for each\n     * leaf child.\n     *\n     * @param {?*} children Children tree container.\n     * @param {function(*, int)} forEachFunc\n     * @param {*} forEachContext Context for forEachContext.\n     */\n\n    function forEachChildren(children, forEachFunc, forEachContext) {\n      mapChildren(children,\n      // $FlowFixMe[missing-this-annot]\n      function () {\n        forEachFunc.apply(this, arguments); // Don't return anything.\n      }, forEachContext);\n    }\n    /**\n     * Flatten a children object (typically specified as `props.children`) and\n     * return an array with appropriately re-keyed children.\n     *\n     * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n     */\n\n    function toArray(children) {\n      return mapChildren(children, function (child) {\n        return child;\n      }) || [];\n    }\n    /**\n     * Returns the first child in a collection of children and verifies that there\n     * is only one child in the collection.\n     *\n     * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n     *\n     * The current implementation of this function assumes that a single child gets\n     * passed without a wrapper, but the purpose of this helper function is to\n     * abstract away the particular structure of children.\n     *\n     * @param {?object} children Child collection structure.\n     * @return {ReactElement} The first and only `ReactElement` contained in the\n     * structure.\n     */\n\n    function onlyChild(children) {\n      if (!isValidElement(children)) {\n        throw new Error('React.Children.only expected to receive a single React element child.');\n      }\n      return children;\n    }\n    function createContext(defaultValue) {\n      // TODO: Second argument used to be an optional `calculateChangedBits`\n      // function. Warn to reserve for future use?\n      var context = {\n        $$typeof: REACT_CONTEXT_TYPE,\n        // As a workaround to support multiple concurrent renderers, we categorize\n        // some renderers as primary and others as secondary. We only expect\n        // there to be two concurrent renderers at most: React Native (primary) and\n        // Fabric (secondary); React DOM (primary) and React ART (secondary).\n        // Secondary renderers store their context values on separate fields.\n        _currentValue: defaultValue,\n        _currentValue2: defaultValue,\n        // Used to track how many concurrent renderers this context currently\n        // supports within in a single renderer. Such as parallel server rendering.\n        _threadCount: 0,\n        // These are circular\n        Provider: null,\n        Consumer: null,\n        // Add these to use same hidden class in VM as ServerContext\n        _defaultValue: null,\n        _globalName: null\n      };\n      context.Provider = {\n        $$typeof: REACT_PROVIDER_TYPE,\n        _context: context\n      };\n      var hasWarnedAboutUsingNestedContextConsumers = false;\n      var hasWarnedAboutUsingConsumerProvider = false;\n      var hasWarnedAboutDisplayNameOnConsumer = false;\n      {\n        // A separate object, but proxies back to the original context object for\n        // backwards compatibility. It has a different $$typeof, so we can properly\n        // warn for the incorrect usage of Context as a Consumer.\n        var Consumer = {\n          $$typeof: REACT_CONTEXT_TYPE,\n          _context: context\n        }; // $FlowFixMe[prop-missing]: Flow complains about not setting a value, which is intentional here\n\n        Object.defineProperties(Consumer, {\n          Provider: {\n            get: function () {\n              if (!hasWarnedAboutUsingConsumerProvider) {\n                hasWarnedAboutUsingConsumerProvider = true;\n                error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');\n              }\n              return context.Provider;\n            },\n            set: function (_Provider) {\n              context.Provider = _Provider;\n            }\n          },\n          _currentValue: {\n            get: function () {\n              return context._currentValue;\n            },\n            set: function (_currentValue) {\n              context._currentValue = _currentValue;\n            }\n          },\n          _currentValue2: {\n            get: function () {\n              return context._currentValue2;\n            },\n            set: function (_currentValue2) {\n              context._currentValue2 = _currentValue2;\n            }\n          },\n          _threadCount: {\n            get: function () {\n              return context._threadCount;\n            },\n            set: function (_threadCount) {\n              context._threadCount = _threadCount;\n            }\n          },\n          Consumer: {\n            get: function () {\n              if (!hasWarnedAboutUsingNestedContextConsumers) {\n                hasWarnedAboutUsingNestedContextConsumers = true;\n                error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n              }\n              return context.Consumer;\n            }\n          },\n          displayName: {\n            get: function () {\n              return context.displayName;\n            },\n            set: function (displayName) {\n              if (!hasWarnedAboutDisplayNameOnConsumer) {\n                warn('Setting `displayName` on Context.Consumer has no effect. ' + \"You should set it directly on the context with Context.displayName = '%s'.\", displayName);\n                hasWarnedAboutDisplayNameOnConsumer = true;\n              }\n            }\n          }\n        }); // $FlowFixMe[prop-missing]: Flow complains about missing properties because it doesn't understand defineProperty\n\n        context.Consumer = Consumer;\n      }\n      {\n        context._currentRenderer = null;\n        context._currentRenderer2 = null;\n      }\n      return context;\n    }\n    var Uninitialized = -1;\n    var Pending = 0;\n    var Resolved = 1;\n    var Rejected = 2;\n    function lazyInitializer(payload) {\n      if (payload._status === Uninitialized) {\n        var ctor = payload._result;\n        var thenable = ctor(); // Transition to the next state.\n        // This might throw either because it's missing or throws. If so, we treat it\n        // as still uninitialized and try again next time. Which is the same as what\n        // happens if the ctor or any wrappers processing the ctor throws. This might\n        // end up fixing it if the resolution was a concurrency bug.\n\n        thenable.then(function (moduleObject) {\n          if (payload._status === Pending || payload._status === Uninitialized) {\n            // Transition to the next state.\n            var resolved = payload;\n            resolved._status = Resolved;\n            resolved._result = moduleObject;\n          }\n        }, function (error) {\n          if (payload._status === Pending || payload._status === Uninitialized) {\n            // Transition to the next state.\n            var rejected = payload;\n            rejected._status = Rejected;\n            rejected._result = error;\n          }\n        });\n        if (payload._status === Uninitialized) {\n          // In case, we're still uninitialized, then we're waiting for the thenable\n          // to resolve. Set it as pending in the meantime.\n          var pending = payload;\n          pending._status = Pending;\n          pending._result = thenable;\n        }\n      }\n      if (payload._status === Resolved) {\n        var moduleObject = payload._result;\n        {\n          if (moduleObject === undefined) {\n            error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\\n\\nYour code should look like: \\n  ' +\n            // Break up imports to avoid accidentally parsing them as dependencies.\n            'const MyComponent = lazy(() => imp' + \"ort('./MyComponent'))\\n\\n\" + 'Did you accidentally put curly braces around the import?', moduleObject);\n          }\n        }\n        {\n          if (!('default' in moduleObject)) {\n            error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\\n\\nYour code should look like: \\n  ' +\n            // Break up imports to avoid accidentally parsing them as dependencies.\n            'const MyComponent = lazy(() => imp' + \"ort('./MyComponent'))\", moduleObject);\n          }\n        }\n        return moduleObject.default;\n      } else {\n        throw payload._result;\n      }\n    }\n    function lazy(ctor) {\n      var payload = {\n        // We use these fields to store the result.\n        _status: Uninitialized,\n        _result: ctor\n      };\n      var lazyType = {\n        $$typeof: REACT_LAZY_TYPE,\n        _payload: payload,\n        _init: lazyInitializer\n      };\n      {\n        // In production, this would just set it on the object.\n        var defaultProps;\n        var propTypes; // $FlowFixMe[prop-missing]\n\n        Object.defineProperties(lazyType, {\n          defaultProps: {\n            configurable: true,\n            get: function () {\n              return defaultProps;\n            },\n            // $FlowFixMe[missing-local-annot]\n            set: function (newDefaultProps) {\n              error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n              defaultProps = newDefaultProps; // Match production behavior more closely:\n              // $FlowFixMe[prop-missing]\n\n              Object.defineProperty(lazyType, 'defaultProps', {\n                enumerable: true\n              });\n            }\n          },\n          propTypes: {\n            configurable: true,\n            get: function () {\n              return propTypes;\n            },\n            // $FlowFixMe[missing-local-annot]\n            set: function (newPropTypes) {\n              error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n              propTypes = newPropTypes; // Match production behavior more closely:\n              // $FlowFixMe[prop-missing]\n\n              Object.defineProperty(lazyType, 'propTypes', {\n                enumerable: true\n              });\n            }\n          }\n        });\n      }\n      return lazyType;\n    }\n    function forwardRef(render) {\n      {\n        if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n          error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');\n        } else if (typeof render !== 'function') {\n          error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);\n        } else {\n          if (render.length !== 0 && render.length !== 2) {\n            error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');\n          }\n        }\n        if (render != null) {\n          if (render.defaultProps != null || render.propTypes != null) {\n            error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');\n          }\n        }\n      }\n      var elementType = {\n        $$typeof: REACT_FORWARD_REF_TYPE,\n        render: render\n      };\n      {\n        var ownName;\n        Object.defineProperty(elementType, 'displayName', {\n          enumerable: false,\n          configurable: true,\n          get: function () {\n            return ownName;\n          },\n          set: function (name) {\n            ownName = name; // The inner component shouldn't inherit this display name in most cases,\n            // because the component may be used elsewhere.\n            // But it's nice for anonymous functions to inherit the name,\n            // so that our component-stack generation logic will display their frames.\n            // An anonymous function generally suggests a pattern like:\n            //   React.forwardRef((props, ref) => {...});\n            // This kind of inner function is not used elsewhere so the side effect is okay.\n\n            if (!render.name && !render.displayName) {\n              render.displayName = name;\n            }\n          }\n        });\n      }\n      return elementType;\n    }\n    var REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\n    function isValidElementType(type) {\n      if (typeof type === 'string' || typeof type === 'function') {\n        return true;\n      } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {\n        return true;\n      }\n      if (typeof type === 'object' && type !== null) {\n        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE ||\n        // This needs to include all possible module reference object\n        // types supported by any Flight configuration anywhere since\n        // we don't know which Flight build this will end up being used\n        // with.\n        type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n          return true;\n        }\n      }\n      return false;\n    }\n    function memo(type, compare) {\n      {\n        if (!isValidElementType(type)) {\n          error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);\n        }\n      }\n      var elementType = {\n        $$typeof: REACT_MEMO_TYPE,\n        type: type,\n        compare: compare === undefined ? null : compare\n      };\n      {\n        var ownName;\n        Object.defineProperty(elementType, 'displayName', {\n          enumerable: false,\n          configurable: true,\n          get: function () {\n            return ownName;\n          },\n          set: function (name) {\n            ownName = name; // The inner component shouldn't inherit this display name in most cases,\n            // because the component may be used elsewhere.\n            // But it's nice for anonymous functions to inherit the name,\n            // so that our component-stack generation logic will display their frames.\n            // An anonymous function generally suggests a pattern like:\n            //   React.memo((props) => {...});\n            // This kind of inner function is not used elsewhere so the side effect is okay.\n\n            if (!type.name && !type.displayName) {\n              type.displayName = name;\n            }\n          }\n        });\n      }\n      return elementType;\n    }\n    var UNTERMINATED = 0;\n    var TERMINATED = 1;\n    var ERRORED = 2;\n    function createCacheRoot() {\n      return new WeakMap();\n    }\n    function createCacheNode() {\n      return {\n        s: UNTERMINATED,\n        // status, represents whether the cached computation returned a value or threw an error\n        v: undefined,\n        // value, either the cached result or an error, depending on s\n        o: null,\n        // object cache, a WeakMap where non-primitive arguments are stored\n        p: null // primitive cache, a regular Map where primitive arguments are stored.\n      };\n    }\n\n    function cache(fn) {\n      return function () {\n        var dispatcher = ReactCurrentCache.current;\n        if (!dispatcher) {\n          // If there is no dispatcher, then we treat this as not being cached.\n          // $FlowFixMe[incompatible-call]: We don't want to use rest arguments since we transpile the code.\n          return fn.apply(null, arguments);\n        }\n        var fnMap = dispatcher.getCacheForType(createCacheRoot);\n        var fnNode = fnMap.get(fn);\n        var cacheNode;\n        if (fnNode === undefined) {\n          cacheNode = createCacheNode();\n          fnMap.set(fn, cacheNode);\n        } else {\n          cacheNode = fnNode;\n        }\n        for (var i = 0, l = arguments.length; i < l; i++) {\n          var arg = arguments[i];\n          if (typeof arg === 'function' || typeof arg === 'object' && arg !== null) {\n            // Objects go into a WeakMap\n            var objectCache = cacheNode.o;\n            if (objectCache === null) {\n              cacheNode.o = objectCache = new WeakMap();\n            }\n            var objectNode = objectCache.get(arg);\n            if (objectNode === undefined) {\n              cacheNode = createCacheNode();\n              objectCache.set(arg, cacheNode);\n            } else {\n              cacheNode = objectNode;\n            }\n          } else {\n            // Primitives go into a regular Map\n            var primitiveCache = cacheNode.p;\n            if (primitiveCache === null) {\n              cacheNode.p = primitiveCache = new Map();\n            }\n            var primitiveNode = primitiveCache.get(arg);\n            if (primitiveNode === undefined) {\n              cacheNode = createCacheNode();\n              primitiveCache.set(arg, cacheNode);\n            } else {\n              cacheNode = primitiveNode;\n            }\n          }\n        }\n        if (cacheNode.s === TERMINATED) {\n          return cacheNode.v;\n        }\n        if (cacheNode.s === ERRORED) {\n          throw cacheNode.v;\n        }\n        try {\n          // $FlowFixMe[incompatible-call]: We don't want to use rest arguments since we transpile the code.\n          var result = fn.apply(null, arguments);\n          var terminatedNode = cacheNode;\n          terminatedNode.s = TERMINATED;\n          terminatedNode.v = result;\n          return result;\n        } catch (error) {\n          // We store the first error that's thrown and rethrow it.\n          var erroredNode = cacheNode;\n          erroredNode.s = ERRORED;\n          erroredNode.v = error;\n          throw error;\n        }\n      };\n    }\n    function resolveDispatcher() {\n      var dispatcher = ReactCurrentDispatcher$1.current;\n      {\n        if (dispatcher === null) {\n          error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\n        }\n      } // Will result in a null access error if accessed outside render phase. We\n      // intentionally don't throw our own error because this is in a hot path.\n      // Also helps ensure this is inlined.\n\n      return dispatcher;\n    }\n    function useContext(Context) {\n      var dispatcher = resolveDispatcher();\n      {\n        // TODO: add a more generic warning for invalid values.\n        if (Context._context !== undefined) {\n          var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs\n          // and nobody should be using this in existing code.\n\n          if (realContext.Consumer === Context) {\n            error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');\n          } else if (realContext.Provider === Context) {\n            error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');\n          }\n        }\n      }\n      return dispatcher.useContext(Context);\n    }\n    function useState(initialState) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useState(initialState);\n    }\n    function useReducer(reducer, initialArg, init) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useReducer(reducer, initialArg, init);\n    }\n    function useRef(initialValue) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useRef(initialValue);\n    }\n    function useEffect(create, deps) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useEffect(create, deps);\n    }\n    function useInsertionEffect(create, deps) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useInsertionEffect(create, deps);\n    }\n    function useLayoutEffect(create, deps) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useLayoutEffect(create, deps);\n    }\n    function useCallback(callback, deps) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useCallback(callback, deps);\n    }\n    function useMemo(create, deps) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useMemo(create, deps);\n    }\n    function useImperativeHandle(ref, create, deps) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useImperativeHandle(ref, create, deps);\n    }\n    function useDebugValue(value, formatterFn) {\n      {\n        var dispatcher = resolveDispatcher();\n        return dispatcher.useDebugValue(value, formatterFn);\n      }\n    }\n    function useTransition() {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useTransition();\n    }\n    function useDeferredValue(value, initialValue) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useDeferredValue(value, initialValue);\n    }\n    function useId() {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useId();\n    }\n    function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    }\n    function useCacheRefresh() {\n      var dispatcher = resolveDispatcher(); // $FlowFixMe[not-a-function] This is unstable, thus optional\n\n      return dispatcher.useCacheRefresh();\n    }\n    function use(usable) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.use(usable);\n    }\n    function useOptimistic(passthrough, reducer) {\n      var dispatcher = resolveDispatcher(); // $FlowFixMe[not-a-function] This is unstable, thus optional\n\n      return dispatcher.useOptimistic(passthrough, reducer);\n    }\n\n    // Helpers to patch console.logs to avoid logging during side-effect free\n    // replaying on render function. This currently only patches the object\n    // lazily which won't cover if the log function was extracted eagerly.\n    // We could also eagerly patch the method.\n    var disabledDepth = 0;\n    var prevLog;\n    var prevInfo;\n    var prevWarn;\n    var prevError;\n    var prevGroup;\n    var prevGroupCollapsed;\n    var prevGroupEnd;\n    function disabledLog() {}\n    disabledLog.__reactDisabledLog = true;\n    function disableLogs() {\n      {\n        if (disabledDepth === 0) {\n          /* eslint-disable react-internal/no-production-logging */\n          prevLog = console.log;\n          prevInfo = console.info;\n          prevWarn = console.warn;\n          prevError = console.error;\n          prevGroup = console.group;\n          prevGroupCollapsed = console.groupCollapsed;\n          prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n          var props = {\n            configurable: true,\n            enumerable: true,\n            value: disabledLog,\n            writable: true\n          }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n          Object.defineProperties(console, {\n            info: props,\n            log: props,\n            warn: props,\n            error: props,\n            group: props,\n            groupCollapsed: props,\n            groupEnd: props\n          });\n          /* eslint-enable react-internal/no-production-logging */\n        }\n\n        disabledDepth++;\n      }\n    }\n    function reenableLogs() {\n      {\n        disabledDepth--;\n        if (disabledDepth === 0) {\n          /* eslint-disable react-internal/no-production-logging */\n          var props = {\n            configurable: true,\n            enumerable: true,\n            writable: true\n          }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n          Object.defineProperties(console, {\n            log: assign({}, props, {\n              value: prevLog\n            }),\n            info: assign({}, props, {\n              value: prevInfo\n            }),\n            warn: assign({}, props, {\n              value: prevWarn\n            }),\n            error: assign({}, props, {\n              value: prevError\n            }),\n            group: assign({}, props, {\n              value: prevGroup\n            }),\n            groupCollapsed: assign({}, props, {\n              value: prevGroupCollapsed\n            }),\n            groupEnd: assign({}, props, {\n              value: prevGroupEnd\n            })\n          });\n          /* eslint-enable react-internal/no-production-logging */\n        }\n\n        if (disabledDepth < 0) {\n          error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n        }\n      }\n    }\n    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n    var prefix;\n    function describeBuiltInComponentFrame(name, source, ownerFn) {\n      {\n        if (prefix === undefined) {\n          // Extract the VM specific prefix used by each line.\n          try {\n            throw Error();\n          } catch (x) {\n            var match = x.stack.trim().match(/\\n( *(at )?)/);\n            prefix = match && match[1] || '';\n          }\n        } // We use the prefix to ensure our stacks line up with native stack frames.\n\n        return '\\n' + prefix + name;\n      }\n    }\n    var reentry = false;\n    var componentFrameCache;\n    {\n      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n      componentFrameCache = new PossiblyWeakMap();\n    }\n    /**\n     * Leverages native browser/VM stack frames to get proper details (e.g.\n     * filename, line + col number) for a single component in a component stack. We\n     * do this by:\n     *   (1) throwing and catching an error in the function - this will be our\n     *       control error.\n     *   (2) calling the component which will eventually throw an error that we'll\n     *       catch - this will be our sample error.\n     *   (3) diffing the control and sample error stacks to find the stack frame\n     *       which represents our component.\n     */\n\n    function describeNativeComponentFrame(fn, construct) {\n      // If something asked for a stack inside a fake render, it should get ignored.\n      if (!fn || reentry) {\n        return '';\n      }\n      {\n        var frame = componentFrameCache.get(fn);\n        if (frame !== undefined) {\n          return frame;\n        }\n      }\n      reentry = true;\n      var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n      Error.prepareStackTrace = undefined;\n      var previousDispatcher;\n      {\n        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n        // for warnings.\n\n        ReactCurrentDispatcher.current = null;\n        disableLogs();\n      }\n      /**\n       * Finding a common stack frame between sample and control errors can be\n       * tricky given the different types and levels of stack trace truncation from\n       * different JS VMs. So instead we'll attempt to control what that common\n       * frame should be through this object method:\n       * Having both the sample and control errors be in the function under the\n       * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n       * `displayName` properties of the function ensures that a stack\n       * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n       * it for both control and sample stacks.\n       */\n\n      var RunInRootFrame = {\n        DetermineComponentFrameRoot: function () {\n          var control;\n          try {\n            // This should throw.\n            if (construct) {\n              // Something should be setting the props in the constructor.\n              var Fake = function () {\n                throw Error();\n              }; // $FlowFixMe[prop-missing]\n\n              Object.defineProperty(Fake.prototype, 'props', {\n                set: function () {\n                  // We use a throwing setter instead of frozen or non-writable props\n                  // because that won't throw in a non-strict mode function.\n                  throw Error();\n                }\n              });\n              if (typeof Reflect === 'object' && Reflect.construct) {\n                // We construct a different control for this case to include any extra\n                // frames added by the construct call.\n                try {\n                  Reflect.construct(Fake, []);\n                } catch (x) {\n                  control = x;\n                }\n                Reflect.construct(fn, [], Fake);\n              } else {\n                try {\n                  Fake.call();\n                } catch (x) {\n                  control = x;\n                } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n                fn.call(Fake.prototype);\n              }\n            } else {\n              try {\n                throw Error();\n              } catch (x) {\n                control = x;\n              } // TODO(luna): This will currently only throw if the function component\n              // tries to access React/ReactDOM/props. We should probably make this throw\n              // in simple components too\n\n              var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n              // component, which we don't yet support. Attach a noop catch handler to\n              // silence the error.\n              // TODO: Implement component stacks for async client components?\n\n              if (maybePromise && typeof maybePromise.catch === 'function') {\n                maybePromise.catch(function () {});\n              }\n            }\n          } catch (sample) {\n            // This is inlined manually because closure doesn't do it for us.\n            if (sample && control && typeof sample.stack === 'string') {\n              return [sample.stack, control.stack];\n            }\n          }\n          return [null, null];\n        }\n      }; // $FlowFixMe[prop-missing]\n\n      RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot';\n      var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, 'name'); // Before ES6, the `name` property was not configurable.\n\n      if (namePropDescriptor && namePropDescriptor.configurable) {\n        // V8 utilizes a function's `name` property when generating a stack trace.\n        Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot,\n        // Configurable properties can be updated even if its writable descriptor\n        // is set to `false`.\n        // $FlowFixMe[cannot-write]\n        'name', {\n          value: 'DetermineComponentFrameRoot'\n        });\n      }\n      try {\n        var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),\n          sampleStack = _RunInRootFrame$Deter[0],\n          controlStack = _RunInRootFrame$Deter[1];\n        if (sampleStack && controlStack) {\n          // This extracts the first frame from the sample that isn't also in the control.\n          // Skipping one frame that we assume is the frame that calls the two.\n          var sampleLines = sampleStack.split('\\n');\n          var controlLines = controlStack.split('\\n');\n          var s = 0;\n          var c = 0;\n          while (s < sampleLines.length && !sampleLines[s].includes('DetermineComponentFrameRoot')) {\n            s++;\n          }\n          while (c < controlLines.length && !controlLines[c].includes('DetermineComponentFrameRoot')) {\n            c++;\n          } // We couldn't find our intentionally injected common root frame, attempt\n          // to find another common root frame by search from the bottom of the\n          // control stack...\n\n          if (s === sampleLines.length || c === controlLines.length) {\n            s = sampleLines.length - 1;\n            c = controlLines.length - 1;\n            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n              // We expect at least one stack frame to be shared.\n              // Typically this will be the root most one. However, stack frames may be\n              // cut off due to maximum stack limits. In this case, one maybe cut off\n              // earlier than the other. We assume that the sample is longer or the same\n              // and there for cut off earlier. So we should find the root most frame in\n              // the sample somewhere in the control.\n              c--;\n            }\n          }\n          for (; s >= 1 && c >= 0; s--, c--) {\n            // Next we find the first one that isn't the same which should be the\n            // frame that called our sample function and the control.\n            if (sampleLines[s] !== controlLines[c]) {\n              // In V8, the first line is describing the message but other VMs don't.\n              // If we're about to return the first line, and the control is also on the same\n              // line, that's a pretty good indicator that our sample threw at same line as\n              // the control. I.e. before we entered the sample frame. So we ignore this result.\n              // This can happen if you passed a class to function component, or non-function.\n              if (s !== 1 || c !== 1) {\n                do {\n                  s--;\n                  c--; // We may still have similar intermediate frames from the construct call.\n                  // The next one that isn't the same should be our match though.\n\n                  if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                    // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                    var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                    // but we have a user-provided \"displayName\"\n                    // splice it in to make the stack more readable.\n\n                    if (fn.displayName && _frame.includes('<anonymous>')) {\n                      _frame = _frame.replace('<anonymous>', fn.displayName);\n                    }\n                    if (true) {\n                      if (typeof fn === 'function') {\n                        componentFrameCache.set(fn, _frame);\n                      }\n                    } // Return the line we found.\n\n                    return _frame;\n                  }\n                } while (s >= 1 && c >= 0);\n              }\n              break;\n            }\n          }\n        }\n      } finally {\n        reentry = false;\n        {\n          ReactCurrentDispatcher.current = previousDispatcher;\n          reenableLogs();\n        }\n        Error.prepareStackTrace = previousPrepareStackTrace;\n      } // Fallback to just using the name if we couldn't make it throw.\n\n      var name = fn ? fn.displayName || fn.name : '';\n      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n      {\n        if (typeof fn === 'function') {\n          componentFrameCache.set(fn, syntheticFrame);\n        }\n      }\n      return syntheticFrame;\n    }\n    function describeFunctionComponentFrame(fn, source, ownerFn) {\n      {\n        return describeNativeComponentFrame(fn, false);\n      }\n    }\n    function shouldConstruct(Component) {\n      var prototype = Component.prototype;\n      return !!(prototype && prototype.isReactComponent);\n    }\n    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n      if (type == null) {\n        return '';\n      }\n      if (typeof type === 'function') {\n        {\n          return describeNativeComponentFrame(type, shouldConstruct(type));\n        }\n      }\n      if (typeof type === 'string') {\n        return describeBuiltInComponentFrame(type);\n      }\n      switch (type) {\n        case REACT_SUSPENSE_TYPE:\n          return describeBuiltInComponentFrame('Suspense');\n        case REACT_SUSPENSE_LIST_TYPE:\n          return describeBuiltInComponentFrame('SuspenseList');\n      }\n      if (typeof type === 'object') {\n        switch (type.$$typeof) {\n          case REACT_FORWARD_REF_TYPE:\n            return describeFunctionComponentFrame(type.render);\n          case REACT_MEMO_TYPE:\n            // Memo may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n          case REACT_LAZY_TYPE:\n            {\n              var lazyComponent = type;\n              var payload = lazyComponent._payload;\n              var init = lazyComponent._init;\n              try {\n                // Lazy may contain any component type so we recursively resolve it.\n                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n              } catch (x) {}\n            }\n        }\n      }\n      return '';\n    }\n    var loggedTypeFailures = {};\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    function setCurrentlyValidatingElement$1(element) {\n      {\n        if (element) {\n          var owner = element._owner;\n          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n          ReactDebugCurrentFrame.setExtraStackFrame(stack);\n        } else {\n          ReactDebugCurrentFrame.setExtraStackFrame(null);\n        }\n      }\n    }\n    function checkPropTypes(typeSpecs, values, location, componentName, element) {\n      {\n        // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n        var has = Function.call.bind(hasOwnProperty);\n        for (var typeSpecName in typeSpecs) {\n          if (has(typeSpecs, typeSpecName)) {\n            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n            // fail the render phase where it didn't fail before. So we log it.\n            // After these have been cleaned up, we'll let them throw.\n\n            try {\n              // This is intentionally an invariant that gets caught. It's the same\n              // behavior as without this statement except with a better message.\n              if (typeof typeSpecs[typeSpecName] !== 'function') {\n                // eslint-disable-next-line react-internal/prod-error-codes\n                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n                err.name = 'Invariant Violation';\n                throw err;\n              }\n              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n            } catch (ex) {\n              error$1 = ex;\n            }\n            if (error$1 && !(error$1 instanceof Error)) {\n              setCurrentlyValidatingElement$1(element);\n              error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n              setCurrentlyValidatingElement$1(null);\n            }\n            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n              // Only monitor this failure once because there tends to be a lot of the\n              // same error.\n              loggedTypeFailures[error$1.message] = true;\n              setCurrentlyValidatingElement$1(element);\n              error('Failed %s type: %s', location, error$1.message);\n              setCurrentlyValidatingElement$1(null);\n            }\n          }\n        }\n      }\n    }\n    var REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\n    function setCurrentlyValidatingElement(element) {\n      {\n        if (element) {\n          var owner = element._owner;\n          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n          setExtraStackFrame(stack);\n        } else {\n          setExtraStackFrame(null);\n        }\n      }\n    }\n    var propTypesMisspellWarningShown;\n    {\n      propTypesMisspellWarningShown = false;\n    }\n    function getDeclarationErrorAddendum() {\n      if (ReactCurrentOwner.current) {\n        var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n        if (name) {\n          return '\\n\\nCheck the render method of `' + name + '`.';\n        }\n      }\n      return '';\n    }\n    function getSourceInfoErrorAddendum(source) {\n      if (source !== undefined) {\n        var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n        var lineNumber = source.lineNumber;\n        return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n      }\n      return '';\n    }\n    function getSourceInfoErrorAddendumForProps(elementProps) {\n      if (elementProps !== null && elementProps !== undefined) {\n        return getSourceInfoErrorAddendum(elementProps.__source);\n      }\n      return '';\n    }\n    /**\n     * Warn if there's no key explicitly set on dynamic arrays of children or\n     * object keys are not valid. This allows us to keep track of children between\n     * updates.\n     */\n\n    var ownerHasKeyUseWarning = {};\n    function getCurrentComponentErrorInfo(parentType) {\n      var info = getDeclarationErrorAddendum();\n      if (!info) {\n        var parentName = getComponentNameFromType(parentType);\n        if (parentName) {\n          info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n        }\n      }\n      return info;\n    }\n    /**\n     * Warn if the element doesn't have an explicit key assigned to it.\n     * This element is in an array. The array could grow and shrink or be\n     * reordered. All children that haven't already been validated are required to\n     * have a \"key\" property assigned to it. Error statuses are cached so a warning\n     * will only be shown once.\n     *\n     * @internal\n     * @param {ReactElement} element Element that requires a key.\n     * @param {*} parentType element's parent's type.\n     */\n\n    function validateExplicitKey(element, parentType) {\n      if (!element._store || element._store.validated || element.key != null) {\n        return;\n      }\n      element._store.validated = true;\n      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n        return;\n      }\n      ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n      // property, it may be the creator of the child that's responsible for\n      // assigning it a key.\n\n      var childOwner = '';\n      if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n        // Give the component that originally created this child.\n        childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n      }\n      {\n        setCurrentlyValidatingElement(element);\n        error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n        setCurrentlyValidatingElement(null);\n      }\n    }\n    /**\n     * Ensure that every element either is passed in a static location, in an\n     * array with an explicit keys property defined, or in an object literal\n     * with valid key property.\n     *\n     * @internal\n     * @param {ReactNode} node Statically passed child of any type.\n     * @param {*} parentType node's parent's type.\n     */\n\n    function validateChildKeys(node, parentType) {\n      if (typeof node !== 'object' || !node) {\n        return;\n      }\n      if (node.$$typeof === REACT_CLIENT_REFERENCE) ;else if (isArray(node)) {\n        for (var i = 0; i < node.length; i++) {\n          var child = node[i];\n          if (isValidElement(child)) {\n            validateExplicitKey(child, parentType);\n          }\n        }\n      } else if (isValidElement(node)) {\n        // This element was passed in a valid location.\n        if (node._store) {\n          node._store.validated = true;\n        }\n      } else {\n        var iteratorFn = getIteratorFn(node);\n        if (typeof iteratorFn === 'function') {\n          // Entry iterators used to provide implicit keys,\n          // but now we print a separate warning for them later.\n          if (iteratorFn !== node.entries) {\n            var iterator = iteratorFn.call(node);\n            var step;\n            while (!(step = iterator.next()).done) {\n              if (isValidElement(step.value)) {\n                validateExplicitKey(step.value, parentType);\n              }\n            }\n          }\n        }\n      }\n    }\n    /**\n     * Given an element, validate that its props follow the propTypes definition,\n     * provided by the type.\n     *\n     * @param {ReactElement} element\n     */\n\n    function validatePropTypes(element) {\n      {\n        var type = element.type;\n        if (type === null || type === undefined || typeof type === 'string') {\n          return;\n        }\n        if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n          return;\n        }\n        var propTypes;\n        if (typeof type === 'function') {\n          propTypes = type.propTypes;\n        } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE ||\n        // Note: Memo only checks outer props here.\n        // Inner props are checked in the reconciler.\n        type.$$typeof === REACT_MEMO_TYPE)) {\n          propTypes = type.propTypes;\n        } else {\n          return;\n        }\n        if (propTypes) {\n          // Intentionally inside to avoid triggering lazy initializers:\n          var name = getComponentNameFromType(type);\n          checkPropTypes(propTypes, element.props, 'prop', name, element);\n        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n          propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n          var _name = getComponentNameFromType(type);\n          error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n        }\n        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n          error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n        }\n      }\n    }\n    /**\n     * Given a fragment, validate that it can only be provided with fragment props\n     * @param {ReactElement} fragment\n     */\n\n    function validateFragmentProps(fragment) {\n      {\n        var keys = Object.keys(fragment.props);\n        for (var i = 0; i < keys.length; i++) {\n          var key = keys[i];\n          if (key !== 'children' && key !== 'key') {\n            setCurrentlyValidatingElement(fragment);\n            error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n            setCurrentlyValidatingElement(null);\n            break;\n          }\n        }\n        if (fragment.ref !== null) {\n          setCurrentlyValidatingElement(fragment);\n          error('Invalid attribute `ref` supplied to `React.Fragment`.');\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n    function createElementWithValidation(type, props, children) {\n      var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n      // succeed and there will likely be errors in render.\n\n      if (!validType) {\n        var info = '';\n        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n          info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n        }\n        var sourceInfo = getSourceInfoErrorAddendumForProps(props);\n        if (sourceInfo) {\n          info += sourceInfo;\n        } else {\n          info += getDeclarationErrorAddendum();\n        }\n        var typeString;\n        if (type === null) {\n          typeString = 'null';\n        } else if (isArray(type)) {\n          typeString = 'array';\n        } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n          typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n          info = ' Did you accidentally export a JSX literal instead of a component?';\n        } else {\n          typeString = typeof type;\n        }\n        {\n          error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n        }\n      }\n      var element = createElement$1.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n      // TODO: Drop this when these are no longer allowed as the type argument.\n\n      if (element == null) {\n        return element;\n      } // Skip key warning if the type isn't valid since our key validation logic\n      // doesn't expect a non-string/function type and can throw confusing errors.\n      // We don't want exception behavior to differ between dev and prod.\n      // (Rendering will throw with a helpful message and as soon as the type is\n      // fixed, the key warnings will appear.)\n\n      if (validType) {\n        for (var i = 2; i < arguments.length; i++) {\n          validateChildKeys(arguments[i], type);\n        }\n      }\n      if (type === REACT_FRAGMENT_TYPE) {\n        validateFragmentProps(element);\n      } else {\n        validatePropTypes(element);\n      }\n      return element;\n    }\n    var didWarnAboutDeprecatedCreateFactory = false;\n    function createFactoryWithValidation(type) {\n      var validatedFactory = createElementWithValidation.bind(null, type);\n      validatedFactory.type = type;\n      {\n        if (!didWarnAboutDeprecatedCreateFactory) {\n          didWarnAboutDeprecatedCreateFactory = true;\n          warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');\n        } // Legacy hook: remove it\n\n        Object.defineProperty(validatedFactory, 'type', {\n          enumerable: false,\n          get: function () {\n            warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n            Object.defineProperty(this, 'type', {\n              value: type\n            });\n            return type;\n          }\n        });\n      }\n      return validatedFactory;\n    }\n    function cloneElementWithValidation(element, props, children) {\n      var newElement = cloneElement$1.apply(this, arguments);\n      for (var i = 2; i < arguments.length; i++) {\n        validateChildKeys(arguments[i], newElement.type);\n      }\n      validatePropTypes(newElement);\n      return newElement;\n    }\n    function startTransition(scope, options) {\n      var prevTransition = ReactCurrentBatchConfig.transition;\n      ReactCurrentBatchConfig.transition = {};\n      var currentTransition = ReactCurrentBatchConfig.transition;\n      {\n        ReactCurrentBatchConfig.transition._updatedFibers = new Set();\n      }\n      try {\n        scope();\n      } finally {\n        ReactCurrentBatchConfig.transition = prevTransition;\n        {\n          if (prevTransition === null && currentTransition._updatedFibers) {\n            var updatedFibersCount = currentTransition._updatedFibers.size;\n            currentTransition._updatedFibers.clear();\n            if (updatedFibersCount > 10) {\n              warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');\n            }\n          }\n        }\n      }\n    }\n    var didWarnAboutMessageChannel = false;\n    var enqueueTaskImpl = null;\n    function enqueueTask(task) {\n      if (enqueueTaskImpl === null) {\n        try {\n          // read require off the module object to get around the bundlers.\n          // we don't want them to detect a require and bundle a Node polyfill.\n          var requireString = ('require' + Math.random()).slice(0, 7);\n          var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's\n          // version of setImmediate, bypassing fake timers if any.\n\n          enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;\n        } catch (_err) {\n          // we're in a browser\n          // we can't use regular timers because they may still be faked\n          // so we try MessageChannel+postMessage instead\n          enqueueTaskImpl = function (callback) {\n            {\n              if (didWarnAboutMessageChannel === false) {\n                didWarnAboutMessageChannel = true;\n                if (typeof MessageChannel === 'undefined') {\n                  error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');\n                }\n              }\n            }\n            var channel = new MessageChannel();\n            channel.port1.onmessage = callback;\n            channel.port2.postMessage(undefined);\n          };\n        }\n      }\n      return enqueueTaskImpl(task);\n    }\n\n    // number of `act` scopes on the stack.\n\n    var actScopeDepth = 0; // We only warn the first time you neglect to await an async `act` scope.\n\n    var didWarnNoAwaitAct = false;\n    function act(callback) {\n      {\n        // When ReactCurrentActQueue.current is not null, it signals to React that\n        // we're currently inside an `act` scope. React will push all its tasks to\n        // this queue instead of scheduling them with platform APIs.\n        //\n        // We set this to an empty array when we first enter an `act` scope, and\n        // only unset it once we've left the outermost `act` scope — remember that\n        // `act` calls can be nested.\n        //\n        // If we're already inside an `act` scope, reuse the existing queue.\n        var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;\n        var prevActQueue = ReactCurrentActQueue.current;\n        var prevActScopeDepth = actScopeDepth;\n        actScopeDepth++;\n        var queue = ReactCurrentActQueue.current = prevActQueue !== null ? prevActQueue : []; // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only\n        // set to `true` while the given callback is executed, not for updates\n        // triggered during an async event, because this is how the legacy\n        // implementation of `act` behaved.\n\n        ReactCurrentActQueue.isBatchingLegacy = true;\n        var result; // This tracks whether the `act` call is awaited. In certain cases, not\n        // awaiting it is a mistake, so we will detect that and warn.\n\n        var didAwaitActCall = false;\n        try {\n          // Reset this to `false` right before entering the React work loop. The\n          // only place we ever read this fields is just below, right after running\n          // the callback. So we don't need to reset after the callback runs.\n          ReactCurrentActQueue.didScheduleLegacyUpdate = false;\n          result = callback();\n          var didScheduleLegacyUpdate = ReactCurrentActQueue.didScheduleLegacyUpdate; // Replicate behavior of original `act` implementation in legacy mode,\n          // which flushed updates immediately after the scope function exits, even\n          // if it's an async function.\n\n          if (!prevIsBatchingLegacy && didScheduleLegacyUpdate) {\n            flushActQueue(queue);\n          } // `isBatchingLegacy` gets reset using the regular stack, not the async\n          // one used to track `act` scopes. Why, you may be wondering? Because\n          // that's how it worked before version 18. Yes, it's confusing! We should\n          // delete legacy mode!!\n\n          ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;\n        } catch (error) {\n          // `isBatchingLegacy` gets reset using the regular stack, not the async\n          // one used to track `act` scopes. Why, you may be wondering? Because\n          // that's how it worked before version 18. Yes, it's confusing! We should\n          // delete legacy mode!!\n          ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;\n          popActScope(prevActQueue, prevActScopeDepth);\n          throw error;\n        }\n        if (result !== null && typeof result === 'object' &&\n        // $FlowFixMe[method-unbinding]\n        typeof result.then === 'function') {\n          // A promise/thenable was returned from the callback. Wait for it to\n          // resolve before flushing the queue.\n          //\n          // If `act` were implemented as an async function, this whole block could\n          // be a single `await` call. That's really the only difference between\n          // this branch and the next one.\n          var thenable = result; // Warn if the an `act` call with an async scope is not awaited. In a\n          // future release, consider making this an error.\n\n          queueSeveralMicrotasks(function () {\n            if (!didAwaitActCall && !didWarnNoAwaitAct) {\n              didWarnNoAwaitAct = true;\n              error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, ' + 'interleaving multiple act calls and mixing their ' + 'scopes. ' + 'You should - await act(async () => ...);');\n            }\n          });\n          return {\n            then: function (resolve, reject) {\n              didAwaitActCall = true;\n              thenable.then(function (returnValue) {\n                popActScope(prevActQueue, prevActScopeDepth);\n                if (prevActScopeDepth === 0) {\n                  // We're exiting the outermost `act` scope. Flush the queue.\n                  try {\n                    flushActQueue(queue);\n                    enqueueTask(function () {\n                      return (\n                        // Recursively flush tasks scheduled by a microtask.\n                        recursivelyFlushAsyncActWork(returnValue, resolve, reject)\n                      );\n                    });\n                  } catch (error) {\n                    // `thenable` might not be a real promise, and `flushActQueue`\n                    // might throw, so we need to wrap `flushActQueue` in a\n                    // try/catch.\n                    reject(error);\n                  }\n                } else {\n                  resolve(returnValue);\n                }\n              }, function (error) {\n                popActScope(prevActQueue, prevActScopeDepth);\n                reject(error);\n              });\n            }\n          };\n        } else {\n          var returnValue = result; // The callback is not an async function. Exit the current\n          // scope immediately.\n\n          popActScope(prevActQueue, prevActScopeDepth);\n          if (prevActScopeDepth === 0) {\n            // We're exiting the outermost `act` scope. Flush the queue.\n            flushActQueue(queue); // If the queue is not empty, it implies that we intentionally yielded\n            // to the main thread, because something suspended. We will continue\n            // in an asynchronous task.\n            //\n            // Warn if something suspends but the `act` call is not awaited.\n            // In a future release, consider making this an error.\n\n            if (queue.length !== 0) {\n              queueSeveralMicrotasks(function () {\n                if (!didAwaitActCall && !didWarnNoAwaitAct) {\n                  didWarnNoAwaitAct = true;\n                  error('A component suspended inside an `act` scope, but the ' + '`act` call was not awaited. When testing React ' + 'components that depend on asynchronous data, you must ' + 'await the result:\\n\\n' + 'await act(() => ...)');\n                }\n              });\n            } // Like many things in this module, this is next part is confusing.\n            //\n            // We do not currently require every `act` call that is passed a\n            // callback to be awaited, through arguably we should. Since this\n            // callback was synchronous, we need to exit the current scope before\n            // returning.\n            //\n            // However, if thenable we're about to return *is* awaited, we'll\n            // immediately restore the current scope. So it shouldn't observable.\n            //\n            // This doesn't affect the case where the scope callback is async,\n            // because we always require those calls to be awaited.\n            //\n            // TODO: In a future version, consider always requiring all `act` calls\n            // to be awaited, regardless of whether the callback is sync or async.\n\n            ReactCurrentActQueue.current = null;\n          }\n          return {\n            then: function (resolve, reject) {\n              didAwaitActCall = true;\n              if (prevActScopeDepth === 0) {\n                // If the `act` call is awaited, restore the queue we were\n                // using before (see long comment above) so we can flush it.\n                ReactCurrentActQueue.current = queue;\n                enqueueTask(function () {\n                  return (\n                    // Recursively flush tasks scheduled by a microtask.\n                    recursivelyFlushAsyncActWork(returnValue, resolve, reject)\n                  );\n                });\n              } else {\n                resolve(returnValue);\n              }\n            }\n          };\n        }\n      }\n    }\n    function popActScope(prevActQueue, prevActScopeDepth) {\n      {\n        if (prevActScopeDepth !== actScopeDepth - 1) {\n          error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');\n        }\n        actScopeDepth = prevActScopeDepth;\n      }\n    }\n    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {\n      {\n        // Check if any tasks were scheduled asynchronously.\n        var queue = ReactCurrentActQueue.current;\n        if (queue !== null) {\n          if (queue.length !== 0) {\n            // Async tasks were scheduled, mostly likely in a microtask.\n            // Keep flushing until there are no more.\n            try {\n              flushActQueue(queue); // The work we just performed may have schedule additional async\n              // tasks. Wait a macrotask and check again.\n\n              enqueueTask(function () {\n                return recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n              });\n            } catch (error) {\n              // Leave remaining tasks on the queue if something throws.\n              reject(error);\n            }\n          } else {\n            // The queue is empty. We can finish.\n            ReactCurrentActQueue.current = null;\n            resolve(returnValue);\n          }\n        } else {\n          resolve(returnValue);\n        }\n      }\n    }\n    var isFlushing = false;\n    function flushActQueue(queue) {\n      {\n        if (!isFlushing) {\n          // Prevent re-entrance.\n          isFlushing = true;\n          var i = 0;\n          try {\n            for (; i < queue.length; i++) {\n              var callback = queue[i];\n              do {\n                ReactCurrentActQueue.didUsePromise = false;\n                var continuation = callback(false);\n                if (continuation !== null) {\n                  if (ReactCurrentActQueue.didUsePromise) {\n                    // The component just suspended. Yield to the main thread in\n                    // case the promise is already resolved. If so, it will ping in\n                    // a microtask and we can resume without unwinding the stack.\n                    queue[i] = callback;\n                    queue.splice(0, i);\n                    return;\n                  }\n                  callback = continuation;\n                } else {\n                  break;\n                }\n              } while (true);\n            } // We flushed the entire queue.\n\n            queue.length = 0;\n          } catch (error) {\n            // If something throws, leave the remaining callbacks on the queue.\n            queue.splice(0, i + 1);\n            throw error;\n          } finally {\n            isFlushing = false;\n          }\n        }\n      }\n    } // Some of our warnings attempt to detect if the `act` call is awaited by\n    // checking in an asynchronous task. Wait a few microtasks before checking. The\n    // only reason one isn't sufficient is we want to accommodate the case where an\n    // `act` call is returned from an async function without first being awaited,\n    // since that's a somewhat common pattern. If you do this too many times in a\n    // nested sequence, you might get a warning, but you can always fix by awaiting\n    // the call.\n    //\n    // A macrotask would also work (and is the fallback) but depending on the test\n    // environment it may cause the warning to fire too late.\n\n    var queueSeveralMicrotasks = typeof queueMicrotask === 'function' ? function (callback) {\n      queueMicrotask(function () {\n        return queueMicrotask(callback);\n      });\n    } : enqueueTask;\n    var createElement = createElementWithValidation;\n    var cloneElement = cloneElementWithValidation;\n    var createFactory = createFactoryWithValidation;\n    var Children = {\n      map: mapChildren,\n      forEach: forEachChildren,\n      count: countChildren,\n      toArray: toArray,\n      only: onlyChild\n    };\n    exports.Children = Children;\n    exports.Component = Component;\n    exports.Fragment = REACT_FRAGMENT_TYPE;\n    exports.Profiler = REACT_PROFILER_TYPE;\n    exports.PureComponent = PureComponent;\n    exports.StrictMode = REACT_STRICT_MODE_TYPE;\n    exports.Suspense = REACT_SUSPENSE_TYPE;\n    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;\n    exports.cache = cache;\n    exports.cloneElement = cloneElement;\n    exports.createContext = createContext;\n    exports.createElement = createElement;\n    exports.createFactory = createFactory;\n    exports.createRef = createRef;\n    exports.forwardRef = forwardRef;\n    exports.isValidElement = isValidElement;\n    exports.lazy = lazy;\n    exports.memo = memo;\n    exports.startTransition = startTransition;\n    exports.unstable_act = act;\n    exports.unstable_useCacheRefresh = useCacheRefresh;\n    exports.use = use;\n    exports.useCallback = useCallback;\n    exports.useContext = useContext;\n    exports.useDebugValue = useDebugValue;\n    exports.useDeferredValue = useDeferredValue;\n    exports.useEffect = useEffect;\n    exports.useId = useId;\n    exports.useImperativeHandle = useImperativeHandle;\n    exports.useInsertionEffect = useInsertionEffect;\n    exports.useLayoutEffect = useLayoutEffect;\n    exports.useMemo = useMemo;\n    exports.useOptimistic = useOptimistic;\n    exports.useReducer = useReducer;\n    exports.useRef = useRef;\n    exports.useState = useState;\n    exports.useSyncExternalStore = useSyncExternalStore;\n    exports.useTransition = useTransition;\n    exports.version = ReactVersion;\n    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') {\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n    }\n  })();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react/cjs/react.development.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/react/cjs/react.shared-subset.development.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react.shared-subset.development.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("/**\n * @license React\n * react.shared-subset.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function () {\n    'use strict';\n\n    /**\n     * Keeps track of the current dispatcher.\n     */\n    var ReactCurrentDispatcher$1 = {\n      current: null\n    };\n\n    /**\n     * Keeps track of the current owner.\n     *\n     * The current owner is the component who should own any components that are\n     * currently being constructed.\n     */\n    var ReactCurrentOwner = {\n      /**\n       * @internal\n       * @type {ReactComponent}\n       */\n      current: null\n    };\n    var ReactDebugCurrentFrame$1 = {};\n    var currentExtraStackFrame = null;\n    function setExtraStackFrame(stack) {\n      {\n        currentExtraStackFrame = stack;\n      }\n    }\n    {\n      ReactDebugCurrentFrame$1.setExtraStackFrame = function (stack) {\n        {\n          currentExtraStackFrame = stack;\n        }\n      }; // Stack implementation injected by the current renderer.\n\n      ReactDebugCurrentFrame$1.getCurrentStack = null;\n      ReactDebugCurrentFrame$1.getStackAddendum = function () {\n        var stack = ''; // Add an extra top frame while an element is being validated\n\n        if (currentExtraStackFrame) {\n          stack += currentExtraStackFrame;\n        } // Delegate to the injected renderer-specific implementation\n\n        var impl = ReactDebugCurrentFrame$1.getCurrentStack;\n        if (impl) {\n          stack += impl() || '';\n        }\n        return stack;\n      };\n    }\n\n    // -----------------------------------------------------------------------------\n\n    var enableScopeAPI = false; // Experimental Create Event Handle API.\n    var enableCacheElement = false;\n    var enableTransitionTracing = false; // No known bugs, but needs performance testing\n\n    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n    // stuff. Intended to enable React core members to more easily debug scheduling\n    // issues in DEV builds.\n\n    var enableDebugTracing = false;\n    var ReactSharedInternals = {\n      ReactCurrentDispatcher: ReactCurrentDispatcher$1,\n      ReactCurrentOwner: ReactCurrentOwner\n    };\n    {\n      ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame$1;\n    }\n\n    // by calls to these methods by a Babel plugin.\n    //\n    // In PROD (or in packages without access to React internals),\n    // they are left as they are instead.\n\n    function warn(format) {\n      {\n        {\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n          printWarning('warn', format, args);\n        }\n      }\n    }\n    function error(format) {\n      {\n        {\n          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            args[_key2 - 1] = arguments[_key2];\n          }\n          printWarning('error', format, args);\n        }\n      }\n    }\n    function printWarning(level, format, args) {\n      // When changing this logic, you might want to also\n      // update consoleWithStackDev.www.js as well.\n      {\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var stack = ReactDebugCurrentFrame.getStackAddendum();\n        if (stack !== '') {\n          format += '%s';\n          args = args.concat([stack]);\n        } // eslint-disable-next-line react-internal/safe-string-coercion\n\n        var argsWithFormat = args.map(function (item) {\n          return String(item);\n        }); // Careful: RN currently depends on this prefix\n\n        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n        // breaks IE9: https://github.com/facebook/react/issues/13610\n        // eslint-disable-next-line react-internal/no-production-logging\n\n        Function.prototype.apply.call(console[level], console, argsWithFormat);\n      }\n    }\n    var assign = Object.assign;\n\n    /**\n     * Keeps track of the current Cache dispatcher.\n     */\n    var ReactCurrentCache = {\n      current: null\n    };\n    function createFetchCache() {\n      return new Map();\n    }\n    var simpleCacheKey = '[\"GET\",[],null,\"follow\",null,null,null,null]'; // generateCacheKey(new Request('https://blank'));\n\n    function generateCacheKey(request) {\n      // We pick the fields that goes into the key used to dedupe requests.\n      // We don't include the `cache` field, because we end up using whatever\n      // caching resulted from the first request.\n      // Notably we currently don't consider non-standard (or future) options.\n      // This might not be safe. TODO: warn for non-standard extensions differing.\n      // IF YOU CHANGE THIS UPDATE THE simpleCacheKey ABOVE.\n      return JSON.stringify([request.method, Array.from(request.headers.entries()), request.mode, request.redirect, request.credentials, request.referrer, request.referrerPolicy, request.integrity]);\n    }\n    {\n      if (typeof fetch === 'function') {\n        var originalFetch = fetch;\n        var cachedFetch = function fetch(resource, options) {\n          var dispatcher = ReactCurrentCache.current;\n          if (!dispatcher) {\n            // We're outside a cached scope.\n            return originalFetch(resource, options);\n          }\n          if (options && options.signal && options.signal !== dispatcher.getCacheSignal()) {\n            // If we're passed a signal that is not ours, then we assume that\n            // someone else controls the lifetime of this object and opts out of\n            // caching. It's effectively the opt-out mechanism.\n            // Ideally we should be able to check this on the Request but\n            // it always gets initialized with its own signal so we don't\n            // know if it's supposed to override - unless we also override the\n            // Request constructor.\n            return originalFetch(resource, options);\n          } // Normalize the Request\n\n          var url;\n          var cacheKey;\n          if (typeof resource === 'string' && !options) {\n            // Fast path.\n            cacheKey = simpleCacheKey;\n            url = resource;\n          } else {\n            // Normalize the request.\n            // if resource is not a string or a URL (its an instance of Request)\n            // then do not instantiate a new Request but instead\n            // reuse the request as to not disturb the body in the event it's a ReadableStream.\n            var request = typeof resource === 'string' || resource instanceof URL ? new Request(resource, options) : resource;\n            if (request.method !== 'GET' && request.method !== 'HEAD' ||\n            // $FlowFixMe[prop-missing]: keepalive is real\n            request.keepalive) {\n              // We currently don't dedupe requests that might have side-effects. Those\n              // have to be explicitly cached. We assume that the request doesn't have a\n              // body if it's GET or HEAD.\n              // keepalive gets treated the same as if you passed a custom cache signal.\n              return originalFetch(resource, options);\n            }\n            cacheKey = generateCacheKey(request);\n            url = request.url;\n          }\n          var cache = dispatcher.getCacheForType(createFetchCache);\n          var cacheEntries = cache.get(url);\n          var match;\n          if (cacheEntries === undefined) {\n            // We pass the original arguments here in case normalizing the Request\n            // doesn't include all the options in this environment.\n            match = originalFetch(resource, options);\n            cache.set(url, [cacheKey, match]);\n          } else {\n            // We use an array as the inner data structure since it's lighter and\n            // we typically only expect to see one or two entries here.\n            for (var i = 0, l = cacheEntries.length; i < l; i += 2) {\n              var key = cacheEntries[i];\n              var value = cacheEntries[i + 1];\n              if (key === cacheKey) {\n                match = value; // I would've preferred a labelled break but lint says no.\n\n                return match.then(function (response) {\n                  return response.clone();\n                });\n              }\n            }\n            match = originalFetch(resource, options);\n            cacheEntries.push(cacheKey, match);\n          } // We clone the response so that each time you call this you get a new read\n          // of the body so that it can be read multiple times.\n\n          return match.then(function (response) {\n            return response.clone();\n          });\n        }; // We don't expect to see any extra properties on fetch but if there are any,\n        // copy them over. Useful for extended fetch environments or mocks.\n\n        assign(cachedFetch, originalFetch);\n        try {\n          // eslint-disable-next-line no-native-reassign\n          fetch = cachedFetch;\n        } catch (error1) {\n          try {\n            // In case assigning it globally fails, try globalThis instead just in case it exists.\n            globalThis.fetch = cachedFetch;\n          } catch (error2) {\n            // Log even in production just to make sure this is seen if only prod is frozen.\n            // eslint-disable-next-line react-internal/no-production-logging\n            warn('React was unable to patch the fetch() function in this environment. ' + 'Suspensey APIs might not work correctly as a result.');\n          }\n        }\n      }\n    }\n    var ReactServerSharedInternals = {\n      ReactCurrentCache: ReactCurrentCache\n    };\n    var ReactVersion = '18.3.0-canary-60a927d04-20240113';\n\n    // ATTENTION\n    // When adding new symbols to this file,\n    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n    // The Symbol used to tag the ReactElement-like types.\n    var REACT_ELEMENT_TYPE = Symbol.for('react.element');\n    var REACT_PORTAL_TYPE = Symbol.for('react.portal');\n    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\n    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\n    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');\n    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');\n    var REACT_CONTEXT_TYPE = Symbol.for('react.context');\n    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\n    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\n    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\n    var REACT_MEMO_TYPE = Symbol.for('react.memo');\n    var REACT_LAZY_TYPE = Symbol.for('react.lazy');\n    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\n    var REACT_CACHE_TYPE = Symbol.for('react.cache');\n    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n    var FAUX_ITERATOR_SYMBOL = '@@iterator';\n    function getIteratorFn(maybeIterable) {\n      if (maybeIterable === null || typeof maybeIterable !== 'object') {\n        return null;\n      }\n      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n      if (typeof maybeIterator === 'function') {\n        return maybeIterator;\n      }\n      return null;\n    }\n    var didWarnStateUpdateForUnmountedComponent = {};\n    function warnNoop(publicInstance, callerName) {\n      {\n        var _constructor = publicInstance.constructor;\n        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';\n        var warningKey = componentName + \".\" + callerName;\n        if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n          return;\n        }\n        error(\"Can't call %s on a component that is not yet mounted. \" + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);\n        didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n      }\n    }\n    /**\n     * This is the abstract API for an update queue.\n     */\n\n    var ReactNoopUpdateQueue = {\n      /**\n       * Checks whether or not this composite component is mounted.\n       * @param {ReactClass} publicInstance The instance we want to test.\n       * @return {boolean} True if mounted, false otherwise.\n       * @protected\n       * @final\n       */\n      isMounted: function (publicInstance) {\n        return false;\n      },\n      /**\n       * Forces an update. This should only be invoked when it is known with\n       * certainty that we are **not** in a DOM transaction.\n       *\n       * You may want to call this when you know that some deeper aspect of the\n       * component's state has changed but `setState` was not called.\n       *\n       * This will not invoke `shouldComponentUpdate`, but it will invoke\n       * `componentWillUpdate` and `componentDidUpdate`.\n       *\n       * @param {ReactClass} publicInstance The instance that should rerender.\n       * @param {?function} callback Called after component is updated.\n       * @param {?string} callerName name of the calling function in the public API.\n       * @internal\n       */\n      enqueueForceUpdate: function (publicInstance, callback, callerName) {\n        warnNoop(publicInstance, 'forceUpdate');\n      },\n      /**\n       * Replaces all of the state. Always use this or `setState` to mutate state.\n       * You should treat `this.state` as immutable.\n       *\n       * There is no guarantee that `this.state` will be immediately updated, so\n       * accessing `this.state` after calling this method may return the old value.\n       *\n       * @param {ReactClass} publicInstance The instance that should rerender.\n       * @param {object} completeState Next state.\n       * @param {?function} callback Called after component is updated.\n       * @param {?string} callerName name of the calling function in the public API.\n       * @internal\n       */\n      enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n        warnNoop(publicInstance, 'replaceState');\n      },\n      /**\n       * Sets a subset of the state. This only exists because _pendingState is\n       * internal. This provides a merging strategy that is not available to deep\n       * properties which is confusing. TODO: Expose pendingState or don't use it\n       * during the merge.\n       *\n       * @param {ReactClass} publicInstance The instance that should rerender.\n       * @param {object} partialState Next partial state to be merged with state.\n       * @param {?function} callback Called after component is updated.\n       * @param {?string} Name of the calling function in the public API.\n       * @internal\n       */\n      enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n        warnNoop(publicInstance, 'setState');\n      }\n    };\n    var emptyObject = {};\n    {\n      Object.freeze(emptyObject);\n    }\n    /**\n     * Base class helpers for the updating state of a component.\n     */\n\n    function Component(props, context, updater) {\n      this.props = props;\n      this.context = context; // If a component has string refs, we will assign a different object later.\n\n      this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n      // renderer.\n\n      this.updater = updater || ReactNoopUpdateQueue;\n    }\n    Component.prototype.isReactComponent = {};\n    /**\n     * Sets a subset of the state. Always use this to mutate\n     * state. You should treat `this.state` as immutable.\n     *\n     * There is no guarantee that `this.state` will be immediately updated, so\n     * accessing `this.state` after calling this method may return the old value.\n     *\n     * There is no guarantee that calls to `setState` will run synchronously,\n     * as they may eventually be batched together.  You can provide an optional\n     * callback that will be executed when the call to setState is actually\n     * completed.\n     *\n     * When a function is provided to setState, it will be called at some point in\n     * the future (not synchronously). It will be called with the up to date\n     * component arguments (state, props, context). These values can be different\n     * from this.* because your function may be called after receiveProps but before\n     * shouldComponentUpdate, and this new state, props, and context will not yet be\n     * assigned to this.\n     *\n     * @param {object|function} partialState Next partial state or function to\n     *        produce next partial state to be merged with current state.\n     * @param {?function} callback Called after state is updated.\n     * @final\n     * @protected\n     */\n\n    Component.prototype.setState = function (partialState, callback) {\n      if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) {\n        throw new Error('setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.');\n      }\n      this.updater.enqueueSetState(this, partialState, callback, 'setState');\n    };\n    /**\n     * Forces an update. This should only be invoked when it is known with\n     * certainty that we are **not** in a DOM transaction.\n     *\n     * You may want to call this when you know that some deeper aspect of the\n     * component's state has changed but `setState` was not called.\n     *\n     * This will not invoke `shouldComponentUpdate`, but it will invoke\n     * `componentWillUpdate` and `componentDidUpdate`.\n     *\n     * @param {?function} callback Called after update is complete.\n     * @final\n     * @protected\n     */\n\n    Component.prototype.forceUpdate = function (callback) {\n      this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n    };\n    /**\n     * Deprecated APIs. These APIs used to exist on classic React classes but since\n     * we would like to deprecate them, we're not going to move them over to this\n     * modern base class. Instead, we define a getter that warns if it's accessed.\n     */\n\n    {\n      var deprecatedAPIs = {\n        isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n        replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n      };\n      var defineDeprecationWarning = function (methodName, info) {\n        Object.defineProperty(Component.prototype, methodName, {\n          get: function () {\n            warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n            return undefined;\n          }\n        });\n      };\n      for (var fnName in deprecatedAPIs) {\n        if (deprecatedAPIs.hasOwnProperty(fnName)) {\n          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n        }\n      }\n    }\n    function ComponentDummy() {}\n    ComponentDummy.prototype = Component.prototype;\n    /**\n     * Convenience component with default shallow equality check for sCU.\n     */\n\n    function PureComponent(props, context, updater) {\n      this.props = props;\n      this.context = context; // If a component has string refs, we will assign a different object later.\n\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n    }\n    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\n    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n\n    assign(pureComponentPrototype, Component.prototype);\n    pureComponentPrototype.isPureReactComponent = true;\n\n    // an immutable object with a single mutable value\n    function createRef() {\n      var refObject = {\n        current: null\n      };\n      {\n        Object.seal(refObject);\n      }\n      return refObject;\n    }\n    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\n    function isArray(a) {\n      return isArrayImpl(a);\n    }\n\n    /*\n     * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n     * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n     *\n     * The functions in this module will throw an easier-to-understand,\n     * easier-to-debug exception with a clear errors message message explaining the\n     * problem. (Instead of a confusing exception thrown inside the implementation\n     * of the `value` object).\n     */\n    // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n    function typeName(value) {\n      {\n        // toStringTag is needed for namespaced types like Temporal.Instant\n        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n        return type;\n      }\n    } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n    function willCoercionThrow(value) {\n      {\n        try {\n          testStringCoercion(value);\n          return false;\n        } catch (e) {\n          return true;\n        }\n      }\n    }\n    function testStringCoercion(value) {\n      // If you ended up here by following an exception call stack, here's what's\n      // happened: you supplied an object or symbol value to React (as a prop, key,\n      // DOM attribute, CSS property, string ref, etc.) and when React tried to\n      // coerce it to a string using `'' + value`, an exception was thrown.\n      //\n      // The most common types that will cause this exception are `Symbol` instances\n      // and Temporal objects like `Temporal.Instant`. But any object that has a\n      // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n      // exception. (Library authors do this to prevent users from using built-in\n      // numeric operators like `+` or comparison operators like `>=` because custom\n      // methods are needed to perform accurate arithmetic or comparison.)\n      //\n      // To fix the problem, coerce this object or symbol value to a string before\n      // passing it to React. The most reliable way is usually `String(value)`.\n      //\n      // To find which value is throwing, check the browser or debugger console.\n      // Before this exception was thrown, there should be `console.error` output\n      // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n      // problem and how that type was used: key, atrribute, input value prop, etc.\n      // In most cases, this console output also shows the component and its\n      // ancestor components where the exception happened.\n      //\n      // eslint-disable-next-line react-internal/safe-string-coercion\n      return '' + value;\n    }\n    function checkKeyStringCoercion(value) {\n      {\n        if (willCoercionThrow(value)) {\n          error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n          return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n        }\n      }\n    }\n\n    function getWrappedName(outerType, innerType, wrapperName) {\n      var displayName = outerType.displayName;\n      if (displayName) {\n        return displayName;\n      }\n      var functionName = innerType.displayName || innerType.name || '';\n      return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n    } // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n    function getContextName(type) {\n      return type.displayName || 'Context';\n    }\n    var REACT_CLIENT_REFERENCE$2 = Symbol.for('react.client.reference'); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n    function getComponentNameFromType(type) {\n      if (type == null) {\n        // Host root, text node or just invalid type.\n        return null;\n      }\n      if (typeof type === 'function') {\n        if (type.$$typeof === REACT_CLIENT_REFERENCE$2) {\n          // TODO: Create a convention for naming client references with debug info.\n          return null;\n        }\n        return type.displayName || type.name || null;\n      }\n      if (typeof type === 'string') {\n        return type;\n      }\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return 'Fragment';\n        case REACT_PORTAL_TYPE:\n          return 'Portal';\n        case REACT_PROFILER_TYPE:\n          return 'Profiler';\n        case REACT_STRICT_MODE_TYPE:\n          return 'StrictMode';\n        case REACT_SUSPENSE_TYPE:\n          return 'Suspense';\n        case REACT_SUSPENSE_LIST_TYPE:\n          return 'SuspenseList';\n        case REACT_CACHE_TYPE:\n          {\n            return 'Cache';\n          }\n      }\n      if (typeof type === 'object') {\n        {\n          if (typeof type.tag === 'number') {\n            error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n          }\n        }\n        switch (type.$$typeof) {\n          case REACT_CONTEXT_TYPE:\n            var context = type;\n            return getContextName(context) + '.Consumer';\n          case REACT_PROVIDER_TYPE:\n            var provider = type;\n            return getContextName(provider._context) + '.Provider';\n          case REACT_FORWARD_REF_TYPE:\n            return getWrappedName(type, type.render, 'ForwardRef');\n          case REACT_MEMO_TYPE:\n            var outerName = type.displayName || null;\n            if (outerName !== null) {\n              return outerName;\n            }\n            return getComponentNameFromType(type.type) || 'Memo';\n          case REACT_LAZY_TYPE:\n            {\n              var lazyComponent = type;\n              var payload = lazyComponent._payload;\n              var init = lazyComponent._init;\n              try {\n                return getComponentNameFromType(init(payload));\n              } catch (x) {\n                return null;\n              }\n            }\n        }\n      }\n      return null;\n    }\n\n    // $FlowFixMe[method-unbinding]\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    var RESERVED_PROPS = {\n      key: true,\n      ref: true,\n      __self: true,\n      __source: true\n    };\n    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;\n    {\n      didWarnAboutStringRefs = {};\n    }\n    function hasValidRef(config) {\n      {\n        if (hasOwnProperty.call(config, 'ref')) {\n          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n          if (getter && getter.isReactWarning) {\n            return false;\n          }\n        }\n      }\n      return config.ref !== undefined;\n    }\n    function hasValidKey(config) {\n      {\n        if (hasOwnProperty.call(config, 'key')) {\n          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n          if (getter && getter.isReactWarning) {\n            return false;\n          }\n        }\n      }\n      return config.key !== undefined;\n    }\n    function defineKeyPropWarningGetter(props, displayName) {\n      var warnAboutAccessingKey = function () {\n        {\n          if (!specialPropKeyWarningShown) {\n            specialPropKeyWarningShown = true;\n            error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n          }\n        }\n      };\n      warnAboutAccessingKey.isReactWarning = true;\n      Object.defineProperty(props, 'key', {\n        get: warnAboutAccessingKey,\n        configurable: true\n      });\n    }\n    function defineRefPropWarningGetter(props, displayName) {\n      var warnAboutAccessingRef = function () {\n        {\n          if (!specialPropRefWarningShown) {\n            specialPropRefWarningShown = true;\n            error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n          }\n        }\n      };\n      warnAboutAccessingRef.isReactWarning = true;\n      Object.defineProperty(props, 'ref', {\n        get: warnAboutAccessingRef,\n        configurable: true\n      });\n    }\n    function warnIfStringRefCannotBeAutoConverted(config) {\n      {\n        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {\n          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n          if (!didWarnAboutStringRefs[componentName]) {\n            error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);\n            didWarnAboutStringRefs[componentName] = true;\n          }\n        }\n      }\n    }\n    /**\n     * Factory method to create a new React element. This no longer adheres to\n     * the class pattern, so do not use new to call it. Also, instanceof check\n     * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n     * if something is a React Element.\n     *\n     * @param {*} type\n     * @param {*} props\n     * @param {*} key\n     * @param {string|object} ref\n     * @param {*} owner\n     * @param {*} self A *temporary* helper to detect places where `this` is\n     * different from the `owner` when React.createElement is called, so that we\n     * can warn. We want to get rid of owner and replace string `ref`s with arrow\n     * functions, and as long as `this` and owner are the same, there will be no\n     * change in behavior.\n     * @param {*} source An annotation object (added by a transpiler or otherwise)\n     * indicating filename, line number, and/or other information.\n     * @internal\n     */\n\n    function ReactElement(type, key, ref, self, source, owner, props) {\n      var element = {\n        // This tag allows us to uniquely identify this as a React Element\n        $$typeof: REACT_ELEMENT_TYPE,\n        // Built-in properties that belong on the element\n        type: type,\n        key: key,\n        ref: ref,\n        props: props,\n        // Record the component responsible for creating this element.\n        _owner: owner\n      };\n      {\n        // The validation flag is currently mutative. We put it on\n        // an external backing store so that we can freeze the whole object.\n        // This can be replaced with a WeakMap once they are implemented in\n        // commonly used development environments.\n        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n        // the validation flag non-enumerable (where possible, which should\n        // include every environment we run tests in), so the test framework\n        // ignores it.\n\n        Object.defineProperty(element._store, 'validated', {\n          configurable: false,\n          enumerable: false,\n          writable: true,\n          value: false\n        }); // self and source are DEV only properties.\n\n        Object.defineProperty(element, '_self', {\n          configurable: false,\n          enumerable: false,\n          writable: false,\n          value: self\n        }); // Two elements created in two different places should be considered\n        // equal for testing purposes and therefore we hide it from enumeration.\n\n        Object.defineProperty(element, '_source', {\n          configurable: false,\n          enumerable: false,\n          writable: false,\n          value: source\n        });\n        if (Object.freeze) {\n          Object.freeze(element.props);\n          Object.freeze(element);\n        }\n      }\n      return element;\n    }\n    /**\n     * Create and return a new ReactElement of the given type.\n     * See https://reactjs.org/docs/react-api.html#createelement\n     */\n\n    function createElement$1(type, config, children) {\n      var propName; // Reserved names are extracted\n\n      var props = {};\n      var key = null;\n      var ref = null;\n      var self = null;\n      var source = null;\n      if (config != null) {\n        if (hasValidRef(config)) {\n          ref = config.ref;\n          {\n            warnIfStringRefCannotBeAutoConverted(config);\n          }\n        }\n        if (hasValidKey(config)) {\n          {\n            checkKeyStringCoercion(config.key);\n          }\n          key = '' + config.key;\n        }\n        self = config.__self === undefined ? null : config.__self;\n        source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n\n        for (propName in config) {\n          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n            props[propName] = config[propName];\n          }\n        }\n      } // Children can be more than one argument, and those are transferred onto\n      // the newly allocated props object.\n\n      var childrenLength = arguments.length - 2;\n      if (childrenLength === 1) {\n        props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = Array(childrenLength);\n        for (var i = 0; i < childrenLength; i++) {\n          childArray[i] = arguments[i + 2];\n        }\n        {\n          if (Object.freeze) {\n            Object.freeze(childArray);\n          }\n        }\n        props.children = childArray;\n      } // Resolve default props\n\n      if (type && type.defaultProps) {\n        var defaultProps = type.defaultProps;\n        for (propName in defaultProps) {\n          if (props[propName] === undefined) {\n            props[propName] = defaultProps[propName];\n          }\n        }\n      }\n      {\n        if (key || ref) {\n          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n          if (key) {\n            defineKeyPropWarningGetter(props, displayName);\n          }\n          if (ref) {\n            defineRefPropWarningGetter(props, displayName);\n          }\n        }\n      }\n      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n    }\n    function cloneAndReplaceKey(oldElement, newKey) {\n      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n      return newElement;\n    }\n    /**\n     * Clone and return a new ReactElement using element as the starting point.\n     * See https://reactjs.org/docs/react-api.html#cloneelement\n     */\n\n    function cloneElement$1(element, config, children) {\n      if (element === null || element === undefined) {\n        throw new Error(\"React.cloneElement(...): The argument must be a React element, but you passed \" + element + \".\");\n      }\n      var propName; // Original props are copied\n\n      var props = assign({}, element.props); // Reserved names are extracted\n\n      var key = element.key;\n      var ref = element.ref; // Self is preserved since the owner is preserved.\n\n      var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n      // transpiler, and the original source is probably a better indicator of the\n      // true owner.\n\n      var source = element._source; // Owner will be preserved, unless ref is overridden\n\n      var owner = element._owner;\n      if (config != null) {\n        if (hasValidRef(config)) {\n          // Silently steal the ref from the parent.\n          ref = config.ref;\n          owner = ReactCurrentOwner.current;\n        }\n        if (hasValidKey(config)) {\n          {\n            checkKeyStringCoercion(config.key);\n          }\n          key = '' + config.key;\n        } // Remaining properties override existing props\n\n        var defaultProps;\n        if (element.type && element.type.defaultProps) {\n          defaultProps = element.type.defaultProps;\n        }\n        for (propName in config) {\n          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n            if (config[propName] === undefined && defaultProps !== undefined) {\n              // Resolve default props\n              props[propName] = defaultProps[propName];\n            } else {\n              props[propName] = config[propName];\n            }\n          }\n        }\n      } // Children can be more than one argument, and those are transferred onto\n      // the newly allocated props object.\n\n      var childrenLength = arguments.length - 2;\n      if (childrenLength === 1) {\n        props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = Array(childrenLength);\n        for (var i = 0; i < childrenLength; i++) {\n          childArray[i] = arguments[i + 2];\n        }\n        props.children = childArray;\n      }\n      return ReactElement(element.type, key, ref, self, source, owner, props);\n    }\n    /**\n     * Verifies the object is a ReactElement.\n     * See https://reactjs.org/docs/react-api.html#isvalidelement\n     * @param {?object} object\n     * @return {boolean} True if `object` is a ReactElement.\n     * @final\n     */\n\n    function isValidElement(object) {\n      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n    }\n    var SEPARATOR = '.';\n    var SUBSEPARATOR = ':';\n    /**\n     * Escape and wrap key so it is safe to use as a reactid\n     *\n     * @param {string} key to be escaped.\n     * @return {string} the escaped key.\n     */\n\n    function escape(key) {\n      var escapeRegex = /[=:]/g;\n      var escaperLookup = {\n        '=': '=0',\n        ':': '=2'\n      };\n      var escapedString = key.replace(escapeRegex, function (match) {\n        return escaperLookup[match];\n      });\n      return '$' + escapedString;\n    }\n    /**\n     * TODO: Test that a single child and an array with one item have the same key\n     * pattern.\n     */\n\n    var didWarnAboutMaps = false;\n    var userProvidedKeyEscapeRegex = /\\/+/g;\n    function escapeUserProvidedKey(text) {\n      return text.replace(userProvidedKeyEscapeRegex, '$&/');\n    }\n    /**\n     * Generate a key string that identifies a element within a set.\n     *\n     * @param {*} element A element that could contain a manual key.\n     * @param {number} index Index that is used if a manual key is not provided.\n     * @return {string}\n     */\n\n    function getElementKey(element, index) {\n      // Do some typechecking here since we call this blindly. We want to ensure\n      // that we don't block potential future ES APIs.\n      if (typeof element === 'object' && element !== null && element.key != null) {\n        // Explicit key\n        {\n          checkKeyStringCoercion(element.key);\n        }\n        return escape('' + element.key);\n      } // Implicit key determined by the index in the set\n\n      return index.toString(36);\n    }\n    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {\n      var type = typeof children;\n      if (type === 'undefined' || type === 'boolean') {\n        // All of the above are perceived as null.\n        children = null;\n      }\n      var invokeCallback = false;\n      if (children === null) {\n        invokeCallback = true;\n      } else {\n        switch (type) {\n          case 'string':\n          case 'number':\n            invokeCallback = true;\n            break;\n          case 'object':\n            switch (children.$$typeof) {\n              case REACT_ELEMENT_TYPE:\n              case REACT_PORTAL_TYPE:\n                invokeCallback = true;\n            }\n        }\n      }\n      if (invokeCallback) {\n        var _child = children;\n        var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array\n        // so that it's consistent if the number of children grows:\n\n        var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;\n        if (isArray(mappedChild)) {\n          var escapedChildKey = '';\n          if (childKey != null) {\n            escapedChildKey = escapeUserProvidedKey(childKey) + '/';\n          }\n          mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {\n            return c;\n          });\n        } else if (mappedChild != null) {\n          if (isValidElement(mappedChild)) {\n            {\n              // The `if` statement here prevents auto-disabling of the safe\n              // coercion ESLint rule, so we must manually disable it below.\n              // $FlowFixMe[incompatible-type] Flow incorrectly thinks React.Portal doesn't have a key\n              if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {\n                checkKeyStringCoercion(mappedChild.key);\n              }\n            }\n            mappedChild = cloneAndReplaceKey(mappedChild,\n            // Keep both the (mapped) and old keys if they differ, just as\n            // traverseAllChildren used to do for objects as children\n            escapedPrefix + (\n            // $FlowFixMe[incompatible-type] Flow incorrectly thinks React.Portal doesn't have a key\n            mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey(\n            // $FlowFixMe[unsafe-addition]\n            '' + mappedChild.key // eslint-disable-line react-internal/safe-string-coercion\n            ) + '/' : '') + childKey);\n          }\n          array.push(mappedChild);\n        }\n        return 1;\n      }\n      var child;\n      var nextName;\n      var subtreeCount = 0; // Count of children found in the current subtree.\n\n      var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n      if (isArray(children)) {\n        for (var i = 0; i < children.length; i++) {\n          child = children[i];\n          nextName = nextNamePrefix + getElementKey(child, i);\n          subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n        }\n      } else {\n        var iteratorFn = getIteratorFn(children);\n        if (typeof iteratorFn === 'function') {\n          var iterableChildren = children;\n          {\n            // Warn about using Maps as children\n            if (iteratorFn === iterableChildren.entries) {\n              if (!didWarnAboutMaps) {\n                warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n              }\n              didWarnAboutMaps = true;\n            }\n          }\n          var iterator = iteratorFn.call(iterableChildren);\n          var step;\n          var ii = 0; // $FlowFixMe[incompatible-use] `iteratorFn` might return null according to typing.\n\n          while (!(step = iterator.next()).done) {\n            child = step.value;\n            nextName = nextNamePrefix + getElementKey(child, ii++);\n            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n          }\n        } else if (type === 'object') {\n          // eslint-disable-next-line react-internal/safe-string-coercion\n          var childrenString = String(children);\n          throw new Error(\"Objects are not valid as a React child (found: \" + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + \"). \" + 'If you meant to render a collection of children, use an array ' + 'instead.');\n        }\n      }\n      return subtreeCount;\n    }\n    /**\n     * Maps children that are typically specified as `props.children`.\n     *\n     * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n     *\n     * The provided mapFunction(child, index) will be called for each\n     * leaf child.\n     *\n     * @param {?*} children Children tree container.\n     * @param {function(*, int)} func The map function.\n     * @param {*} context Context for mapFunction.\n     * @return {object} Object containing the ordered map of results.\n     */\n\n    function mapChildren(children, func, context) {\n      if (children == null) {\n        // $FlowFixMe limitation refining abstract types in Flow\n        return children;\n      }\n      var result = [];\n      var count = 0;\n      mapIntoArray(children, result, '', '', function (child) {\n        return func.call(context, child, count++);\n      });\n      return result;\n    }\n    /**\n     * Count the number of children that are typically specified as\n     * `props.children`.\n     *\n     * See https://reactjs.org/docs/react-api.html#reactchildrencount\n     *\n     * @param {?*} children Children tree container.\n     * @return {number} The number of children.\n     */\n\n    function countChildren(children) {\n      var n = 0;\n      mapChildren(children, function () {\n        n++; // Don't return anything\n      });\n\n      return n;\n    }\n    /**\n     * Iterates through children that are typically specified as `props.children`.\n     *\n     * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n     *\n     * The provided forEachFunc(child, index) will be called for each\n     * leaf child.\n     *\n     * @param {?*} children Children tree container.\n     * @param {function(*, int)} forEachFunc\n     * @param {*} forEachContext Context for forEachContext.\n     */\n\n    function forEachChildren(children, forEachFunc, forEachContext) {\n      mapChildren(children,\n      // $FlowFixMe[missing-this-annot]\n      function () {\n        forEachFunc.apply(this, arguments); // Don't return anything.\n      }, forEachContext);\n    }\n    /**\n     * Flatten a children object (typically specified as `props.children`) and\n     * return an array with appropriately re-keyed children.\n     *\n     * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n     */\n\n    function toArray(children) {\n      return mapChildren(children, function (child) {\n        return child;\n      }) || [];\n    }\n    /**\n     * Returns the first child in a collection of children and verifies that there\n     * is only one child in the collection.\n     *\n     * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n     *\n     * The current implementation of this function assumes that a single child gets\n     * passed without a wrapper, but the purpose of this helper function is to\n     * abstract away the particular structure of children.\n     *\n     * @param {?object} children Child collection structure.\n     * @return {ReactElement} The first and only `ReactElement` contained in the\n     * structure.\n     */\n\n    function onlyChild(children) {\n      if (!isValidElement(children)) {\n        throw new Error('React.Children.only expected to receive a single React element child.');\n      }\n      return children;\n    }\n    var Uninitialized = -1;\n    var Pending = 0;\n    var Resolved = 1;\n    var Rejected = 2;\n    function lazyInitializer(payload) {\n      if (payload._status === Uninitialized) {\n        var ctor = payload._result;\n        var thenable = ctor(); // Transition to the next state.\n        // This might throw either because it's missing or throws. If so, we treat it\n        // as still uninitialized and try again next time. Which is the same as what\n        // happens if the ctor or any wrappers processing the ctor throws. This might\n        // end up fixing it if the resolution was a concurrency bug.\n\n        thenable.then(function (moduleObject) {\n          if (payload._status === Pending || payload._status === Uninitialized) {\n            // Transition to the next state.\n            var resolved = payload;\n            resolved._status = Resolved;\n            resolved._result = moduleObject;\n          }\n        }, function (error) {\n          if (payload._status === Pending || payload._status === Uninitialized) {\n            // Transition to the next state.\n            var rejected = payload;\n            rejected._status = Rejected;\n            rejected._result = error;\n          }\n        });\n        if (payload._status === Uninitialized) {\n          // In case, we're still uninitialized, then we're waiting for the thenable\n          // to resolve. Set it as pending in the meantime.\n          var pending = payload;\n          pending._status = Pending;\n          pending._result = thenable;\n        }\n      }\n      if (payload._status === Resolved) {\n        var moduleObject = payload._result;\n        {\n          if (moduleObject === undefined) {\n            error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\\n\\nYour code should look like: \\n  ' +\n            // Break up imports to avoid accidentally parsing them as dependencies.\n            'const MyComponent = lazy(() => imp' + \"ort('./MyComponent'))\\n\\n\" + 'Did you accidentally put curly braces around the import?', moduleObject);\n          }\n        }\n        {\n          if (!('default' in moduleObject)) {\n            error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\\n\\nYour code should look like: \\n  ' +\n            // Break up imports to avoid accidentally parsing them as dependencies.\n            'const MyComponent = lazy(() => imp' + \"ort('./MyComponent'))\", moduleObject);\n          }\n        }\n        return moduleObject.default;\n      } else {\n        throw payload._result;\n      }\n    }\n    function lazy(ctor) {\n      var payload = {\n        // We use these fields to store the result.\n        _status: Uninitialized,\n        _result: ctor\n      };\n      var lazyType = {\n        $$typeof: REACT_LAZY_TYPE,\n        _payload: payload,\n        _init: lazyInitializer\n      };\n      {\n        // In production, this would just set it on the object.\n        var defaultProps;\n        var propTypes; // $FlowFixMe[prop-missing]\n\n        Object.defineProperties(lazyType, {\n          defaultProps: {\n            configurable: true,\n            get: function () {\n              return defaultProps;\n            },\n            // $FlowFixMe[missing-local-annot]\n            set: function (newDefaultProps) {\n              error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n              defaultProps = newDefaultProps; // Match production behavior more closely:\n              // $FlowFixMe[prop-missing]\n\n              Object.defineProperty(lazyType, 'defaultProps', {\n                enumerable: true\n              });\n            }\n          },\n          propTypes: {\n            configurable: true,\n            get: function () {\n              return propTypes;\n            },\n            // $FlowFixMe[missing-local-annot]\n            set: function (newPropTypes) {\n              error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n              propTypes = newPropTypes; // Match production behavior more closely:\n              // $FlowFixMe[prop-missing]\n\n              Object.defineProperty(lazyType, 'propTypes', {\n                enumerable: true\n              });\n            }\n          }\n        });\n      }\n      return lazyType;\n    }\n    function forwardRef(render) {\n      {\n        if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n          error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');\n        } else if (typeof render !== 'function') {\n          error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);\n        } else {\n          if (render.length !== 0 && render.length !== 2) {\n            error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');\n          }\n        }\n        if (render != null) {\n          if (render.defaultProps != null || render.propTypes != null) {\n            error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');\n          }\n        }\n      }\n      var elementType = {\n        $$typeof: REACT_FORWARD_REF_TYPE,\n        render: render\n      };\n      {\n        var ownName;\n        Object.defineProperty(elementType, 'displayName', {\n          enumerable: false,\n          configurable: true,\n          get: function () {\n            return ownName;\n          },\n          set: function (name) {\n            ownName = name; // The inner component shouldn't inherit this display name in most cases,\n            // because the component may be used elsewhere.\n            // But it's nice for anonymous functions to inherit the name,\n            // so that our component-stack generation logic will display their frames.\n            // An anonymous function generally suggests a pattern like:\n            //   React.forwardRef((props, ref) => {...});\n            // This kind of inner function is not used elsewhere so the side effect is okay.\n\n            if (!render.name && !render.displayName) {\n              render.displayName = name;\n            }\n          }\n        });\n      }\n      return elementType;\n    }\n    var REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\n    function isValidElementType(type) {\n      if (typeof type === 'string' || typeof type === 'function') {\n        return true;\n      } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {\n        return true;\n      }\n      if (typeof type === 'object' && type !== null) {\n        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE ||\n        // This needs to include all possible module reference object\n        // types supported by any Flight configuration anywhere since\n        // we don't know which Flight build this will end up being used\n        // with.\n        type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n          return true;\n        }\n      }\n      return false;\n    }\n    function memo(type, compare) {\n      {\n        if (!isValidElementType(type)) {\n          error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);\n        }\n      }\n      var elementType = {\n        $$typeof: REACT_MEMO_TYPE,\n        type: type,\n        compare: compare === undefined ? null : compare\n      };\n      {\n        var ownName;\n        Object.defineProperty(elementType, 'displayName', {\n          enumerable: false,\n          configurable: true,\n          get: function () {\n            return ownName;\n          },\n          set: function (name) {\n            ownName = name; // The inner component shouldn't inherit this display name in most cases,\n            // because the component may be used elsewhere.\n            // But it's nice for anonymous functions to inherit the name,\n            // so that our component-stack generation logic will display their frames.\n            // An anonymous function generally suggests a pattern like:\n            //   React.memo((props) => {...});\n            // This kind of inner function is not used elsewhere so the side effect is okay.\n\n            if (!type.name && !type.displayName) {\n              type.displayName = name;\n            }\n          }\n        });\n      }\n      return elementType;\n    }\n    var UNTERMINATED = 0;\n    var TERMINATED = 1;\n    var ERRORED = 2;\n    function createCacheRoot() {\n      return new WeakMap();\n    }\n    function createCacheNode() {\n      return {\n        s: UNTERMINATED,\n        // status, represents whether the cached computation returned a value or threw an error\n        v: undefined,\n        // value, either the cached result or an error, depending on s\n        o: null,\n        // object cache, a WeakMap where non-primitive arguments are stored\n        p: null // primitive cache, a regular Map where primitive arguments are stored.\n      };\n    }\n\n    function cache(fn) {\n      return function () {\n        var dispatcher = ReactCurrentCache.current;\n        if (!dispatcher) {\n          // If there is no dispatcher, then we treat this as not being cached.\n          // $FlowFixMe[incompatible-call]: We don't want to use rest arguments since we transpile the code.\n          return fn.apply(null, arguments);\n        }\n        var fnMap = dispatcher.getCacheForType(createCacheRoot);\n        var fnNode = fnMap.get(fn);\n        var cacheNode;\n        if (fnNode === undefined) {\n          cacheNode = createCacheNode();\n          fnMap.set(fn, cacheNode);\n        } else {\n          cacheNode = fnNode;\n        }\n        for (var i = 0, l = arguments.length; i < l; i++) {\n          var arg = arguments[i];\n          if (typeof arg === 'function' || typeof arg === 'object' && arg !== null) {\n            // Objects go into a WeakMap\n            var objectCache = cacheNode.o;\n            if (objectCache === null) {\n              cacheNode.o = objectCache = new WeakMap();\n            }\n            var objectNode = objectCache.get(arg);\n            if (objectNode === undefined) {\n              cacheNode = createCacheNode();\n              objectCache.set(arg, cacheNode);\n            } else {\n              cacheNode = objectNode;\n            }\n          } else {\n            // Primitives go into a regular Map\n            var primitiveCache = cacheNode.p;\n            if (primitiveCache === null) {\n              cacheNode.p = primitiveCache = new Map();\n            }\n            var primitiveNode = primitiveCache.get(arg);\n            if (primitiveNode === undefined) {\n              cacheNode = createCacheNode();\n              primitiveCache.set(arg, cacheNode);\n            } else {\n              cacheNode = primitiveNode;\n            }\n          }\n        }\n        if (cacheNode.s === TERMINATED) {\n          return cacheNode.v;\n        }\n        if (cacheNode.s === ERRORED) {\n          throw cacheNode.v;\n        }\n        try {\n          // $FlowFixMe[incompatible-call]: We don't want to use rest arguments since we transpile the code.\n          var result = fn.apply(null, arguments);\n          var terminatedNode = cacheNode;\n          terminatedNode.s = TERMINATED;\n          terminatedNode.v = result;\n          return result;\n        } catch (error) {\n          // We store the first error that's thrown and rethrow it.\n          var erroredNode = cacheNode;\n          erroredNode.s = ERRORED;\n          erroredNode.v = error;\n          throw error;\n        }\n      };\n    }\n    function resolveDispatcher() {\n      var dispatcher = ReactCurrentDispatcher$1.current;\n      {\n        if (dispatcher === null) {\n          error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\n        }\n      } // Will result in a null access error if accessed outside render phase. We\n      // intentionally don't throw our own error because this is in a hot path.\n      // Also helps ensure this is inlined.\n\n      return dispatcher;\n    }\n    function useContext(Context) {\n      var dispatcher = resolveDispatcher();\n      {\n        // TODO: add a more generic warning for invalid values.\n        if (Context._context !== undefined) {\n          var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs\n          // and nobody should be using this in existing code.\n\n          if (realContext.Consumer === Context) {\n            error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');\n          } else if (realContext.Provider === Context) {\n            error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');\n          }\n        }\n      }\n      return dispatcher.useContext(Context);\n    }\n    function useCallback(callback, deps) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useCallback(callback, deps);\n    }\n    function useMemo(create, deps) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useMemo(create, deps);\n    }\n    function useDebugValue(value, formatterFn) {\n      {\n        var dispatcher = resolveDispatcher();\n        return dispatcher.useDebugValue(value, formatterFn);\n      }\n    }\n    function useId() {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.useId();\n    }\n    function use(usable) {\n      var dispatcher = resolveDispatcher();\n      return dispatcher.use(usable);\n    }\n\n    // Helpers to patch console.logs to avoid logging during side-effect free\n    // replaying on render function. This currently only patches the object\n    // lazily which won't cover if the log function was extracted eagerly.\n    // We could also eagerly patch the method.\n    var disabledDepth = 0;\n    var prevLog;\n    var prevInfo;\n    var prevWarn;\n    var prevError;\n    var prevGroup;\n    var prevGroupCollapsed;\n    var prevGroupEnd;\n    function disabledLog() {}\n    disabledLog.__reactDisabledLog = true;\n    function disableLogs() {\n      {\n        if (disabledDepth === 0) {\n          /* eslint-disable react-internal/no-production-logging */\n          prevLog = console.log;\n          prevInfo = console.info;\n          prevWarn = console.warn;\n          prevError = console.error;\n          prevGroup = console.group;\n          prevGroupCollapsed = console.groupCollapsed;\n          prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n          var props = {\n            configurable: true,\n            enumerable: true,\n            value: disabledLog,\n            writable: true\n          }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n          Object.defineProperties(console, {\n            info: props,\n            log: props,\n            warn: props,\n            error: props,\n            group: props,\n            groupCollapsed: props,\n            groupEnd: props\n          });\n          /* eslint-enable react-internal/no-production-logging */\n        }\n\n        disabledDepth++;\n      }\n    }\n    function reenableLogs() {\n      {\n        disabledDepth--;\n        if (disabledDepth === 0) {\n          /* eslint-disable react-internal/no-production-logging */\n          var props = {\n            configurable: true,\n            enumerable: true,\n            writable: true\n          }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n          Object.defineProperties(console, {\n            log: assign({}, props, {\n              value: prevLog\n            }),\n            info: assign({}, props, {\n              value: prevInfo\n            }),\n            warn: assign({}, props, {\n              value: prevWarn\n            }),\n            error: assign({}, props, {\n              value: prevError\n            }),\n            group: assign({}, props, {\n              value: prevGroup\n            }),\n            groupCollapsed: assign({}, props, {\n              value: prevGroupCollapsed\n            }),\n            groupEnd: assign({}, props, {\n              value: prevGroupEnd\n            })\n          });\n          /* eslint-enable react-internal/no-production-logging */\n        }\n\n        if (disabledDepth < 0) {\n          error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n        }\n      }\n    }\n    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n    var prefix;\n    function describeBuiltInComponentFrame(name, source, ownerFn) {\n      {\n        if (prefix === undefined) {\n          // Extract the VM specific prefix used by each line.\n          try {\n            throw Error();\n          } catch (x) {\n            var match = x.stack.trim().match(/\\n( *(at )?)/);\n            prefix = match && match[1] || '';\n          }\n        } // We use the prefix to ensure our stacks line up with native stack frames.\n\n        return '\\n' + prefix + name;\n      }\n    }\n    var reentry = false;\n    var componentFrameCache;\n    {\n      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n      componentFrameCache = new PossiblyWeakMap();\n    }\n    /**\n     * Leverages native browser/VM stack frames to get proper details (e.g.\n     * filename, line + col number) for a single component in a component stack. We\n     * do this by:\n     *   (1) throwing and catching an error in the function - this will be our\n     *       control error.\n     *   (2) calling the component which will eventually throw an error that we'll\n     *       catch - this will be our sample error.\n     *   (3) diffing the control and sample error stacks to find the stack frame\n     *       which represents our component.\n     */\n\n    function describeNativeComponentFrame(fn, construct) {\n      // If something asked for a stack inside a fake render, it should get ignored.\n      if (!fn || reentry) {\n        return '';\n      }\n      {\n        var frame = componentFrameCache.get(fn);\n        if (frame !== undefined) {\n          return frame;\n        }\n      }\n      reentry = true;\n      var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n      Error.prepareStackTrace = undefined;\n      var previousDispatcher;\n      {\n        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n        // for warnings.\n\n        ReactCurrentDispatcher.current = null;\n        disableLogs();\n      }\n      /**\n       * Finding a common stack frame between sample and control errors can be\n       * tricky given the different types and levels of stack trace truncation from\n       * different JS VMs. So instead we'll attempt to control what that common\n       * frame should be through this object method:\n       * Having both the sample and control errors be in the function under the\n       * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n       * `displayName` properties of the function ensures that a stack\n       * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n       * it for both control and sample stacks.\n       */\n\n      var RunInRootFrame = {\n        DetermineComponentFrameRoot: function () {\n          var control;\n          try {\n            // This should throw.\n            if (construct) {\n              // Something should be setting the props in the constructor.\n              var Fake = function () {\n                throw Error();\n              }; // $FlowFixMe[prop-missing]\n\n              Object.defineProperty(Fake.prototype, 'props', {\n                set: function () {\n                  // We use a throwing setter instead of frozen or non-writable props\n                  // because that won't throw in a non-strict mode function.\n                  throw Error();\n                }\n              });\n              if (typeof Reflect === 'object' && Reflect.construct) {\n                // We construct a different control for this case to include any extra\n                // frames added by the construct call.\n                try {\n                  Reflect.construct(Fake, []);\n                } catch (x) {\n                  control = x;\n                }\n                Reflect.construct(fn, [], Fake);\n              } else {\n                try {\n                  Fake.call();\n                } catch (x) {\n                  control = x;\n                } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n                fn.call(Fake.prototype);\n              }\n            } else {\n              try {\n                throw Error();\n              } catch (x) {\n                control = x;\n              } // TODO(luna): This will currently only throw if the function component\n              // tries to access React/ReactDOM/props. We should probably make this throw\n              // in simple components too\n\n              var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n              // component, which we don't yet support. Attach a noop catch handler to\n              // silence the error.\n              // TODO: Implement component stacks for async client components?\n\n              if (maybePromise && typeof maybePromise.catch === 'function') {\n                maybePromise.catch(function () {});\n              }\n            }\n          } catch (sample) {\n            // This is inlined manually because closure doesn't do it for us.\n            if (sample && control && typeof sample.stack === 'string') {\n              return [sample.stack, control.stack];\n            }\n          }\n          return [null, null];\n        }\n      }; // $FlowFixMe[prop-missing]\n\n      RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot';\n      var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, 'name'); // Before ES6, the `name` property was not configurable.\n\n      if (namePropDescriptor && namePropDescriptor.configurable) {\n        // V8 utilizes a function's `name` property when generating a stack trace.\n        Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot,\n        // Configurable properties can be updated even if its writable descriptor\n        // is set to `false`.\n        // $FlowFixMe[cannot-write]\n        'name', {\n          value: 'DetermineComponentFrameRoot'\n        });\n      }\n      try {\n        var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),\n          sampleStack = _RunInRootFrame$Deter[0],\n          controlStack = _RunInRootFrame$Deter[1];\n        if (sampleStack && controlStack) {\n          // This extracts the first frame from the sample that isn't also in the control.\n          // Skipping one frame that we assume is the frame that calls the two.\n          var sampleLines = sampleStack.split('\\n');\n          var controlLines = controlStack.split('\\n');\n          var s = 0;\n          var c = 0;\n          while (s < sampleLines.length && !sampleLines[s].includes('DetermineComponentFrameRoot')) {\n            s++;\n          }\n          while (c < controlLines.length && !controlLines[c].includes('DetermineComponentFrameRoot')) {\n            c++;\n          } // We couldn't find our intentionally injected common root frame, attempt\n          // to find another common root frame by search from the bottom of the\n          // control stack...\n\n          if (s === sampleLines.length || c === controlLines.length) {\n            s = sampleLines.length - 1;\n            c = controlLines.length - 1;\n            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n              // We expect at least one stack frame to be shared.\n              // Typically this will be the root most one. However, stack frames may be\n              // cut off due to maximum stack limits. In this case, one maybe cut off\n              // earlier than the other. We assume that the sample is longer or the same\n              // and there for cut off earlier. So we should find the root most frame in\n              // the sample somewhere in the control.\n              c--;\n            }\n          }\n          for (; s >= 1 && c >= 0; s--, c--) {\n            // Next we find the first one that isn't the same which should be the\n            // frame that called our sample function and the control.\n            if (sampleLines[s] !== controlLines[c]) {\n              // In V8, the first line is describing the message but other VMs don't.\n              // If we're about to return the first line, and the control is also on the same\n              // line, that's a pretty good indicator that our sample threw at same line as\n              // the control. I.e. before we entered the sample frame. So we ignore this result.\n              // This can happen if you passed a class to function component, or non-function.\n              if (s !== 1 || c !== 1) {\n                do {\n                  s--;\n                  c--; // We may still have similar intermediate frames from the construct call.\n                  // The next one that isn't the same should be our match though.\n\n                  if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                    // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                    var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                    // but we have a user-provided \"displayName\"\n                    // splice it in to make the stack more readable.\n\n                    if (fn.displayName && _frame.includes('<anonymous>')) {\n                      _frame = _frame.replace('<anonymous>', fn.displayName);\n                    }\n                    if (true) {\n                      if (typeof fn === 'function') {\n                        componentFrameCache.set(fn, _frame);\n                      }\n                    } // Return the line we found.\n\n                    return _frame;\n                  }\n                } while (s >= 1 && c >= 0);\n              }\n              break;\n            }\n          }\n        }\n      } finally {\n        reentry = false;\n        {\n          ReactCurrentDispatcher.current = previousDispatcher;\n          reenableLogs();\n        }\n        Error.prepareStackTrace = previousPrepareStackTrace;\n      } // Fallback to just using the name if we couldn't make it throw.\n\n      var name = fn ? fn.displayName || fn.name : '';\n      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n      {\n        if (typeof fn === 'function') {\n          componentFrameCache.set(fn, syntheticFrame);\n        }\n      }\n      return syntheticFrame;\n    }\n    function describeFunctionComponentFrame(fn, source, ownerFn) {\n      {\n        return describeNativeComponentFrame(fn, false);\n      }\n    }\n    function shouldConstruct(Component) {\n      var prototype = Component.prototype;\n      return !!(prototype && prototype.isReactComponent);\n    }\n    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n      if (type == null) {\n        return '';\n      }\n      if (typeof type === 'function') {\n        {\n          return describeNativeComponentFrame(type, shouldConstruct(type));\n        }\n      }\n      if (typeof type === 'string') {\n        return describeBuiltInComponentFrame(type);\n      }\n      switch (type) {\n        case REACT_SUSPENSE_TYPE:\n          return describeBuiltInComponentFrame('Suspense');\n        case REACT_SUSPENSE_LIST_TYPE:\n          return describeBuiltInComponentFrame('SuspenseList');\n      }\n      if (typeof type === 'object') {\n        switch (type.$$typeof) {\n          case REACT_FORWARD_REF_TYPE:\n            return describeFunctionComponentFrame(type.render);\n          case REACT_MEMO_TYPE:\n            // Memo may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n          case REACT_LAZY_TYPE:\n            {\n              var lazyComponent = type;\n              var payload = lazyComponent._payload;\n              var init = lazyComponent._init;\n              try {\n                // Lazy may contain any component type so we recursively resolve it.\n                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n              } catch (x) {}\n            }\n        }\n      }\n      return '';\n    }\n    var loggedTypeFailures = {};\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    function setCurrentlyValidatingElement$1(element) {\n      {\n        if (element) {\n          var owner = element._owner;\n          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n          ReactDebugCurrentFrame.setExtraStackFrame(stack);\n        } else {\n          ReactDebugCurrentFrame.setExtraStackFrame(null);\n        }\n      }\n    }\n    function checkPropTypes(typeSpecs, values, location, componentName, element) {\n      {\n        // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n        var has = Function.call.bind(hasOwnProperty);\n        for (var typeSpecName in typeSpecs) {\n          if (has(typeSpecs, typeSpecName)) {\n            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n            // fail the render phase where it didn't fail before. So we log it.\n            // After these have been cleaned up, we'll let them throw.\n\n            try {\n              // This is intentionally an invariant that gets caught. It's the same\n              // behavior as without this statement except with a better message.\n              if (typeof typeSpecs[typeSpecName] !== 'function') {\n                // eslint-disable-next-line react-internal/prod-error-codes\n                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n                err.name = 'Invariant Violation';\n                throw err;\n              }\n              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n            } catch (ex) {\n              error$1 = ex;\n            }\n            if (error$1 && !(error$1 instanceof Error)) {\n              setCurrentlyValidatingElement$1(element);\n              error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n              setCurrentlyValidatingElement$1(null);\n            }\n            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n              // Only monitor this failure once because there tends to be a lot of the\n              // same error.\n              loggedTypeFailures[error$1.message] = true;\n              setCurrentlyValidatingElement$1(element);\n              error('Failed %s type: %s', location, error$1.message);\n              setCurrentlyValidatingElement$1(null);\n            }\n          }\n        }\n      }\n    }\n    var REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\n    function setCurrentlyValidatingElement(element) {\n      {\n        if (element) {\n          var owner = element._owner;\n          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n          setExtraStackFrame(stack);\n        } else {\n          setExtraStackFrame(null);\n        }\n      }\n    }\n    var propTypesMisspellWarningShown;\n    {\n      propTypesMisspellWarningShown = false;\n    }\n    function getDeclarationErrorAddendum() {\n      if (ReactCurrentOwner.current) {\n        var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n        if (name) {\n          return '\\n\\nCheck the render method of `' + name + '`.';\n        }\n      }\n      return '';\n    }\n    function getSourceInfoErrorAddendum(source) {\n      if (source !== undefined) {\n        var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n        var lineNumber = source.lineNumber;\n        return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n      }\n      return '';\n    }\n    function getSourceInfoErrorAddendumForProps(elementProps) {\n      if (elementProps !== null && elementProps !== undefined) {\n        return getSourceInfoErrorAddendum(elementProps.__source);\n      }\n      return '';\n    }\n    /**\n     * Warn if there's no key explicitly set on dynamic arrays of children or\n     * object keys are not valid. This allows us to keep track of children between\n     * updates.\n     */\n\n    var ownerHasKeyUseWarning = {};\n    function getCurrentComponentErrorInfo(parentType) {\n      var info = getDeclarationErrorAddendum();\n      if (!info) {\n        var parentName = getComponentNameFromType(parentType);\n        if (parentName) {\n          info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n        }\n      }\n      return info;\n    }\n    /**\n     * Warn if the element doesn't have an explicit key assigned to it.\n     * This element is in an array. The array could grow and shrink or be\n     * reordered. All children that haven't already been validated are required to\n     * have a \"key\" property assigned to it. Error statuses are cached so a warning\n     * will only be shown once.\n     *\n     * @internal\n     * @param {ReactElement} element Element that requires a key.\n     * @param {*} parentType element's parent's type.\n     */\n\n    function validateExplicitKey(element, parentType) {\n      if (!element._store || element._store.validated || element.key != null) {\n        return;\n      }\n      element._store.validated = true;\n      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n        return;\n      }\n      ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n      // property, it may be the creator of the child that's responsible for\n      // assigning it a key.\n\n      var childOwner = '';\n      if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n        // Give the component that originally created this child.\n        childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n      }\n      {\n        setCurrentlyValidatingElement(element);\n        error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n        setCurrentlyValidatingElement(null);\n      }\n    }\n    /**\n     * Ensure that every element either is passed in a static location, in an\n     * array with an explicit keys property defined, or in an object literal\n     * with valid key property.\n     *\n     * @internal\n     * @param {ReactNode} node Statically passed child of any type.\n     * @param {*} parentType node's parent's type.\n     */\n\n    function validateChildKeys(node, parentType) {\n      if (typeof node !== 'object' || !node) {\n        return;\n      }\n      if (node.$$typeof === REACT_CLIENT_REFERENCE) ;else if (isArray(node)) {\n        for (var i = 0; i < node.length; i++) {\n          var child = node[i];\n          if (isValidElement(child)) {\n            validateExplicitKey(child, parentType);\n          }\n        }\n      } else if (isValidElement(node)) {\n        // This element was passed in a valid location.\n        if (node._store) {\n          node._store.validated = true;\n        }\n      } else {\n        var iteratorFn = getIteratorFn(node);\n        if (typeof iteratorFn === 'function') {\n          // Entry iterators used to provide implicit keys,\n          // but now we print a separate warning for them later.\n          if (iteratorFn !== node.entries) {\n            var iterator = iteratorFn.call(node);\n            var step;\n            while (!(step = iterator.next()).done) {\n              if (isValidElement(step.value)) {\n                validateExplicitKey(step.value, parentType);\n              }\n            }\n          }\n        }\n      }\n    }\n    /**\n     * Given an element, validate that its props follow the propTypes definition,\n     * provided by the type.\n     *\n     * @param {ReactElement} element\n     */\n\n    function validatePropTypes(element) {\n      {\n        var type = element.type;\n        if (type === null || type === undefined || typeof type === 'string') {\n          return;\n        }\n        if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n          return;\n        }\n        var propTypes;\n        if (typeof type === 'function') {\n          propTypes = type.propTypes;\n        } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE ||\n        // Note: Memo only checks outer props here.\n        // Inner props are checked in the reconciler.\n        type.$$typeof === REACT_MEMO_TYPE)) {\n          propTypes = type.propTypes;\n        } else {\n          return;\n        }\n        if (propTypes) {\n          // Intentionally inside to avoid triggering lazy initializers:\n          var name = getComponentNameFromType(type);\n          checkPropTypes(propTypes, element.props, 'prop', name, element);\n        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n          propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n          var _name = getComponentNameFromType(type);\n          error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n        }\n        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n          error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n        }\n      }\n    }\n    /**\n     * Given a fragment, validate that it can only be provided with fragment props\n     * @param {ReactElement} fragment\n     */\n\n    function validateFragmentProps(fragment) {\n      {\n        var keys = Object.keys(fragment.props);\n        for (var i = 0; i < keys.length; i++) {\n          var key = keys[i];\n          if (key !== 'children' && key !== 'key') {\n            setCurrentlyValidatingElement(fragment);\n            error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n            setCurrentlyValidatingElement(null);\n            break;\n          }\n        }\n        if (fragment.ref !== null) {\n          setCurrentlyValidatingElement(fragment);\n          error('Invalid attribute `ref` supplied to `React.Fragment`.');\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n    function createElementWithValidation(type, props, children) {\n      var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n      // succeed and there will likely be errors in render.\n\n      if (!validType) {\n        var info = '';\n        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n          info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n        }\n        var sourceInfo = getSourceInfoErrorAddendumForProps(props);\n        if (sourceInfo) {\n          info += sourceInfo;\n        } else {\n          info += getDeclarationErrorAddendum();\n        }\n        var typeString;\n        if (type === null) {\n          typeString = 'null';\n        } else if (isArray(type)) {\n          typeString = 'array';\n        } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n          typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n          info = ' Did you accidentally export a JSX literal instead of a component?';\n        } else {\n          typeString = typeof type;\n        }\n        {\n          error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n        }\n      }\n      var element = createElement$1.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n      // TODO: Drop this when these are no longer allowed as the type argument.\n\n      if (element == null) {\n        return element;\n      } // Skip key warning if the type isn't valid since our key validation logic\n      // doesn't expect a non-string/function type and can throw confusing errors.\n      // We don't want exception behavior to differ between dev and prod.\n      // (Rendering will throw with a helpful message and as soon as the type is\n      // fixed, the key warnings will appear.)\n\n      if (validType) {\n        for (var i = 2; i < arguments.length; i++) {\n          validateChildKeys(arguments[i], type);\n        }\n      }\n      if (type === REACT_FRAGMENT_TYPE) {\n        validateFragmentProps(element);\n      } else {\n        validatePropTypes(element);\n      }\n      return element;\n    }\n    function cloneElementWithValidation(element, props, children) {\n      var newElement = cloneElement$1.apply(this, arguments);\n      for (var i = 2; i < arguments.length; i++) {\n        validateChildKeys(arguments[i], newElement.type);\n      }\n      validatePropTypes(newElement);\n      return newElement;\n    }\n    function createServerContext(globalName, defaultValue) {\n      {\n        throw new Error('Not implemented.');\n      }\n    }\n\n    /**\n     * Keeps track of the current batch's configuration such as how long an update\n     * should suspend for if it needs to.\n     */\n    var ReactCurrentBatchConfig = {\n      transition: null\n    };\n    function startTransition(scope, options) {\n      var prevTransition = ReactCurrentBatchConfig.transition;\n      ReactCurrentBatchConfig.transition = {};\n      var currentTransition = ReactCurrentBatchConfig.transition;\n      {\n        ReactCurrentBatchConfig.transition._updatedFibers = new Set();\n      }\n      try {\n        scope();\n      } finally {\n        ReactCurrentBatchConfig.transition = prevTransition;\n        {\n          if (prevTransition === null && currentTransition._updatedFibers) {\n            var updatedFibersCount = currentTransition._updatedFibers.size;\n            currentTransition._updatedFibers.clear();\n            if (updatedFibersCount > 10) {\n              warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');\n            }\n          }\n        }\n      }\n    }\n    var createElement = createElementWithValidation;\n    var cloneElement = cloneElementWithValidation;\n    var Children = {\n      map: mapChildren,\n      forEach: forEachChildren,\n      count: countChildren,\n      toArray: toArray,\n      only: onlyChild\n    };\n    exports.Children = Children;\n    exports.Fragment = REACT_FRAGMENT_TYPE;\n    exports.Profiler = REACT_PROFILER_TYPE;\n    exports.StrictMode = REACT_STRICT_MODE_TYPE;\n    exports.Suspense = REACT_SUSPENSE_TYPE;\n    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;\n    exports.__SECRET_SERVER_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactServerSharedInternals;\n    exports.cache = cache;\n    exports.cloneElement = cloneElement;\n    exports.createElement = createElement;\n    exports.createRef = createRef;\n    exports.createServerContext = createServerContext;\n    exports.forwardRef = forwardRef;\n    exports.isValidElement = isValidElement;\n    exports.lazy = lazy;\n    exports.memo = memo;\n    exports.startTransition = startTransition;\n    exports.use = use;\n    exports.useCallback = useCallback;\n    exports.useContext = useContext;\n    exports.useDebugValue = useDebugValue;\n    exports.useId = useId;\n    exports.useMemo = useMemo;\n    exports.version = ReactVersion;\n  })();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2Nqcy9yZWFjdC5zaGFyZWQtc3Vic2V0LmRldmVsb3BtZW50LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYixJQUFJLE1BQXVDO0VBQ3pDLENBQUMsWUFBVztJQUNkLFlBQVk7O0lBRVo7QUFDQTtBQUNBO0lBQ0EsSUFBSUEsd0JBQXdCLEdBQUc7TUFDN0JDLE9BQU8sRUFBRTtJQUNYLENBQUM7O0lBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBQ0EsSUFBSUMsaUJBQWlCLEdBQUc7TUFDdEI7QUFDRjtBQUNBO0FBQ0E7TUFDRUQsT0FBTyxFQUFFO0lBQ1gsQ0FBQztJQUVELElBQUlFLHdCQUF3QixHQUFHLENBQUMsQ0FBQztJQUNqQyxJQUFJQyxzQkFBc0IsR0FBRyxJQUFJO0lBQ2pDLFNBQVNDLGtCQUFrQkEsQ0FBQ0MsS0FBSyxFQUFFO01BQ2pDO1FBQ0VGLHNCQUFzQixHQUFHRSxLQUFLO01BQ2hDO0lBQ0Y7SUFFQTtNQUNFSCx3QkFBd0IsQ0FBQ0Usa0JBQWtCLEdBQUcsVUFBVUMsS0FBSyxFQUFFO1FBQzdEO1VBQ0VGLHNCQUFzQixHQUFHRSxLQUFLO1FBQ2hDO01BQ0YsQ0FBQyxDQUFDLENBQUM7O01BR0hILHdCQUF3QixDQUFDSSxlQUFlLEdBQUcsSUFBSTtNQUUvQ0osd0JBQXdCLENBQUNLLGdCQUFnQixHQUFHLFlBQVk7UUFDdEQsSUFBSUYsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDOztRQUVoQixJQUFJRixzQkFBc0IsRUFBRTtVQUMxQkUsS0FBSyxJQUFJRixzQkFBc0I7UUFDakMsQ0FBQyxDQUFDOztRQUdGLElBQUlLLElBQUksR0FBR04sd0JBQXdCLENBQUNJLGVBQWU7UUFFbkQsSUFBSUUsSUFBSSxFQUFFO1VBQ1JILEtBQUssSUFBSUcsSUFBSSxDQUFDLENBQUMsSUFB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RUFBRWpMO0lBQ1IsQ0FBQztJQUVEa0wsZ0JBQWdCLEdBQUdILFFBQVE7SUFDM0JHLGdCQUFnQixHQUFHMVcsbUJBQW1CO0lBQ3RDMFcsZ0JBQWdCLEdBQUd4VyxtQkFBbUI7SUFDdEN3VyxrQkFBa0IsR0FBR3pXLHNCQUFzQjtJQUMzQ3lXLGdCQUFnQixHQUFHcFcsbUJBQW1CO0lBQ3RDb1csMERBQTBELEdBQUc5YixvQkFBb0I7SUFDakY4YixpRUFBaUUsR0FBR2hYLDBCQUEwQjtJQUM5RmdYLGFBQWEsR0FBR2xZLEtBQUs7SUFDckJrWSxvQkFBb0IsR0FBR0osWUFBWTtJQUNuQ0kscUJBQXFCLEdBQUdMLGFBQWE7SUFDckNLLGlCQUFpQixHQUFHL1MsU0FBUztJQUM3QitTLDJCQUEyQixHQUFHbkIsbUJBQW1CO0lBQ2pEbUIsa0JBQWtCLEdBQUc3SixVQUFVO0lBQy9CNkosc0JBQXNCLEdBQUduTyxjQUFjO0lBQ3ZDbU8sWUFBWSxHQUFHbkssSUFBSTtJQUNuQm1LLFlBQVksR0FBR3ZKLElBQUk7SUFDbkJ1Six1QkFBdUIsR0FBR2QsZUFBZTtJQUN6Q2MsV0FBVyxHQUFHbkgsR0FBRztJQUNqQm1ILG1CQUFtQixHQUFHMUgsV0FBVztJQUNqQzBILGtCQUFrQixHQUFHL0gsVUFBVTtJQUMvQitILHFCQUFxQixHQUFHdEgsYUFBYTtJQUNyQ3NILGFBQWEsR0FBR3BILEtBQUs7SUFDckJvSCxlQUFlLEdBQUd4SCxPQUFPO0lBQ3pCd0gsZUFBZSxHQUFHL1csWUFBWTtFQUM1QixDQUFDLEVBQUUsQ0FBQztBQUNOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvY2pzL3JlYWN0LnNoYXJlZC1zdWJzZXQuZGV2ZWxvcG1lbnQuanM/OTk1YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC5zaGFyZWQtc3Vic2V0LmRldmVsb3BtZW50LmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEtlZXBzIHRyYWNrIG9mIHRoZSBjdXJyZW50IGRpc3BhdGNoZXIuXG4gKi9cbnZhciBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEgPSB7XG4gIGN1cnJlbnQ6IG51bGxcbn07XG5cbi8qKlxuICogS2VlcHMgdHJhY2sgb2YgdGhlIGN1cnJlbnQgb3duZXIuXG4gKlxuICogVGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIGNvbXBvbmVudCB3aG8gc2hvdWxkIG93biBhbnkgY29tcG9uZW50cyB0aGF0IGFyZVxuICogY3VycmVudGx5IGJlaW5nIGNvbnN0cnVjdGVkLlxuICovXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSB7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHR5cGUge1JlYWN0Q29tcG9uZW50fVxuICAgKi9cbiAgY3VycmVudDogbnVsbFxufTtcblxudmFyIFJlYWN0RGVidWdDdXJyZW50RnJhbWUkMSA9IHt9O1xudmFyIGN1cnJlbnRFeHRyYVN0YWNrRnJhbWUgPSBudWxsO1xuZnVuY3Rpb24gc2V0RXh0cmFTdGFja0ZyYW1lKHN0YWNrKSB7XG4gIHtcbiAgICBjdXJyZW50RXh0cmFTdGFja0ZyYW1lID0gc3RhY2s7XG4gIH1cbn1cblxue1xuICBSZWFjdERlYnVnQ3VycmVudEZyYW1lJDEuc2V0RXh0cmFTdGFja0ZyYW1lID0gZnVuY3Rpb24gKHN0YWNrKSB7XG4gICAge1xuICAgICAgY3VycmVudEV4dHJhU3RhY2tGcmFtZSA9IHN0YWNrO1xuICAgIH1cbiAgfTsgLy8gU3RhY2sgaW1wbGVtZW50YXRpb24gaW5qZWN0ZWQgYnkgdGhlIGN1cnJlbnQgcmVuZGVyZXIuXG5cblxuICBSZWFjdERlYnVnQ3VycmVudEZyYW1lJDEuZ2V0Q3VycmVudFN0YWNrID0gbnVsbDtcblxuICBSZWFjdERlYnVnQ3VycmVudEZyYW1lJDEuZ2V0U3RhY2tBZGRlbmR1bSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhY2sgPSAnJzsgLy8gQWRkIGFuIGV4dHJhIHRvcCBmcmFtZSB3aGlsZSBhbiBlbGVtZW50IGlzIGJlaW5nIHZhbGlkYXRlZFxuXG4gICAgaWYgKGN1cnJlbnRFeHRyYVN0YWNrRnJhbWUpIHtcbiAgICAgIHN0YWNrICs9IGN1cnJlbnRFeHRyYVN0YWNrRnJhbWU7XG4gICAgfSAvLyBEZWxlZ2F0ZSB0byB0aGUgaW5qZWN0ZWQgcmVuZGVyZXItc3BlY2lmaWMgaW1wbGVtZW50YXRpb25cblxuXG4gICAgdmFyIGltcGwgPSBSZWFjdERlYnVnQ3VycmVudEZyYW1lJDEuZ2V0Q3VycmVudFN0YWNrO1xuXG4gICAgaWYgKGltcGwpIHtcbiAgICAgIHN0YWNrICs9IGltcGwoKSB8fCAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhY2s7XG4gIH07XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBlbmFibGVTY29wZUFQSSA9IGZhbHNlOyAvLyBFeHBlcmltZW50YWwgQ3JlYXRlIEV2ZW50IEhhbmRsZSBBUEkuXG52YXIgZW5hYmxlQ2FjaGVFbGVtZW50ID0gZmFsc2U7XG52YXIgZW5hYmxlVHJhbnNpdGlvblRyYWNpbmcgPSBmYWxzZTsgLy8gTm8ga25vd24gYnVncywgYnV0IG5lZWRzIHBlcmZvcm1hbmNlIHRlc3RpbmdcblxudmFyIGVuYWJsZUxlZ2FjeUhpZGRlbiA9IGZhbHNlOyAvLyBFbmFibGVzIHVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIGZlYXR1cmUgaW4gRmliZXJcbi8vIHN0dWZmLiBJbnRlbmRlZCB0byBlbmFibGUgUmVhY3QgY29yZSBtZW1iZXJzIHRvIG1vcmUgZWFzaWx5IGRlYnVnIHNjaGVkdWxpbmdcbi8vIGlzc3VlcyBpbiBERVYgYnVpbGRzLlxuXG52YXIgZW5hYmxlRGVidWdUcmFjaW5nID0gZmFsc2U7XG5cbnZhciBSZWFjdFNoYXJlZEludGVybmFscyA9IHtcbiAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlcjogUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLFxuICBSZWFjdEN1cnJlbnRPd25lcjogUmVhY3RDdXJyZW50T3duZXJcbn07XG5cbntcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSA9IFJlYWN0RGVidWdDdXJyZW50RnJhbWUkMTtcbn1cblxuLy8gYnkgY2FsbHMgdG8gdGhlc2UgbWV0aG9kcyBieSBhIEJhYmVsIHBsdWdpbi5cbi8vXG4vLyBJbiBQUk9EIChvciBpbiBwYWNrYWdlcyB3aXRob3V0IGFjY2VzcyB0byBSZWFjdCBpbnRlcm5hbHMpLFxuLy8gdGhleSBhcmUgbGVmdCBhcyB0aGV5IGFyZSBpbnN0ZWFkLlxuXG5mdW5jdGlvbiB3YXJuKGZvcm1hdCkge1xuICB7XG4gICAge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcHJpbnRXYXJuaW5nKCd3YXJuJywgZm9ybWF0LCBhcmdzKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGVycm9yKGZvcm1hdCkge1xuICB7XG4gICAge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcHJpbnRXYXJuaW5nKCdlcnJvcicsIGZvcm1hdCwgYXJncyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHByaW50V2FybmluZyhsZXZlbCwgZm9ybWF0LCBhcmdzKSB7XG4gIC8vIFdoZW4gY2hhbmdpbmcgdGhpcyBsb2dpYywgeW91IG1pZ2h0IHdhbnQgdG8gYWxzb1xuICAvLyB1cGRhdGUgY29uc29sZVdpdGhTdGFja0Rldi53d3cuanMgYXMgd2VsbC5cbiAge1xuICAgIHZhciBSZWFjdERlYnVnQ3VycmVudEZyYW1lID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZTtcbiAgICB2YXIgc3RhY2sgPSBSZWFjdERlYnVnQ3VycmVudEZyYW1lLmdldFN0YWNrQWRkZW5kdW0oKTtcblxuICAgIGlmIChzdGFjayAhPT0gJycpIHtcbiAgICAgIGZvcm1hdCArPSAnJXMnO1xuICAgICAgYXJncyA9IGFyZ3MuY29uY2F0KFtzdGFja10pO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWludGVybmFsL3NhZmUtc3RyaW5nLWNvZXJjaW9uXG5cblxuICAgIHZhciBhcmdzV2l0aEZvcm1hdCA9IGFyZ3MubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gU3RyaW5nKGl0ZW0pO1xuICAgIH0pOyAvLyBDYXJlZnVsOiBSTiBjdXJyZW50bHkgZGVwZW5kcyBvbiB0aGlzIHByZWZpeFxuXG4gICAgYXJnc1dpdGhGb3JtYXQudW5zaGlmdCgnV2FybmluZzogJyArIGZvcm1hdCk7IC8vIFdlIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIHNwcmVhZCAob3IgLmFwcGx5KSBkaXJlY3RseSBiZWNhdXNlIGl0XG4gICAgLy8gYnJlYWtzIElFOTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xMzYxMFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1pbnRlcm5hbC9uby1wcm9kdWN0aW9uLWxvZ2dpbmdcblxuICAgIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGVbbGV2ZWxdLCBjb25zb2xlLCBhcmdzV2l0aEZvcm1hdCk7XG4gIH1cbn1cblxudmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8qKlxuICogS2VlcHMgdHJhY2sgb2YgdGhlIGN1cnJlbnQgQ2FjaGUgZGlzcGF0Y2hlci5cbiAqL1xudmFyIFJlYWN0Q3VycmVudENhY2hlID0ge1xuICBjdXJyZW50OiBudWxsXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVGZXRjaENhY2hlKCkge1xuICByZXR1cm4gbmV3IE1hcCgpO1xufVxuXG52YXIgc2ltcGxlQ2FjaGVLZXkgPSAnW1wiR0VUXCIsW10sbnVsbCxcImZvbGxvd1wiLG51bGwsbnVsbCxudWxsLG51bGxdJzsgLy8gZ2VuZXJhdGVDYWNoZUtleShuZXcgUmVxdWVzdCgnaHR0cHM6Ly9ibGFuaycpKTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVDYWNoZUtleShyZXF1ZXN0KSB7XG4gIC8vIFdlIHBpY2sgdGhlIGZpZWxkcyB0aGF0IGdvZXMgaW50byB0aGUga2V5IHVzZWQgdG8gZGVkdXBlIHJlcXVlc3RzLlxuICAvLyBXZSBkb24ndCBpbmNsdWRlIHRoZSBgY2FjaGVgIGZpZWxkLCBiZWNhdXNlIHdlIGVuZCB1cCB1c2luZyB3aGF0ZXZlclxuICAvLyBjYWNoaW5nIHJlc3VsdGVkIGZyb20gdGhlIGZpcnN0IHJlcXVlc3QuXG4gIC8vIE5vdGFibHkgd2UgY3VycmVudGx5IGRvbid0IGNvbnNpZGVyIG5vbi1zdGFuZGFyZCAob3IgZnV0dXJlKSBvcHRpb25zLlxuICAvLyBUaGlzIG1pZ2h0IG5vdCBiZSBzYWZlLiBUT0RPOiB3YXJuIGZvciBub24tc3RhbmRhcmQgZXh0ZW5zaW9ucyBkaWZmZXJpbmcuXG4gIC8vIElGIFlPVSBDSEFOR0UgVEhJUyBVUERBVEUgVEhFIHNpbXBsZUNhY2hlS2V5IEFCT1ZFLlxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoW3JlcXVlc3QubWV0aG9kLCBBcnJheS5mcm9tKHJlcXVlc3QuaGVhZGVycy5lbnRyaWVzKCkpLCByZXF1ZXN0Lm1vZGUsIHJlcXVlc3QucmVkaXJlY3QsIHJlcXVlc3QuY3JlZGVudGlhbHMsIHJlcXVlc3QucmVmZXJyZXIsIHJlcXVlc3QucmVmZXJyZXJQb2xpY3ksIHJlcXVlc3QuaW50ZWdyaXR5XSk7XG59XG5cbntcbiAgaWYgKHR5cGVvZiBmZXRjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBvcmlnaW5hbEZldGNoID0gZmV0Y2g7XG5cbiAgICB2YXIgY2FjaGVkRmV0Y2ggPSBmdW5jdGlvbiBmZXRjaChyZXNvdXJjZSwgb3B0aW9ucykge1xuICAgICAgdmFyIGRpc3BhdGNoZXIgPSBSZWFjdEN1cnJlbnRDYWNoZS5jdXJyZW50O1xuXG4gICAgICBpZiAoIWRpc3BhdGNoZXIpIHtcbiAgICAgICAgLy8gV2UncmUgb3V0c2lkZSBhIGNhY2hlZCBzY29wZS5cbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsRmV0Y2gocmVzb3VyY2UsIG9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnNpZ25hbCAmJiBvcHRpb25zLnNpZ25hbCAhPT0gZGlzcGF0Y2hlci5nZXRDYWNoZVNpZ25hbCgpKSB7XG4gICAgICAgIC8vIElmIHdlJ3JlIHBhc3NlZCBhIHNpZ25hbCB0aGF0IGlzIG5vdCBvdXJzLCB0aGVuIHdlIGFzc3VtZSB0aGF0XG4gICAgICAgIC8vIHNvbWVvbmUgZWxzZSBjb250cm9scyB0aGUgbGlmZXRpbWUgb2YgdGhpcyBvYmplY3QgYW5kIG9wdHMgb3V0IG9mXG4gICAgICAgIC8vIGNhY2hpbmcuIEl0J3MgZWZmZWN0aXZlbHkgdGhlIG9wdC1vdXQgbWVjaGFuaXNtLlxuICAgICAgICAvLyBJZGVhbGx5IHdlIHNob3VsZCBiZSBhYmxlIHRvIGNoZWNrIHRoaXMgb24gdGhlIFJlcXVlc3QgYnV0XG4gICAgICAgIC8vIGl0IGFsd2F5cyBnZXRzIGluaXRpYWxpemVkIHdpdGggaXRzIG93biBzaWduYWwgc28gd2UgZG9uJ3RcbiAgICAgICAgLy8ga25vdyBpZiBpdCdzIHN1cHBvc2VkIHRvIG92ZXJyaWRlIC0gdW5sZXNzIHdlIGFsc28gb3ZlcnJpZGUgdGhlXG4gICAgICAgIC8vIFJlcXVlc3QgY29uc3RydWN0b3IuXG4gICAgICAgIHJldHVybiBvcmlnaW5hbEZldGNoKHJlc291cmNlLCBvcHRpb25zKTtcbiAgICAgIH0gLy8gTm9ybWFsaXplIHRoZSBSZXF1ZXN0XG5cblxuICAgICAgdmFyIHVybDtcbiAgICAgIHZhciBjYWNoZUtleTtcblxuICAgICAgaWYgKHR5cGVvZiByZXNvdXJjZSA9PT0gJ3N0cmluZycgJiYgIW9wdGlvbnMpIHtcbiAgICAgICAgLy8gRmFzdCBwYXRoLlxuICAgICAgICBjYWNoZUtleSA9IHNpbXBsZUNhY2hlS2V5O1xuICAgICAgICB1cmwgPSByZXNvdXJjZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE5vcm1hbGl6ZSB0aGUgcmVxdWVzdC5cbiAgICAgICAgLy8gaWYgcmVzb3VyY2UgaXMgbm90IGEgc3RyaW5nIG9yIGEgVVJMIChpdHMgYW4gaW5zdGFuY2Ugb2YgUmVxdWVzdClcbiAgICAgICAgLy8gdGhlbiBkbyBub3QgaW5zdGFudGlhdGUgYSBuZXcgUmVxdWVzdCBidXQgaW5zdGVhZFxuICAgICAgICAvLyByZXVzZSB0aGUgcmVxdWVzdCBhcyB0byBub3QgZGlzdHVyYiB0aGUgYm9keSBpbiB0aGUgZXZlbnQgaXQncyBhIFJlYWRhYmxlU3RyZWFtLlxuICAgICAgICB2YXIgcmVxdWVzdCA9IHR5cGVvZiByZXNvdXJjZSA9PT0gJ3N0cmluZycgfHwgcmVzb3VyY2UgaW5zdGFuY2VvZiBVUkwgPyBuZXcgUmVxdWVzdChyZXNvdXJjZSwgb3B0aW9ucykgOiByZXNvdXJjZTtcblxuICAgICAgICBpZiAocmVxdWVzdC5tZXRob2QgIT09ICdHRVQnICYmIHJlcXVlc3QubWV0aG9kICE9PSAnSEVBRCcgfHwgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddOiBrZWVwYWxpdmUgaXMgcmVhbFxuICAgICAgICByZXF1ZXN0LmtlZXBhbGl2ZSkge1xuICAgICAgICAgIC8vIFdlIGN1cnJlbnRseSBkb24ndCBkZWR1cGUgcmVxdWVzdHMgdGhhdCBtaWdodCBoYXZlIHNpZGUtZWZmZWN0cy4gVGhvc2VcbiAgICAgICAgICAvLyBoYXZlIHRvIGJlIGV4cGxpY2l0bHkgY2FjaGVkLiBXZSBhc3N1bWUgdGhhdCB0aGUgcmVxdWVzdCBkb2Vzbid0IGhhdmUgYVxuICAgICAgICAgIC8vIGJvZHkgaWYgaXQncyBHRVQgb3IgSEVBRC5cbiAgICAgICAgICAvLyBrZWVwYWxpdmUgZ2V0cyB0cmVhdGVkIHRoZSBzYW1lIGFzIGlmIHlvdSBwYXNzZWQgYSBjdXN0b20gY2FjaGUgc2lnbmFsLlxuICAgICAgICAgIHJldHVybiBvcmlnaW5hbEZldGNoKHJlc291cmNlLCBvcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhY2hlS2V5ID0gZ2VuZXJhdGVDYWNoZUtleShyZXF1ZXN0KTtcbiAgICAgICAgdXJsID0gcmVxdWVzdC51cmw7XG4gICAgICB9XG5cbiAgICAgIHZhciBjYWNoZSA9IGRpc3BhdGNoZXIuZ2V0Q2FjaGVGb3JUeXBlKGNyZWF0ZUZldGNoQ2FjaGUpO1xuICAgICAgdmFyIGNhY2hlRW50cmllcyA9IGNhY2hlLmdldCh1cmwpO1xuICAgICAgdmFyIG1hdGNoO1xuXG4gICAgICBpZiAoY2FjaGVFbnRyaWVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gV2UgcGFzcyB0aGUgb3JpZ2luYWwgYXJndW1lbnRzIGhlcmUgaW4gY2FzZSBub3JtYWxpemluZyB0aGUgUmVxdWVzdFxuICAgICAgICAvLyBkb2Vzbid0IGluY2x1ZGUgYWxsIHRoZSBvcHRpb25zIGluIHRoaXMgZW52aXJvbm1lbnQuXG4gICAgICAgIG1hdGNoID0gb3JpZ2luYWxGZXRjaChyZXNvdXJjZSwgb3B0aW9ucyk7XG4gICAgICAgIGNhY2hlLnNldCh1cmwsIFtjYWNoZUtleSwgbWF0Y2hdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFdlIHVzZSBhbiBhcnJheSBhcyB0aGUgaW5uZXIgZGF0YSBzdHJ1Y3R1cmUgc2luY2UgaXQncyBsaWdodGVyIGFuZFxuICAgICAgICAvLyB3ZSB0eXBpY2FsbHkgb25seSBleHBlY3QgdG8gc2VlIG9uZSBvciB0d28gZW50cmllcyBoZXJlLlxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNhY2hlRW50cmllcy5sZW5ndGg7IGkgPCBsOyBpICs9IDIpIHtcbiAgICAgICAgICB2YXIga2V5ID0gY2FjaGVFbnRyaWVzW2ldO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGNhY2hlRW50cmllc1tpICsgMV07XG5cbiAgICAgICAgICBpZiAoa2V5ID09PSBjYWNoZUtleSkge1xuICAgICAgICAgICAgbWF0Y2ggPSB2YWx1ZTsgLy8gSSB3b3VsZCd2ZSBwcmVmZXJyZWQgYSBsYWJlbGxlZCBicmVhayBidXQgbGludCBzYXlzIG5vLlxuXG4gICAgICAgICAgICByZXR1cm4gbWF0Y2gudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmNsb25lKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBtYXRjaCA9IG9yaWdpbmFsRmV0Y2gocmVzb3VyY2UsIG9wdGlvbnMpO1xuICAgICAgICBjYWNoZUVudHJpZXMucHVzaChjYWNoZUtleSwgbWF0Y2gpO1xuICAgICAgfSAvLyBXZSBjbG9uZSB0aGUgcmVzcG9uc2Ugc28gdGhhdCBlYWNoIHRpbWUgeW91IGNhbGwgdGhpcyB5b3UgZ2V0IGEgbmV3IHJlYWRcbiAgICAgIC8vIG9mIHRoZSBib2R5IHNvIHRoYXQgaXQgY2FuIGJlIHJlYWQgbXVsdGlwbGUgdGltZXMuXG5cblxuICAgICAgcmV0dXJuIG1hdGNoLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5jbG9uZSgpO1xuICAgICAgfSk7XG4gICAgfTsgLy8gV2UgZG9uJ3QgZXhwZWN0IHRvIHNlZSBhbnkgZXh0cmEgcHJvcGVydGllcyBvbiBmZXRjaCBidXQgaWYgdGhlcmUgYXJlIGFueSxcbiAgICAvLyBjb3B5IHRoZW0gb3Zlci4gVXNlZnVsIGZvciBleHRlbmRlZCBmZXRjaCBlbnZpcm9ubWVudHMgb3IgbW9ja3MuXG5cblxuICAgIGFzc2lnbihjYWNoZWRGZXRjaCwgb3JpZ2luYWxGZXRjaCk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5hdGl2ZS1yZWFzc2lnblxuICAgICAgZmV0Y2ggPSBjYWNoZWRGZXRjaDtcbiAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIEluIGNhc2UgYXNzaWduaW5nIGl0IGdsb2JhbGx5IGZhaWxzLCB0cnkgZ2xvYmFsVGhpcyBpbnN0ZWFkIGp1c3QgaW4gY2FzZSBpdCBleGlzdHMuXG4gICAgICAgIGdsb2JhbFRoaXMuZmV0Y2ggPSBjYWNoZWRGZXRjaDtcbiAgICAgIH0gY2F0Y2ggKGVycm9yMikge1xuICAgICAgICAvLyBMb2cgZXZlbiBpbiBwcm9kdWN0aW9uIGp1c3QgdG8gbWFrZSBzdXJlIHRoaXMgaXMgc2VlbiBpZiBvbmx5IHByb2QgaXMgZnJvemVuLlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nXG4gICAgICAgIHdhcm4oJ1JlYWN0IHdhcyB1bmFibGUgdG8gcGF0Y2ggdGhlIGZldGNoKCkgZnVuY3Rpb24gaW4gdGhpcyBlbnZpcm9ubWVudC4gJyArICdTdXNwZW5zZXkgQVBJcyBtaWdodCBub3Qgd29yayBjb3JyZWN0bHkgYXMgYSByZXN1bHQuJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBSZWFjdFNlcnZlclNoYXJlZEludGVybmFscyA9IHtcbiAgUmVhY3RDdXJyZW50Q2FjaGU6IFJlYWN0Q3VycmVudENhY2hlXG59O1xuXG52YXIgUmVhY3RWZXJzaW9uID0gJzE4LjMuMC1jYW5hcnktNjBhOTI3ZDA0LTIwMjQwMTEzJztcblxuLy8gQVRURU5USU9OXG4vLyBXaGVuIGFkZGluZyBuZXcgc3ltYm9scyB0byB0aGlzIGZpbGUsXG4vLyBQbGVhc2UgY29uc2lkZXIgYWxzbyBhZGRpbmcgdG8gJ3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvYmFja2VuZC9SZWFjdFN5bWJvbHMnXG4vLyBUaGUgU3ltYm9sIHVzZWQgdG8gdGFnIHRoZSBSZWFjdEVsZW1lbnQtbGlrZSB0eXBlcy5cbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50Jyk7XG52YXIgUkVBQ1RfUE9SVEFMX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5wb3J0YWwnKTtcbnZhciBSRUFDVF9GUkFHTUVOVF9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QuZnJhZ21lbnQnKTtcbnZhciBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gU3ltYm9sLmZvcigncmVhY3Quc3RyaWN0X21vZGUnKTtcbnZhciBSRUFDVF9QUk9GSUxFUl9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QucHJvZmlsZXInKTtcbnZhciBSRUFDVF9QUk9WSURFUl9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QucHJvdmlkZXInKTtcbnZhciBSRUFDVF9DT05URVhUX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5jb250ZXh0Jyk7XG52YXIgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LmZvcndhcmRfcmVmJyk7XG52YXIgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LnN1c3BlbnNlJyk7XG52YXIgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFID0gU3ltYm9sLmZvcigncmVhY3Quc3VzcGVuc2VfbGlzdCcpO1xudmFyIFJFQUNUX01FTU9fVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0Lm1lbW8nKTtcbnZhciBSRUFDVF9MQVpZX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5sYXp5Jyk7XG52YXIgUkVBQ1RfT0ZGU0NSRUVOX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5vZmZzY3JlZW4nKTtcbnZhciBSRUFDVF9DQUNIRV9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QuY2FjaGUnKTtcbnZhciBNQVlCRV9JVEVSQVRPUl9TWU1CT0wgPSBTeW1ib2wuaXRlcmF0b3I7XG52YXIgRkFVWF9JVEVSQVRPUl9TWU1CT0wgPSAnQEBpdGVyYXRvcic7XG5mdW5jdGlvbiBnZXRJdGVyYXRvckZuKG1heWJlSXRlcmFibGUpIHtcbiAgaWYgKG1heWJlSXRlcmFibGUgPT09IG51bGwgfHwgdHlwZW9mIG1heWJlSXRlcmFibGUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgbWF5YmVJdGVyYXRvciA9IE1BWUJFX0lURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW01BWUJFX0lURVJBVE9SX1NZTUJPTF0gfHwgbWF5YmVJdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF07XG5cbiAgaWYgKHR5cGVvZiBtYXliZUl0ZXJhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIG1heWJlSXRlcmF0b3I7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxudmFyIGRpZFdhcm5TdGF0ZVVwZGF0ZUZvclVubW91bnRlZENvbXBvbmVudCA9IHt9O1xuXG5mdW5jdGlvbiB3YXJuTm9vcChwdWJsaWNJbnN0YW5jZSwgY2FsbGVyTmFtZSkge1xuICB7XG4gICAgdmFyIF9jb25zdHJ1Y3RvciA9IHB1YmxpY0luc3RhbmNlLmNvbnN0cnVjdG9yO1xuICAgIHZhciBjb21wb25lbnROYW1lID0gX2NvbnN0cnVjdG9yICYmIChfY29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgX2NvbnN0cnVjdG9yLm5hbWUpIHx8ICdSZWFjdENsYXNzJztcbiAgICB2YXIgd2FybmluZ0tleSA9IGNvbXBvbmVudE5hbWUgKyBcIi5cIiArIGNhbGxlck5hbWU7XG5cbiAgICBpZiAoZGlkV2FyblN0YXRlVXBkYXRlRm9yVW5tb3VudGVkQ29tcG9uZW50W3dhcm5pbmdLZXldKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZXJyb3IoXCJDYW4ndCBjYWxsICVzIG9uIGEgY29tcG9uZW50IHRoYXQgaXMgbm90IHlldCBtb3VudGVkLiBcIiArICdUaGlzIGlzIGEgbm8tb3AsIGJ1dCBpdCBtaWdodCBpbmRpY2F0ZSBhIGJ1ZyBpbiB5b3VyIGFwcGxpY2F0aW9uLiAnICsgJ0luc3RlYWQsIGFzc2lnbiB0byBgdGhpcy5zdGF0ZWAgZGlyZWN0bHkgb3IgZGVmaW5lIGEgYHN0YXRlID0ge307YCAnICsgJ2NsYXNzIHByb3BlcnR5IHdpdGggdGhlIGRlc2lyZWQgc3RhdGUgaW4gdGhlICVzIGNvbXBvbmVudC4nLCBjYWxsZXJOYW1lLCBjb21wb25lbnROYW1lKTtcblxuICAgIGRpZFdhcm5TdGF0ZVVwZGF0ZUZvclVubW91bnRlZENvbXBvbmVudFt3YXJuaW5nS2V5XSA9IHRydWU7XG4gIH1cbn1cbi8qKlxuICogVGhpcyBpcyB0aGUgYWJzdHJhY3QgQVBJIGZvciBhbiB1cGRhdGUgcXVldWUuXG4gKi9cblxuXG52YXIgUmVhY3ROb29wVXBkYXRlUXVldWUgPSB7XG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBvciBub3QgdGhpcyBjb21wb3NpdGUgY29tcG9uZW50IGlzIG1vdW50ZWQuXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHdlIHdhbnQgdG8gdGVzdC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBtb3VudGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQGZpbmFsXG4gICAqL1xuICBpc01vdW50ZWQ6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICAvKipcbiAgICogRm9yY2VzIGFuIHVwZGF0ZS4gVGhpcyBzaG91bGQgb25seSBiZSBpbnZva2VkIHdoZW4gaXQgaXMga25vd24gd2l0aFxuICAgKiBjZXJ0YWludHkgdGhhdCB3ZSBhcmUgKipub3QqKiBpbiBhIERPTSB0cmFuc2FjdGlvbi5cbiAgICpcbiAgICogWW91IG1heSB3YW50IHRvIGNhbGwgdGhpcyB3aGVuIHlvdSBrbm93IHRoYXQgc29tZSBkZWVwZXIgYXNwZWN0IG9mIHRoZVxuICAgKiBjb21wb25lbnQncyBzdGF0ZSBoYXMgY2hhbmdlZCBidXQgYHNldFN0YXRlYCB3YXMgbm90IGNhbGxlZC5cbiAgICpcbiAgICogVGhpcyB3aWxsIG5vdCBpbnZva2UgYHNob3VsZENvbXBvbmVudFVwZGF0ZWAsIGJ1dCBpdCB3aWxsIGludm9rZVxuICAgKiBgY29tcG9uZW50V2lsbFVwZGF0ZWAgYW5kIGBjb21wb25lbnREaWRVcGRhdGVgLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBjb21wb25lbnQgaXMgdXBkYXRlZC5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSBjYWxsZXJOYW1lIG5hbWUgb2YgdGhlIGNhbGxpbmcgZnVuY3Rpb24gaW4gdGhlIHB1YmxpYyBBUEkuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZUZvcmNlVXBkYXRlOiBmdW5jdGlvbiAocHVibGljSW5zdGFuY2UsIGNhbGxiYWNrLCBjYWxsZXJOYW1lKSB7XG4gICAgd2Fybk5vb3AocHVibGljSW5zdGFuY2UsICdmb3JjZVVwZGF0ZScpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgb3IgYHNldFN0YXRlYCB0byBtdXRhdGUgc3RhdGUuXG4gICAqIFlvdSBzaG91bGQgdHJlYXQgYHRoaXMuc3RhdGVgIGFzIGltbXV0YWJsZS5cbiAgICpcbiAgICogVGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgYHRoaXMuc3RhdGVgIHdpbGwgYmUgaW1tZWRpYXRlbHkgdXBkYXRlZCwgc29cbiAgICogYWNjZXNzaW5nIGB0aGlzLnN0YXRlYCBhZnRlciBjYWxsaW5nIHRoaXMgbWV0aG9kIG1heSByZXR1cm4gdGhlIG9sZCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb21wbGV0ZVN0YXRlIE5leHQgc3RhdGUuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgY29tcG9uZW50IGlzIHVwZGF0ZWQuXG4gICAqIEBwYXJhbSB7P3N0cmluZ30gY2FsbGVyTmFtZSBuYW1lIG9mIHRoZSBjYWxsaW5nIGZ1bmN0aW9uIGluIHRoZSBwdWJsaWMgQVBJLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVSZXBsYWNlU3RhdGU6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgY29tcGxldGVTdGF0ZSwgY2FsbGJhY2ssIGNhbGxlck5hbWUpIHtcbiAgICB3YXJuTm9vcChwdWJsaWNJbnN0YW5jZSwgJ3JlcGxhY2VTdGF0ZScpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIGEgc3Vic2V0IG9mIHRoZSBzdGF0ZS4gVGhpcyBvbmx5IGV4aXN0cyBiZWNhdXNlIF9wZW5kaW5nU3RhdGUgaXNcbiAgICogaW50ZXJuYWwuIFRoaXMgcHJvdmlkZXMgYSBtZXJnaW5nIHN0cmF0ZWd5IHRoYXQgaXMgbm90IGF2YWlsYWJsZSB0byBkZWVwXG4gICAqIHByb3BlcnRpZXMgd2hpY2ggaXMgY29uZnVzaW5nLiBUT0RPOiBFeHBvc2UgcGVuZGluZ1N0YXRlIG9yIGRvbid0IHVzZSBpdFxuICAgKiBkdXJpbmcgdGhlIG1lcmdlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcnRpYWxTdGF0ZSBOZXh0IHBhcnRpYWwgc3RhdGUgdG8gYmUgbWVyZ2VkIHdpdGggc3RhdGUuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgY29tcG9uZW50IGlzIHVwZGF0ZWQuXG4gICAqIEBwYXJhbSB7P3N0cmluZ30gTmFtZSBvZiB0aGUgY2FsbGluZyBmdW5jdGlvbiBpbiB0aGUgcHVibGljIEFQSS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgcGFydGlhbFN0YXRlLCBjYWxsYmFjaywgY2FsbGVyTmFtZSkge1xuICAgIHdhcm5Ob29wKHB1YmxpY0luc3RhbmNlLCAnc2V0U3RhdGUnKTtcbiAgfVxufTtcblxudmFyIGVtcHR5T2JqZWN0ID0ge307XG5cbntcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG4vKipcbiAqIEJhc2UgY2xhc3MgaGVscGVycyBmb3IgdGhlIHVwZGF0aW5nIHN0YXRlIG9mIGEgY29tcG9uZW50LlxuICovXG5cblxuZnVuY3Rpb24gQ29tcG9uZW50KHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDsgLy8gSWYgYSBjb21wb25lbnQgaGFzIHN0cmluZyByZWZzLCB3ZSB3aWxsIGFzc2lnbiBhIGRpZmZlcmVudCBvYmplY3QgbGF0ZXIuXG5cbiAgdGhpcy5yZWZzID0gZW1wdHlPYmplY3Q7IC8vIFdlIGluaXRpYWxpemUgdGhlIGRlZmF1bHQgdXBkYXRlciBidXQgdGhlIHJlYWwgb25lIGdldHMgaW5qZWN0ZWQgYnkgdGhlXG4gIC8vIHJlbmRlcmVyLlxuXG4gIHRoaXMudXBkYXRlciA9IHVwZGF0ZXIgfHwgUmVhY3ROb29wVXBkYXRlUXVldWU7XG59XG5cbkNvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCA9IHt9O1xuLyoqXG4gKiBTZXRzIGEgc3Vic2V0IG9mIHRoZSBzdGF0ZS4gQWx3YXlzIHVzZSB0aGlzIHRvIG11dGF0ZVxuICogc3RhdGUuIFlvdSBzaG91bGQgdHJlYXQgYHRoaXMuc3RhdGVgIGFzIGltbXV0YWJsZS5cbiAqXG4gKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBgdGhpcy5zdGF0ZWAgd2lsbCBiZSBpbW1lZGlhdGVseSB1cGRhdGVkLCBzb1xuICogYWNjZXNzaW5nIGB0aGlzLnN0YXRlYCBhZnRlciBjYWxsaW5nIHRoaXMgbWV0aG9kIG1heSByZXR1cm4gdGhlIG9sZCB2YWx1ZS5cbiAqXG4gKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBjYWxscyB0byBgc2V0U3RhdGVgIHdpbGwgcnVuIHN5bmNocm9ub3VzbHksXG4gKiBhcyB0aGV5IG1heSBldmVudHVhbGx5IGJlIGJhdGNoZWQgdG9nZXRoZXIuICBZb3UgY2FuIHByb3ZpZGUgYW4gb3B0aW9uYWxcbiAqIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBleGVjdXRlZCB3aGVuIHRoZSBjYWxsIHRvIHNldFN0YXRlIGlzIGFjdHVhbGx5XG4gKiBjb21wbGV0ZWQuXG4gKlxuICogV2hlbiBhIGZ1bmN0aW9uIGlzIHByb3ZpZGVkIHRvIHNldFN0YXRlLCBpdCB3aWxsIGJlIGNhbGxlZCBhdCBzb21lIHBvaW50IGluXG4gKiB0aGUgZnV0dXJlIChub3Qgc3luY2hyb25vdXNseSkuIEl0IHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIHVwIHRvIGRhdGVcbiAqIGNvbXBvbmVudCBhcmd1bWVudHMgKHN0YXRlLCBwcm9wcywgY29udGV4dCkuIFRoZXNlIHZhbHVlcyBjYW4gYmUgZGlmZmVyZW50XG4gKiBmcm9tIHRoaXMuKiBiZWNhdXNlIHlvdXIgZnVuY3Rpb24gbWF5IGJlIGNhbGxlZCBhZnRlciByZWNlaXZlUHJvcHMgYnV0IGJlZm9yZVxuICogc2hvdWxkQ29tcG9uZW50VXBkYXRlLCBhbmQgdGhpcyBuZXcgc3RhdGUsIHByb3BzLCBhbmQgY29udGV4dCB3aWxsIG5vdCB5ZXQgYmVcbiAqIGFzc2lnbmVkIHRvIHRoaXMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb259IHBhcnRpYWxTdGF0ZSBOZXh0IHBhcnRpYWwgc3RhdGUgb3IgZnVuY3Rpb24gdG9cbiAqICAgICAgICBwcm9kdWNlIG5leHQgcGFydGlhbCBzdGF0ZSB0byBiZSBtZXJnZWQgd2l0aCBjdXJyZW50IHN0YXRlLlxuICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBzdGF0ZSBpcyB1cGRhdGVkLlxuICogQGZpbmFsXG4gKiBAcHJvdGVjdGVkXG4gKi9cblxuQ29tcG9uZW50LnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uIChwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgcGFydGlhbFN0YXRlICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgcGFydGlhbFN0YXRlICE9PSAnZnVuY3Rpb24nICYmIHBhcnRpYWxTdGF0ZSAhPSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhICcgKyAnZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLicpO1xuICB9XG5cbiAgdGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLCBwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrLCAnc2V0U3RhdGUnKTtcbn07XG4vKipcbiAqIEZvcmNlcyBhbiB1cGRhdGUuIFRoaXMgc2hvdWxkIG9ubHkgYmUgaW52b2tlZCB3aGVuIGl0IGlzIGtub3duIHdpdGhcbiAqIGNlcnRhaW50eSB0aGF0IHdlIGFyZSAqKm5vdCoqIGluIGEgRE9NIHRyYW5zYWN0aW9uLlxuICpcbiAqIFlvdSBtYXkgd2FudCB0byBjYWxsIHRoaXMgd2hlbiB5b3Uga25vdyB0aGF0IHNvbWUgZGVlcGVyIGFzcGVjdCBvZiB0aGVcbiAqIGNvbXBvbmVudCdzIHN0YXRlIGhhcyBjaGFuZ2VkIGJ1dCBgc2V0U3RhdGVgIHdhcyBub3QgY2FsbGVkLlxuICpcbiAqIFRoaXMgd2lsbCBub3QgaW52b2tlIGBzaG91bGRDb21wb25lbnRVcGRhdGVgLCBidXQgaXQgd2lsbCBpbnZva2VcbiAqIGBjb21wb25lbnRXaWxsVXBkYXRlYCBhbmQgYGNvbXBvbmVudERpZFVwZGF0ZWAuXG4gKlxuICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciB1cGRhdGUgaXMgY29tcGxldGUuXG4gKiBAZmluYWxcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuXG5cbkNvbXBvbmVudC5wcm90b3R5cGUuZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgdGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLCBjYWxsYmFjaywgJ2ZvcmNlVXBkYXRlJyk7XG59O1xuLyoqXG4gKiBEZXByZWNhdGVkIEFQSXMuIFRoZXNlIEFQSXMgdXNlZCB0byBleGlzdCBvbiBjbGFzc2ljIFJlYWN0IGNsYXNzZXMgYnV0IHNpbmNlXG4gKiB3ZSB3b3VsZCBsaWtlIHRvIGRlcHJlY2F0ZSB0aGVtLCB3ZSdyZSBub3QgZ29pbmcgdG8gbW92ZSB0aGVtIG92ZXIgdG8gdGhpc1xuICogbW9kZXJuIGJhc2UgY2xhc3MuIEluc3RlYWQsIHdlIGRlZmluZSBhIGdldHRlciB0aGF0IHdhcm5zIGlmIGl0J3MgYWNjZXNzZWQuXG4gKi9cblxuXG57XG4gIHZhciBkZXByZWNhdGVkQVBJcyA9IHtcbiAgICBpc01vdW50ZWQ6IFsnaXNNb3VudGVkJywgJ0luc3RlYWQsIG1ha2Ugc3VyZSB0byBjbGVhbiB1cCBzdWJzY3JpcHRpb25zIGFuZCBwZW5kaW5nIHJlcXVlc3RzIGluICcgKyAnY29tcG9uZW50V2lsbFVubW91bnQgdG8gcHJldmVudCBtZW1vcnkgbGVha3MuJ10sXG4gICAgcmVwbGFjZVN0YXRlOiBbJ3JlcGxhY2VTdGF0ZScsICdSZWZhY3RvciB5b3VyIGNvZGUgdG8gdXNlIHNldFN0YXRlIGluc3RlYWQgKHNlZSAnICsgJ2h0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMzIzNikuJ11cbiAgfTtcblxuICB2YXIgZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUsIGluZm8pIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29tcG9uZW50LnByb3RvdHlwZSwgbWV0aG9kTmFtZSwge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdhcm4oJyVzKC4uLikgaXMgZGVwcmVjYXRlZCBpbiBwbGFpbiBKYXZhU2NyaXB0IFJlYWN0IGNsYXNzZXMuICVzJywgaW5mb1swXSwgaW5mb1sxXSk7XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBmb3IgKHZhciBmbk5hbWUgaW4gZGVwcmVjYXRlZEFQSXMpIHtcbiAgICBpZiAoZGVwcmVjYXRlZEFQSXMuaGFzT3duUHJvcGVydHkoZm5OYW1lKSkge1xuICAgICAgZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nKGZuTmFtZSwgZGVwcmVjYXRlZEFQSXNbZm5OYW1lXSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIENvbXBvbmVudER1bW15KCkge31cblxuQ29tcG9uZW50RHVtbXkucHJvdG90eXBlID0gQ29tcG9uZW50LnByb3RvdHlwZTtcbi8qKlxuICogQ29udmVuaWVuY2UgY29tcG9uZW50IHdpdGggZGVmYXVsdCBzaGFsbG93IGVxdWFsaXR5IGNoZWNrIGZvciBzQ1UuXG4gKi9cblxuZnVuY3Rpb24gUHVyZUNvbXBvbmVudChwcm9wcywgY29udGV4dCwgdXBkYXRlcikge1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7IC8vIElmIGEgY29tcG9uZW50IGhhcyBzdHJpbmcgcmVmcywgd2Ugd2lsbCBhc3NpZ24gYSBkaWZmZXJlbnQgb2JqZWN0IGxhdGVyLlxuXG4gIHRoaXMucmVmcyA9IGVtcHR5T2JqZWN0O1xuICB0aGlzLnVwZGF0ZXIgPSB1cGRhdGVyIHx8IFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xufVxuXG52YXIgcHVyZUNvbXBvbmVudFByb3RvdHlwZSA9IFB1cmVDb21wb25lbnQucHJvdG90eXBlID0gbmV3IENvbXBvbmVudER1bW15KCk7XG5wdXJlQ29tcG9uZW50UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUHVyZUNvbXBvbmVudDsgLy8gQXZvaWQgYW4gZXh0cmEgcHJvdG90eXBlIGp1bXAgZm9yIHRoZXNlIG1ldGhvZHMuXG5cbmFzc2lnbihwdXJlQ29tcG9uZW50UHJvdG90eXBlLCBDb21wb25lbnQucHJvdG90eXBlKTtcbnB1cmVDb21wb25lbnRQcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQgPSB0cnVlO1xuXG4vLyBhbiBpbW11dGFibGUgb2JqZWN0IHdpdGggYSBzaW5nbGUgbXV0YWJsZSB2YWx1ZVxuZnVuY3Rpb24gY3JlYXRlUmVmKCkge1xuICB2YXIgcmVmT2JqZWN0ID0ge1xuICAgIGN1cnJlbnQ6IG51bGxcbiAgfTtcblxuICB7XG4gICAgT2JqZWN0LnNlYWwocmVmT2JqZWN0KTtcbiAgfVxuXG4gIHJldHVybiByZWZPYmplY3Q7XG59XG5cbnZhciBpc0FycmF5SW1wbCA9IEFycmF5LmlzQXJyYXk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZWRlY2xhcmVcblxuZnVuY3Rpb24gaXNBcnJheShhKSB7XG4gIHJldHVybiBpc0FycmF5SW1wbChhKTtcbn1cblxuLypcbiAqIFRoZSBgJycgKyB2YWx1ZWAgcGF0dGVybiAodXNlZCBpbiBwZXJmLXNlbnNpdGl2ZSBjb2RlKSB0aHJvd3MgZm9yIFN5bWJvbFxuICogYW5kIFRlbXBvcmFsLiogdHlwZXMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC8yMjA2NC5cbiAqXG4gKiBUaGUgZnVuY3Rpb25zIGluIHRoaXMgbW9kdWxlIHdpbGwgdGhyb3cgYW4gZWFzaWVyLXRvLXVuZGVyc3RhbmQsXG4gKiBlYXNpZXItdG8tZGVidWcgZXhjZXB0aW9uIHdpdGggYSBjbGVhciBlcnJvcnMgbWVzc2FnZSBtZXNzYWdlIGV4cGxhaW5pbmcgdGhlXG4gKiBwcm9ibGVtLiAoSW5zdGVhZCBvZiBhIGNvbmZ1c2luZyBleGNlcHRpb24gdGhyb3duIGluc2lkZSB0aGUgaW1wbGVtZW50YXRpb25cbiAqIG9mIHRoZSBgdmFsdWVgIG9iamVjdCkuXG4gKi9cbi8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl0gb25seSBjYWxsZWQgaW4gREVWLCBzbyB2b2lkIHJldHVybiBpcyBub3QgcG9zc2libGUuXG5mdW5jdGlvbiB0eXBlTmFtZSh2YWx1ZSkge1xuICB7XG4gICAgLy8gdG9TdHJpbmdUYWcgaXMgbmVlZGVkIGZvciBuYW1lc3BhY2VkIHR5cGVzIGxpa2UgVGVtcG9yYWwuSW5zdGFudFxuICAgIHZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLnRvU3RyaW5nVGFnO1xuICAgIHZhciB0eXBlID0gaGFzVG9TdHJpbmdUYWcgJiYgdmFsdWVbU3ltYm9sLnRvU3RyaW5nVGFnXSB8fCB2YWx1ZS5jb25zdHJ1Y3Rvci5uYW1lIHx8ICdPYmplY3QnOyAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dXG5cbiAgICByZXR1cm4gdHlwZTtcbiAgfVxufSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dIG9ubHkgY2FsbGVkIGluIERFViwgc28gdm9pZCByZXR1cm4gaXMgbm90IHBvc3NpYmxlLlxuXG5cbmZ1bmN0aW9uIHdpbGxDb2VyY2lvblRocm93KHZhbHVlKSB7XG4gIHtcbiAgICB0cnkge1xuICAgICAgdGVzdFN0cmluZ0NvZXJjaW9uKHZhbHVlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdGVzdFN0cmluZ0NvZXJjaW9uKHZhbHVlKSB7XG4gIC8vIElmIHlvdSBlbmRlZCB1cCBoZXJlIGJ5IGZvbGxvd2luZyBhbiBleGNlcHRpb24gY2FsbCBzdGFjaywgaGVyZSdzIHdoYXQnc1xuICAvLyBoYXBwZW5lZDogeW91IHN1cHBsaWVkIGFuIG9iamVjdCBvciBzeW1ib2wgdmFsdWUgdG8gUmVhY3QgKGFzIGEgcHJvcCwga2V5LFxuICAvLyBET00gYXR0cmlidXRlLCBDU1MgcHJvcGVydHksIHN0cmluZyByZWYsIGV0Yy4pIGFuZCB3aGVuIFJlYWN0IHRyaWVkIHRvXG4gIC8vIGNvZXJjZSBpdCB0byBhIHN0cmluZyB1c2luZyBgJycgKyB2YWx1ZWAsIGFuIGV4Y2VwdGlvbiB3YXMgdGhyb3duLlxuICAvL1xuICAvLyBUaGUgbW9zdCBjb21tb24gdHlwZXMgdGhhdCB3aWxsIGNhdXNlIHRoaXMgZXhjZXB0aW9uIGFyZSBgU3ltYm9sYCBpbnN0YW5jZXNcbiAgLy8gYW5kIFRlbXBvcmFsIG9iamVjdHMgbGlrZSBgVGVtcG9yYWwuSW5zdGFudGAuIEJ1dCBhbnkgb2JqZWN0IHRoYXQgaGFzIGFcbiAgLy8gYHZhbHVlT2ZgIG9yIGBbU3ltYm9sLnRvUHJpbWl0aXZlXWAgbWV0aG9kIHRoYXQgdGhyb3dzIHdpbGwgYWxzbyBjYXVzZSB0aGlzXG4gIC8vIGV4Y2VwdGlvbi4gKExpYnJhcnkgYXV0aG9ycyBkbyB0aGlzIHRvIHByZXZlbnQgdXNlcnMgZnJvbSB1c2luZyBidWlsdC1pblxuICAvLyBudW1lcmljIG9wZXJhdG9ycyBsaWtlIGArYCBvciBjb21wYXJpc29uIG9wZXJhdG9ycyBsaWtlIGA+PWAgYmVjYXVzZSBjdXN0b21cbiAgLy8gbWV0aG9kcyBhcmUgbmVlZGVkIHRvIHBlcmZvcm0gYWNjdXJhdGUgYXJpdGhtZXRpYyBvciBjb21wYXJpc29uLilcbiAgLy9cbiAgLy8gVG8gZml4IHRoZSBwcm9ibGVtLCBjb2VyY2UgdGhpcyBvYmplY3Qgb3Igc3ltYm9sIHZhbHVlIHRvIGEgc3RyaW5nIGJlZm9yZVxuICAvLyBwYXNzaW5nIGl0IHRvIFJlYWN0LiBUaGUgbW9zdCByZWxpYWJsZSB3YXkgaXMgdXN1YWxseSBgU3RyaW5nKHZhbHVlKWAuXG4gIC8vXG4gIC8vIFRvIGZpbmQgd2hpY2ggdmFsdWUgaXMgdGhyb3dpbmcsIGNoZWNrIHRoZSBicm93c2VyIG9yIGRlYnVnZ2VyIGNvbnNvbGUuXG4gIC8vIEJlZm9yZSB0aGlzIGV4Y2VwdGlvbiB3YXMgdGhyb3duLCB0aGVyZSBzaG91bGQgYmUgYGNvbnNvbGUuZXJyb3JgIG91dHB1dFxuICAvLyB0aGF0IHNob3dzIHRoZSB0eXBlIChTeW1ib2wsIFRlbXBvcmFsLlBsYWluRGF0ZSwgZXRjLikgdGhhdCBjYXVzZWQgdGhlXG4gIC8vIHByb2JsZW0gYW5kIGhvdyB0aGF0IHR5cGUgd2FzIHVzZWQ6IGtleSwgYXRycmlidXRlLCBpbnB1dCB2YWx1ZSBwcm9wLCBldGMuXG4gIC8vIEluIG1vc3QgY2FzZXMsIHRoaXMgY29uc29sZSBvdXRwdXQgYWxzbyBzaG93cyB0aGUgY29tcG9uZW50IGFuZCBpdHNcbiAgLy8gYW5jZXN0b3IgY29tcG9uZW50cyB3aGVyZSB0aGUgZXhjZXB0aW9uIGhhcHBlbmVkLlxuICAvL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaW50ZXJuYWwvc2FmZS1zdHJpbmctY29lcmNpb25cbiAgcmV0dXJuICcnICsgdmFsdWU7XG59XG5mdW5jdGlvbiBjaGVja0tleVN0cmluZ0NvZXJjaW9uKHZhbHVlKSB7XG4gIHtcbiAgICBpZiAod2lsbENvZXJjaW9uVGhyb3codmFsdWUpKSB7XG4gICAgICBlcnJvcignVGhlIHByb3ZpZGVkIGtleSBpcyBhbiB1bnN1cHBvcnRlZCB0eXBlICVzLicgKyAnIFRoaXMgdmFsdWUgbXVzdCBiZSBjb2VyY2VkIHRvIGEgc3RyaW5nIGJlZm9yZSB1c2luZyBpdCBoZXJlLicsIHR5cGVOYW1lKHZhbHVlKSk7XG5cbiAgICAgIHJldHVybiB0ZXN0U3RyaW5nQ29lcmNpb24odmFsdWUpOyAvLyB0aHJvdyAodG8gaGVscCBjYWxsZXJzIGZpbmQgdHJvdWJsZXNob290aW5nIGNvbW1lbnRzKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRXcmFwcGVkTmFtZShvdXRlclR5cGUsIGlubmVyVHlwZSwgd3JhcHBlck5hbWUpIHtcbiAgdmFyIGRpc3BsYXlOYW1lID0gb3V0ZXJUeXBlLmRpc3BsYXlOYW1lO1xuXG4gIGlmIChkaXNwbGF5TmFtZSkge1xuICAgIHJldHVybiBkaXNwbGF5TmFtZTtcbiAgfVxuXG4gIHZhciBmdW5jdGlvbk5hbWUgPSBpbm5lclR5cGUuZGlzcGxheU5hbWUgfHwgaW5uZXJUeXBlLm5hbWUgfHwgJyc7XG4gIHJldHVybiBmdW5jdGlvbk5hbWUgIT09ICcnID8gd3JhcHBlck5hbWUgKyBcIihcIiArIGZ1bmN0aW9uTmFtZSArIFwiKVwiIDogd3JhcHBlck5hbWU7XG59IC8vIEtlZXAgaW4gc3luYyB3aXRoIHJlYWN0LXJlY29uY2lsZXIvZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlclxuXG5cbmZ1bmN0aW9uIGdldENvbnRleHROYW1lKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGUuZGlzcGxheU5hbWUgfHwgJ0NvbnRleHQnO1xufVxuXG52YXIgUkVBQ1RfQ0xJRU5UX1JFRkVSRU5DRSQyID0gU3ltYm9sLmZvcigncmVhY3QuY2xpZW50LnJlZmVyZW5jZScpOyAvLyBOb3RlIHRoYXQgdGhlIHJlY29uY2lsZXIgcGFja2FnZSBzaG91bGQgZ2VuZXJhbGx5IHByZWZlciB0byB1c2UgZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlcigpIGluc3RlYWQuXG5cbmZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlKSB7XG4gIGlmICh0eXBlID09IG51bGwpIHtcbiAgICAvLyBIb3N0IHJvb3QsIHRleHQgbm9kZSBvciBqdXN0IGludmFsaWQgdHlwZS5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9DTElFTlRfUkVGRVJFTkNFJDIpIHtcbiAgICAgIC8vIFRPRE86IENyZWF0ZSBhIGNvbnZlbnRpb24gZm9yIG5hbWluZyBjbGllbnQgcmVmZXJlbmNlcyB3aXRoIGRlYnVnIGluZm8uXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdHlwZS5kaXNwbGF5TmFtZSB8fCB0eXBlLm5hbWUgfHwgbnVsbDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdHlwZTtcbiAgfVxuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgUkVBQ1RfRlJBR01FTlRfVFlQRTpcbiAgICAgIHJldHVybiAnRnJhZ21lbnQnO1xuXG4gICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgIHJldHVybiAnUG9ydGFsJztcblxuICAgIGNhc2UgUkVBQ1RfUFJPRklMRVJfVFlQRTpcbiAgICAgIHJldHVybiAnUHJvZmlsZXInO1xuXG4gICAgY2FzZSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFOlxuICAgICAgcmV0dXJuICdTdHJpY3RNb2RlJztcblxuICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfVFlQRTpcbiAgICAgIHJldHVybiAnU3VzcGVuc2UnO1xuXG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU6XG4gICAgICByZXR1cm4gJ1N1c3BlbnNlTGlzdCc7XG5cbiAgICBjYXNlIFJFQUNUX0NBQ0hFX1RZUEU6XG4gICAgICB7XG4gICAgICAgIHJldHVybiAnQ2FjaGUnO1xuICAgICAgfVxuXG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAge1xuICAgICAgaWYgKHR5cGVvZiB0eXBlLnRhZyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgZXJyb3IoJ1JlY2VpdmVkIGFuIHVuZXhwZWN0ZWQgb2JqZWN0IGluIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSgpLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2l0Y2ggKHR5cGUuJCR0eXBlb2YpIHtcbiAgICAgIGNhc2UgUkVBQ1RfQ09OVEVYVF9UWVBFOlxuICAgICAgICB2YXIgY29udGV4dCA9IHR5cGU7XG4gICAgICAgIHJldHVybiBnZXRDb250ZXh0TmFtZShjb250ZXh0KSArICcuQ29uc3VtZXInO1xuXG4gICAgICBjYXNlIFJFQUNUX1BST1ZJREVSX1RZUEU6XG4gICAgICAgIHZhciBwcm92aWRlciA9IHR5cGU7XG4gICAgICAgIHJldHVybiBnZXRDb250ZXh0TmFtZShwcm92aWRlci5fY29udGV4dCkgKyAnLlByb3ZpZGVyJztcblxuICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICByZXR1cm4gZ2V0V3JhcHBlZE5hbWUodHlwZSwgdHlwZS5yZW5kZXIsICdGb3J3YXJkUmVmJyk7XG5cbiAgICAgIGNhc2UgUkVBQ1RfTUVNT19UWVBFOlxuICAgICAgICB2YXIgb3V0ZXJOYW1lID0gdHlwZS5kaXNwbGF5TmFtZSB8fCBudWxsO1xuXG4gICAgICAgIGlmIChvdXRlck5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gb3V0ZXJOYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlLnR5cGUpIHx8ICdNZW1vJztcblxuICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgbGF6eUNvbXBvbmVudCA9IHR5cGU7XG4gICAgICAgICAgdmFyIHBheWxvYWQgPSBsYXp5Q29tcG9uZW50Ll9wYXlsb2FkO1xuICAgICAgICAgIHZhciBpbml0ID0gbGF6eUNvbXBvbmVudC5faW5pdDtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKGluaXQocGF5bG9hZCkpO1xuICAgICAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8vICRGbG93Rml4TWVbbWV0aG9kLXVuYmluZGluZ11cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBSRVNFUlZFRF9QUk9QUyA9IHtcbiAga2V5OiB0cnVlLFxuICByZWY6IHRydWUsXG4gIF9fc2VsZjogdHJ1ZSxcbiAgX19zb3VyY2U6IHRydWVcbn07XG52YXIgc3BlY2lhbFByb3BLZXlXYXJuaW5nU2hvd24sIHNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duLCBkaWRXYXJuQWJvdXRTdHJpbmdSZWZzO1xuXG57XG4gIGRpZFdhcm5BYm91dFN0cmluZ1JlZnMgPSB7fTtcbn1cblxuZnVuY3Rpb24gaGFzVmFsaWRSZWYoY29uZmlnKSB7XG4gIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsICdyZWYnKSkge1xuICAgICAgdmFyIGdldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY29uZmlnLCAncmVmJykuZ2V0O1xuXG4gICAgICBpZiAoZ2V0dGVyICYmIGdldHRlci5pc1JlYWN0V2FybmluZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvbmZpZy5yZWYgIT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gaGFzVmFsaWRLZXkoY29uZmlnKSB7XG4gIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsICdrZXknKSkge1xuICAgICAgdmFyIGdldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY29uZmlnLCAna2V5JykuZ2V0O1xuXG4gICAgICBpZiAoZ2V0dGVyICYmIGdldHRlci5pc1JlYWN0V2FybmluZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvbmZpZy5rZXkgIT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZGVmaW5lS2V5UHJvcFdhcm5pbmdHZXR0ZXIocHJvcHMsIGRpc3BsYXlOYW1lKSB7XG4gIHZhciB3YXJuQWJvdXRBY2Nlc3NpbmdLZXkgPSBmdW5jdGlvbiAoKSB7XG4gICAge1xuICAgICAgaWYgKCFzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93bikge1xuICAgICAgICBzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93biA9IHRydWU7XG5cbiAgICAgICAgZXJyb3IoJyVzOiBga2V5YCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0ICcgKyAnaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSAnICsgJ3ZhbHVlIHdpdGhpbiB0aGUgY2hpbGQgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHBhc3MgaXQgYXMgYSBkaWZmZXJlbnQgJyArICdwcm9wLiAoaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3NwZWNpYWwtcHJvcHMpJywgZGlzcGxheU5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB3YXJuQWJvdXRBY2Nlc3NpbmdLZXkuaXNSZWFjdFdhcm5pbmcgPSB0cnVlO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvcHMsICdrZXknLCB7XG4gICAgZ2V0OiB3YXJuQWJvdXRBY2Nlc3NpbmdLZXksXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVSZWZQcm9wV2FybmluZ0dldHRlcihwcm9wcywgZGlzcGxheU5hbWUpIHtcbiAgdmFyIHdhcm5BYm91dEFjY2Vzc2luZ1JlZiA9IGZ1bmN0aW9uICgpIHtcbiAgICB7XG4gICAgICBpZiAoIXNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duKSB7XG4gICAgICAgIHNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duID0gdHJ1ZTtcblxuICAgICAgICBlcnJvcignJXM6IGByZWZgIGlzIG5vdCBhIHByb3AuIFRyeWluZyB0byBhY2Nlc3MgaXQgd2lsbCByZXN1bHQgJyArICdpbiBgdW5kZWZpbmVkYCBiZWluZyByZXR1cm5lZC4gSWYgeW91IG5lZWQgdG8gYWNjZXNzIHRoZSBzYW1lICcgKyAndmFsdWUgd2l0aGluIHRoZSBjaGlsZCBjb21wb25lbnQsIHlvdSBzaG91bGQgcGFzcyBpdCBhcyBhIGRpZmZlcmVudCAnICsgJ3Byb3AuIChodHRwczovL3JlYWN0anMub3JnL2xpbmsvc3BlY2lhbC1wcm9wcyknLCBkaXNwbGF5TmFtZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHdhcm5BYm91dEFjY2Vzc2luZ1JlZi5pc1JlYWN0V2FybmluZyA9IHRydWU7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9wcywgJ3JlZicsIHtcbiAgICBnZXQ6IHdhcm5BYm91dEFjY2Vzc2luZ1JlZixcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHdhcm5JZlN0cmluZ1JlZkNhbm5vdEJlQXV0b0NvbnZlcnRlZChjb25maWcpIHtcbiAge1xuICAgIGlmICh0eXBlb2YgY29uZmlnLnJlZiA9PT0gJ3N0cmluZycgJiYgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCAmJiBjb25maWcuX19zZWxmICYmIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQuc3RhdGVOb2RlICE9PSBjb25maWcuX19zZWxmKSB7XG4gICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWVGcm9tVHlwZShSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LnR5cGUpO1xuXG4gICAgICBpZiAoIWRpZFdhcm5BYm91dFN0cmluZ1JlZnNbY29tcG9uZW50TmFtZV0pIHtcbiAgICAgICAgZXJyb3IoJ0NvbXBvbmVudCBcIiVzXCIgY29udGFpbnMgdGhlIHN0cmluZyByZWYgXCIlc1wiLiAnICsgJ1N1cHBvcnQgZm9yIHN0cmluZyByZWZzIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSBtYWpvciByZWxlYXNlLiAnICsgJ1RoaXMgY2FzZSBjYW5ub3QgYmUgYXV0b21hdGljYWxseSBjb252ZXJ0ZWQgdG8gYW4gYXJyb3cgZnVuY3Rpb24uICcgKyAnV2UgYXNrIHlvdSB0byBtYW51YWxseSBmaXggdGhpcyBjYXNlIGJ5IHVzaW5nIHVzZVJlZigpIG9yIGNyZWF0ZVJlZigpIGluc3RlYWQuICcgKyAnTGVhcm4gbW9yZSBhYm91dCB1c2luZyByZWZzIHNhZmVseSBoZXJlOiAnICsgJ2h0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9zdHJpY3QtbW9kZS1zdHJpbmctcmVmJywgY29tcG9uZW50TmFtZSwgY29uZmlnLnJlZik7XG5cbiAgICAgICAgZGlkV2FybkFib3V0U3RyaW5nUmVmc1tjb21wb25lbnROYW1lXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4vKipcbiAqIEZhY3RvcnkgbWV0aG9kIHRvIGNyZWF0ZSBhIG5ldyBSZWFjdCBlbGVtZW50LiBUaGlzIG5vIGxvbmdlciBhZGhlcmVzIHRvXG4gKiB0aGUgY2xhc3MgcGF0dGVybiwgc28gZG8gbm90IHVzZSBuZXcgdG8gY2FsbCBpdC4gQWxzbywgaW5zdGFuY2VvZiBjaGVja1xuICogd2lsbCBub3Qgd29yay4gSW5zdGVhZCB0ZXN0ICQkdHlwZW9mIGZpZWxkIGFnYWluc3QgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpIHRvIGNoZWNrXG4gKiBpZiBzb21ldGhpbmcgaXMgYSBSZWFjdCBFbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7Kn0gdHlwZVxuICogQHBhcmFtIHsqfSBwcm9wc1xuICogQHBhcmFtIHsqfSBrZXlcbiAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gcmVmXG4gKiBAcGFyYW0geyp9IG93bmVyXG4gKiBAcGFyYW0geyp9IHNlbGYgQSAqdGVtcG9yYXJ5KiBoZWxwZXIgdG8gZGV0ZWN0IHBsYWNlcyB3aGVyZSBgdGhpc2AgaXNcbiAqIGRpZmZlcmVudCBmcm9tIHRoZSBgb3duZXJgIHdoZW4gUmVhY3QuY3JlYXRlRWxlbWVudCBpcyBjYWxsZWQsIHNvIHRoYXQgd2VcbiAqIGNhbiB3YXJuLiBXZSB3YW50IHRvIGdldCByaWQgb2Ygb3duZXIgYW5kIHJlcGxhY2Ugc3RyaW5nIGByZWZgcyB3aXRoIGFycm93XG4gKiBmdW5jdGlvbnMsIGFuZCBhcyBsb25nIGFzIGB0aGlzYCBhbmQgb3duZXIgYXJlIHRoZSBzYW1lLCB0aGVyZSB3aWxsIGJlIG5vXG4gKiBjaGFuZ2UgaW4gYmVoYXZpb3IuXG4gKiBAcGFyYW0geyp9IHNvdXJjZSBBbiBhbm5vdGF0aW9uIG9iamVjdCAoYWRkZWQgYnkgYSB0cmFuc3BpbGVyIG9yIG90aGVyd2lzZSlcbiAqIGluZGljYXRpbmcgZmlsZW5hbWUsIGxpbmUgbnVtYmVyLCBhbmQvb3Igb3RoZXIgaW5mb3JtYXRpb24uXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5cbmZ1bmN0aW9uIFJlYWN0RWxlbWVudCh0eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBvd25lciwgcHJvcHMpIHtcbiAgdmFyIGVsZW1lbnQgPSB7XG4gICAgLy8gVGhpcyB0YWcgYWxsb3dzIHVzIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgYXMgYSBSZWFjdCBFbGVtZW50XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0VMRU1FTlRfVFlQRSxcbiAgICAvLyBCdWlsdC1pbiBwcm9wZXJ0aWVzIHRoYXQgYmVsb25nIG9uIHRoZSBlbGVtZW50XG4gICAgdHlwZTogdHlwZSxcbiAgICBrZXk6IGtleSxcbiAgICByZWY6IHJlZixcbiAgICBwcm9wczogcHJvcHMsXG4gICAgLy8gUmVjb3JkIHRoZSBjb21wb25lbnQgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHRoaXMgZWxlbWVudC5cbiAgICBfb3duZXI6IG93bmVyXG4gIH07XG5cbiAge1xuICAgIC8vIFRoZSB2YWxpZGF0aW9uIGZsYWcgaXMgY3VycmVudGx5IG11dGF0aXZlLiBXZSBwdXQgaXQgb25cbiAgICAvLyBhbiBleHRlcm5hbCBiYWNraW5nIHN0b3JlIHNvIHRoYXQgd2UgY2FuIGZyZWV6ZSB0aGUgd2hvbGUgb2JqZWN0LlxuICAgIC8vIFRoaXMgY2FuIGJlIHJlcGxhY2VkIHdpdGggYSBXZWFrTWFwIG9uY2UgdGhleSBhcmUgaW1wbGVtZW50ZWQgaW5cbiAgICAvLyBjb21tb25seSB1c2VkIGRldmVsb3BtZW50IGVudmlyb25tZW50cy5cbiAgICBlbGVtZW50Ll9zdG9yZSA9IHt9OyAvLyBUbyBtYWtlIGNvbXBhcmluZyBSZWFjdEVsZW1lbnRzIGVhc2llciBmb3IgdGVzdGluZyBwdXJwb3Nlcywgd2UgbWFrZVxuICAgIC8vIHRoZSB2YWxpZGF0aW9uIGZsYWcgbm9uLWVudW1lcmFibGUgKHdoZXJlIHBvc3NpYmxlLCB3aGljaCBzaG91bGRcbiAgICAvLyBpbmNsdWRlIGV2ZXJ5IGVudmlyb25tZW50IHdlIHJ1biB0ZXN0cyBpbiksIHNvIHRoZSB0ZXN0IGZyYW1ld29ya1xuICAgIC8vIGlnbm9yZXMgaXQuXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudC5fc3RvcmUsICd2YWxpZGF0ZWQnLCB7XG4gICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBmYWxzZVxuICAgIH0pOyAvLyBzZWxmIGFuZCBzb3VyY2UgYXJlIERFViBvbmx5IHByb3BlcnRpZXMuXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudCwgJ19zZWxmJywge1xuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgdmFsdWU6IHNlbGZcbiAgICB9KTsgLy8gVHdvIGVsZW1lbnRzIGNyZWF0ZWQgaW4gdHdvIGRpZmZlcmVudCBwbGFjZXMgc2hvdWxkIGJlIGNvbnNpZGVyZWRcbiAgICAvLyBlcXVhbCBmb3IgdGVzdGluZyBwdXJwb3NlcyBhbmQgdGhlcmVmb3JlIHdlIGhpZGUgaXQgZnJvbSBlbnVtZXJhdGlvbi5cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50LCAnX3NvdXJjZScsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBzb3VyY2VcbiAgICB9KTtcblxuICAgIGlmIChPYmplY3QuZnJlZXplKSB7XG4gICAgICBPYmplY3QuZnJlZXplKGVsZW1lbnQucHJvcHMpO1xuICAgICAgT2JqZWN0LmZyZWV6ZShlbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZWxlbWVudDtcbn1cbi8qKlxuICogQ3JlYXRlIGFuZCByZXR1cm4gYSBuZXcgUmVhY3RFbGVtZW50IG9mIHRoZSBnaXZlbiB0eXBlLlxuICogU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1hcGkuaHRtbCNjcmVhdGVlbGVtZW50XG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCQxKHR5cGUsIGNvbmZpZywgY2hpbGRyZW4pIHtcbiAgdmFyIHByb3BOYW1lOyAvLyBSZXNlcnZlZCBuYW1lcyBhcmUgZXh0cmFjdGVkXG5cbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBrZXkgPSBudWxsO1xuICB2YXIgcmVmID0gbnVsbDtcbiAgdmFyIHNlbGYgPSBudWxsO1xuICB2YXIgc291cmNlID0gbnVsbDtcblxuICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICBpZiAoaGFzVmFsaWRSZWYoY29uZmlnKSkge1xuICAgICAgcmVmID0gY29uZmlnLnJlZjtcblxuICAgICAge1xuICAgICAgICB3YXJuSWZTdHJpbmdSZWZDYW5ub3RCZUF1dG9Db252ZXJ0ZWQoY29uZmlnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaGFzVmFsaWRLZXkoY29uZmlnKSkge1xuICAgICAge1xuICAgICAgICBjaGVja0tleVN0cmluZ0NvZXJjaW9uKGNvbmZpZy5rZXkpO1xuICAgICAgfVxuXG4gICAgICBrZXkgPSAnJyArIGNvbmZpZy5rZXk7XG4gICAgfVxuXG4gICAgc2VsZiA9IGNvbmZpZy5fX3NlbGYgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjb25maWcuX19zZWxmO1xuICAgIHNvdXJjZSA9IGNvbmZpZy5fX3NvdXJjZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNvbmZpZy5fX3NvdXJjZTsgLy8gUmVtYWluaW5nIHByb3BlcnRpZXMgYXJlIGFkZGVkIHRvIGEgbmV3IHByb3BzIG9iamVjdFxuXG4gICAgZm9yIChwcm9wTmFtZSBpbiBjb25maWcpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgcHJvcE5hbWUpICYmICFSRVNFUlZFRF9QUk9QUy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gQ2hpbGRyZW4gY2FuIGJlIG1vcmUgdGhhbiBvbmUgYXJndW1lbnQsIGFuZCB0aG9zZSBhcmUgdHJhbnNmZXJyZWQgb250b1xuICAvLyB0aGUgbmV3bHkgYWxsb2NhdGVkIHByb3BzIG9iamVjdC5cblxuXG4gIHZhciBjaGlsZHJlbkxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuXG4gIGlmIChjaGlsZHJlbkxlbmd0aCA9PT0gMSkge1xuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIH0gZWxzZSBpZiAoY2hpbGRyZW5MZW5ndGggPiAxKSB7XG4gICAgdmFyIGNoaWxkQXJyYXkgPSBBcnJheShjaGlsZHJlbkxlbmd0aCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoaWxkQXJyYXlbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIH1cblxuICAgIHtcbiAgICAgIGlmIChPYmplY3QuZnJlZXplKSB7XG4gICAgICAgIE9iamVjdC5mcmVlemUoY2hpbGRBcnJheSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZEFycmF5O1xuICB9IC8vIFJlc29sdmUgZGVmYXVsdCBwcm9wc1xuXG5cbiAgaWYgKHR5cGUgJiYgdHlwZS5kZWZhdWx0UHJvcHMpIHtcbiAgICB2YXIgZGVmYXVsdFByb3BzID0gdHlwZS5kZWZhdWx0UHJvcHM7XG5cbiAgICBmb3IgKHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAge1xuICAgIGlmIChrZXkgfHwgcmVmKSB7XG4gICAgICB2YXIgZGlzcGxheU5hbWUgPSB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyA/IHR5cGUuZGlzcGxheU5hbWUgfHwgdHlwZS5uYW1lIHx8ICdVbmtub3duJyA6IHR5cGU7XG5cbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgZGVmaW5lS2V5UHJvcFdhcm5pbmdHZXR0ZXIocHJvcHMsIGRpc3BsYXlOYW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlZikge1xuICAgICAgICBkZWZpbmVSZWZQcm9wV2FybmluZ0dldHRlcihwcm9wcywgZGlzcGxheU5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBSZWFjdEVsZW1lbnQodHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCwgcHJvcHMpO1xufVxuZnVuY3Rpb24gY2xvbmVBbmRSZXBsYWNlS2V5KG9sZEVsZW1lbnQsIG5ld0tleSkge1xuICB2YXIgbmV3RWxlbWVudCA9IFJlYWN0RWxlbWVudChvbGRFbGVtZW50LnR5cGUsIG5ld0tleSwgb2xkRWxlbWVudC5yZWYsIG9sZEVsZW1lbnQuX3NlbGYsIG9sZEVsZW1lbnQuX3NvdXJjZSwgb2xkRWxlbWVudC5fb3duZXIsIG9sZEVsZW1lbnQucHJvcHMpO1xuICByZXR1cm4gbmV3RWxlbWVudDtcbn1cbi8qKlxuICogQ2xvbmUgYW5kIHJldHVybiBhIG5ldyBSZWFjdEVsZW1lbnQgdXNpbmcgZWxlbWVudCBhcyB0aGUgc3RhcnRpbmcgcG9pbnQuXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI2Nsb25lZWxlbWVudFxuICovXG5cbmZ1bmN0aW9uIGNsb25lRWxlbWVudCQxKGVsZW1lbnQsIGNvbmZpZywgY2hpbGRyZW4pIHtcbiAgaWYgKGVsZW1lbnQgPT09IG51bGwgfHwgZWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiUmVhY3QuY2xvbmVFbGVtZW50KC4uLik6IFRoZSBhcmd1bWVudCBtdXN0IGJlIGEgUmVhY3QgZWxlbWVudCwgYnV0IHlvdSBwYXNzZWQgXCIgKyBlbGVtZW50ICsgXCIuXCIpO1xuICB9XG5cbiAgdmFyIHByb3BOYW1lOyAvLyBPcmlnaW5hbCBwcm9wcyBhcmUgY29waWVkXG5cbiAgdmFyIHByb3BzID0gYXNzaWduKHt9LCBlbGVtZW50LnByb3BzKTsgLy8gUmVzZXJ2ZWQgbmFtZXMgYXJlIGV4dHJhY3RlZFxuXG4gIHZhciBrZXkgPSBlbGVtZW50LmtleTtcbiAgdmFyIHJlZiA9IGVsZW1lbnQucmVmOyAvLyBTZWxmIGlzIHByZXNlcnZlZCBzaW5jZSB0aGUgb3duZXIgaXMgcHJlc2VydmVkLlxuXG4gIHZhciBzZWxmID0gZWxlbWVudC5fc2VsZjsgLy8gU291cmNlIGlzIHByZXNlcnZlZCBzaW5jZSBjbG9uZUVsZW1lbnQgaXMgdW5saWtlbHkgdG8gYmUgdGFyZ2V0ZWQgYnkgYVxuICAvLyB0cmFuc3BpbGVyLCBhbmQgdGhlIG9yaWdpbmFsIHNvdXJjZSBpcyBwcm9iYWJseSBhIGJldHRlciBpbmRpY2F0b3Igb2YgdGhlXG4gIC8vIHRydWUgb3duZXIuXG5cbiAgdmFyIHNvdXJjZSA9IGVsZW1lbnQuX3NvdXJjZTsgLy8gT3duZXIgd2lsbCBiZSBwcmVzZXJ2ZWQsIHVubGVzcyByZWYgaXMgb3ZlcnJpZGRlblxuXG4gIHZhciBvd25lciA9IGVsZW1lbnQuX293bmVyO1xuXG4gIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgIGlmIChoYXNWYWxpZFJlZihjb25maWcpKSB7XG4gICAgICAvLyBTaWxlbnRseSBzdGVhbCB0aGUgcmVmIGZyb20gdGhlIHBhcmVudC5cbiAgICAgIHJlZiA9IGNvbmZpZy5yZWY7XG4gICAgICBvd25lciA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ7XG4gICAgfVxuXG4gICAgaWYgKGhhc1ZhbGlkS2V5KGNvbmZpZykpIHtcbiAgICAgIHtcbiAgICAgICAgY2hlY2tLZXlTdHJpbmdDb2VyY2lvbihjb25maWcua2V5KTtcbiAgICAgIH1cblxuICAgICAga2V5ID0gJycgKyBjb25maWcua2V5O1xuICAgIH0gLy8gUmVtYWluaW5nIHByb3BlcnRpZXMgb3ZlcnJpZGUgZXhpc3RpbmcgcHJvcHNcblxuXG4gICAgdmFyIGRlZmF1bHRQcm9wcztcblxuICAgIGlmIChlbGVtZW50LnR5cGUgJiYgZWxlbWVudC50eXBlLmRlZmF1bHRQcm9wcykge1xuICAgICAgZGVmYXVsdFByb3BzID0gZWxlbWVudC50eXBlLmRlZmF1bHRQcm9wcztcbiAgICB9XG5cbiAgICBmb3IgKHByb3BOYW1lIGluIGNvbmZpZykge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCBwcm9wTmFtZSkgJiYgIVJFU0VSVkVEX1BST1BTLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBpZiAoY29uZmlnW3Byb3BOYW1lXSA9PT0gdW5kZWZpbmVkICYmIGRlZmF1bHRQcm9wcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gUmVzb2x2ZSBkZWZhdWx0IHByb3BzXG4gICAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IC8vIENoaWxkcmVuIGNhbiBiZSBtb3JlIHRoYW4gb25lIGFyZ3VtZW50LCBhbmQgdGhvc2UgYXJlIHRyYW5zZmVycmVkIG9udG9cbiAgLy8gdGhlIG5ld2x5IGFsbG9jYXRlZCBwcm9wcyBvYmplY3QuXG5cblxuICB2YXIgY2hpbGRyZW5MZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcblxuICBpZiAoY2hpbGRyZW5MZW5ndGggPT09IDEpIHtcbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuTGVuZ3RoID4gMSkge1xuICAgIHZhciBjaGlsZEFycmF5ID0gQXJyYXkoY2hpbGRyZW5MZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZEFycmF5W2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICB9XG5cbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkQXJyYXk7XG4gIH1cblxuICByZXR1cm4gUmVhY3RFbGVtZW50KGVsZW1lbnQudHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgb3duZXIsIHByb3BzKTtcbn1cbi8qKlxuICogVmVyaWZpZXMgdGhlIG9iamVjdCBpcyBhIFJlYWN0RWxlbWVudC5cbiAqIFNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtYXBpLmh0bWwjaXN2YWxpZGVsZW1lbnRcbiAqIEBwYXJhbSB7P29iamVjdH0gb2JqZWN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBvYmplY3RgIGlzIGEgUmVhY3RFbGVtZW50LlxuICogQGZpbmFsXG4gKi9cblxuZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QgIT09IG51bGwgJiYgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG59XG5cbnZhciBTRVBBUkFUT1IgPSAnLic7XG52YXIgU1VCU0VQQVJBVE9SID0gJzonO1xuLyoqXG4gKiBFc2NhcGUgYW5kIHdyYXAga2V5IHNvIGl0IGlzIHNhZmUgdG8gdXNlIGFzIGEgcmVhY3RpZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdG8gYmUgZXNjYXBlZC5cbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIGVzY2FwZWQga2V5LlxuICovXG5cbmZ1bmN0aW9uIGVzY2FwZShrZXkpIHtcbiAgdmFyIGVzY2FwZVJlZ2V4ID0gL1s9Ol0vZztcbiAgdmFyIGVzY2FwZXJMb29rdXAgPSB7XG4gICAgJz0nOiAnPTAnLFxuICAgICc6JzogJz0yJ1xuICB9O1xuICB2YXIgZXNjYXBlZFN0cmluZyA9IGtleS5yZXBsYWNlKGVzY2FwZVJlZ2V4LCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICByZXR1cm4gZXNjYXBlckxvb2t1cFttYXRjaF07XG4gIH0pO1xuICByZXR1cm4gJyQnICsgZXNjYXBlZFN0cmluZztcbn1cbi8qKlxuICogVE9ETzogVGVzdCB0aGF0IGEgc2luZ2xlIGNoaWxkIGFuZCBhbiBhcnJheSB3aXRoIG9uZSBpdGVtIGhhdmUgdGhlIHNhbWUga2V5XG4gKiBwYXR0ZXJuLlxuICovXG5cblxudmFyIGRpZFdhcm5BYm91dE1hcHMgPSBmYWxzZTtcbnZhciB1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCA9IC9cXC8rL2c7XG5cbmZ1bmN0aW9uIGVzY2FwZVVzZXJQcm92aWRlZEtleSh0ZXh0KSB7XG4gIHJldHVybiB0ZXh0LnJlcGxhY2UodXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgsICckJi8nKTtcbn1cbi8qKlxuICogR2VuZXJhdGUgYSBrZXkgc3RyaW5nIHRoYXQgaWRlbnRpZmllcyBhIGVsZW1lbnQgd2l0aGluIGEgc2V0LlxuICpcbiAqIEBwYXJhbSB7Kn0gZWxlbWVudCBBIGVsZW1lbnQgdGhhdCBjb3VsZCBjb250YWluIGEgbWFudWFsIGtleS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCB0aGF0IGlzIHVzZWQgaWYgYSBtYW51YWwga2V5IGlzIG5vdCBwcm92aWRlZC5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldEVsZW1lbnRLZXkoZWxlbWVudCwgaW5kZXgpIHtcbiAgLy8gRG8gc29tZSB0eXBlY2hlY2tpbmcgaGVyZSBzaW5jZSB3ZSBjYWxsIHRoaXMgYmxpbmRseS4gV2Ugd2FudCB0byBlbnN1cmVcbiAgLy8gdGhhdCB3ZSBkb24ndCBibG9jayBwb3RlbnRpYWwgZnV0dXJlIEVTIEFQSXMuXG4gIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gJ29iamVjdCcgJiYgZWxlbWVudCAhPT0gbnVsbCAmJiBlbGVtZW50LmtleSAhPSBudWxsKSB7XG4gICAgLy8gRXhwbGljaXQga2V5XG4gICAge1xuICAgICAgY2hlY2tLZXlTdHJpbmdDb2VyY2lvbihlbGVtZW50LmtleSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVzY2FwZSgnJyArIGVsZW1lbnQua2V5KTtcbiAgfSAvLyBJbXBsaWNpdCBrZXkgZGV0ZXJtaW5lZCBieSB0aGUgaW5kZXggaW4gdGhlIHNldFxuXG5cbiAgcmV0dXJuIGluZGV4LnRvU3RyaW5nKDM2KTtcbn1cblxuZnVuY3Rpb24gbWFwSW50b0FycmF5KGNoaWxkcmVuLCBhcnJheSwgZXNjYXBlZFByZWZpeCwgbmFtZVNvRmFyLCBjYWxsYmFjaykge1xuICB2YXIgdHlwZSA9IHR5cGVvZiBjaGlsZHJlbjtcblxuICBpZiAodHlwZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgLy8gQWxsIG9mIHRoZSBhYm92ZSBhcmUgcGVyY2VpdmVkIGFzIG51bGwuXG4gICAgY2hpbGRyZW4gPSBudWxsO1xuICB9XG5cbiAgdmFyIGludm9rZUNhbGxiYWNrID0gZmFsc2U7XG5cbiAgaWYgKGNoaWxkcmVuID09PSBudWxsKSB7XG4gICAgaW52b2tlQ2FsbGJhY2sgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgIGludm9rZUNhbGxiYWNrID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIHN3aXRjaCAoY2hpbGRyZW4uJCR0eXBlb2YpIHtcbiAgICAgICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgICAgaW52b2tlQ2FsbGJhY2sgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICB9XG4gIH1cblxuICBpZiAoaW52b2tlQ2FsbGJhY2spIHtcbiAgICB2YXIgX2NoaWxkID0gY2hpbGRyZW47XG4gICAgdmFyIG1hcHBlZENoaWxkID0gY2FsbGJhY2soX2NoaWxkKTsgLy8gSWYgaXQncyB0aGUgb25seSBjaGlsZCwgdHJlYXQgdGhlIG5hbWUgYXMgaWYgaXQgd2FzIHdyYXBwZWQgaW4gYW4gYXJyYXlcbiAgICAvLyBzbyB0aGF0IGl0J3MgY29uc2lzdGVudCBpZiB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIGdyb3dzOlxuXG4gICAgdmFyIGNoaWxkS2V5ID0gbmFtZVNvRmFyID09PSAnJyA/IFNFUEFSQVRPUiArIGdldEVsZW1lbnRLZXkoX2NoaWxkLCAwKSA6IG5hbWVTb0ZhcjtcblxuICAgIGlmIChpc0FycmF5KG1hcHBlZENoaWxkKSkge1xuICAgICAgdmFyIGVzY2FwZWRDaGlsZEtleSA9ICcnO1xuXG4gICAgICBpZiAoY2hpbGRLZXkgIT0gbnVsbCkge1xuICAgICAgICBlc2NhcGVkQ2hpbGRLZXkgPSBlc2NhcGVVc2VyUHJvdmlkZWRLZXkoY2hpbGRLZXkpICsgJy8nO1xuICAgICAgfVxuXG4gICAgICBtYXBJbnRvQXJyYXkobWFwcGVkQ2hpbGQsIGFycmF5LCBlc2NhcGVkQ2hpbGRLZXksICcnLCBmdW5jdGlvbiAoYykge1xuICAgICAgICByZXR1cm4gYztcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAobWFwcGVkQ2hpbGQgIT0gbnVsbCkge1xuICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KG1hcHBlZENoaWxkKSkge1xuICAgICAgICB7XG4gICAgICAgICAgLy8gVGhlIGBpZmAgc3RhdGVtZW50IGhlcmUgcHJldmVudHMgYXV0by1kaXNhYmxpbmcgb2YgdGhlIHNhZmVcbiAgICAgICAgICAvLyBjb2VyY2lvbiBFU0xpbnQgcnVsZSwgc28gd2UgbXVzdCBtYW51YWxseSBkaXNhYmxlIGl0IGJlbG93LlxuICAgICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGVdIEZsb3cgaW5jb3JyZWN0bHkgdGhpbmtzIFJlYWN0LlBvcnRhbCBkb2Vzbid0IGhhdmUgYSBrZXlcbiAgICAgICAgICBpZiAobWFwcGVkQ2hpbGQua2V5ICYmICghX2NoaWxkIHx8IF9jaGlsZC5rZXkgIT09IG1hcHBlZENoaWxkLmtleSkpIHtcbiAgICAgICAgICAgIGNoZWNrS2V5U3RyaW5nQ29lcmNpb24obWFwcGVkQ2hpbGQua2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBtYXBwZWRDaGlsZCA9IGNsb25lQW5kUmVwbGFjZUtleShtYXBwZWRDaGlsZCwgLy8gS2VlcCBib3RoIHRoZSAobWFwcGVkKSBhbmQgb2xkIGtleXMgaWYgdGhleSBkaWZmZXIsIGp1c3QgYXNcbiAgICAgICAgLy8gdHJhdmVyc2VBbGxDaGlsZHJlbiB1c2VkIHRvIGRvIGZvciBvYmplY3RzIGFzIGNoaWxkcmVuXG4gICAgICAgIGVzY2FwZWRQcmVmaXggKyAoIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGVdIEZsb3cgaW5jb3JyZWN0bHkgdGhpbmtzIFJlYWN0LlBvcnRhbCBkb2Vzbid0IGhhdmUgYSBrZXlcbiAgICAgICAgbWFwcGVkQ2hpbGQua2V5ICYmICghX2NoaWxkIHx8IF9jaGlsZC5rZXkgIT09IG1hcHBlZENoaWxkLmtleSkgPyBlc2NhcGVVc2VyUHJvdmlkZWRLZXkoIC8vICRGbG93Rml4TWVbdW5zYWZlLWFkZGl0aW9uXVxuICAgICAgICAnJyArIG1hcHBlZENoaWxkLmtleSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0LWludGVybmFsL3NhZmUtc3RyaW5nLWNvZXJjaW9uXG4gICAgICAgICkgKyAnLycgOiAnJykgKyBjaGlsZEtleSk7XG4gICAgICB9XG5cbiAgICAgIGFycmF5LnB1c2gobWFwcGVkQ2hpbGQpO1xuICAgIH1cblxuICAgIHJldHVybiAxO1xuICB9XG5cbiAgdmFyIGNoaWxkO1xuICB2YXIgbmV4dE5hbWU7XG4gIHZhciBzdWJ0cmVlQ291bnQgPSAwOyAvLyBDb3VudCBvZiBjaGlsZHJlbiBmb3VuZCBpbiB0aGUgY3VycmVudCBzdWJ0cmVlLlxuXG4gIHZhciBuZXh0TmFtZVByZWZpeCA9IG5hbWVTb0ZhciA9PT0gJycgPyBTRVBBUkFUT1IgOiBuYW1lU29GYXIgKyBTVUJTRVBBUkFUT1I7XG5cbiAgaWYgKGlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgIG5leHROYW1lID0gbmV4dE5hbWVQcmVmaXggKyBnZXRFbGVtZW50S2V5KGNoaWxkLCBpKTtcbiAgICAgIHN1YnRyZWVDb3VudCArPSBtYXBJbnRvQXJyYXkoY2hpbGQsIGFycmF5LCBlc2NhcGVkUHJlZml4LCBuZXh0TmFtZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4oY2hpbGRyZW4pO1xuXG4gICAgaWYgKHR5cGVvZiBpdGVyYXRvckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgaXRlcmFibGVDaGlsZHJlbiA9IGNoaWxkcmVuO1xuXG4gICAgICB7XG4gICAgICAgIC8vIFdhcm4gYWJvdXQgdXNpbmcgTWFwcyBhcyBjaGlsZHJlblxuICAgICAgICBpZiAoaXRlcmF0b3JGbiA9PT0gaXRlcmFibGVDaGlsZHJlbi5lbnRyaWVzKSB7XG4gICAgICAgICAgaWYgKCFkaWRXYXJuQWJvdXRNYXBzKSB7XG4gICAgICAgICAgICB3YXJuKCdVc2luZyBNYXBzIGFzIGNoaWxkcmVuIGlzIG5vdCBzdXBwb3J0ZWQuICcgKyAnVXNlIGFuIGFycmF5IG9mIGtleWVkIFJlYWN0RWxlbWVudHMgaW5zdGVhZC4nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkaWRXYXJuQWJvdXRNYXBzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvckZuLmNhbGwoaXRlcmFibGVDaGlsZHJlbik7XG4gICAgICB2YXIgc3RlcDtcbiAgICAgIHZhciBpaSA9IDA7IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXVzZV0gYGl0ZXJhdG9yRm5gIG1pZ2h0IHJldHVybiBudWxsIGFjY29yZGluZyB0byB0eXBpbmcuXG5cbiAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgY2hpbGQgPSBzdGVwLnZhbHVlO1xuICAgICAgICBuZXh0TmFtZSA9IG5leHROYW1lUHJlZml4ICsgZ2V0RWxlbWVudEtleShjaGlsZCwgaWkrKyk7XG4gICAgICAgIHN1YnRyZWVDb3VudCArPSBtYXBJbnRvQXJyYXkoY2hpbGQsIGFycmF5LCBlc2NhcGVkUHJlZml4LCBuZXh0TmFtZSwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1pbnRlcm5hbC9zYWZlLXN0cmluZy1jb2VyY2lvblxuICAgICAgdmFyIGNoaWxkcmVuU3RyaW5nID0gU3RyaW5nKGNoaWxkcmVuKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9iamVjdHMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkIChmb3VuZDogXCIgKyAoY2hpbGRyZW5TdHJpbmcgPT09ICdbb2JqZWN0IE9iamVjdF0nID8gJ29iamVjdCB3aXRoIGtleXMgeycgKyBPYmplY3Qua2V5cyhjaGlsZHJlbikuam9pbignLCAnKSArICd9JyA6IGNoaWxkcmVuU3RyaW5nKSArIFwiKS4gXCIgKyAnSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSAnICsgJ2luc3RlYWQuJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN1YnRyZWVDb3VudDtcbn1cbi8qKlxuICogTWFwcyBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAuXG4gKlxuICogU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1hcGkuaHRtbCNyZWFjdGNoaWxkcmVubWFwXG4gKlxuICogVGhlIHByb3ZpZGVkIG1hcEZ1bmN0aW9uKGNoaWxkLCBpbmRleCkgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2hcbiAqIGxlYWYgY2hpbGQuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosIGludCl9IGZ1bmMgVGhlIG1hcCBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBDb250ZXh0IGZvciBtYXBGdW5jdGlvbi5cbiAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9yZGVyZWQgbWFwIG9mIHJlc3VsdHMuXG4gKi9cblxuXG5mdW5jdGlvbiBtYXBDaGlsZHJlbihjaGlsZHJlbiwgZnVuYywgY29udGV4dCkge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIC8vICRGbG93Rml4TWUgbGltaXRhdGlvbiByZWZpbmluZyBhYnN0cmFjdCB0eXBlcyBpbiBGbG93XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgY291bnQgPSAwO1xuICBtYXBJbnRvQXJyYXkoY2hpbGRyZW4sIHJlc3VsdCwgJycsICcnLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gZnVuYy5jYWxsKGNvbnRleHQsIGNoaWxkLCBjb3VudCsrKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIENvdW50IHRoZSBudW1iZXIgb2YgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhc1xuICogYHByb3BzLmNoaWxkcmVuYC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI3JlYWN0Y2hpbGRyZW5jb3VudFxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoaWxkcmVuLlxuICovXG5cblxuZnVuY3Rpb24gY291bnRDaGlsZHJlbihjaGlsZHJlbikge1xuICB2YXIgbiA9IDA7XG4gIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jdGlvbiAoKSB7XG4gICAgbisrOyAvLyBEb24ndCByZXR1cm4gYW55dGhpbmdcbiAgfSk7XG4gIHJldHVybiBuO1xufVxuLyoqXG4gKiBJdGVyYXRlcyB0aHJvdWdoIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI3JlYWN0Y2hpbGRyZW5mb3JlYWNoXG4gKlxuICogVGhlIHByb3ZpZGVkIGZvckVhY2hGdW5jKGNoaWxkLCBpbmRleCkgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2hcbiAqIGxlYWYgY2hpbGQuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosIGludCl9IGZvckVhY2hGdW5jXG4gKiBAcGFyYW0geyp9IGZvckVhY2hDb250ZXh0IENvbnRleHQgZm9yIGZvckVhY2hDb250ZXh0LlxuICovXG5cblxuZnVuY3Rpb24gZm9yRWFjaENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoRnVuYywgZm9yRWFjaENvbnRleHQpIHtcbiAgbWFwQ2hpbGRyZW4oY2hpbGRyZW4sIC8vICRGbG93Rml4TWVbbWlzc2luZy10aGlzLWFubm90XVxuICBmdW5jdGlvbiAoKSB7XG4gICAgZm9yRWFjaEZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgLy8gRG9uJ3QgcmV0dXJuIGFueXRoaW5nLlxuICB9LCBmb3JFYWNoQ29udGV4dCk7XG59XG4vKipcbiAqIEZsYXR0ZW4gYSBjaGlsZHJlbiBvYmplY3QgKHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYCkgYW5kXG4gKiByZXR1cm4gYW4gYXJyYXkgd2l0aCBhcHByb3ByaWF0ZWx5IHJlLWtleWVkIGNoaWxkcmVuLlxuICpcbiAqIFNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtYXBpLmh0bWwjcmVhY3RjaGlsZHJlbnRvYXJyYXlcbiAqL1xuXG5cbmZ1bmN0aW9uIHRvQXJyYXkoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQ7XG4gIH0pIHx8IFtdO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmaXJzdCBjaGlsZCBpbiBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4gYW5kIHZlcmlmaWVzIHRoYXQgdGhlcmVcbiAqIGlzIG9ubHkgb25lIGNoaWxkIGluIHRoZSBjb2xsZWN0aW9uLlxuICpcbiAqIFNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtYXBpLmh0bWwjcmVhY3RjaGlsZHJlbm9ubHlcbiAqXG4gKiBUaGUgY3VycmVudCBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIGZ1bmN0aW9uIGFzc3VtZXMgdGhhdCBhIHNpbmdsZSBjaGlsZCBnZXRzXG4gKiBwYXNzZWQgd2l0aG91dCBhIHdyYXBwZXIsIGJ1dCB0aGUgcHVycG9zZSBvZiB0aGlzIGhlbHBlciBmdW5jdGlvbiBpcyB0b1xuICogYWJzdHJhY3QgYXdheSB0aGUgcGFydGljdWxhciBzdHJ1Y3R1cmUgb2YgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBjaGlsZHJlbiBDaGlsZCBjb2xsZWN0aW9uIHN0cnVjdHVyZS5cbiAqIEByZXR1cm4ge1JlYWN0RWxlbWVudH0gVGhlIGZpcnN0IGFuZCBvbmx5IGBSZWFjdEVsZW1lbnRgIGNvbnRhaW5lZCBpbiB0aGVcbiAqIHN0cnVjdHVyZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICBpZiAoIWlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuJyk7XG4gIH1cblxuICByZXR1cm4gY2hpbGRyZW47XG59XG5cbnZhciBVbmluaXRpYWxpemVkID0gLTE7XG52YXIgUGVuZGluZyA9IDA7XG52YXIgUmVzb2x2ZWQgPSAxO1xudmFyIFJlamVjdGVkID0gMjtcblxuZnVuY3Rpb24gbGF6eUluaXRpYWxpemVyKHBheWxvYWQpIHtcbiAgaWYgKHBheWxvYWQuX3N0YXR1cyA9PT0gVW5pbml0aWFsaXplZCkge1xuICAgIHZhciBjdG9yID0gcGF5bG9hZC5fcmVzdWx0O1xuICAgIHZhciB0aGVuYWJsZSA9IGN0b3IoKTsgLy8gVHJhbnNpdGlvbiB0byB0aGUgbmV4dCBzdGF0ZS5cbiAgICAvLyBUaGlzIG1pZ2h0IHRocm93IGVpdGhlciBiZWNhdXNlIGl0J3MgbWlzc2luZyBvciB0aHJvd3MuIElmIHNvLCB3ZSB0cmVhdCBpdFxuICAgIC8vIGFzIHN0aWxsIHVuaW5pdGlhbGl6ZWQgYW5kIHRyeSBhZ2FpbiBuZXh0IHRpbWUuIFdoaWNoIGlzIHRoZSBzYW1lIGFzIHdoYXRcbiAgICAvLyBoYXBwZW5zIGlmIHRoZSBjdG9yIG9yIGFueSB3cmFwcGVycyBwcm9jZXNzaW5nIHRoZSBjdG9yIHRocm93cy4gVGhpcyBtaWdodFxuICAgIC8vIGVuZCB1cCBmaXhpbmcgaXQgaWYgdGhlIHJlc29sdXRpb24gd2FzIGEgY29uY3VycmVuY3kgYnVnLlxuXG4gICAgdGhlbmFibGUudGhlbihmdW5jdGlvbiAobW9kdWxlT2JqZWN0KSB7XG4gICAgICBpZiAocGF5bG9hZC5fc3RhdHVzID09PSBQZW5kaW5nIHx8IHBheWxvYWQuX3N0YXR1cyA9PT0gVW5pbml0aWFsaXplZCkge1xuICAgICAgICAvLyBUcmFuc2l0aW9uIHRvIHRoZSBuZXh0IHN0YXRlLlxuICAgICAgICB2YXIgcmVzb2x2ZWQgPSBwYXlsb2FkO1xuICAgICAgICByZXNvbHZlZC5fc3RhdHVzID0gUmVzb2x2ZWQ7XG4gICAgICAgIHJlc29sdmVkLl9yZXN1bHQgPSBtb2R1bGVPYmplY3Q7XG4gICAgICB9XG4gICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBpZiAocGF5bG9hZC5fc3RhdHVzID09PSBQZW5kaW5nIHx8IHBheWxvYWQuX3N0YXR1cyA9PT0gVW5pbml0aWFsaXplZCkge1xuICAgICAgICAvLyBUcmFuc2l0aW9uIHRvIHRoZSBuZXh0IHN0YXRlLlxuICAgICAgICB2YXIgcmVqZWN0ZWQgPSBwYXlsb2FkO1xuICAgICAgICByZWplY3RlZC5fc3RhdHVzID0gUmVqZWN0ZWQ7XG4gICAgICAgIHJlamVjdGVkLl9yZXN1bHQgPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChwYXlsb2FkLl9zdGF0dXMgPT09IFVuaW5pdGlhbGl6ZWQpIHtcbiAgICAgIC8vIEluIGNhc2UsIHdlJ3JlIHN0aWxsIHVuaW5pdGlhbGl6ZWQsIHRoZW4gd2UncmUgd2FpdGluZyBmb3IgdGhlIHRoZW5hYmxlXG4gICAgICAvLyB0byByZXNvbHZlLiBTZXQgaXQgYXMgcGVuZGluZyBpbiB0aGUgbWVhbnRpbWUuXG4gICAgICB2YXIgcGVuZGluZyA9IHBheWxvYWQ7XG4gICAgICBwZW5kaW5nLl9zdGF0dXMgPSBQZW5kaW5nO1xuICAgICAgcGVuZGluZy5fcmVzdWx0ID0gdGhlbmFibGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKHBheWxvYWQuX3N0YXR1cyA9PT0gUmVzb2x2ZWQpIHtcbiAgICB2YXIgbW9kdWxlT2JqZWN0ID0gcGF5bG9hZC5fcmVzdWx0O1xuXG4gICAge1xuICAgICAgaWYgKG1vZHVsZU9iamVjdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVycm9yKCdsYXp5OiBFeHBlY3RlZCB0aGUgcmVzdWx0IG9mIGEgZHluYW1pYyBpbXAnICsgJ29ydCgpIGNhbGwuICcgKyAnSW5zdGVhZCByZWNlaXZlZDogJXNcXG5cXG5Zb3VyIGNvZGUgc2hvdWxkIGxvb2sgbGlrZTogXFxuICAnICsgLy8gQnJlYWsgdXAgaW1wb3J0cyB0byBhdm9pZCBhY2NpZGVudGFsbHkgcGFyc2luZyB0aGVtIGFzIGRlcGVuZGVuY2llcy5cbiAgICAgICAgJ2NvbnN0IE15Q29tcG9uZW50ID0gbGF6eSgoKSA9PiBpbXAnICsgXCJvcnQoJy4vTXlDb21wb25lbnQnKSlcXG5cXG5cIiArICdEaWQgeW91IGFjY2lkZW50YWxseSBwdXQgY3VybHkgYnJhY2VzIGFyb3VuZCB0aGUgaW1wb3J0PycsIG1vZHVsZU9iamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAge1xuICAgICAgaWYgKCEoJ2RlZmF1bHQnIGluIG1vZHVsZU9iamVjdCkpIHtcbiAgICAgICAgZXJyb3IoJ2xhenk6IEV4cGVjdGVkIHRoZSByZXN1bHQgb2YgYSBkeW5hbWljIGltcCcgKyAnb3J0KCkgY2FsbC4gJyArICdJbnN0ZWFkIHJlY2VpdmVkOiAlc1xcblxcbllvdXIgY29kZSBzaG91bGQgbG9vayBsaWtlOiBcXG4gICcgKyAvLyBCcmVhayB1cCBpbXBvcnRzIHRvIGF2b2lkIGFjY2lkZW50YWxseSBwYXJzaW5nIHRoZW0gYXMgZGVwZW5kZW5jaWVzLlxuICAgICAgICAnY29uc3QgTXlDb21wb25lbnQgPSBsYXp5KCgpID0+IGltcCcgKyBcIm9ydCgnLi9NeUNvbXBvbmVudCcpKVwiLCBtb2R1bGVPYmplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtb2R1bGVPYmplY3QuZGVmYXVsdDtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBwYXlsb2FkLl9yZXN1bHQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGF6eShjdG9yKSB7XG4gIHZhciBwYXlsb2FkID0ge1xuICAgIC8vIFdlIHVzZSB0aGVzZSBmaWVsZHMgdG8gc3RvcmUgdGhlIHJlc3VsdC5cbiAgICBfc3RhdHVzOiBVbmluaXRpYWxpemVkLFxuICAgIF9yZXN1bHQ6IGN0b3JcbiAgfTtcbiAgdmFyIGxhenlUeXBlID0ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9MQVpZX1RZUEUsXG4gICAgX3BheWxvYWQ6IHBheWxvYWQsXG4gICAgX2luaXQ6IGxhenlJbml0aWFsaXplclxuICB9O1xuXG4gIHtcbiAgICAvLyBJbiBwcm9kdWN0aW9uLCB0aGlzIHdvdWxkIGp1c3Qgc2V0IGl0IG9uIHRoZSBvYmplY3QuXG4gICAgdmFyIGRlZmF1bHRQcm9wcztcbiAgICB2YXIgcHJvcFR5cGVzOyAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGxhenlUeXBlLCB7XG4gICAgICBkZWZhdWx0UHJvcHM6IHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZGVmYXVsdFByb3BzO1xuICAgICAgICB9LFxuICAgICAgICAvLyAkRmxvd0ZpeE1lW21pc3NpbmctbG9jYWwtYW5ub3RdXG4gICAgICAgIHNldDogZnVuY3Rpb24gKG5ld0RlZmF1bHRQcm9wcykge1xuICAgICAgICAgIGVycm9yKCdSZWFjdC5sYXp5KC4uLik6IEl0IGlzIG5vdCBzdXBwb3J0ZWQgdG8gYXNzaWduIGBkZWZhdWx0UHJvcHNgIHRvICcgKyAnYSBsYXp5IGNvbXBvbmVudCBpbXBvcnQuIEVpdGhlciBzcGVjaWZ5IHRoZW0gd2hlcmUgdGhlIGNvbXBvbmVudCAnICsgJ2lzIGRlZmluZWQsIG9yIGNyZWF0ZSBhIHdyYXBwaW5nIGNvbXBvbmVudCBhcm91bmQgaXQuJyk7XG5cbiAgICAgICAgICBkZWZhdWx0UHJvcHMgPSBuZXdEZWZhdWx0UHJvcHM7IC8vIE1hdGNoIHByb2R1Y3Rpb24gYmVoYXZpb3IgbW9yZSBjbG9zZWx5OlxuICAgICAgICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuXG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGxhenlUeXBlLCAnZGVmYXVsdFByb3BzJywge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcHJvcFR5cGVzOiB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHByb3BUeXBlcztcbiAgICAgICAgfSxcbiAgICAgICAgLy8gJEZsb3dGaXhNZVttaXNzaW5nLWxvY2FsLWFubm90XVxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChuZXdQcm9wVHlwZXMpIHtcbiAgICAgICAgICBlcnJvcignUmVhY3QubGF6eSguLi4pOiBJdCBpcyBub3Qgc3VwcG9ydGVkIHRvIGFzc2lnbiBgcHJvcFR5cGVzYCB0byAnICsgJ2EgbGF6eSBjb21wb25lbnQgaW1wb3J0LiBFaXRoZXIgc3BlY2lmeSB0aGVtIHdoZXJlIHRoZSBjb21wb25lbnQgJyArICdpcyBkZWZpbmVkLCBvciBjcmVhdGUgYSB3cmFwcGluZyBjb21wb25lbnQgYXJvdW5kIGl0LicpO1xuXG4gICAgICAgICAgcHJvcFR5cGVzID0gbmV3UHJvcFR5cGVzOyAvLyBNYXRjaCBwcm9kdWN0aW9uIGJlaGF2aW9yIG1vcmUgY2xvc2VseTpcbiAgICAgICAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShsYXp5VHlwZSwgJ3Byb3BUeXBlcycsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGxhenlUeXBlO1xufVxuXG5mdW5jdGlvbiBmb3J3YXJkUmVmKHJlbmRlcikge1xuICB7XG4gICAgaWYgKHJlbmRlciAhPSBudWxsICYmIHJlbmRlci4kJHR5cGVvZiA9PT0gUkVBQ1RfTUVNT19UWVBFKSB7XG4gICAgICBlcnJvcignZm9yd2FyZFJlZiByZXF1aXJlcyBhIHJlbmRlciBmdW5jdGlvbiBidXQgcmVjZWl2ZWQgYSBgbWVtb2AgJyArICdjb21wb25lbnQuIEluc3RlYWQgb2YgZm9yd2FyZFJlZihtZW1vKC4uLikpLCB1c2UgJyArICdtZW1vKGZvcndhcmRSZWYoLi4uKSkuJyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcmVuZGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBlcnJvcignZm9yd2FyZFJlZiByZXF1aXJlcyBhIHJlbmRlciBmdW5jdGlvbiBidXQgd2FzIGdpdmVuICVzLicsIHJlbmRlciA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiByZW5kZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocmVuZGVyLmxlbmd0aCAhPT0gMCAmJiByZW5kZXIubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgIGVycm9yKCdmb3J3YXJkUmVmIHJlbmRlciBmdW5jdGlvbnMgYWNjZXB0IGV4YWN0bHkgdHdvIHBhcmFtZXRlcnM6IHByb3BzIGFuZCByZWYuICVzJywgcmVuZGVyLmxlbmd0aCA9PT0gMSA/ICdEaWQgeW91IGZvcmdldCB0byB1c2UgdGhlIHJlZiBwYXJhbWV0ZXI/JyA6ICdBbnkgYWRkaXRpb25hbCBwYXJhbWV0ZXIgd2lsbCBiZSB1bmRlZmluZWQuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJlbmRlciAhPSBudWxsKSB7XG4gICAgICBpZiAocmVuZGVyLmRlZmF1bHRQcm9wcyAhPSBudWxsIHx8IHJlbmRlci5wcm9wVHlwZXMgIT0gbnVsbCkge1xuICAgICAgICBlcnJvcignZm9yd2FyZFJlZiByZW5kZXIgZnVuY3Rpb25zIGRvIG5vdCBzdXBwb3J0IHByb3BUeXBlcyBvciBkZWZhdWx0UHJvcHMuICcgKyAnRGlkIHlvdSBhY2NpZGVudGFsbHkgcGFzcyBhIFJlYWN0IGNvbXBvbmVudD8nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgZWxlbWVudFR5cGUgPSB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUsXG4gICAgcmVuZGVyOiByZW5kZXJcbiAgfTtcblxuICB7XG4gICAgdmFyIG93bk5hbWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsZW1lbnRUeXBlLCAnZGlzcGxheU5hbWUnLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gb3duTmFtZTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIG93bk5hbWUgPSBuYW1lOyAvLyBUaGUgaW5uZXIgY29tcG9uZW50IHNob3VsZG4ndCBpbmhlcml0IHRoaXMgZGlzcGxheSBuYW1lIGluIG1vc3QgY2FzZXMsXG4gICAgICAgIC8vIGJlY2F1c2UgdGhlIGNvbXBvbmVudCBtYXkgYmUgdXNlZCBlbHNld2hlcmUuXG4gICAgICAgIC8vIEJ1dCBpdCdzIG5pY2UgZm9yIGFub255bW91cyBmdW5jdGlvbnMgdG8gaW5oZXJpdCB0aGUgbmFtZSxcbiAgICAgICAgLy8gc28gdGhhdCBvdXIgY29tcG9uZW50LXN0YWNrIGdlbmVyYXRpb24gbG9naWMgd2lsbCBkaXNwbGF5IHRoZWlyIGZyYW1lcy5cbiAgICAgICAgLy8gQW4gYW5vbnltb3VzIGZ1bmN0aW9uIGdlbmVyYWxseSBzdWdnZXN0cyBhIHBhdHRlcm4gbGlrZTpcbiAgICAgICAgLy8gICBSZWFjdC5mb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiB7Li4ufSk7XG4gICAgICAgIC8vIFRoaXMga2luZCBvZiBpbm5lciBmdW5jdGlvbiBpcyBub3QgdXNlZCBlbHNld2hlcmUgc28gdGhlIHNpZGUgZWZmZWN0IGlzIG9rYXkuXG5cbiAgICAgICAgaWYgKCFyZW5kZXIubmFtZSAmJiAhcmVuZGVyLmRpc3BsYXlOYW1lKSB7XG4gICAgICAgICAgcmVuZGVyLmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnRUeXBlO1xufVxuXG52YXIgUkVBQ1RfQ0xJRU5UX1JFRkVSRU5DRSQxID0gU3ltYm9sLmZvcigncmVhY3QuY2xpZW50LnJlZmVyZW5jZScpO1xuZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGUpIHtcbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIE5vdGU6IHR5cGVvZiBtaWdodCBiZSBvdGhlciB0aGFuICdzeW1ib2wnIG9yICdudW1iZXInIChlLmcuIGlmIGl0J3MgYSBwb2x5ZmlsbCkuXG5cblxuICBpZiAodHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9QUk9GSUxFUl9UWVBFIHx8IGVuYWJsZURlYnVnVHJhY2luZyAgfHwgdHlwZSA9PT0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVVNQRU5TRV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSB8fCBlbmFibGVMZWdhY3lIaWRkZW4gIHx8IHR5cGUgPT09IFJFQUNUX09GRlNDUkVFTl9UWVBFIHx8IGVuYWJsZVNjb3BlQVBJICB8fCBlbmFibGVDYWNoZUVsZW1lbnQgIHx8IGVuYWJsZVRyYW5zaXRpb25UcmFjaW5nICkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiB0eXBlICE9PSBudWxsKSB7XG4gICAgaWYgKHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0xBWllfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9NRU1PX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfUFJPVklERVJfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9DT05URVhUX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSB8fCAvLyBUaGlzIG5lZWRzIHRvIGluY2x1ZGUgYWxsIHBvc3NpYmxlIG1vZHVsZSByZWZlcmVuY2Ugb2JqZWN0XG4gICAgLy8gdHlwZXMgc3VwcG9ydGVkIGJ5IGFueSBGbGlnaHQgY29uZmlndXJhdGlvbiBhbnl3aGVyZSBzaW5jZVxuICAgIC8vIHdlIGRvbid0IGtub3cgd2hpY2ggRmxpZ2h0IGJ1aWxkIHRoaXMgd2lsbCBlbmQgdXAgYmVpbmcgdXNlZFxuICAgIC8vIHdpdGguXG4gICAgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfQ0xJRU5UX1JFRkVSRU5DRSQxIHx8IHR5cGUuZ2V0TW9kdWxlSWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBtZW1vKHR5cGUsIGNvbXBhcmUpIHtcbiAge1xuICAgIGlmICghaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGUpKSB7XG4gICAgICBlcnJvcignbWVtbzogVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBjb21wb25lbnQuIEluc3RlYWQgJyArICdyZWNlaXZlZDogJXMnLCB0eXBlID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIHR5cGUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBlbGVtZW50VHlwZSA9IHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfTUVNT19UWVBFLFxuICAgIHR5cGU6IHR5cGUsXG4gICAgY29tcGFyZTogY29tcGFyZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNvbXBhcmVcbiAgfTtcblxuICB7XG4gICAgdmFyIG93bk5hbWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsZW1lbnRUeXBlLCAnZGlzcGxheU5hbWUnLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gb3duTmFtZTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIG93bk5hbWUgPSBuYW1lOyAvLyBUaGUgaW5uZXIgY29tcG9uZW50IHNob3VsZG4ndCBpbmhlcml0IHRoaXMgZGlzcGxheSBuYW1lIGluIG1vc3QgY2FzZXMsXG4gICAgICAgIC8vIGJlY2F1c2UgdGhlIGNvbXBvbmVudCBtYXkgYmUgdXNlZCBlbHNld2hlcmUuXG4gICAgICAgIC8vIEJ1dCBpdCdzIG5pY2UgZm9yIGFub255bW91cyBmdW5jdGlvbnMgdG8gaW5oZXJpdCB0aGUgbmFtZSxcbiAgICAgICAgLy8gc28gdGhhdCBvdXIgY29tcG9uZW50LXN0YWNrIGdlbmVyYXRpb24gbG9naWMgd2lsbCBkaXNwbGF5IHRoZWlyIGZyYW1lcy5cbiAgICAgICAgLy8gQW4gYW5vbnltb3VzIGZ1bmN0aW9uIGdlbmVyYWxseSBzdWdnZXN0cyBhIHBhdHRlcm4gbGlrZTpcbiAgICAgICAgLy8gICBSZWFjdC5tZW1vKChwcm9wcykgPT4gey4uLn0pO1xuICAgICAgICAvLyBUaGlzIGtpbmQgb2YgaW5uZXIgZnVuY3Rpb24gaXMgbm90IHVzZWQgZWxzZXdoZXJlIHNvIHRoZSBzaWRlIGVmZmVjdCBpcyBva2F5LlxuXG4gICAgICAgIGlmICghdHlwZS5uYW1lICYmICF0eXBlLmRpc3BsYXlOYW1lKSB7XG4gICAgICAgICAgdHlwZS5kaXNwbGF5TmFtZSA9IG5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50VHlwZTtcbn1cblxudmFyIFVOVEVSTUlOQVRFRCA9IDA7XG52YXIgVEVSTUlOQVRFRCA9IDE7XG52YXIgRVJST1JFRCA9IDI7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlUm9vdCgpIHtcbiAgcmV0dXJuIG5ldyBXZWFrTWFwKCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlTm9kZSgpIHtcbiAgcmV0dXJuIHtcbiAgICBzOiBVTlRFUk1JTkFURUQsXG4gICAgLy8gc3RhdHVzLCByZXByZXNlbnRzIHdoZXRoZXIgdGhlIGNhY2hlZCBjb21wdXRhdGlvbiByZXR1cm5lZCBhIHZhbHVlIG9yIHRocmV3IGFuIGVycm9yXG4gICAgdjogdW5kZWZpbmVkLFxuICAgIC8vIHZhbHVlLCBlaXRoZXIgdGhlIGNhY2hlZCByZXN1bHQgb3IgYW4gZXJyb3IsIGRlcGVuZGluZyBvbiBzXG4gICAgbzogbnVsbCxcbiAgICAvLyBvYmplY3QgY2FjaGUsIGEgV2Vha01hcCB3aGVyZSBub24tcHJpbWl0aXZlIGFyZ3VtZW50cyBhcmUgc3RvcmVkXG4gICAgcDogbnVsbCAvLyBwcmltaXRpdmUgY2FjaGUsIGEgcmVndWxhciBNYXAgd2hlcmUgcHJpbWl0aXZlIGFyZ3VtZW50cyBhcmUgc3RvcmVkLlxuXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNhY2hlKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRpc3BhdGNoZXIgPSBSZWFjdEN1cnJlbnRDYWNoZS5jdXJyZW50O1xuXG4gICAgaWYgKCFkaXNwYXRjaGVyKSB7XG4gICAgICAvLyBJZiB0aGVyZSBpcyBubyBkaXNwYXRjaGVyLCB0aGVuIHdlIHRyZWF0IHRoaXMgYXMgbm90IGJlaW5nIGNhY2hlZC5cbiAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdOiBXZSBkb24ndCB3YW50IHRvIHVzZSByZXN0IGFyZ3VtZW50cyBzaW5jZSB3ZSB0cmFuc3BpbGUgdGhlIGNvZGUuXG4gICAgICByZXR1cm4gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICB2YXIgZm5NYXAgPSBkaXNwYXRjaGVyLmdldENhY2hlRm9yVHlwZShjcmVhdGVDYWNoZVJvb3QpO1xuICAgIHZhciBmbk5vZGUgPSBmbk1hcC5nZXQoZm4pO1xuICAgIHZhciBjYWNoZU5vZGU7XG5cbiAgICBpZiAoZm5Ob2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNhY2hlTm9kZSA9IGNyZWF0ZUNhY2hlTm9kZSgpO1xuICAgICAgZm5NYXAuc2V0KGZuLCBjYWNoZU5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWNoZU5vZGUgPSBmbk5vZGU7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGwpIHtcbiAgICAgICAgLy8gT2JqZWN0cyBnbyBpbnRvIGEgV2Vha01hcFxuICAgICAgICB2YXIgb2JqZWN0Q2FjaGUgPSBjYWNoZU5vZGUubztcblxuICAgICAgICBpZiAob2JqZWN0Q2FjaGUgPT09IG51bGwpIHtcbiAgICAgICAgICBjYWNoZU5vZGUubyA9IG9iamVjdENhY2hlID0gbmV3IFdlYWtNYXAoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvYmplY3ROb2RlID0gb2JqZWN0Q2FjaGUuZ2V0KGFyZyk7XG5cbiAgICAgICAgaWYgKG9iamVjdE5vZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNhY2hlTm9kZSA9IGNyZWF0ZUNhY2hlTm9kZSgpO1xuICAgICAgICAgIG9iamVjdENhY2hlLnNldChhcmcsIGNhY2hlTm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FjaGVOb2RlID0gb2JqZWN0Tm9kZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUHJpbWl0aXZlcyBnbyBpbnRvIGEgcmVndWxhciBNYXBcbiAgICAgICAgdmFyIHByaW1pdGl2ZUNhY2hlID0gY2FjaGVOb2RlLnA7XG5cbiAgICAgICAgaWYgKHByaW1pdGl2ZUNhY2hlID09PSBudWxsKSB7XG4gICAgICAgICAgY2FjaGVOb2RlLnAgPSBwcmltaXRpdmVDYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwcmltaXRpdmVOb2RlID0gcHJpbWl0aXZlQ2FjaGUuZ2V0KGFyZyk7XG5cbiAgICAgICAgaWYgKHByaW1pdGl2ZU5vZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNhY2hlTm9kZSA9IGNyZWF0ZUNhY2hlTm9kZSgpO1xuICAgICAgICAgIHByaW1pdGl2ZUNhY2hlLnNldChhcmcsIGNhY2hlTm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FjaGVOb2RlID0gcHJpbWl0aXZlTm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjYWNoZU5vZGUucyA9PT0gVEVSTUlOQVRFRCkge1xuICAgICAgcmV0dXJuIGNhY2hlTm9kZS52O1xuICAgIH1cblxuICAgIGlmIChjYWNoZU5vZGUucyA9PT0gRVJST1JFRCkge1xuICAgICAgdGhyb3cgY2FjaGVOb2RlLnY7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdOiBXZSBkb24ndCB3YW50IHRvIHVzZSByZXN0IGFyZ3VtZW50cyBzaW5jZSB3ZSB0cmFuc3BpbGUgdGhlIGNvZGUuXG4gICAgICB2YXIgcmVzdWx0ID0gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgIHZhciB0ZXJtaW5hdGVkTm9kZSA9IGNhY2hlTm9kZTtcbiAgICAgIHRlcm1pbmF0ZWROb2RlLnMgPSBURVJNSU5BVEVEO1xuICAgICAgdGVybWluYXRlZE5vZGUudiA9IHJlc3VsdDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIFdlIHN0b3JlIHRoZSBmaXJzdCBlcnJvciB0aGF0J3MgdGhyb3duIGFuZCByZXRocm93IGl0LlxuICAgICAgdmFyIGVycm9yZWROb2RlID0gY2FjaGVOb2RlO1xuICAgICAgZXJyb3JlZE5vZGUucyA9IEVSUk9SRUQ7XG4gICAgICBlcnJvcmVkTm9kZS52ID0gZXJyb3I7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVEaXNwYXRjaGVyKCkge1xuICB2YXIgZGlzcGF0Y2hlciA9IFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50O1xuXG4gIHtcbiAgICBpZiAoZGlzcGF0Y2hlciA9PT0gbnVsbCkge1xuICAgICAgZXJyb3IoJ0ludmFsaWQgaG9vayBjYWxsLiBIb29rcyBjYW4gb25seSBiZSBjYWxsZWQgaW5zaWRlIG9mIHRoZSBib2R5IG9mIGEgZnVuY3Rpb24gY29tcG9uZW50LiBUaGlzIGNvdWxkIGhhcHBlbiBmb3InICsgJyBvbmUgb2YgdGhlIGZvbGxvd2luZyByZWFzb25zOlxcbicgKyAnMS4gWW91IG1pZ2h0IGhhdmUgbWlzbWF0Y2hpbmcgdmVyc2lvbnMgb2YgUmVhY3QgYW5kIHRoZSByZW5kZXJlciAoc3VjaCBhcyBSZWFjdCBET00pXFxuJyArICcyLiBZb3UgbWlnaHQgYmUgYnJlYWtpbmcgdGhlIFJ1bGVzIG9mIEhvb2tzXFxuJyArICczLiBZb3UgbWlnaHQgaGF2ZSBtb3JlIHRoYW4gb25lIGNvcHkgb2YgUmVhY3QgaW4gdGhlIHNhbWUgYXBwXFxuJyArICdTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL2ludmFsaWQtaG9vay1jYWxsIGZvciB0aXBzIGFib3V0IGhvdyB0byBkZWJ1ZyBhbmQgZml4IHRoaXMgcHJvYmxlbS4nKTtcbiAgICB9XG4gIH0gLy8gV2lsbCByZXN1bHQgaW4gYSBudWxsIGFjY2VzcyBlcnJvciBpZiBhY2Nlc3NlZCBvdXRzaWRlIHJlbmRlciBwaGFzZS4gV2VcbiAgLy8gaW50ZW50aW9uYWxseSBkb24ndCB0aHJvdyBvdXIgb3duIGVycm9yIGJlY2F1c2UgdGhpcyBpcyBpbiBhIGhvdCBwYXRoLlxuICAvLyBBbHNvIGhlbHBzIGVuc3VyZSB0aGlzIGlzIGlubGluZWQuXG5cblxuICByZXR1cm4gZGlzcGF0Y2hlcjtcbn1cbmZ1bmN0aW9uIHVzZUNvbnRleHQoQ29udGV4dCkge1xuICB2YXIgZGlzcGF0Y2hlciA9IHJlc29sdmVEaXNwYXRjaGVyKCk7XG5cbiAge1xuICAgIC8vIFRPRE86IGFkZCBhIG1vcmUgZ2VuZXJpYyB3YXJuaW5nIGZvciBpbnZhbGlkIHZhbHVlcy5cbiAgICBpZiAoQ29udGV4dC5fY29udGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgcmVhbENvbnRleHQgPSBDb250ZXh0Ll9jb250ZXh0OyAvLyBEb24ndCBkZWR1cGxpY2F0ZSBiZWNhdXNlIHRoaXMgbGVnaXRpbWF0ZWx5IGNhdXNlcyBidWdzXG4gICAgICAvLyBhbmQgbm9ib2R5IHNob3VsZCBiZSB1c2luZyB0aGlzIGluIGV4aXN0aW5nIGNvZGUuXG5cbiAgICAgIGlmIChyZWFsQ29udGV4dC5Db25zdW1lciA9PT0gQ29udGV4dCkge1xuICAgICAgICBlcnJvcignQ2FsbGluZyB1c2VDb250ZXh0KENvbnRleHQuQ29uc3VtZXIpIGlzIG5vdCBzdXBwb3J0ZWQsIG1heSBjYXVzZSBidWdzLCBhbmQgd2lsbCBiZSAnICsgJ3JlbW92ZWQgaW4gYSBmdXR1cmUgbWFqb3IgcmVsZWFzZS4gRGlkIHlvdSBtZWFuIHRvIGNhbGwgdXNlQ29udGV4dChDb250ZXh0KSBpbnN0ZWFkPycpO1xuICAgICAgfSBlbHNlIGlmIChyZWFsQ29udGV4dC5Qcm92aWRlciA9PT0gQ29udGV4dCkge1xuICAgICAgICBlcnJvcignQ2FsbGluZyB1c2VDb250ZXh0KENvbnRleHQuUHJvdmlkZXIpIGlzIG5vdCBzdXBwb3J0ZWQuICcgKyAnRGlkIHlvdSBtZWFuIHRvIGNhbGwgdXNlQ29udGV4dChDb250ZXh0KSBpbnN0ZWFkPycpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkaXNwYXRjaGVyLnVzZUNvbnRleHQoQ29udGV4dCk7XG59XG5mdW5jdGlvbiB1c2VDYWxsYmFjayhjYWxsYmFjaywgZGVwcykge1xuICB2YXIgZGlzcGF0Y2hlciA9IHJlc29sdmVEaXNwYXRjaGVyKCk7XG4gIHJldHVybiBkaXNwYXRjaGVyLnVzZUNhbGxiYWNrKGNhbGxiYWNrLCBkZXBzKTtcbn1cbmZ1bmN0aW9uIHVzZU1lbW8oY3JlYXRlLCBkZXBzKSB7XG4gIHZhciBkaXNwYXRjaGVyID0gcmVzb2x2ZURpc3BhdGNoZXIoKTtcbiAgcmV0dXJuIGRpc3BhdGNoZXIudXNlTWVtbyhjcmVhdGUsIGRlcHMpO1xufVxuZnVuY3Rpb24gdXNlRGVidWdWYWx1ZSh2YWx1ZSwgZm9ybWF0dGVyRm4pIHtcbiAge1xuICAgIHZhciBkaXNwYXRjaGVyID0gcmVzb2x2ZURpc3BhdGNoZXIoKTtcbiAgICByZXR1cm4gZGlzcGF0Y2hlci51c2VEZWJ1Z1ZhbHVlKHZhbHVlLCBmb3JtYXR0ZXJGbik7XG4gIH1cbn1cbmZ1bmN0aW9uIHVzZUlkKCkge1xuICB2YXIgZGlzcGF0Y2hlciA9IHJlc29sdmVEaXNwYXRjaGVyKCk7XG4gIHJldHVybiBkaXNwYXRjaGVyLnVzZUlkKCk7XG59XG5mdW5jdGlvbiB1c2UodXNhYmxlKSB7XG4gIHZhciBkaXNwYXRjaGVyID0gcmVzb2x2ZURpc3BhdGNoZXIoKTtcbiAgcmV0dXJuIGRpc3BhdGNoZXIudXNlKHVzYWJsZSk7XG59XG5cbi8vIEhlbHBlcnMgdG8gcGF0Y2ggY29uc29sZS5sb2dzIHRvIGF2b2lkIGxvZ2dpbmcgZHVyaW5nIHNpZGUtZWZmZWN0IGZyZWVcbi8vIHJlcGxheWluZyBvbiByZW5kZXIgZnVuY3Rpb24uIFRoaXMgY3VycmVudGx5IG9ubHkgcGF0Y2hlcyB0aGUgb2JqZWN0XG4vLyBsYXppbHkgd2hpY2ggd29uJ3QgY292ZXIgaWYgdGhlIGxvZyBmdW5jdGlvbiB3YXMgZXh0cmFjdGVkIGVhZ2VybHkuXG4vLyBXZSBjb3VsZCBhbHNvIGVhZ2VybHkgcGF0Y2ggdGhlIG1ldGhvZC5cbnZhciBkaXNhYmxlZERlcHRoID0gMDtcbnZhciBwcmV2TG9nO1xudmFyIHByZXZJbmZvO1xudmFyIHByZXZXYXJuO1xudmFyIHByZXZFcnJvcjtcbnZhciBwcmV2R3JvdXA7XG52YXIgcHJldkdyb3VwQ29sbGFwc2VkO1xudmFyIHByZXZHcm91cEVuZDtcblxuZnVuY3Rpb24gZGlzYWJsZWRMb2coKSB7fVxuXG5kaXNhYmxlZExvZy5fX3JlYWN0RGlzYWJsZWRMb2cgPSB0cnVlO1xuZnVuY3Rpb24gZGlzYWJsZUxvZ3MoKSB7XG4gIHtcbiAgICBpZiAoZGlzYWJsZWREZXB0aCA9PT0gMCkge1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nICovXG4gICAgICBwcmV2TG9nID0gY29uc29sZS5sb2c7XG4gICAgICBwcmV2SW5mbyA9IGNvbnNvbGUuaW5mbztcbiAgICAgIHByZXZXYXJuID0gY29uc29sZS53YXJuO1xuICAgICAgcHJldkVycm9yID0gY29uc29sZS5lcnJvcjtcbiAgICAgIHByZXZHcm91cCA9IGNvbnNvbGUuZ3JvdXA7XG4gICAgICBwcmV2R3JvdXBDb2xsYXBzZWQgPSBjb25zb2xlLmdyb3VwQ29sbGFwc2VkO1xuICAgICAgcHJldkdyb3VwRW5kID0gY29uc29sZS5ncm91cEVuZDsgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xOTA5OVxuXG4gICAgICB2YXIgcHJvcHMgPSB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IGRpc2FibGVkTG9nLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfTsgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtd3JpdGVdIEZsb3cgdGhpbmtzIGNvbnNvbGUgaXMgaW1tdXRhYmxlLlxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjb25zb2xlLCB7XG4gICAgICAgIGluZm86IHByb3BzLFxuICAgICAgICBsb2c6IHByb3BzLFxuICAgICAgICB3YXJuOiBwcm9wcyxcbiAgICAgICAgZXJyb3I6IHByb3BzLFxuICAgICAgICBncm91cDogcHJvcHMsXG4gICAgICAgIGdyb3VwQ29sbGFwc2VkOiBwcm9wcyxcbiAgICAgICAgZ3JvdXBFbmQ6IHByb3BzXG4gICAgICB9KTtcbiAgICAgIC8qIGVzbGludC1lbmFibGUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nICovXG4gICAgfVxuXG4gICAgZGlzYWJsZWREZXB0aCsrO1xuICB9XG59XG5mdW5jdGlvbiByZWVuYWJsZUxvZ3MoKSB7XG4gIHtcbiAgICBkaXNhYmxlZERlcHRoLS07XG5cbiAgICBpZiAoZGlzYWJsZWREZXB0aCA9PT0gMCkge1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nICovXG4gICAgICB2YXIgcHJvcHMgPSB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH07IC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXSBGbG93IHRoaW5rcyBjb25zb2xlIGlzIGltbXV0YWJsZS5cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY29uc29sZSwge1xuICAgICAgICBsb2c6IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkxvZ1xuICAgICAgICB9KSxcbiAgICAgICAgaW5mbzogYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgICAgIHZhbHVlOiBwcmV2SW5mb1xuICAgICAgICB9KSxcbiAgICAgICAgd2FybjogYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgICAgIHZhbHVlOiBwcmV2V2FyblxuICAgICAgICB9KSxcbiAgICAgICAgZXJyb3I6IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkVycm9yXG4gICAgICAgIH0pLFxuICAgICAgICBncm91cDogYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgICAgIHZhbHVlOiBwcmV2R3JvdXBcbiAgICAgICAgfSksXG4gICAgICAgIGdyb3VwQ29sbGFwc2VkOiBhc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICAgICAgdmFsdWU6IHByZXZHcm91cENvbGxhcHNlZFxuICAgICAgICB9KSxcbiAgICAgICAgZ3JvdXBFbmQ6IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkdyb3VwRW5kXG4gICAgICAgIH0pXG4gICAgICB9KTtcbiAgICAgIC8qIGVzbGludC1lbmFibGUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nICovXG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGVkRGVwdGggPCAwKSB7XG4gICAgICBlcnJvcignZGlzYWJsZWREZXB0aCBmZWxsIGJlbG93IHplcm8uICcgKyAnVGhpcyBpcyBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgfVxuICB9XG59XG5cbnZhciBSZWFjdEN1cnJlbnREaXNwYXRjaGVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcjtcbnZhciBwcmVmaXg7XG5mdW5jdGlvbiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShuYW1lLCBzb3VyY2UsIG93bmVyRm4pIHtcbiAge1xuICAgIGlmIChwcmVmaXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gRXh0cmFjdCB0aGUgVk0gc3BlY2lmaWMgcHJlZml4IHVzZWQgYnkgZWFjaCBsaW5lLlxuICAgICAgdHJ5IHtcbiAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgdmFyIG1hdGNoID0geC5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtcbiAgICAgICAgcHJlZml4ID0gbWF0Y2ggJiYgbWF0Y2hbMV0gfHwgJyc7XG4gICAgICB9XG4gICAgfSAvLyBXZSB1c2UgdGhlIHByZWZpeCB0byBlbnN1cmUgb3VyIHN0YWNrcyBsaW5lIHVwIHdpdGggbmF0aXZlIHN0YWNrIGZyYW1lcy5cblxuXG4gICAgcmV0dXJuICdcXG4nICsgcHJlZml4ICsgbmFtZTtcbiAgfVxufVxudmFyIHJlZW50cnkgPSBmYWxzZTtcbnZhciBjb21wb25lbnRGcmFtZUNhY2hlO1xuXG57XG4gIHZhciBQb3NzaWJseVdlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyA/IFdlYWtNYXAgOiBNYXA7XG4gIGNvbXBvbmVudEZyYW1lQ2FjaGUgPSBuZXcgUG9zc2libHlXZWFrTWFwKCk7XG59XG4vKipcbiAqIExldmVyYWdlcyBuYXRpdmUgYnJvd3Nlci9WTSBzdGFjayBmcmFtZXMgdG8gZ2V0IHByb3BlciBkZXRhaWxzIChlLmcuXG4gKiBmaWxlbmFtZSwgbGluZSArIGNvbCBudW1iZXIpIGZvciBhIHNpbmdsZSBjb21wb25lbnQgaW4gYSBjb21wb25lbnQgc3RhY2suIFdlXG4gKiBkbyB0aGlzIGJ5OlxuICogICAoMSkgdGhyb3dpbmcgYW5kIGNhdGNoaW5nIGFuIGVycm9yIGluIHRoZSBmdW5jdGlvbiAtIHRoaXMgd2lsbCBiZSBvdXJcbiAqICAgICAgIGNvbnRyb2wgZXJyb3IuXG4gKiAgICgyKSBjYWxsaW5nIHRoZSBjb21wb25lbnQgd2hpY2ggd2lsbCBldmVudHVhbGx5IHRocm93IGFuIGVycm9yIHRoYXQgd2UnbGxcbiAqICAgICAgIGNhdGNoIC0gdGhpcyB3aWxsIGJlIG91ciBzYW1wbGUgZXJyb3IuXG4gKiAgICgzKSBkaWZmaW5nIHRoZSBjb250cm9sIGFuZCBzYW1wbGUgZXJyb3Igc3RhY2tzIHRvIGZpbmQgdGhlIHN0YWNrIGZyYW1lXG4gKiAgICAgICB3aGljaCByZXByZXNlbnRzIG91ciBjb21wb25lbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBkZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lKGZuLCBjb25zdHJ1Y3QpIHtcbiAgLy8gSWYgc29tZXRoaW5nIGFza2VkIGZvciBhIHN0YWNrIGluc2lkZSBhIGZha2UgcmVuZGVyLCBpdCBzaG91bGQgZ2V0IGlnbm9yZWQuXG4gIGlmICghZm4gfHwgcmVlbnRyeSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHtcbiAgICB2YXIgZnJhbWUgPSBjb21wb25lbnRGcmFtZUNhY2hlLmdldChmbik7XG5cbiAgICBpZiAoZnJhbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZyYW1lO1xuICAgIH1cbiAgfVxuXG4gIHJlZW50cnkgPSB0cnVlO1xuICB2YXIgcHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZSA9IEVycm9yLnByZXBhcmVTdGFja1RyYWNlOyAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXSBJdCBkb2VzIGFjY2VwdCB1bmRlZmluZWQuXG5cbiAgRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSB1bmRlZmluZWQ7XG4gIHZhciBwcmV2aW91c0Rpc3BhdGNoZXI7XG5cbiAge1xuICAgIHByZXZpb3VzRGlzcGF0Y2hlciA9IFJlYWN0Q3VycmVudERpc3BhdGNoZXIuY3VycmVudDsgLy8gU2V0IHRoZSBkaXNwYXRjaGVyIGluIERFViBiZWNhdXNlIHRoaXMgbWlnaHQgYmUgY2FsbCBpbiB0aGUgcmVuZGVyIGZ1bmN0aW9uXG4gICAgLy8gZm9yIHdhcm5pbmdzLlxuXG4gICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlci5jdXJyZW50ID0gbnVsbDtcbiAgICBkaXNhYmxlTG9ncygpO1xuICB9XG4gIC8qKlxuICAgKiBGaW5kaW5nIGEgY29tbW9uIHN0YWNrIGZyYW1lIGJldHdlZW4gc2FtcGxlIGFuZCBjb250cm9sIGVycm9ycyBjYW4gYmVcbiAgICogdHJpY2t5IGdpdmVuIHRoZSBkaWZmZXJlbnQgdHlwZXMgYW5kIGxldmVscyBvZiBzdGFjayB0cmFjZSB0cnVuY2F0aW9uIGZyb21cbiAgICogZGlmZmVyZW50IEpTIFZNcy4gU28gaW5zdGVhZCB3ZSdsbCBhdHRlbXB0IHRvIGNvbnRyb2wgd2hhdCB0aGF0IGNvbW1vblxuICAgKiBmcmFtZSBzaG91bGQgYmUgdGhyb3VnaCB0aGlzIG9iamVjdCBtZXRob2Q6XG4gICAqIEhhdmluZyBib3RoIHRoZSBzYW1wbGUgYW5kIGNvbnRyb2wgZXJyb3JzIGJlIGluIHRoZSBmdW5jdGlvbiB1bmRlciB0aGVcbiAgICogYERlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWVSb290YCBwcm9wZXJ0eSwgKyBzZXR0aW5nIHRoZSBgbmFtZWAgYW5kXG4gICAqIGBkaXNwbGF5TmFtZWAgcHJvcGVydGllcyBvZiB0aGUgZnVuY3Rpb24gZW5zdXJlcyB0aGF0IGEgc3RhY2tcbiAgICogZnJhbWUgZXhpc3RzIHRoYXQgaGFzIHRoZSBtZXRob2QgbmFtZSBgRGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZVJvb3RgIGluXG4gICAqIGl0IGZvciBib3RoIGNvbnRyb2wgYW5kIHNhbXBsZSBzdGFja3MuXG4gICAqL1xuXG5cbiAgdmFyIFJ1bkluUm9vdEZyYW1lID0ge1xuICAgIERldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNvbnRyb2w7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgc2hvdWxkIHRocm93LlxuICAgICAgICBpZiAoY29uc3RydWN0KSB7XG4gICAgICAgICAgLy8gU29tZXRoaW5nIHNob3VsZCBiZSBzZXR0aW5nIHRoZSBwcm9wcyBpbiB0aGUgY29uc3RydWN0b3IuXG4gICAgICAgICAgdmFyIEZha2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcigpO1xuICAgICAgICAgIH07IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuXG5cbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmFrZS5wcm90b3R5cGUsICdwcm9wcycsIHtcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAvLyBXZSB1c2UgYSB0aHJvd2luZyBzZXR0ZXIgaW5zdGVhZCBvZiBmcm96ZW4gb3Igbm9uLXdyaXRhYmxlIHByb3BzXG4gICAgICAgICAgICAgIC8vIGJlY2F1c2UgdGhhdCB3b24ndCB0aHJvdyBpbiBhIG5vbi1zdHJpY3QgbW9kZSBmdW5jdGlvbi5cbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgJiYgUmVmbGVjdC5jb25zdHJ1Y3QpIHtcbiAgICAgICAgICAgIC8vIFdlIGNvbnN0cnVjdCBhIGRpZmZlcmVudCBjb250cm9sIGZvciB0aGlzIGNhc2UgdG8gaW5jbHVkZSBhbnkgZXh0cmFcbiAgICAgICAgICAgIC8vIGZyYW1lcyBhZGRlZCBieSB0aGUgY29uc3RydWN0IGNhbGwuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBSZWZsZWN0LmNvbnN0cnVjdChGYWtlLCBbXSk7XG4gICAgICAgICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgICAgICAgIGNvbnRyb2wgPSB4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBSZWZsZWN0LmNvbnN0cnVjdChmbiwgW10sIEZha2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBGYWtlLmNhbGwoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgICAgICAgY29udHJvbCA9IHg7XG4gICAgICAgICAgICB9IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSBmb3VuZCB3aGVuIHVwZ3JhZGluZyBGbG93XG5cblxuICAgICAgICAgICAgZm4uY2FsbChGYWtlLnByb3RvdHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcigpO1xuICAgICAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgICAgIGNvbnRyb2wgPSB4O1xuICAgICAgICAgIH0gLy8gVE9ETyhsdW5hKTogVGhpcyB3aWxsIGN1cnJlbnRseSBvbmx5IHRocm93IGlmIHRoZSBmdW5jdGlvbiBjb21wb25lbnRcbiAgICAgICAgICAvLyB0cmllcyB0byBhY2Nlc3MgUmVhY3QvUmVhY3RET00vcHJvcHMuIFdlIHNob3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgdGhyb3dcbiAgICAgICAgICAvLyBpbiBzaW1wbGUgY29tcG9uZW50cyB0b29cblxuXG4gICAgICAgICAgdmFyIG1heWJlUHJvbWlzZSA9IGZuKCk7IC8vIElmIHRoZSBmdW5jdGlvbiBjb21wb25lbnQgcmV0dXJucyBhIHByb21pc2UsIGl0J3MgbGlrZWx5IGFuIGFzeW5jXG4gICAgICAgICAgLy8gY29tcG9uZW50LCB3aGljaCB3ZSBkb24ndCB5ZXQgc3VwcG9ydC4gQXR0YWNoIGEgbm9vcCBjYXRjaCBoYW5kbGVyIHRvXG4gICAgICAgICAgLy8gc2lsZW5jZSB0aGUgZXJyb3IuXG4gICAgICAgICAgLy8gVE9ETzogSW1wbGVtZW50IGNvbXBvbmVudCBzdGFja3MgZm9yIGFzeW5jIGNsaWVudCBjb21wb25lbnRzP1xuXG4gICAgICAgICAgaWYgKG1heWJlUHJvbWlzZSAmJiB0eXBlb2YgbWF5YmVQcm9taXNlLmNhdGNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBtYXliZVByb21pc2UuY2F0Y2goZnVuY3Rpb24gKCkge30pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoc2FtcGxlKSB7XG4gICAgICAgIC8vIFRoaXMgaXMgaW5saW5lZCBtYW51YWxseSBiZWNhdXNlIGNsb3N1cmUgZG9lc24ndCBkbyBpdCBmb3IgdXMuXG4gICAgICAgIGlmIChzYW1wbGUgJiYgY29udHJvbCAmJiB0eXBlb2Ygc2FtcGxlLnN0YWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHJldHVybiBbc2FtcGxlLnN0YWNrLCBjb250cm9sLnN0YWNrXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gW251bGwsIG51bGxdO1xuICAgIH1cbiAgfTsgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG5cbiAgUnVuSW5Sb290RnJhbWUuRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290LmRpc3BsYXlOYW1lID0gJ0RldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdCc7XG4gIHZhciBuYW1lUHJvcERlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFJ1bkluUm9vdEZyYW1lLkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdCwgJ25hbWUnKTsgLy8gQmVmb3JlIEVTNiwgdGhlIGBuYW1lYCBwcm9wZXJ0eSB3YXMgbm90IGNvbmZpZ3VyYWJsZS5cblxuICBpZiAobmFtZVByb3BEZXNjcmlwdG9yICYmIG5hbWVQcm9wRGVzY3JpcHRvci5jb25maWd1cmFibGUpIHtcbiAgICAvLyBWOCB1dGlsaXplcyBhIGZ1bmN0aW9uJ3MgYG5hbWVgIHByb3BlcnR5IHdoZW4gZ2VuZXJhdGluZyBhIHN0YWNrIHRyYWNlLlxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSdW5JblJvb3RGcmFtZS5EZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3QsIC8vIENvbmZpZ3VyYWJsZSBwcm9wZXJ0aWVzIGNhbiBiZSB1cGRhdGVkIGV2ZW4gaWYgaXRzIHdyaXRhYmxlIGRlc2NyaXB0b3JcbiAgICAvLyBpcyBzZXQgdG8gYGZhbHNlYC5cbiAgICAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC13cml0ZV1cbiAgICAnbmFtZScsIHtcbiAgICAgIHZhbHVlOiAnRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290J1xuICAgIH0pO1xuICB9XG5cbiAgdHJ5IHtcbiAgICB2YXIgX1J1bkluUm9vdEZyYW1lJERldGVyID0gUnVuSW5Sb290RnJhbWUuRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290KCksXG4gICAgICAgIHNhbXBsZVN0YWNrID0gX1J1bkluUm9vdEZyYW1lJERldGVyWzBdLFxuICAgICAgICBjb250cm9sU3RhY2sgPSBfUnVuSW5Sb290RnJhbWUkRGV0ZXJbMV07XG5cbiAgICBpZiAoc2FtcGxlU3RhY2sgJiYgY29udHJvbFN0YWNrKSB7XG4gICAgICAvLyBUaGlzIGV4dHJhY3RzIHRoZSBmaXJzdCBmcmFtZSBmcm9tIHRoZSBzYW1wbGUgdGhhdCBpc24ndCBhbHNvIGluIHRoZSBjb250cm9sLlxuICAgICAgLy8gU2tpcHBpbmcgb25lIGZyYW1lIHRoYXQgd2UgYXNzdW1lIGlzIHRoZSBmcmFtZSB0aGF0IGNhbGxzIHRoZSB0d28uXG4gICAgICB2YXIgc2FtcGxlTGluZXMgPSBzYW1wbGVTdGFjay5zcGxpdCgnXFxuJyk7XG4gICAgICB2YXIgY29udHJvbExpbmVzID0gY29udHJvbFN0YWNrLnNwbGl0KCdcXG4nKTtcbiAgICAgIHZhciBzID0gMDtcbiAgICAgIHZhciBjID0gMDtcblxuICAgICAgd2hpbGUgKHMgPCBzYW1wbGVMaW5lcy5sZW5ndGggJiYgIXNhbXBsZUxpbmVzW3NdLmluY2x1ZGVzKCdEZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3QnKSkge1xuICAgICAgICBzKys7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChjIDwgY29udHJvbExpbmVzLmxlbmd0aCAmJiAhY29udHJvbExpbmVzW2NdLmluY2x1ZGVzKCdEZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3QnKSkge1xuICAgICAgICBjKys7XG4gICAgICB9IC8vIFdlIGNvdWxkbid0IGZpbmQgb3VyIGludGVudGlvbmFsbHkgaW5qZWN0ZWQgY29tbW9uIHJvb3QgZnJhbWUsIGF0dGVtcHRcbiAgICAgIC8vIHRvIGZpbmQgYW5vdGhlciBjb21tb24gcm9vdCBmcmFtZSBieSBzZWFyY2ggZnJvbSB0aGUgYm90dG9tIG9mIHRoZVxuICAgICAgLy8gY29udHJvbCBzdGFjay4uLlxuXG5cbiAgICAgIGlmIChzID09PSBzYW1wbGVMaW5lcy5sZW5ndGggfHwgYyA9PT0gY29udHJvbExpbmVzLmxlbmd0aCkge1xuICAgICAgICBzID0gc2FtcGxlTGluZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgYyA9IGNvbnRyb2xMaW5lcy5sZW5ndGggLSAxO1xuXG4gICAgICAgIHdoaWxlIChzID49IDEgJiYgYyA+PSAwICYmIHNhbXBsZUxpbmVzW3NdICE9PSBjb250cm9sTGluZXNbY10pIHtcbiAgICAgICAgICAvLyBXZSBleHBlY3QgYXQgbGVhc3Qgb25lIHN0YWNrIGZyYW1lIHRvIGJlIHNoYXJlZC5cbiAgICAgICAgICAvLyBUeXBpY2FsbHkgdGhpcyB3aWxsIGJlIHRoZSByb290IG1vc3Qgb25lLiBIb3dldmVyLCBzdGFjayBmcmFtZXMgbWF5IGJlXG4gICAgICAgICAgLy8gY3V0IG9mZiBkdWUgdG8gbWF4aW11bSBzdGFjayBsaW1pdHMuIEluIHRoaXMgY2FzZSwgb25lIG1heWJlIGN1dCBvZmZcbiAgICAgICAgICAvLyBlYXJsaWVyIHRoYW4gdGhlIG90aGVyLiBXZSBhc3N1bWUgdGhhdCB0aGUgc2FtcGxlIGlzIGxvbmdlciBvciB0aGUgc2FtZVxuICAgICAgICAgIC8vIGFuZCB0aGVyZSBmb3IgY3V0IG9mZiBlYXJsaWVyLiBTbyB3ZSBzaG91bGQgZmluZCB0aGUgcm9vdCBtb3N0IGZyYW1lIGluXG4gICAgICAgICAgLy8gdGhlIHNhbXBsZSBzb21ld2hlcmUgaW4gdGhlIGNvbnRyb2wuXG4gICAgICAgICAgYy0tO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBzID49IDEgJiYgYyA+PSAwOyBzLS0sIGMtLSkge1xuICAgICAgICAvLyBOZXh0IHdlIGZpbmQgdGhlIGZpcnN0IG9uZSB0aGF0IGlzbid0IHRoZSBzYW1lIHdoaWNoIHNob3VsZCBiZSB0aGVcbiAgICAgICAgLy8gZnJhbWUgdGhhdCBjYWxsZWQgb3VyIHNhbXBsZSBmdW5jdGlvbiBhbmQgdGhlIGNvbnRyb2wuXG4gICAgICAgIGlmIChzYW1wbGVMaW5lc1tzXSAhPT0gY29udHJvbExpbmVzW2NdKSB7XG4gICAgICAgICAgLy8gSW4gVjgsIHRoZSBmaXJzdCBsaW5lIGlzIGRlc2NyaWJpbmcgdGhlIG1lc3NhZ2UgYnV0IG90aGVyIFZNcyBkb24ndC5cbiAgICAgICAgICAvLyBJZiB3ZSdyZSBhYm91dCB0byByZXR1cm4gdGhlIGZpcnN0IGxpbmUsIGFuZCB0aGUgY29udHJvbCBpcyBhbHNvIG9uIHRoZSBzYW1lXG4gICAgICAgICAgLy8gbGluZSwgdGhhdCdzIGEgcHJldHR5IGdvb2QgaW5kaWNhdG9yIHRoYXQgb3VyIHNhbXBsZSB0aHJldyBhdCBzYW1lIGxpbmUgYXNcbiAgICAgICAgICAvLyB0aGUgY29udHJvbC4gSS5lLiBiZWZvcmUgd2UgZW50ZXJlZCB0aGUgc2FtcGxlIGZyYW1lLiBTbyB3ZSBpZ25vcmUgdGhpcyByZXN1bHQuXG4gICAgICAgICAgLy8gVGhpcyBjYW4gaGFwcGVuIGlmIHlvdSBwYXNzZWQgYSBjbGFzcyB0byBmdW5jdGlvbiBjb21wb25lbnQsIG9yIG5vbi1mdW5jdGlvbi5cbiAgICAgICAgICBpZiAocyAhPT0gMSB8fCBjICE9PSAxKSB7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgIHMtLTtcbiAgICAgICAgICAgICAgYy0tOyAvLyBXZSBtYXkgc3RpbGwgaGF2ZSBzaW1pbGFyIGludGVybWVkaWF0ZSBmcmFtZXMgZnJvbSB0aGUgY29uc3RydWN0IGNhbGwuXG4gICAgICAgICAgICAgIC8vIFRoZSBuZXh0IG9uZSB0aGF0IGlzbid0IHRoZSBzYW1lIHNob3VsZCBiZSBvdXIgbWF0Y2ggdGhvdWdoLlxuXG4gICAgICAgICAgICAgIGlmIChjIDwgMCB8fCBzYW1wbGVMaW5lc1tzXSAhPT0gY29udHJvbExpbmVzW2NdKSB7XG4gICAgICAgICAgICAgICAgLy8gVjggYWRkcyBhIFwibmV3XCIgcHJlZml4IGZvciBuYXRpdmUgY2xhc3Nlcy4gTGV0J3MgcmVtb3ZlIGl0IHRvIG1ha2UgaXQgcHJldHRpZXIuXG4gICAgICAgICAgICAgICAgdmFyIF9mcmFtZSA9ICdcXG4nICsgc2FtcGxlTGluZXNbc10ucmVwbGFjZSgnIGF0IG5ldyAnLCAnIGF0ICcpOyAvLyBJZiBvdXIgY29tcG9uZW50IGZyYW1lIGlzIGxhYmVsZWQgXCI8YW5vbnltb3VzPlwiXG4gICAgICAgICAgICAgICAgLy8gYnV0IHdlIGhhdmUgYSB1c2VyLXByb3ZpZGVkIFwiZGlzcGxheU5hbWVcIlxuICAgICAgICAgICAgICAgIC8vIHNwbGljZSBpdCBpbiB0byBtYWtlIHRoZSBzdGFjayBtb3JlIHJlYWRhYmxlLlxuXG5cbiAgICAgICAgICAgICAgICBpZiAoZm4uZGlzcGxheU5hbWUgJiYgX2ZyYW1lLmluY2x1ZGVzKCc8YW5vbnltb3VzPicpKSB7XG4gICAgICAgICAgICAgICAgICBfZnJhbWUgPSBfZnJhbWUucmVwbGFjZSgnPGFub255bW91cz4nLCBmbi5kaXNwbGF5TmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRydWUpIHtcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50RnJhbWVDYWNoZS5zZXQoZm4sIF9mcmFtZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSAvLyBSZXR1cm4gdGhlIGxpbmUgd2UgZm91bmQuXG5cblxuICAgICAgICAgICAgICAgIHJldHVybiBfZnJhbWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKHMgPj0gMSAmJiBjID49IDApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIHJlZW50cnkgPSBmYWxzZTtcblxuICAgIHtcbiAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIuY3VycmVudCA9IHByZXZpb3VzRGlzcGF0Y2hlcjtcbiAgICAgIHJlZW5hYmxlTG9ncygpO1xuICAgIH1cblxuICAgIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gcHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZTtcbiAgfSAvLyBGYWxsYmFjayB0byBqdXN0IHVzaW5nIHRoZSBuYW1lIGlmIHdlIGNvdWxkbid0IG1ha2UgaXQgdGhyb3cuXG5cblxuICB2YXIgbmFtZSA9IGZuID8gZm4uZGlzcGxheU5hbWUgfHwgZm4ubmFtZSA6ICcnO1xuICB2YXIgc3ludGhldGljRnJhbWUgPSBuYW1lID8gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUobmFtZSkgOiAnJztcblxuICB7XG4gICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29tcG9uZW50RnJhbWVDYWNoZS5zZXQoZm4sIHN5bnRoZXRpY0ZyYW1lKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3ludGhldGljRnJhbWU7XG59XG5mdW5jdGlvbiBkZXNjcmliZUZ1bmN0aW9uQ29tcG9uZW50RnJhbWUoZm4sIHNvdXJjZSwgb3duZXJGbikge1xuICB7XG4gICAgcmV0dXJuIGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZm4sIGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzaG91bGRDb25zdHJ1Y3QoQ29tcG9uZW50KSB7XG4gIHZhciBwcm90b3R5cGUgPSBDb21wb25lbnQucHJvdG90eXBlO1xuICByZXR1cm4gISEocHJvdG90eXBlICYmIHByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KTtcbn1cblxuZnVuY3Rpb24gZGVzY3JpYmVVbmtub3duRWxlbWVudFR5cGVGcmFtZUluREVWKHR5cGUsIHNvdXJjZSwgb3duZXJGbikge1xuXG4gIGlmICh0eXBlID09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICB7XG4gICAgICByZXR1cm4gZGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZSh0eXBlLCBzaG91bGRDb25zdHJ1Y3QodHlwZSkpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUodHlwZSk7XG4gIH1cblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6XG4gICAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUoJ1N1c3BlbnNlJyk7XG5cbiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRTpcbiAgICAgIHJldHVybiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZSgnU3VzcGVuc2VMaXN0Jyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgc3dpdGNoICh0eXBlLiQkdHlwZW9mKSB7XG4gICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgIHJldHVybiBkZXNjcmliZUZ1bmN0aW9uQ29tcG9uZW50RnJhbWUodHlwZS5yZW5kZXIpO1xuXG4gICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRTpcbiAgICAgICAgLy8gTWVtbyBtYXkgY29udGFpbiBhbnkgY29tcG9uZW50IHR5cGUgc28gd2UgcmVjdXJzaXZlbHkgcmVzb2x2ZSBpdC5cbiAgICAgICAgcmV0dXJuIGRlc2NyaWJlVW5rbm93bkVsZW1lbnRUeXBlRnJhbWVJbkRFVih0eXBlLnR5cGUsIHNvdXJjZSwgb3duZXJGbik7XG5cbiAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIGxhenlDb21wb25lbnQgPSB0eXBlO1xuICAgICAgICAgIHZhciBwYXlsb2FkID0gbGF6eUNvbXBvbmVudC5fcGF5bG9hZDtcbiAgICAgICAgICB2YXIgaW5pdCA9IGxhenlDb21wb25lbnQuX2luaXQ7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gTGF6eSBtYXkgY29udGFpbiBhbnkgY29tcG9uZW50IHR5cGUgc28gd2UgcmVjdXJzaXZlbHkgcmVzb2x2ZSBpdC5cbiAgICAgICAgICAgIHJldHVybiBkZXNjcmliZVVua25vd25FbGVtZW50VHlwZUZyYW1lSW5ERVYoaW5pdChwYXlsb2FkKSwgc291cmNlLCBvd25lckZuKTtcbiAgICAgICAgICB9IGNhdGNoICh4KSB7fVxuICAgICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICcnO1xufVxuXG52YXIgbG9nZ2VkVHlwZUZhaWx1cmVzID0ge307XG52YXIgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0RGVidWdDdXJyZW50RnJhbWU7XG5cbmZ1bmN0aW9uIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50JDEoZWxlbWVudCkge1xuICB7XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIHZhciBvd25lciA9IGVsZW1lbnQuX293bmVyO1xuICAgICAgdmFyIHN0YWNrID0gZGVzY3JpYmVVbmtub3duRWxlbWVudFR5cGVGcmFtZUluREVWKGVsZW1lbnQudHlwZSwgZWxlbWVudC5fc291cmNlLCBvd25lciA/IG93bmVyLnR5cGUgOiBudWxsKTtcbiAgICAgIFJlYWN0RGVidWdDdXJyZW50RnJhbWUuc2V0RXh0cmFTdGFja0ZyYW1lKHN0YWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZS5zZXRFeHRyYVN0YWNrRnJhbWUobnVsbCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvcFR5cGVzKHR5cGVTcGVjcywgdmFsdWVzLCBsb2NhdGlvbiwgY29tcG9uZW50TmFtZSwgZWxlbWVudCkge1xuICB7XG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdXNlXSBUaGlzIGlzIG9rYXkgYnV0IEZsb3cgZG9lc24ndCBrbm93IGl0LlxuICAgIHZhciBoYXMgPSBGdW5jdGlvbi5jYWxsLmJpbmQoaGFzT3duUHJvcGVydHkpO1xuXG4gICAgZm9yICh2YXIgdHlwZVNwZWNOYW1lIGluIHR5cGVTcGVjcykge1xuICAgICAgaWYgKGhhcyh0eXBlU3BlY3MsIHR5cGVTcGVjTmFtZSkpIHtcbiAgICAgICAgdmFyIGVycm9yJDEgPSB2b2lkIDA7IC8vIFByb3AgdHlwZSB2YWxpZGF0aW9uIG1heSB0aHJvdy4gSW4gY2FzZSB0aGV5IGRvLCB3ZSBkb24ndCB3YW50IHRvXG4gICAgICAgIC8vIGZhaWwgdGhlIHJlbmRlciBwaGFzZSB3aGVyZSBpdCBkaWRuJ3QgZmFpbCBiZWZvcmUuIFNvIHdlIGxvZyBpdC5cbiAgICAgICAgLy8gQWZ0ZXIgdGhlc2UgaGF2ZSBiZWVuIGNsZWFuZWQgdXAsIHdlJ2xsIGxldCB0aGVtIHRocm93LlxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyBpbnRlbnRpb25hbGx5IGFuIGludmFyaWFudCB0aGF0IGdldHMgY2F1Z2h0LiBJdCdzIHRoZSBzYW1lXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYXMgd2l0aG91dCB0aGlzIHN0YXRlbWVudCBleGNlcHQgd2l0aCBhIGJldHRlciBtZXNzYWdlLlxuICAgICAgICAgIGlmICh0eXBlb2YgdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1pbnRlcm5hbC9wcm9kLWVycm9yLWNvZGVzXG4gICAgICAgICAgICB2YXIgZXJyID0gRXJyb3IoKGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJykgKyAnOiAnICsgbG9jYXRpb24gKyAnIHR5cGUgYCcgKyB0eXBlU3BlY05hbWUgKyAnYCBpcyBpbnZhbGlkOyAnICsgJ2l0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tIHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZSwgYnV0IHJlY2VpdmVkIGAnICsgdHlwZW9mIHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdICsgJ2AuJyArICdUaGlzIG9mdGVuIGhhcHBlbnMgYmVjYXVzZSBvZiB0eXBvcyBzdWNoIGFzIGBQcm9wVHlwZXMuZnVuY3Rpb25gIGluc3RlYWQgb2YgYFByb3BUeXBlcy5mdW5jYC4nKTtcbiAgICAgICAgICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGVycm9yJDEgPSB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSh2YWx1ZXMsIHR5cGVTcGVjTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIG51bGwsICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCcpO1xuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgIGVycm9yJDEgPSBleDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlcnJvciQxICYmICEoZXJyb3IkMSBpbnN0YW5jZW9mIEVycm9yKSkge1xuICAgICAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50JDEoZWxlbWVudCk7XG5cbiAgICAgICAgICBlcnJvcignJXM6IHR5cGUgc3BlY2lmaWNhdGlvbiBvZiAlcycgKyAnIGAlc2AgaXMgaW52YWxpZDsgdGhlIHR5cGUgY2hlY2tlciAnICsgJ2Z1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICVzLiAnICsgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gcGFzcyBhbiBhcmd1bWVudCB0byB0aGUgdHlwZSBjaGVja2VyICcgKyAnY3JlYXRvciAoYXJyYXlPZiwgaW5zdGFuY2VPZiwgb2JqZWN0T2YsIG9uZU9mLCBvbmVPZlR5cGUsIGFuZCAnICsgJ3NoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS4nLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIGxvY2F0aW9uLCB0eXBlU3BlY05hbWUsIHR5cGVvZiBlcnJvciQxKTtcblxuICAgICAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50JDEobnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXJyb3IkMSBpbnN0YW5jZW9mIEVycm9yICYmICEoZXJyb3IkMS5tZXNzYWdlIGluIGxvZ2dlZFR5cGVGYWlsdXJlcykpIHtcbiAgICAgICAgICAvLyBPbmx5IG1vbml0b3IgdGhpcyBmYWlsdXJlIG9uY2UgYmVjYXVzZSB0aGVyZSB0ZW5kcyB0byBiZSBhIGxvdCBvZiB0aGVcbiAgICAgICAgICAvLyBzYW1lIGVycm9yLlxuICAgICAgICAgIGxvZ2dlZFR5cGVGYWlsdXJlc1tlcnJvciQxLm1lc3NhZ2VdID0gdHJ1ZTtcbiAgICAgICAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCQxKGVsZW1lbnQpO1xuXG4gICAgICAgICAgZXJyb3IoJ0ZhaWxlZCAlcyB0eXBlOiAlcycsIGxvY2F0aW9uLCBlcnJvciQxLm1lc3NhZ2UpO1xuXG4gICAgICAgICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQkMShudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgUkVBQ1RfQ0xJRU5UX1JFRkVSRU5DRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LmNsaWVudC5yZWZlcmVuY2UnKTtcblxuZnVuY3Rpb24gc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQoZWxlbWVudCkge1xuICB7XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIHZhciBvd25lciA9IGVsZW1lbnQuX293bmVyO1xuICAgICAgdmFyIHN0YWNrID0gZGVzY3JpYmVVbmtub3duRWxlbWVudFR5cGVGcmFtZUluREVWKGVsZW1lbnQudHlwZSwgZWxlbWVudC5fc291cmNlLCBvd25lciA/IG93bmVyLnR5cGUgOiBudWxsKTtcbiAgICAgIHNldEV4dHJhU3RhY2tGcmFtZShzdGFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldEV4dHJhU3RhY2tGcmFtZShudWxsKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHByb3BUeXBlc01pc3NwZWxsV2FybmluZ1Nob3duO1xuXG57XG4gIHByb3BUeXBlc01pc3NwZWxsV2FybmluZ1Nob3duID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpIHtcbiAgaWYgKFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQpIHtcbiAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWVGcm9tVHlwZShSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LnR5cGUpO1xuXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiAnXFxuXFxuQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIGdldFNvdXJjZUluZm9FcnJvckFkZGVuZHVtKHNvdXJjZSkge1xuICBpZiAoc291cmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZmlsZU5hbWUgPSBzb3VyY2UuZmlsZU5hbWUucmVwbGFjZSgvXi4qW1xcXFxcXC9dLywgJycpO1xuICAgIHZhciBsaW5lTnVtYmVyID0gc291cmNlLmxpbmVOdW1iZXI7XG4gICAgcmV0dXJuICdcXG5cXG5DaGVjayB5b3VyIGNvZGUgYXQgJyArIGZpbGVOYW1lICsgJzonICsgbGluZU51bWJlciArICcuJztcbiAgfVxuXG4gIHJldHVybiAnJztcbn1cblxuZnVuY3Rpb24gZ2V0U291cmNlSW5mb0Vycm9yQWRkZW5kdW1Gb3JQcm9wcyhlbGVtZW50UHJvcHMpIHtcbiAgaWYgKGVsZW1lbnRQcm9wcyAhPT0gbnVsbCAmJiBlbGVtZW50UHJvcHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBnZXRTb3VyY2VJbmZvRXJyb3JBZGRlbmR1bShlbGVtZW50UHJvcHMuX19zb3VyY2UpO1xuICB9XG5cbiAgcmV0dXJuICcnO1xufVxuLyoqXG4gKiBXYXJuIGlmIHRoZXJlJ3Mgbm8ga2V5IGV4cGxpY2l0bHkgc2V0IG9uIGR5bmFtaWMgYXJyYXlzIG9mIGNoaWxkcmVuIG9yXG4gKiBvYmplY3Qga2V5cyBhcmUgbm90IHZhbGlkLiBUaGlzIGFsbG93cyB1cyB0byBrZWVwIHRyYWNrIG9mIGNoaWxkcmVuIGJldHdlZW5cbiAqIHVwZGF0ZXMuXG4gKi9cblxuXG52YXIgb3duZXJIYXNLZXlVc2VXYXJuaW5nID0ge307XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRDb21wb25lbnRFcnJvckluZm8ocGFyZW50VHlwZSkge1xuICB2YXIgaW5mbyA9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpO1xuXG4gIGlmICghaW5mbykge1xuICAgIHZhciBwYXJlbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHBhcmVudFR5cGUpO1xuXG4gICAgaWYgKHBhcmVudE5hbWUpIHtcbiAgICAgIGluZm8gPSBcIlxcblxcbkNoZWNrIHRoZSB0b3AtbGV2ZWwgcmVuZGVyIGNhbGwgdXNpbmcgPFwiICsgcGFyZW50TmFtZSArIFwiPi5cIjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW5mbztcbn1cbi8qKlxuICogV2FybiBpZiB0aGUgZWxlbWVudCBkb2Vzbid0IGhhdmUgYW4gZXhwbGljaXQga2V5IGFzc2lnbmVkIHRvIGl0LlxuICogVGhpcyBlbGVtZW50IGlzIGluIGFuIGFycmF5LiBUaGUgYXJyYXkgY291bGQgZ3JvdyBhbmQgc2hyaW5rIG9yIGJlXG4gKiByZW9yZGVyZWQuIEFsbCBjaGlsZHJlbiB0aGF0IGhhdmVuJ3QgYWxyZWFkeSBiZWVuIHZhbGlkYXRlZCBhcmUgcmVxdWlyZWQgdG9cbiAqIGhhdmUgYSBcImtleVwiIHByb3BlcnR5IGFzc2lnbmVkIHRvIGl0LiBFcnJvciBzdGF0dXNlcyBhcmUgY2FjaGVkIHNvIGEgd2FybmluZ1xuICogd2lsbCBvbmx5IGJlIHNob3duIG9uY2UuXG4gKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRoYXQgcmVxdWlyZXMgYSBrZXkuXG4gKiBAcGFyYW0geyp9IHBhcmVudFR5cGUgZWxlbWVudCdzIHBhcmVudCdzIHR5cGUuXG4gKi9cblxuXG5mdW5jdGlvbiB2YWxpZGF0ZUV4cGxpY2l0S2V5KGVsZW1lbnQsIHBhcmVudFR5cGUpIHtcbiAgaWYgKCFlbGVtZW50Ll9zdG9yZSB8fCBlbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgfHwgZWxlbWVudC5rZXkgIT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZCA9IHRydWU7XG4gIHZhciBjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvID0gZ2V0Q3VycmVudENvbXBvbmVudEVycm9ySW5mbyhwYXJlbnRUeXBlKTtcblxuICBpZiAob3duZXJIYXNLZXlVc2VXYXJuaW5nW2N1cnJlbnRDb21wb25lbnRFcnJvckluZm9dKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb3duZXJIYXNLZXlVc2VXYXJuaW5nW2N1cnJlbnRDb21wb25lbnRFcnJvckluZm9dID0gdHJ1ZTsgLy8gVXN1YWxseSB0aGUgY3VycmVudCBvd25lciBpcyB0aGUgb2ZmZW5kZXIsIGJ1dCBpZiBpdCBhY2NlcHRzIGNoaWxkcmVuIGFzIGFcbiAgLy8gcHJvcGVydHksIGl0IG1heSBiZSB0aGUgY3JlYXRvciBvZiB0aGUgY2hpbGQgdGhhdCdzIHJlc3BvbnNpYmxlIGZvclxuICAvLyBhc3NpZ25pbmcgaXQgYSBrZXkuXG5cbiAgdmFyIGNoaWxkT3duZXIgPSAnJztcblxuICBpZiAoZWxlbWVudCAmJiBlbGVtZW50Ll9vd25lciAmJiBlbGVtZW50Ll9vd25lciAhPT0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgIC8vIEdpdmUgdGhlIGNvbXBvbmVudCB0aGF0IG9yaWdpbmFsbHkgY3JlYXRlZCB0aGlzIGNoaWxkLlxuICAgIGNoaWxkT3duZXIgPSBcIiBJdCB3YXMgcGFzc2VkIGEgY2hpbGQgZnJvbSBcIiArIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZShlbGVtZW50Ll9vd25lci50eXBlKSArIFwiLlwiO1xuICB9XG5cbiAge1xuICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KGVsZW1lbnQpO1xuXG4gICAgZXJyb3IoJ0VhY2ggY2hpbGQgaW4gYSBsaXN0IHNob3VsZCBoYXZlIGEgdW5pcXVlIFwia2V5XCIgcHJvcC4nICsgJyVzJXMgU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay93YXJuaW5nLWtleXMgZm9yIG1vcmUgaW5mb3JtYXRpb24uJywgY3VycmVudENvbXBvbmVudEVycm9ySW5mbywgY2hpbGRPd25lcik7XG5cbiAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChudWxsKTtcbiAgfVxufVxuLyoqXG4gKiBFbnN1cmUgdGhhdCBldmVyeSBlbGVtZW50IGVpdGhlciBpcyBwYXNzZWQgaW4gYSBzdGF0aWMgbG9jYXRpb24sIGluIGFuXG4gKiBhcnJheSB3aXRoIGFuIGV4cGxpY2l0IGtleXMgcHJvcGVydHkgZGVmaW5lZCwgb3IgaW4gYW4gb2JqZWN0IGxpdGVyYWxcbiAqIHdpdGggdmFsaWQga2V5IHByb3BlcnR5LlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHtSZWFjdE5vZGV9IG5vZGUgU3RhdGljYWxseSBwYXNzZWQgY2hpbGQgb2YgYW55IHR5cGUuXG4gKiBAcGFyYW0geyp9IHBhcmVudFR5cGUgbm9kZSdzIHBhcmVudCdzIHR5cGUuXG4gKi9cblxuXG5mdW5jdGlvbiB2YWxpZGF0ZUNoaWxkS2V5cyhub2RlLCBwYXJlbnRUeXBlKSB7XG4gIGlmICh0eXBlb2Ygbm9kZSAhPT0gJ29iamVjdCcgfHwgIW5vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAobm9kZS4kJHR5cGVvZiA9PT0gUkVBQ1RfQ0xJRU5UX1JFRkVSRU5DRSkgOyBlbHNlIGlmIChpc0FycmF5KG5vZGUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSBub2RlW2ldO1xuXG4gICAgICBpZiAoaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoY2hpbGQsIHBhcmVudFR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1ZhbGlkRWxlbWVudChub2RlKSkge1xuICAgIC8vIFRoaXMgZWxlbWVudCB3YXMgcGFzc2VkIGluIGEgdmFsaWQgbG9jYXRpb24uXG4gICAgaWYgKG5vZGUuX3N0b3JlKSB7XG4gICAgICBub2RlLl9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obm9kZSk7XG5cbiAgICBpZiAodHlwZW9mIGl0ZXJhdG9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIEVudHJ5IGl0ZXJhdG9ycyB1c2VkIHRvIHByb3ZpZGUgaW1wbGljaXQga2V5cyxcbiAgICAgIC8vIGJ1dCBub3cgd2UgcHJpbnQgYSBzZXBhcmF0ZSB3YXJuaW5nIGZvciB0aGVtIGxhdGVyLlxuICAgICAgaWYgKGl0ZXJhdG9yRm4gIT09IG5vZGUuZW50cmllcykge1xuICAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvckZuLmNhbGwobm9kZSk7XG4gICAgICAgIHZhciBzdGVwO1xuXG4gICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICBpZiAoaXNWYWxpZEVsZW1lbnQoc3RlcC52YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoc3RlcC52YWx1ZSwgcGFyZW50VHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4vKipcbiAqIEdpdmVuIGFuIGVsZW1lbnQsIHZhbGlkYXRlIHRoYXQgaXRzIHByb3BzIGZvbGxvdyB0aGUgcHJvcFR5cGVzIGRlZmluaXRpb24sXG4gKiBwcm92aWRlZCBieSB0aGUgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudFxuICovXG5cblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wVHlwZXMoZWxlbWVudCkge1xuICB7XG4gICAgdmFyIHR5cGUgPSBlbGVtZW50LnR5cGU7XG5cbiAgICBpZiAodHlwZSA9PT0gbnVsbCB8fCB0eXBlID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NMSUVOVF9SRUZFUkVOQ0UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcHJvcFR5cGVzO1xuXG4gICAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwcm9wVHlwZXMgPSB0eXBlLnByb3BUeXBlcztcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiAodHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSB8fCAvLyBOb3RlOiBNZW1vIG9ubHkgY2hlY2tzIG91dGVyIHByb3BzIGhlcmUuXG4gICAgLy8gSW5uZXIgcHJvcHMgYXJlIGNoZWNrZWQgaW4gdGhlIHJlY29uY2lsZXIuXG4gICAgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTUVNT19UWVBFKSkge1xuICAgICAgcHJvcFR5cGVzID0gdHlwZS5wcm9wVHlwZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocHJvcFR5cGVzKSB7XG4gICAgICAvLyBJbnRlbnRpb25hbGx5IGluc2lkZSB0byBhdm9pZCB0cmlnZ2VyaW5nIGxhenkgaW5pdGlhbGl6ZXJzOlxuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUodHlwZSk7XG4gICAgICBjaGVja1Byb3BUeXBlcyhwcm9wVHlwZXMsIGVsZW1lbnQucHJvcHMsICdwcm9wJywgbmFtZSwgZWxlbWVudCk7XG4gICAgfSBlbHNlIGlmICh0eXBlLlByb3BUeXBlcyAhPT0gdW5kZWZpbmVkICYmICFwcm9wVHlwZXNNaXNzcGVsbFdhcm5pbmdTaG93bikge1xuICAgICAgcHJvcFR5cGVzTWlzc3BlbGxXYXJuaW5nU2hvd24gPSB0cnVlOyAvLyBJbnRlbnRpb25hbGx5IGluc2lkZSB0byBhdm9pZCB0cmlnZ2VyaW5nIGxhenkgaW5pdGlhbGl6ZXJzOlxuXG4gICAgICB2YXIgX25hbWUgPSBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUodHlwZSk7XG5cbiAgICAgIGVycm9yKCdDb21wb25lbnQgJXMgZGVjbGFyZWQgYFByb3BUeXBlc2AgaW5zdGVhZCBvZiBgcHJvcFR5cGVzYC4gRGlkIHlvdSBtaXNzcGVsbCB0aGUgcHJvcGVydHkgYXNzaWdubWVudD8nLCBfbmFtZSB8fCAnVW5rbm93bicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdHlwZS5nZXREZWZhdWx0UHJvcHMgPT09ICdmdW5jdGlvbicgJiYgIXR5cGUuZ2V0RGVmYXVsdFByb3BzLmlzUmVhY3RDbGFzc0FwcHJvdmVkKSB7XG4gICAgICBlcnJvcignZ2V0RGVmYXVsdFByb3BzIGlzIG9ubHkgdXNlZCBvbiBjbGFzc2ljIFJlYWN0LmNyZWF0ZUNsYXNzICcgKyAnZGVmaW5pdGlvbnMuIFVzZSBhIHN0YXRpYyBwcm9wZXJ0eSBuYW1lZCBgZGVmYXVsdFByb3BzYCBpbnN0ZWFkLicpO1xuICAgIH1cbiAgfVxufVxuLyoqXG4gKiBHaXZlbiBhIGZyYWdtZW50LCB2YWxpZGF0ZSB0aGF0IGl0IGNhbiBvbmx5IGJlIHByb3ZpZGVkIHdpdGggZnJhZ21lbnQgcHJvcHNcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBmcmFnbWVudFxuICovXG5cblxuZnVuY3Rpb24gdmFsaWRhdGVGcmFnbWVudFByb3BzKGZyYWdtZW50KSB7XG4gIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGZyYWdtZW50LnByb3BzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmIChrZXkgIT09ICdjaGlsZHJlbicgJiYga2V5ICE9PSAna2V5Jykge1xuICAgICAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChmcmFnbWVudCk7XG5cbiAgICAgICAgZXJyb3IoJ0ludmFsaWQgcHJvcCBgJXNgIHN1cHBsaWVkIHRvIGBSZWFjdC5GcmFnbWVudGAuICcgKyAnUmVhY3QuRnJhZ21lbnQgY2FuIG9ubHkgaGF2ZSBga2V5YCBhbmQgYGNoaWxkcmVuYCBwcm9wcy4nLCBrZXkpO1xuXG4gICAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KG51bGwpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZnJhZ21lbnQucmVmICE9PSBudWxsKSB7XG4gICAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChmcmFnbWVudCk7XG5cbiAgICAgIGVycm9yKCdJbnZhbGlkIGF0dHJpYnV0ZSBgcmVmYCBzdXBwbGllZCB0byBgUmVhY3QuRnJhZ21lbnRgLicpO1xuXG4gICAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChudWxsKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRXaXRoVmFsaWRhdGlvbih0eXBlLCBwcm9wcywgY2hpbGRyZW4pIHtcbiAgdmFyIHZhbGlkVHlwZSA9IGlzVmFsaWRFbGVtZW50VHlwZSh0eXBlKTsgLy8gV2Ugd2FybiBpbiB0aGlzIGNhc2UgYnV0IGRvbid0IHRocm93LiBXZSBleHBlY3QgdGhlIGVsZW1lbnQgY3JlYXRpb24gdG9cbiAgLy8gc3VjY2VlZCBhbmQgdGhlcmUgd2lsbCBsaWtlbHkgYmUgZXJyb3JzIGluIHJlbmRlci5cblxuICBpZiAoIXZhbGlkVHlwZSkge1xuICAgIHZhciBpbmZvID0gJyc7XG5cbiAgICBpZiAodHlwZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiB0eXBlICE9PSBudWxsICYmIE9iamVjdC5rZXlzKHR5cGUpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgaW5mbyArPSAnIFlvdSBsaWtlbHkgZm9yZ290IHRvIGV4cG9ydCB5b3VyIGNvbXBvbmVudCBmcm9tIHRoZSBmaWxlICcgKyBcIml0J3MgZGVmaW5lZCBpbiwgb3IgeW91IG1pZ2h0IGhhdmUgbWl4ZWQgdXAgZGVmYXVsdCBhbmQgbmFtZWQgaW1wb3J0cy5cIjtcbiAgICB9XG5cbiAgICB2YXIgc291cmNlSW5mbyA9IGdldFNvdXJjZUluZm9FcnJvckFkZGVuZHVtRm9yUHJvcHMocHJvcHMpO1xuXG4gICAgaWYgKHNvdXJjZUluZm8pIHtcbiAgICAgIGluZm8gKz0gc291cmNlSW5mbztcbiAgICB9IGVsc2Uge1xuICAgICAgaW5mbyArPSBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKTtcbiAgICB9XG5cbiAgICB2YXIgdHlwZVN0cmluZztcblxuICAgIGlmICh0eXBlID09PSBudWxsKSB7XG4gICAgICB0eXBlU3RyaW5nID0gJ251bGwnO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh0eXBlKSkge1xuICAgICAgdHlwZVN0cmluZyA9ICdhcnJheSc7XG4gICAgfSBlbHNlIGlmICh0eXBlICE9PSB1bmRlZmluZWQgJiYgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFKSB7XG4gICAgICB0eXBlU3RyaW5nID0gXCI8XCIgKyAoZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUudHlwZSkgfHwgJ1Vua25vd24nKSArIFwiIC8+XCI7XG4gICAgICBpbmZvID0gJyBEaWQgeW91IGFjY2lkZW50YWxseSBleHBvcnQgYSBKU1ggbGl0ZXJhbCBpbnN0ZWFkIG9mIGEgY29tcG9uZW50Pyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGVTdHJpbmcgPSB0eXBlb2YgdHlwZTtcbiAgICB9XG5cbiAgICB7XG4gICAgICBlcnJvcignUmVhY3QuY3JlYXRlRWxlbWVudDogdHlwZSBpcyBpbnZhbGlkIC0tIGV4cGVjdGVkIGEgc3RyaW5nIChmb3IgJyArICdidWlsdC1pbiBjb21wb25lbnRzKSBvciBhIGNsYXNzL2Z1bmN0aW9uIChmb3IgY29tcG9zaXRlICcgKyAnY29tcG9uZW50cykgYnV0IGdvdDogJXMuJXMnLCB0eXBlU3RyaW5nLCBpbmZvKTtcbiAgICB9XG4gIH1cblxuICB2YXIgZWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQkMS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyAvLyBUaGUgcmVzdWx0IGNhbiBiZSBudWxsaXNoIGlmIGEgbW9jayBvciBhIGN1c3RvbSBmdW5jdGlvbiBpcyB1c2VkLlxuICAvLyBUT0RPOiBEcm9wIHRoaXMgd2hlbiB0aGVzZSBhcmUgbm8gbG9uZ2VyIGFsbG93ZWQgYXMgdGhlIHR5cGUgYXJndW1lbnQuXG5cbiAgaWYgKGVsZW1lbnQgPT0gbnVsbCkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9IC8vIFNraXAga2V5IHdhcm5pbmcgaWYgdGhlIHR5cGUgaXNuJ3QgdmFsaWQgc2luY2Ugb3VyIGtleSB2YWxpZGF0aW9uIGxvZ2ljXG4gIC8vIGRvZXNuJ3QgZXhwZWN0IGEgbm9uLXN0cmluZy9mdW5jdGlvbiB0eXBlIGFuZCBjYW4gdGhyb3cgY29uZnVzaW5nIGVycm9ycy5cbiAgLy8gV2UgZG9uJ3Qgd2FudCBleGNlcHRpb24gYmVoYXZpb3IgdG8gZGlmZmVyIGJldHdlZW4gZGV2IGFuZCBwcm9kLlxuICAvLyAoUmVuZGVyaW5nIHdpbGwgdGhyb3cgd2l0aCBhIGhlbHBmdWwgbWVzc2FnZSBhbmQgYXMgc29vbiBhcyB0aGUgdHlwZSBpc1xuICAvLyBmaXhlZCwgdGhlIGtleSB3YXJuaW5ncyB3aWxsIGFwcGVhci4pXG5cblxuICBpZiAodmFsaWRUeXBlKSB7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbGlkYXRlQ2hpbGRLZXlzKGFyZ3VtZW50c1tpXSwgdHlwZSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUpIHtcbiAgICB2YWxpZGF0ZUZyYWdtZW50UHJvcHMoZWxlbWVudCk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWRhdGVQcm9wVHlwZXMoZWxlbWVudCk7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudDtcbn1cbmZ1bmN0aW9uIGNsb25lRWxlbWVudFdpdGhWYWxpZGF0aW9uKGVsZW1lbnQsIHByb3BzLCBjaGlsZHJlbikge1xuICB2YXIgbmV3RWxlbWVudCA9IGNsb25lRWxlbWVudCQxLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YWxpZGF0ZUNoaWxkS2V5cyhhcmd1bWVudHNbaV0sIG5ld0VsZW1lbnQudHlwZSk7XG4gIH1cblxuICB2YWxpZGF0ZVByb3BUeXBlcyhuZXdFbGVtZW50KTtcbiAgcmV0dXJuIG5ld0VsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNlcnZlckNvbnRleHQoZ2xvYmFsTmFtZSwgZGVmYXVsdFZhbHVlKSB7XG4gIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZC4nKTtcbiAgfVxufVxuXG4vKipcbiAqIEtlZXBzIHRyYWNrIG9mIHRoZSBjdXJyZW50IGJhdGNoJ3MgY29uZmlndXJhdGlvbiBzdWNoIGFzIGhvdyBsb25nIGFuIHVwZGF0ZVxuICogc2hvdWxkIHN1c3BlbmQgZm9yIGlmIGl0IG5lZWRzIHRvLlxuICovXG52YXIgUmVhY3RDdXJyZW50QmF0Y2hDb25maWcgPSB7XG4gIHRyYW5zaXRpb246IG51bGxcbn07XG5cbmZ1bmN0aW9uIHN0YXJ0VHJhbnNpdGlvbihzY29wZSwgb3B0aW9ucykge1xuICB2YXIgcHJldlRyYW5zaXRpb24gPSBSZWFjdEN1cnJlbnRCYXRjaENvbmZpZy50cmFuc2l0aW9uO1xuICBSZWFjdEN1cnJlbnRCYXRjaENvbmZpZy50cmFuc2l0aW9uID0ge307XG4gIHZhciBjdXJyZW50VHJhbnNpdGlvbiA9IFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLnRyYW5zaXRpb247XG5cbiAge1xuICAgIFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLnRyYW5zaXRpb24uX3VwZGF0ZWRGaWJlcnMgPSBuZXcgU2V0KCk7XG4gIH1cblxuICB0cnkge1xuICAgIHNjb3BlKCk7XG4gIH0gZmluYWxseSB7XG4gICAgUmVhY3RDdXJyZW50QmF0Y2hDb25maWcudHJhbnNpdGlvbiA9IHByZXZUcmFuc2l0aW9uO1xuXG4gICAge1xuICAgICAgaWYgKHByZXZUcmFuc2l0aW9uID09PSBudWxsICYmIGN1cnJlbnRUcmFuc2l0aW9uLl91cGRhdGVkRmliZXJzKSB7XG4gICAgICAgIHZhciB1cGRhdGVkRmliZXJzQ291bnQgPSBjdXJyZW50VHJhbnNpdGlvbi5fdXBkYXRlZEZpYmVycy5zaXplO1xuXG4gICAgICAgIGN1cnJlbnRUcmFuc2l0aW9uLl91cGRhdGVkRmliZXJzLmNsZWFyKCk7XG5cbiAgICAgICAgaWYgKHVwZGF0ZWRGaWJlcnNDb3VudCA+IDEwKSB7XG4gICAgICAgICAgd2FybignRGV0ZWN0ZWQgYSBsYXJnZSBudW1iZXIgb2YgdXBkYXRlcyBpbnNpZGUgc3RhcnRUcmFuc2l0aW9uLiAnICsgJ0lmIHRoaXMgaXMgZHVlIHRvIGEgc3Vic2NyaXB0aW9uIHBsZWFzZSByZS13cml0ZSBpdCB0byB1c2UgUmVhY3QgcHJvdmlkZWQgaG9va3MuICcgKyAnT3RoZXJ3aXNlIGNvbmN1cnJlbnQgbW9kZSBndWFyYW50ZWVzIGFyZSBvZmYgdGhlIHRhYmxlLicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBjcmVhdGVFbGVtZW50ID0gY3JlYXRlRWxlbWVudFdpdGhWYWxpZGF0aW9uIDtcbnZhciBjbG9uZUVsZW1lbnQgPSBjbG9uZUVsZW1lbnRXaXRoVmFsaWRhdGlvbiA7XG52YXIgQ2hpbGRyZW4gPSB7XG4gIG1hcDogbWFwQ2hpbGRyZW4sXG4gIGZvckVhY2g6IGZvckVhY2hDaGlsZHJlbixcbiAgY291bnQ6IGNvdW50Q2hpbGRyZW4sXG4gIHRvQXJyYXk6IHRvQXJyYXksXG4gIG9ubHk6IG9ubHlDaGlsZFxufTtcblxuZXhwb3J0cy5DaGlsZHJlbiA9IENoaWxkcmVuO1xuZXhwb3J0cy5GcmFnbWVudCA9IFJFQUNUX0ZSQUdNRU5UX1RZUEU7XG5leHBvcnRzLlByb2ZpbGVyID0gUkVBQ1RfUFJPRklMRVJfVFlQRTtcbmV4cG9ydHMuU3RyaWN0TW9kZSA9IFJFQUNUX1NUUklDVF9NT0RFX1RZUEU7XG5leHBvcnRzLlN1c3BlbnNlID0gUkVBQ1RfU1VTUEVOU0VfVFlQRTtcbmV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQgPSBSZWFjdFNoYXJlZEludGVybmFscztcbmV4cG9ydHMuX19TRUNSRVRfU0VSVkVSX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEID0gUmVhY3RTZXJ2ZXJTaGFyZWRJbnRlcm5hbHM7XG5leHBvcnRzLmNhY2hlID0gY2FjaGU7XG5leHBvcnRzLmNsb25lRWxlbWVudCA9IGNsb25lRWxlbWVudDtcbmV4cG9ydHMuY3JlYXRlRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQ7XG5leHBvcnRzLmNyZWF0ZVJlZiA9IGNyZWF0ZVJlZjtcbmV4cG9ydHMuY3JlYXRlU2VydmVyQ29udGV4dCA9IGNyZWF0ZVNlcnZlckNvbnRleHQ7XG5leHBvcnRzLmZvcndhcmRSZWYgPSBmb3J3YXJkUmVmO1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudCA9IGlzVmFsaWRFbGVtZW50O1xuZXhwb3J0cy5sYXp5ID0gbGF6eTtcbmV4cG9ydHMubWVtbyA9IG1lbW87XG5leHBvcnRzLnN0YXJ0VHJhbnNpdGlvbiA9IHN0YXJ0VHJhbnNpdGlvbjtcbmV4cG9ydHMudXNlID0gdXNlO1xuZXhwb3J0cy51c2VDYWxsYmFjayA9IHVzZUNhbGxiYWNrO1xuZXhwb3J0cy51c2VDb250ZXh0ID0gdXNlQ29udGV4dDtcbmV4cG9ydHMudXNlRGVidWdWYWx1ZSA9IHVzZURlYnVnVmFsdWU7XG5leHBvcnRzLnVzZUlkID0gdXNlSWQ7XG5leHBvcnRzLnVzZU1lbW8gPSB1c2VNZW1vO1xuZXhwb3J0cy52ZXJzaW9uID0gUmVhY3RWZXJzaW9uO1xuICB9KSgpO1xufVxuIl0sIm5hbWVzIjpbIlJlYWN0Q3VycmVudERpc3BhdGNoZXIkMSIsImN1cnJlbnQiLCJSZWFjdEN1cnJlbnRPd25lciIsIlJlYWN0RGVidWdDdXJyZW50RnJhbWUkMSIsImN1cnJlbnRFeHRyYVN0YWNrRnJhbWUiLCJzZXRFeHRyYVN0YWNrRnJhbWUiLCJzdGFjayIsImdldEN1cnJlbnRTdGFjayIsImdldFN0YWNrQWRkZW5kdW0iLCJpbXBsIiwiZW5hYmxlU2NvcGVBUEkiLCJlbmFibGVDYWNoZUVsZW1lbnQiLCJlbmFibGVUcmFuc2l0aW9uVHJhY2luZyIsImVuYWJsZUxlZ2FjeUhpZGRlbiIsImVuYWJsZURlYnVnVHJhY2luZyIsIlJlYWN0U2hhcmVkSW50ZXJuYWxzIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0RGVidWdDdXJyZW50RnJhbWUiLCJ3YXJuIiwiZm9ybWF0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJwcmludFdhcm5pbmciLCJlcnJvciIsIl9sZW4yIiwiX2tleTIiLCJsZXZlbCIsImNvbmNhdCIsImFyZ3NXaXRoRm9ybWF0IiwibWFwIiwiaXRlbSIsIlN0cmluZyIsInVuc2hpZnQiLCJGdW5jdGlvbiIsInByb3RvdHlwZSIsImFwcGx5IiwiY2FsbCIsImNvbnNvbGUiLCJhc3NpZ24iLCJPYmplY3QiLCJSZWFjdEN1cnJlbnRDYWNoZSIsImNyZWF0ZUZldGNoQ2FjaGUiLCJNYXAiLCJzaW1wbGVDYWNoZUtleSIsImdlbmVyYXRlQ2FjaGVLZXkiLCJyZXF1ZXN0IiwiSlNPTiIsInN0cmluZ2lmeSIsIm1ldGhvZCIsImZyb20iLCJoZWFkZXJzIiwiZW50cmllcyIsIm1vZGUiLCJyZWRpcmVjdCIsImNyZWRlbnRpYWxzIiwicmVmZXJyZXIiLCJyZWZlcnJlclBvbGljeSIsImludGVncml0eSIsImZldGNoIiwib3JpZ2luYWxGZXRjaCIsImNhY2hlZEZldGNoIiwicmVzb3VyY2UiLCJvcHRpb25zIiwiZGlzcGF0Y2hlciIsInNpZ25hbCIsImdldENhY2hlU2lnbmFsIiwidXJsIiwiY2FjaGVLZXkiLCJVUkwiLCJSZXF1ZXN0Iiwia2VlcGFsaXZlIiwiY2FjaGUiLCJnZXRDYWNoZUZvclR5cGUiLCJjYWNoZUVudHJpZXMiLCJnZXQiLCJtYXRjaCIsInVuZGVmaW5lZCIsInNldCIsImkiLCJsIiwia2V5IiwidmFsdWUiLCJ0aGVuIiwicmVzcG9uc2UiLCJjbG9uZSIsInB1c2giLCJlcnJvcjEiLCJnbG9iYWxUaGlzIiwiZXJyb3IyIiwiUmVhY3RTZXJ2ZXJTaGFyZWRJbnRlcm5hbHMiLCJSZWFjdFZlcnNpb24iLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJTeW1ib2wiLCJmb3IiLCJSRUFDVF9QT1JUQUxfVFlQRSIsIlJFQUNUX0ZSQUdNRU5UX1RZUEUiLCJSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFIiwiUkVBQ1RfUFJPRklMRVJfVFlQRSIsIlJFQUNUX1BST1ZJREVSX1RZUEUiLCJSRUFDVF9DT05URVhUX1RZUEUiLCJSRUFDVF9GT1JXQVJEX1JFRl9UWVBFIiwiUkVBQ1RfU1VTUEVOU0VfVFlQRSIsIlJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSIsIlJFQUNUX01FTU9fVFlQRSIsIlJFQUNUX0xBWllfVFlQRSIsIlJFQUNUX09GRlNDUkVFTl9UWVBFIiwiUkVBQ1RfQ0FDSEVfVFlQRSIsIk1BWUJFX0lURVJBVE9SX1NZTUJPTCIsIml0ZXJhdG9yIiwiRkFVWF9JVEVSQVRPUl9TWU1CT0wiLCJnZXRJdGVyYXRvckZuIiwibWF5YmVJdGVyYWJsZSIsIm1heWJlSXRlcmF0b3IiLCJkaWRXYXJuU3RhdGVVcGRhdGVGb3JVbm1vdW50ZWRDb21wb25lbnQiLCJ3YXJuTm9vcCIsInB1YmxpY0luc3RhbmNlIiwiY2FsbGVyTmFtZSIsIl9jb25zdHJ1Y3RvciIsImNvbnN0cnVjdG9yIiwiY29tcG9uZW50TmFtZSIsImRpc3BsYXlOYW1lIiwibmFtZSIsIndhcm5pbmdLZXkiLCJSZWFjdE5vb3BVcGRhdGVRdWV1ZSIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImNhbGxiYWNrIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImNvbXBsZXRlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJwYXJ0aWFsU3RhdGUiLCJlbXB0eU9iamVjdCIsImZyZWV6ZSIsIkNvbXBvbmVudCIsInByb3BzIiwiY29udGV4dCIsInVwZGF0ZXIiLCJyZWZzIiwiaXNSZWFjdENvbXBvbmVudCIsInNldFN0YXRlIiwiRXJyb3IiLCJmb3JjZVVwZGF0ZSIsImRlcHJlY2F0ZWRBUElzIiwicmVwbGFjZVN0YXRlIiwiZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nIiwibWV0aG9kTmFtZSIsImluZm8iLCJkZWZpbmVQcm9wZXJ0eSIsImZuTmFtZSIsImhhc093blByb3BlcnR5IiwiQ29tcG9uZW50RHVtbXkiLCJQdXJlQ29tcG9uZW50IiwicHVyZUNvbXBvbmVudFByb3RvdHlwZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiY3JlYXRlUmVmIiwicmVmT2JqZWN0Iiwic2VhbCIsImlzQXJyYXlJbXBsIiwiaXNBcnJheSIsImEiLCJ0eXBlTmFtZSIsImhhc1RvU3RyaW5nVGFnIiwidG9TdHJpbmdUYWciLCJ0eXBlIiwid2lsbENvZXJjaW9uVGhyb3ciLCJ0ZXN0U3RyaW5nQ29lcmNpb24iLCJlIiwiY2hlY2tLZXlTdHJpbmdDb2VyY2lvbiIsImdldFdyYXBwZWROYW1lIiwib3V0ZXJUeXBlIiwiaW5uZXJUeXBlIiwid3JhcHBlck5hbWUiLCJmdW5jdGlvbk5hbWUiLCJnZXRDb250ZXh0TmFtZSIsIlJFQUNUX0NMSUVOVF9SRUZFUkVOQ0UkMiIsImdldENvbXBvbmVudE5hbWVGcm9tVHlwZSIsIiQkdHlwZW9mIiwidGFnIiwicHJvdmlkZXIiLCJfY29udGV4dCIsInJlbmRlciIsIm91dGVyTmFtZSIsImxhenlDb21wb25lbnQiLCJwYXlsb2FkIiwiX3BheWxvYWQiLCJpbml0IiwiX2luaXQiLCJ4IiwiUkVTRVJWRURfUFJPUFMiLCJyZWYiLCJfX3NlbGYiLCJfX3NvdXJjZSIsInNwZWNpYWxQcm9wS2V5V2FybmluZ1Nob3duIiwic3BlY2lhbFByb3BSZWZXYXJuaW5nU2hvd24iLCJkaWRXYXJuQWJvdXRTdHJpbmdSZWZzIiwiaGFzVmFsaWRSZWYiLCJjb25maWciLCJnZXR0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJpc1JlYWN0V2FybmluZyIsImhhc1ZhbGlkS2V5IiwiZGVmaW5lS2V5UHJvcFdhcm5pbmdHZXR0ZXIiLCJ3YXJuQWJvdXRBY2Nlc3NpbmdLZXkiLCJjb25maWd1cmFibGUiLCJkZWZpbmVSZWZQcm9wV2FybmluZ0dldHRlciIsIndhcm5BYm91dEFjY2Vzc2luZ1JlZiIsIndhcm5JZlN0cmluZ1JlZkNhbm5vdEJlQXV0b0NvbnZlcnRlZCIsInN0YXRlTm9kZSIsIlJlYWN0RWxlbWVudCIsInNlbGYiLCJzb3VyY2UiLCJvd25lciIsImVsZW1lbnQiLCJfb3duZXIiLCJfc3RvcmUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjcmVhdGVFbGVtZW50JDEiLCJjaGlsZHJlbiIsInByb3BOYW1lIiwiY2hpbGRyZW5MZW5ndGgiLCJjaGlsZEFycmF5IiwiZGVmYXVsdFByb3BzIiwiY2xvbmVBbmRSZXBsYWNlS2V5Iiwib2xkRWxlbWVudCIsIm5ld0tleSIsIm5ld0VsZW1lbnQiLCJfc2VsZiIsIl9zb3VyY2UiLCJjbG9uZUVsZW1lbnQkMSIsImlzVmFsaWRFbGVtZW50Iiwib2JqZWN0IiwiU0VQQVJBVE9SIiwiU1VCU0VQQVJBVE9SIiwiZXNjYXBlIiwiZXNjYXBlUmVnZXgiLCJlc2NhcGVyTG9va3VwIiwiZXNjYXBlZFN0cmluZyIsInJlcGxhY2UiLCJkaWRXYXJuQWJvdXRNYXBzIiwidXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgiLCJlc2NhcGVVc2VyUHJvdmlkZWRLZXkiLCJ0ZXh0IiwiZ2V0RWxlbWVudEtleSIsImluZGV4IiwidG9TdHJpbmciLCJtYXBJbnRvQXJyYXkiLCJhcnJheSIsImVzY2FwZWRQcmVmaXgiLCJuYW1lU29GYXIiLCJpbnZva2VDYWxsYmFjayIsIl9jaGlsZCIsIm1hcHBlZENoaWxkIiwiY2hpbGRLZXkiLCJlc2NhcGVkQ2hpbGRLZXkiLCJjIiwiY2hpbGQiLCJuZXh0TmFtZSIsInN1YnRyZWVDb3VudCIsIm5leHROYW1lUHJlZml4IiwiaXRlcmF0b3JGbiIsIml0ZXJhYmxlQ2hpbGRyZW4iLCJzdGVwIiwiaWkiLCJuZXh0IiwiZG9uZSIsImNoaWxkcmVuU3RyaW5nIiwia2V5cyIsImpvaW4iLCJtYXBDaGlsZHJlbiIsImZ1bmMiLCJyZXN1bHQiLCJjb3VudCIsImNvdW50Q2hpbGRyZW4iLCJuIiwiZm9yRWFjaENoaWxkcmVuIiwiZm9yRWFjaEZ1bmMiLCJmb3JFYWNoQ29udGV4dCIsInRvQXJyYXkiLCJvbmx5Q2hpbGQiLCJVbmluaXRpYWxpemVkIiwiUGVuZGluZyIsIlJlc29sdmVkIiwiUmVqZWN0ZWQiLCJsYXp5SW5pdGlhbGl6ZXIiLCJfc3RhdHVzIiwiY3RvciIsIl9yZXN1bHQiLCJ0aGVuYWJsZSIsIm1vZHVsZU9iamVjdCIsInJlc29sdmVkIiwicmVqZWN0ZWQiLCJwZW5kaW5nIiwiZGVmYXVsdCIsImxhenkiLCJsYXp5VHlwZSIsInByb3BUeXBlcyIsImRlZmluZVByb3BlcnRpZXMiLCJuZXdEZWZhdWx0UHJvcHMiLCJuZXdQcm9wVHlwZXMiLCJmb3J3YXJkUmVmIiwiZWxlbWVudFR5cGUiLCJvd25OYW1lIiwiUkVBQ1RfQ0xJRU5UX1JFRkVSRU5DRSQxIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwiZ2V0TW9kdWxlSWQiLCJtZW1vIiwiY29tcGFyZSIsIlVOVEVSTUlOQVRFRCIsIlRFUk1JTkFURUQiLCJFUlJPUkVEIiwiY3JlYXRlQ2FjaGVSb290IiwiV2Vha01hcCIsImNyZWF0ZUNhY2hlTm9kZSIsInMiLCJ2IiwibyIsInAiLCJmbiIsImZuTWFwIiwiZm5Ob2RlIiwiY2FjaGVOb2RlIiwiYXJnIiwib2JqZWN0Q2FjaGUiLCJvYmplY3ROb2RlIiwicHJpbWl0aXZlQ2FjaGUiLCJwcmltaXRpdmVOb2RlIiwidGVybWluYXRlZE5vZGUiLCJlcnJvcmVkTm9kZSIsInJlc29sdmVEaXNwYXRjaGVyIiwidXNlQ29udGV4dCIsIkNvbnRleHQiLCJyZWFsQ29udGV4dCIsIkNvbnN1bWVyIiwiUHJvdmlkZXIiLCJ1c2VDYWxsYmFjayIsImRlcHMiLCJ1c2VNZW1vIiwiY3JlYXRlIiwidXNlRGVidWdWYWx1ZSIsImZvcm1hdHRlckZuIiwidXNlSWQiLCJ1c2UiLCJ1c2FibGUiLCJkaXNhYmxlZERlcHRoIiwicHJldkxvZyIsInByZXZJbmZvIiwicHJldldhcm4iLCJwcmV2RXJyb3IiLCJwcmV2R3JvdXAiLCJwcmV2R3JvdXBDb2xsYXBzZWQiLCJwcmV2R3JvdXBFbmQiLCJkaXNhYmxlZExvZyIsIl9fcmVhY3REaXNhYmxlZExvZyIsImRpc2FibGVMb2dzIiwibG9nIiwiZ3JvdXAiLCJncm91cENvbGxhcHNlZCIsImdyb3VwRW5kIiwicmVlbmFibGVMb2dzIiwicHJlZml4IiwiZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUiLCJvd25lckZuIiwidHJpbSIsInJlZW50cnkiLCJjb21wb25lbnRGcmFtZUNhY2hlIiwiUG9zc2libHlXZWFrTWFwIiwiZGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZSIsImNvbnN0cnVjdCIsImZyYW1lIiwicHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZSIsInByZXBhcmVTdGFja1RyYWNlIiwicHJldmlvdXNEaXNwYXRjaGVyIiwiUnVuSW5Sb290RnJhbWUiLCJEZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3QiLCJjb250cm9sIiwiRmFrZSIsIlJlZmxlY3QiLCJtYXliZVByb21pc2UiLCJjYXRjaCIsInNhbXBsZSIsIm5hbWVQcm9wRGVzY3JpcHRvciIsIl9SdW5JblJvb3RGcmFtZSREZXRlciIsInNhbXBsZVN0YWNrIiwiY29udHJvbFN0YWNrIiwic2FtcGxlTGluZXMiLCJzcGxpdCIsImNvbnRyb2xMaW5lcyIsImluY2x1ZGVzIiwiX2ZyYW1lIiwic3ludGhldGljRnJhbWUiLCJkZXNjcmliZUZ1bmN0aW9uQ29tcG9uZW50RnJhbWUiLCJzaG91bGRDb25zdHJ1Y3QiLCJkZXNjcmliZVVua25vd25FbGVtZW50VHlwZUZyYW1lSW5ERVYiLCJsb2dnZWRUeXBlRmFpbHVyZXMiLCJzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCQxIiwiY2hlY2tQcm9wVHlwZXMiLCJ0eXBlU3BlY3MiLCJ2YWx1ZXMiLCJsb2NhdGlvbiIsImhhcyIsImJpbmQiLCJ0eXBlU3BlY05hbWUiLCJlcnJvciQxIiwiZXJyIiwiZXgiLCJtZXNzYWdlIiwiUkVBQ1RfQ0xJRU5UX1JFRkVSRU5DRSIsInNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50IiwicHJvcFR5cGVzTWlzc3BlbGxXYXJuaW5nU2hvd24iLCJnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0iLCJnZXRTb3VyY2VJbmZvRXJyb3JBZGRlbmR1bSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImdldFNvdXJjZUluZm9FcnJvckFkZGVuZHVtRm9yUHJvcHMiLCJlbGVtZW50UHJvcHMiLCJvd25lckhhc0tleVVzZVdhcm5pbmciLCJnZXRDdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvIiwicGFyZW50VHlwZSIsInBhcmVudE5hbWUiLCJ2YWxpZGF0ZUV4cGxpY2l0S2V5IiwidmFsaWRhdGVkIiwiY3VycmVudENvbXBvbmVudEVycm9ySW5mbyIsImNoaWxkT3duZXIiLCJ2YWxpZGF0ZUNoaWxkS2V5cyIsIm5vZGUiLCJ2YWxpZGF0ZVByb3BUeXBlcyIsIlByb3BUeXBlcyIsIl9uYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiaXNSZWFjdENsYXNzQXBwcm92ZWQiLCJ2YWxpZGF0ZUZyYWdtZW50UHJvcHMiLCJmcmFnbWVudCIsImNyZWF0ZUVsZW1lbnRXaXRoVmFsaWRhdGlvbiIsInZhbGlkVHlwZSIsInNvdXJjZUluZm8iLCJ0eXBlU3RyaW5nIiwiY2xvbmVFbGVtZW50V2l0aFZhbGlkYXRpb24iLCJjcmVhdGVTZXJ2ZXJDb250ZXh0IiwiZ2xvYmFsTmFtZSIsImRlZmF1bHRWYWx1ZSIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwidHJhbnNpdGlvbiIsInN0YXJ0VHJhbnNpdGlvbiIsInNjb3BlIiwicHJldlRyYW5zaXRpb24iLCJjdXJyZW50VHJhbnNpdGlvbiIsIl91cGRhdGVkRmliZXJzIiwiU2V0IiwidXBkYXRlZEZpYmVyc0NvdW50Iiwic2l6ZSIsImNsZWFyIiwiY3JlYXRlRWxlbWVudCIsImNsb25lRWxlbWVudCIsIkNoaWxkcmVuIiwiZm9yRWFjaCIsIm9ubHkiLCJleHBvcnRzIiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiX19TRUNSRVRfU0VSVkVSX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react/cjs/react.shared-subset.development.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/react/index.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ \"(rsc)/./node_modules/next/dist/compiled/react/cjs/react.development.js\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksT0FBdUMsRUFFMUMsTUFBTTtFQUNMQSxnSkFBc0Q7QUFDeEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9pbmRleC5qcz9kZTM3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/react/react.shared-subset.js":
/*!**********************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/react.shared-subset.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react.shared-subset.development.js */ \"(rsc)/./node_modules/next/dist/compiled/react/cjs/react.shared-subset.development.js\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L3JlYWN0LnNoYXJlZC1zdWJzZXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSSxPQUF1QyxFQUUxQyxNQUFNO0VBQ0xBLDRLQUFvRTtBQUN0RSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L3JlYWN0LnNoYXJlZC1zdWJzZXQuanM/YzYyMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3Quc2hhcmVkLXN1YnNldC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5zaGFyZWQtc3Vic2V0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react/react.shared-subset.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/build/output/log.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/esm/build/output/log.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bootstrap: () => (/* binding */ bootstrap),\n/* harmony export */   error: () => (/* binding */ error),\n/* harmony export */   event: () => (/* binding */ event),\n/* harmony export */   info: () => (/* binding */ info),\n/* harmony export */   prefixes: () => (/* binding */ prefixes),\n/* harmony export */   ready: () => (/* binding */ ready),\n/* harmony export */   trace: () => (/* binding */ trace),\n/* harmony export */   wait: () => (/* binding */ wait),\n/* harmony export */   warn: () => (/* binding */ warn),\n/* harmony export */   warnOnce: () => (/* binding */ warnOnce)\n/* harmony export */ });\n/* harmony import */ var _lib_picocolors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/picocolors */ \"(rsc)/./node_modules/next/dist/esm/lib/picocolors.js\");\n\nconst prefixes = {\n  wait: (0,_lib_picocolors__WEBPACK_IMPORTED_MODULE_0__.white)((0,_lib_picocolors__WEBPACK_IMPORTED_MODULE_0__.bold)(\"○\")),\n  error: (0,_lib_picocolors__WEBPACK_IMPORTED_MODULE_0__.red)((0,_lib_picocolors__WEBPACK_IMPORTED_MODULE_0__.bold)(\"⨯\")),\n  warn: (0,_lib_picocolors__WEBPACK_IMPORTED_MODULE_0__.yellow)((0,_lib_picocolors__WEBPACK_IMPORTED_MODULE_0__.bold)(\"⚠\")),\n  ready: \"▲\",\n  info: (0,_lib_picocolors__WEBPACK_IMPORTED_MODULE_0__.white)((0,_lib_picocolors__WEBPACK_IMPORTED_MODULE_0__.bold)(\" \")),\n  event: (0,_lib_picocolors__WEBPACK_IMPORTED_MODULE_0__.green)((0,_lib_picocolors__WEBPACK_IMPORTED_MODULE_0__.bold)(\"✓\")),\n  trace: (0,_lib_picocolors__WEBPACK_IMPORTED_MODULE_0__.magenta)((0,_lib_picocolors__WEBPACK_IMPORTED_MODULE_0__.bold)(\"\\xbb\"))\n};\nconst LOGGING_METHOD = {\n  log: \"log\",\n  warn: \"warn\",\n  error: \"error\"\n};\nfunction prefixedLog(prefixType, ...message) {\n  if ((message[0] === \"\" || message[0] === undefined) && message.length === 1) {\n    message.shift();\n  }\n  const consoleMethod = prefixType in LOGGING_METHOD ? LOGGING_METHOD[prefixType] : \"log\";\n  const prefix = prefixes[prefixType];\n  // If there's no message, don't print the prefix but a new line\n  if (message.length === 0) {\n    console[consoleMethod](\"\");\n  } else {\n    console[consoleMethod](\" \" + prefix, ...message);\n  }\n}\nfunction bootstrap(...message) {\n  console.log(\" \", ...message);\n}\nfunction wait(...message) {\n  prefixedLog(\"wait\", ...message);\n}\nfunction error(...message) {\n  prefixedLog(\"error\", ...message);\n}\nfunction warn(...message) {\n  prefixedLog(\"warn\", ...message);\n}\nfunction ready(...message) {\n  prefixedLog(\"ready\", ...message);\n}\nfunction info(...message) {\n  prefixedLog(\"info\", ...message);\n}\nfunction event(...message) {\n  prefixedLog(\"event\", ...message);\n}\nfunction trace(...message) {\n  prefixedLog(\"trace\", ...message);\n}\nconst warnOnceMessages = new Set();\nfunction warnOnce(...message) {\n  if (!warnOnceMessages.has(message[0])) {\n    warnOnceMessages.add(message.join(\" \"));\n    warn(...message);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9idWlsZC9vdXRwdXQvbG9nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQWdGO0FBQ3pFLE1BQU1NLFFBQVEsR0FBRztFQUNwQkMsSUFBSSxFQUFFRixzREFBSyxDQUFDTCxxREFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ3RCUSxLQUFLLEVBQUVMLG9EQUFHLENBQUNILHFEQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDckJTLElBQUksRUFBRUwsdURBQU0sQ0FBQ0oscURBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUN2QlUsS0FBSyxFQUFFLEdBQUc7RUFDVkMsSUFBSSxFQUFFTixzREFBSyxDQUFDTCxxREFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ3RCWSxLQUFLLEVBQUVYLHNEQUFLLENBQUNELHFEQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDdkJhLEtBQUssRUFBRVgsd0RBQU8sQ0FBQ0YscURBQUksQ0FBQyxNQUFNLENBQUM7QUFDL0IsQ0FBQztBQUNELE1BQU1jLGNBQWMsR0FBRztFQUNuQkMsR0FBRyxFQUFFLEtBQUs7RUFDVk4sSUFBSSxFQUFFLE1BQU07RUFDWkQsS0FBSyxFQUFFO0FBQ1gsQ0FBQztBQUNELFNBQVNRLFdBQVdBLENBQUNDLFVBQVUsRUFBRSxHQUFHQyxPQUFPLEVBQUU7RUFDekMsSUFBSSxDQUFDQSxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJQSxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUtDLFNBQVMsS0FBS0QsT0FBTyxDQUFDRSxNQUFNLEtBQUssQ0FBQyxFQUFFO0lBQ3pFRixPQUFPLENBQUNHLEtBQUssQ0FBQyxDQUFDO0VBQ25CO0VBQ0EsTUFBTUMsYUFBYSxHQUFHTCxVQUFVLElBQUlILGNBQWMsR0FBR0EsY0FBYyxDQUFDRyxVQUFVLENBQUMsR0FBRyxLQUFLO0VBQ3ZGLE1BQU1NLE1BQU0sR0FBR2pCLFFBQVEsQ0FBQ1csVUFBVSxDQUFDO0VBQ25DO0VBQ0EsSUFBSUMsT0FBTyxDQUFDRSxNQUFNLEtBQUssQ0FBQyxFQUFFO0lBQ3RCSSxPQUFPLENBQUNGLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQztFQUM5QixDQUFDLE1BQU07SUFDSEUsT0FBTyxDQUFDRixhQUFhLENBQUMsQ0FBQyxHQUFHLEdBQUdDLE1BQU0sRUFBRSxHQUFHTCxPQUFPLENBQUM7RUFDcEQ7QUFDSjtBQUNPLFNBQVNPLFNBQVNBLENBQUMsR0FBR1AsT0FBTyxFQUFFO0VBQ2xDTSxPQUFPLENBQUNULEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBR0csT0FBTyxDQUFDO0FBQ2hDO0FBQ08sU0FBU1gsSUFBSUEsQ0FBQyxHQUFHVyxPQUFPLEVBQUU7RUFDN0JGLFdBQVcsQ0FBQyxNQUFNLEVBQUUsR0FBR0UsT0FBTyxDQUFDO0FBQ25DO0FBQ08sU0FBU1YsS0FBS0EsQ0FBQyxHQUFHVSxPQUFPLEVBQUU7RUFDOUJGLFdBQVcsQ0FBQyxPQUFPLEVBQUUsR0FBR0UsT0FBTyxDQUFDO0FBQ3BDO0FBQ08sU0FBU1QsSUFBSUEsQ0FBQyxHQUFHUyxPQUFPLEVBQUU7RUFDN0JGLFdBQVcsQ0FBQyxNQUFNLEVBQUUsR0FBR0UsT0FBTyxDQUFDO0FBQ25DO0FBQ08sU0FBU1IsS0FBS0EsQ0FBQyxHQUFHUSxPQUFPLEVBQUU7RUFDOUJGLFdBQVcsQ0FBQyxPQUFPLEVBQUUsR0FBR0UsT0FBTyxDQUFDO0FBQ3BDO0FBQ08sU0FBU1AsSUFBSUEsQ0FBQyxHQUFHTyxPQUFPLEVBQUU7RUFDN0JGLFdBQVcsQ0FBQyxNQUFNLEVBQUUsR0FBR0UsT0FBTyxDQUFDO0FBQ25DO0FBQ08sU0FBU04sS0FBS0EsQ0FBQyxHQUFHTSxPQUFPLEVBQUU7RUFDOUJGLFdBQVcsQ0FBQyxPQUFPLEVBQUUsR0FBR0UsT0FBTyxDQUFDO0FBQ3BDO0FBQ08sU0FBU0wsS0FBS0EsQ0FBQyxHQUFHSyxPQUFPLEVBQUU7RUFDOUJGLFdBQVcsQ0FBQyxPQUFPLEVBQUUsR0FBR0UsT0FBTyxDQUFDO0FBQ3BDO0FBQ0EsTUFBTVEsZ0JBQWdCLEdBQUcsSUFBSUMsR0FBRyxDQUFDLENBQUM7QUFDM0IsU0FBU0MsUUFBUUEsQ0FBQyxHQUFHVixPQUFPLEVBQUU7RUFDakMsSUFBSSxDQUFDUSxnQkFBZ0IsQ0FBQ0csR0FBRyxDQUFDWCxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUNuQ1EsZ0JBQWdCLENBQUNJLEdBQUcsQ0FBQ1osT0FBTyxDQUFDYSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkN0QixJQUFJLENBQUMsR0FBR1MsT0FBTyxDQUFDO0VBQ3BCO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vYnVpbGQvb3V0cHV0L2xvZy5qcz8wYzk1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJvbGQsIGdyZWVuLCBtYWdlbnRhLCByZWQsIHllbGxvdywgd2hpdGUgfSBmcm9tIFwiLi4vLi4vbGliL3BpY29jb2xvcnNcIjtcbmV4cG9ydCBjb25zdCBwcmVmaXhlcyA9IHtcbiAgICB3YWl0OiB3aGl0ZShib2xkKFwi4peLXCIpKSxcbiAgICBlcnJvcjogcmVkKGJvbGQoXCLiqK9cIikpLFxuICAgIHdhcm46IHllbGxvdyhib2xkKFwi4pqgXCIpKSxcbiAgICByZWFkeTogXCLilrJcIixcbiAgICBpbmZvOiB3aGl0ZShib2xkKFwiIFwiKSksXG4gICAgZXZlbnQ6IGdyZWVuKGJvbGQoXCLinJNcIikpLFxuICAgIHRyYWNlOiBtYWdlbnRhKGJvbGQoXCJcXHhiYlwiKSlcbn07XG5jb25zdCBMT0dHSU5HX01FVEhPRCA9IHtcbiAgICBsb2c6IFwibG9nXCIsXG4gICAgd2FybjogXCJ3YXJuXCIsXG4gICAgZXJyb3I6IFwiZXJyb3JcIlxufTtcbmZ1bmN0aW9uIHByZWZpeGVkTG9nKHByZWZpeFR5cGUsIC4uLm1lc3NhZ2UpIHtcbiAgICBpZiAoKG1lc3NhZ2VbMF0gPT09IFwiXCIgfHwgbWVzc2FnZVswXSA9PT0gdW5kZWZpbmVkKSAmJiBtZXNzYWdlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBtZXNzYWdlLnNoaWZ0KCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnNvbGVNZXRob2QgPSBwcmVmaXhUeXBlIGluIExPR0dJTkdfTUVUSE9EID8gTE9HR0lOR19NRVRIT0RbcHJlZml4VHlwZV0gOiBcImxvZ1wiO1xuICAgIGNvbnN0IHByZWZpeCA9IHByZWZpeGVzW3ByZWZpeFR5cGVdO1xuICAgIC8vIElmIHRoZXJlJ3Mgbm8gbWVzc2FnZSwgZG9uJ3QgcHJpbnQgdGhlIHByZWZpeCBidXQgYSBuZXcgbGluZVxuICAgIGlmIChtZXNzYWdlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb25zb2xlW2NvbnNvbGVNZXRob2RdKFwiXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGVbY29uc29sZU1ldGhvZF0oXCIgXCIgKyBwcmVmaXgsIC4uLm1lc3NhZ2UpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBib290c3RyYXAoLi4ubWVzc2FnZSkge1xuICAgIGNvbnNvbGUubG9nKFwiIFwiLCAuLi5tZXNzYWdlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3YWl0KC4uLm1lc3NhZ2UpIHtcbiAgICBwcmVmaXhlZExvZyhcIndhaXRcIiwgLi4ubWVzc2FnZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZXJyb3IoLi4ubWVzc2FnZSkge1xuICAgIHByZWZpeGVkTG9nKFwiZXJyb3JcIiwgLi4ubWVzc2FnZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gd2FybiguLi5tZXNzYWdlKSB7XG4gICAgcHJlZml4ZWRMb2coXCJ3YXJuXCIsIC4uLm1lc3NhZ2UpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlYWR5KC4uLm1lc3NhZ2UpIHtcbiAgICBwcmVmaXhlZExvZyhcInJlYWR5XCIsIC4uLm1lc3NhZ2UpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGluZm8oLi4ubWVzc2FnZSkge1xuICAgIHByZWZpeGVkTG9nKFwiaW5mb1wiLCAuLi5tZXNzYWdlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBldmVudCguLi5tZXNzYWdlKSB7XG4gICAgcHJlZml4ZWRMb2coXCJldmVudFwiLCAuLi5tZXNzYWdlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0cmFjZSguLi5tZXNzYWdlKSB7XG4gICAgcHJlZml4ZWRMb2coXCJ0cmFjZVwiLCAuLi5tZXNzYWdlKTtcbn1cbmNvbnN0IHdhcm5PbmNlTWVzc2FnZXMgPSBuZXcgU2V0KCk7XG5leHBvcnQgZnVuY3Rpb24gd2Fybk9uY2UoLi4ubWVzc2FnZSkge1xuICAgIGlmICghd2Fybk9uY2VNZXNzYWdlcy5oYXMobWVzc2FnZVswXSkpIHtcbiAgICAgICAgd2Fybk9uY2VNZXNzYWdlcy5hZGQobWVzc2FnZS5qb2luKFwiIFwiKSk7XG4gICAgICAgIHdhcm4oLi4ubWVzc2FnZSk7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2cuanMubWFwIl0sIm5hbWVzIjpbImJvbGQiLCJncmVlbiIsIm1hZ2VudGEiLCJyZWQiLCJ5ZWxsb3ciLCJ3aGl0ZSIsInByZWZpeGVzIiwid2FpdCIsImVycm9yIiwid2FybiIsInJlYWR5IiwiaW5mbyIsImV2ZW50IiwidHJhY2UiLCJMT0dHSU5HX01FVEhPRCIsImxvZyIsInByZWZpeGVkTG9nIiwicHJlZml4VHlwZSIsIm1lc3NhZ2UiLCJ1bmRlZmluZWQiLCJsZW5ndGgiLCJzaGlmdCIsImNvbnNvbGVNZXRob2QiLCJwcmVmaXgiLCJjb25zb2xlIiwiYm9vdHN0cmFwIiwid2Fybk9uY2VNZXNzYWdlcyIsIlNldCIsIndhcm5PbmNlIiwiaGFzIiwiYWRkIiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/build/output/log.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/build/webpack/loaders/next-flight-loader/module-proxy.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/build/webpack/loaders/next-flight-loader/module-proxy.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createProxy: () => (/* binding */ createProxy)\n/* harmony export */ });\n/* harmony import */ var react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-server-dom-webpack/server.edge */ \"(rsc)/./node_modules/next/dist/compiled/react-server-dom-webpack/server.edge.js\");\n/* eslint-disable import/no-extraneous-dependencies */\n// Re-assign to make it typed.\nconst createProxy = react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.createClientModuleProxy;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1mbGlnaHQtbG9hZGVyL21vZHVsZS1wcm94eS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHNEQUFzSTtBQUN0STtBQUNPLE1BQU1DLFdBQVcsR0FBR0QseUZBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvZXNtL2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWZsaWdodC1sb2FkZXIvbW9kdWxlLXByb3h5LmpzP2ZmNmYiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzICovIGltcG9ydCB7IGNyZWF0ZUNsaWVudE1vZHVsZVByb3h5IH0gZnJvbSBcInJlYWN0LXNlcnZlci1kb20td2VicGFjay9zZXJ2ZXIuZWRnZVwiO1xuLy8gUmUtYXNzaWduIHRvIG1ha2UgaXQgdHlwZWQuXG5leHBvcnQgY29uc3QgY3JlYXRlUHJveHkgPSBjcmVhdGVDbGllbnRNb2R1bGVQcm94eTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLXByb3h5LmpzLm1hcCJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnRNb2R1bGVQcm94eSIsImNyZWF0ZVByb3h5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/build/webpack/loaders/next-flight-loader/module-proxy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/client/components/app-router-headers.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/esm/client/components/app-router-headers.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACTION: () => (/* binding */ ACTION),\n/* harmony export */   FLIGHT_PARAMETERS: () => (/* binding */ FLIGHT_PARAMETERS),\n/* harmony export */   NEXT_DID_POSTPONE_HEADER: () => (/* binding */ NEXT_DID_POSTPONE_HEADER),\n/* harmony export */   NEXT_ROUTER_PREFETCH_HEADER: () => (/* binding */ NEXT_ROUTER_PREFETCH_HEADER),\n/* harmony export */   NEXT_ROUTER_STATE_TREE: () => (/* binding */ NEXT_ROUTER_STATE_TREE),\n/* harmony export */   NEXT_RSC_UNION_QUERY: () => (/* binding */ NEXT_RSC_UNION_QUERY),\n/* harmony export */   NEXT_URL: () => (/* binding */ NEXT_URL),\n/* harmony export */   RSC_CONTENT_TYPE_HEADER: () => (/* binding */ RSC_CONTENT_TYPE_HEADER),\n/* harmony export */   RSC_HEADER: () => (/* binding */ RSC_HEADER),\n/* harmony export */   RSC_VARY_HEADER: () => (/* binding */ RSC_VARY_HEADER)\n/* harmony export */ });\nconst RSC_HEADER = \"RSC\";\nconst ACTION = \"Next-Action\";\nconst NEXT_ROUTER_STATE_TREE = \"Next-Router-State-Tree\";\nconst NEXT_ROUTER_PREFETCH_HEADER = \"Next-Router-Prefetch\";\nconst NEXT_URL = \"Next-Url\";\nconst RSC_CONTENT_TYPE_HEADER = \"text/x-component\";\nconst RSC_VARY_HEADER = RSC_HEADER + \", \" + NEXT_ROUTER_STATE_TREE + \", \" + NEXT_ROUTER_PREFETCH_HEADER + \", \" + NEXT_URL;\nconst FLIGHT_PARAMETERS = [\n    [\n        RSC_HEADER\n    ],\n    [\n        NEXT_ROUTER_STATE_TREE\n    ],\n    [\n        NEXT_ROUTER_PREFETCH_HEADER\n    ]\n];\nconst NEXT_RSC_UNION_QUERY = \"_rsc\";\nconst NEXT_DID_POSTPONE_HEADER = \"x-nextjs-postponed\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9jbGllbnQvY29tcG9uZW50cy9hcHAtcm91dGVyLWhlYWRlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFPLE1BQU1BLGFBQWEsTUFBSztBQUN4QixNQUFNQyxTQUFTLGNBQWE7QUFDNUIsTUFBTUMseUJBQXlCLHlCQUF3QjtBQUN2RCxNQUFNQyw4QkFBOEIsdUJBQXNCO0FBQzFELE1BQU1DLFdBQVcsV0FBVTtBQUMzQixNQUFNQywwQkFBMEIsbUJBQWtCO0FBQ2xELE1BQU1DLGtCQUFrQk4sYUFBYSxPQUFPRSx5QkFBeUIsT0FBT0MsOEJBQThCLE9BQU9DLFNBQVE7QUFDekgsTUFBTUcsb0JBQW9CO0lBQzdCO1FBQ0lQO0tBQ0g7SUFDRDtRQUNJRTtLQUNIO0lBQ0Q7UUFDSUM7S0FDSDtDQUNKO0FBQ00sTUFBTUssdUJBQXVCLE9BQU07QUFDbkMsTUFBTUMsMkJBQTJCLHFCQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9jbGllbnQvY29tcG9uZW50cy9hcHAtcm91dGVyLWhlYWRlcnMuanM/MjI3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgUlNDX0hFQURFUiA9IFwiUlNDXCI7XG5leHBvcnQgY29uc3QgQUNUSU9OID0gXCJOZXh0LUFjdGlvblwiO1xuZXhwb3J0IGNvbnN0IE5FWFRfUk9VVEVSX1NUQVRFX1RSRUUgPSBcIk5leHQtUm91dGVyLVN0YXRlLVRyZWVcIjtcbmV4cG9ydCBjb25zdCBORVhUX1JPVVRFUl9QUkVGRVRDSF9IRUFERVIgPSBcIk5leHQtUm91dGVyLVByZWZldGNoXCI7XG5leHBvcnQgY29uc3QgTkVYVF9VUkwgPSBcIk5leHQtVXJsXCI7XG5leHBvcnQgY29uc3QgUlNDX0NPTlRFTlRfVFlQRV9IRUFERVIgPSBcInRleHQveC1jb21wb25lbnRcIjtcbmV4cG9ydCBjb25zdCBSU0NfVkFSWV9IRUFERVIgPSBSU0NfSEVBREVSICsgXCIsIFwiICsgTkVYVF9ST1VURVJfU1RBVEVfVFJFRSArIFwiLCBcIiArIE5FWFRfUk9VVEVSX1BSRUZFVENIX0hFQURFUiArIFwiLCBcIiArIE5FWFRfVVJMO1xuZXhwb3J0IGNvbnN0IEZMSUdIVF9QQVJBTUVURVJTID0gW1xuICAgIFtcbiAgICAgICAgUlNDX0hFQURFUlxuICAgIF0sXG4gICAgW1xuICAgICAgICBORVhUX1JPVVRFUl9TVEFURV9UUkVFXG4gICAgXSxcbiAgICBbXG4gICAgICAgIE5FWFRfUk9VVEVSX1BSRUZFVENIX0hFQURFUlxuICAgIF1cbl07XG5leHBvcnQgY29uc3QgTkVYVF9SU0NfVU5JT05fUVVFUlkgPSBcIl9yc2NcIjtcbmV4cG9ydCBjb25zdCBORVhUX0RJRF9QT1NUUE9ORV9IRUFERVIgPSBcIngtbmV4dGpzLXBvc3Rwb25lZFwiO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGVyLWhlYWRlcnMuanMubWFwIl0sIm5hbWVzIjpbIlJTQ19IRUFERVIiLCJBQ1RJT04iLCJORVhUX1JPVVRFUl9TVEFURV9UUkVFIiwiTkVYVF9ST1VURVJfUFJFRkVUQ0hfSEVBREVSIiwiTkVYVF9VUkwiLCJSU0NfQ09OVEVOVF9UWVBFX0hFQURFUiIsIlJTQ19WQVJZX0hFQURFUiIsIkZMSUdIVF9QQVJBTUVURVJTIiwiTkVYVF9SU0NfVU5JT05fUVVFUlkiLCJORVhUX0RJRF9QT1NUUE9ORV9IRUFERVIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/client/components/app-router-headers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/client/components/draft-mode.js":
/*!********************************************************************!*\
  !*** ./node_modules/next/dist/esm/client/components/draft-mode.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DraftMode: () => (/* binding */ DraftMode)\n/* harmony export */ });\n/* harmony import */ var _static_generation_bailout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./static-generation-bailout */ \"(rsc)/./node_modules/next/dist/esm/client/components/static-generation-bailout.js\");\n\nclass DraftMode {\n    get isEnabled() {\n        return this._provider.isEnabled;\n    }\n    enable() {\n        if ((0,_static_generation_bailout__WEBPACK_IMPORTED_MODULE_0__.staticGenerationBailout)(\"draftMode().enable()\")) {\n            return;\n        }\n        return this._provider.enable();\n    }\n    disable() {\n        if ((0,_static_generation_bailout__WEBPACK_IMPORTED_MODULE_0__.staticGenerationBailout)(\"draftMode().disable()\")) {\n            return;\n        }\n        return this._provider.disable();\n    }\n    constructor(provider){\n        this._provider = provider;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9jbGllbnQvY29tcG9uZW50cy9kcmFmdC1tb2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFFO0FBQzlELE1BQU1DO0lBQ1QsSUFBSUMsWUFBWTtRQUNaLE9BQU8sSUFBSSxDQUFDQyxTQUFTLENBQUNELFNBQVM7SUFDbkM7SUFDQUUsU0FBUztRQUNMLElBQUlKLG1GQUF1QkEsQ0FBQyx5QkFBeUI7WUFDakQ7UUFDSjtRQUNBLE9BQU8sSUFBSSxDQUFDRyxTQUFTLENBQUNDLE1BQU07SUFDaEM7SUFDQUMsVUFBVTtRQUNOLElBQUlMLG1GQUF1QkEsQ0FBQywwQkFBMEI7WUFDbEQ7UUFDSjtRQUNBLE9BQU8sSUFBSSxDQUFDRyxTQUFTLENBQUNFLE9BQU87SUFDakM7SUFDQUMsWUFBWUMsUUFBUSxDQUFDO1FBQ2pCLElBQUksQ0FBQ0osU0FBUyxHQUFHSTtJQUNyQjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvZXNtL2NsaWVudC9jb21wb25lbnRzL2RyYWZ0LW1vZGUuanM/OTFhYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCB9IGZyb20gXCIuL3N0YXRpYy1nZW5lcmF0aW9uLWJhaWxvdXRcIjtcbmV4cG9ydCBjbGFzcyBEcmFmdE1vZGUge1xuICAgIGdldCBpc0VuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm92aWRlci5pc0VuYWJsZWQ7XG4gICAgfVxuICAgIGVuYWJsZSgpIHtcbiAgICAgICAgaWYgKHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0KFwiZHJhZnRNb2RlKCkuZW5hYmxlKClcIikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvdmlkZXIuZW5hYmxlKCk7XG4gICAgfVxuICAgIGRpc2FibGUoKSB7XG4gICAgICAgIGlmIChzdGF0aWNHZW5lcmF0aW9uQmFpbG91dChcImRyYWZ0TW9kZSgpLmRpc2FibGUoKVwiKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm92aWRlci5kaXNhYmxlKCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHByb3ZpZGVyKXtcbiAgICAgICAgdGhpcy5fcHJvdmlkZXIgPSBwcm92aWRlcjtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRyYWZ0LW1vZGUuanMubWFwIl0sIm5hbWVzIjpbInN0YXRpY0dlbmVyYXRpb25CYWlsb3V0IiwiRHJhZnRNb2RlIiwiaXNFbmFibGVkIiwiX3Byb3ZpZGVyIiwiZW5hYmxlIiwiZGlzYWJsZSIsImNvbnN0cnVjdG9yIiwicHJvdmlkZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/client/components/draft-mode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/client/components/headers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/esm/client/components/headers.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cookies: () => (/* binding */ cookies),\n/* harmony export */   draftMode: () => (/* binding */ draftMode),\n/* harmony export */   headers: () => (/* binding */ headers)\n/* harmony export */ });\n/* harmony import */ var _server_web_spec_extension_adapters_request_cookies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../server/web/spec-extension/adapters/request-cookies */ \"(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/adapters/request-cookies.js\");\n/* harmony import */ var _server_web_spec_extension_adapters_headers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../server/web/spec-extension/adapters/headers */ \"(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/adapters/headers.js\");\n/* harmony import */ var _server_web_spec_extension_cookies__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../server/web/spec-extension/cookies */ \"(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/cookies.js\");\n/* harmony import */ var _request_async_storage_external__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./request-async-storage.external */ \"(shared)/./node_modules/next/dist/esm/client/components/request-async-storage.external.js\");\n/* harmony import */ var _action_async_storage_external__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./action-async-storage.external */ \"(shared)/./node_modules/next/dist/esm/client/components/action-async-storage.external.js\");\n/* harmony import */ var _static_generation_bailout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./static-generation-bailout */ \"(rsc)/./node_modules/next/dist/esm/client/components/static-generation-bailout.js\");\n/* harmony import */ var _draft_mode__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./draft-mode */ \"(rsc)/./node_modules/next/dist/esm/client/components/draft-mode.js\");\n\n\n\n\n\n\n\nfunction headers() {\n    if ((0,_static_generation_bailout__WEBPACK_IMPORTED_MODULE_5__.staticGenerationBailout)(\"headers\", {\n        link: \"https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering\"\n    })) {\n        return _server_web_spec_extension_adapters_headers__WEBPACK_IMPORTED_MODULE_1__.HeadersAdapter.seal(new Headers({}));\n    }\n    const requestStore = _request_async_storage_external__WEBPACK_IMPORTED_MODULE_3__.requestAsyncStorage.getStore();\n    if (!requestStore) {\n        throw new Error(\"Invariant: headers() expects to have requestAsyncStorage, none available.\");\n    }\n    return requestStore.headers;\n}\nfunction cookies() {\n    if ((0,_static_generation_bailout__WEBPACK_IMPORTED_MODULE_5__.staticGenerationBailout)(\"cookies\", {\n        link: \"https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering\"\n    })) {\n        return _server_web_spec_extension_adapters_request_cookies__WEBPACK_IMPORTED_MODULE_0__.RequestCookiesAdapter.seal(new _server_web_spec_extension_cookies__WEBPACK_IMPORTED_MODULE_2__.RequestCookies(new Headers({})));\n    }\n    const requestStore = _request_async_storage_external__WEBPACK_IMPORTED_MODULE_3__.requestAsyncStorage.getStore();\n    if (!requestStore) {\n        throw new Error(\"Invariant: cookies() expects to have requestAsyncStorage, none available.\");\n    }\n    const asyncActionStore = _action_async_storage_external__WEBPACK_IMPORTED_MODULE_4__.actionAsyncStorage.getStore();\n    if (asyncActionStore && (asyncActionStore.isAction || asyncActionStore.isAppRoute)) {\n        // We can't conditionally return different types here based on the context.\n        // To avoid confusion, we always return the readonly type here.\n        return requestStore.mutableCookies;\n    }\n    return requestStore.cookies;\n}\nfunction draftMode() {\n    const requestStore = _request_async_storage_external__WEBPACK_IMPORTED_MODULE_3__.requestAsyncStorage.getStore();\n    if (!requestStore) {\n        throw new Error(\"Invariant: draftMode() expects to have requestAsyncStorage, none available.\");\n    }\n    return new _draft_mode__WEBPACK_IMPORTED_MODULE_6__.DraftMode(requestStore.draftMode);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9jbGllbnQvY29tcG9uZW50cy9oZWFkZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBZ0c7QUFDZjtBQUNUO0FBQ0Y7QUFDRjtBQUNDO0FBQzdCO0FBQ2pDLFNBQVNPO0lBQ1osSUFBSUYsbUZBQXVCQSxDQUFDLFdBQVc7UUFDbkNHLE1BQU07SUFDVixJQUFJO1FBQ0EsT0FBT1AsdUZBQWNBLENBQUNRLElBQUksQ0FBQyxJQUFJQyxRQUFRLENBQUM7SUFDNUM7SUFDQSxNQUFNQyxlQUFlUixnRkFBbUJBLENBQUNTLFFBQVE7SUFDakQsSUFBSSxDQUFDRCxjQUFjO1FBQ2YsTUFBTSxJQUFJRSxNQUFNO0lBQ3BCO0lBQ0EsT0FBT0YsYUFBYUosT0FBTztBQUMvQjtBQUNPLFNBQVNPO0lBQ1osSUFBSVQsbUZBQXVCQSxDQUFDLFdBQVc7UUFDbkNHLE1BQU07SUFDVixJQUFJO1FBQ0EsT0FBT1Isc0dBQXFCQSxDQUFDUyxJQUFJLENBQUMsSUFBSVAsOEVBQWNBLENBQUMsSUFBSVEsUUFBUSxDQUFDO0lBQ3RFO0lBQ0EsTUFBTUMsZUFBZVIsZ0ZBQW1CQSxDQUFDUyxRQUFRO0lBQ2pELElBQUksQ0FBQ0QsY0FBYztRQUNmLE1BQU0sSUFBSUUsTUFBTTtJQUNwQjtJQUNBLE1BQU1FLG1CQUFtQlgsOEVBQWtCQSxDQUFDUSxRQUFRO0lBQ3BELElBQUlHLG9CQUFxQkEsQ0FBQUEsaUJBQWlCQyxRQUFRLElBQUlELGlCQUFpQkUsVUFBVSxHQUFHO1FBQ2hGO1FBQ0E7UUFDQSxPQUFPTixhQUFhTyxjQUFjO0lBQ3RDO0lBQ0EsT0FBT1AsYUFBYUcsT0FBTztBQUMvQjtBQUNPLFNBQVNLO0lBQ1osTUFBTVIsZUFBZVIsZ0ZBQW1CQSxDQUFDUyxRQUFRO0lBQ2pELElBQUksQ0FBQ0QsY0FBYztRQUNmLE1BQU0sSUFBSUUsTUFBTTtJQUNwQjtJQUNBLE9BQU8sSUFBSVAsa0RBQVNBLENBQUNLLGFBQWFRLFNBQVM7QUFDL0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vY2xpZW50L2NvbXBvbmVudHMvaGVhZGVycy5qcz81N2I4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3RDb29raWVzQWRhcHRlciB9IGZyb20gXCIuLi8uLi9zZXJ2ZXIvd2ViL3NwZWMtZXh0ZW5zaW9uL2FkYXB0ZXJzL3JlcXVlc3QtY29va2llc1wiO1xuaW1wb3J0IHsgSGVhZGVyc0FkYXB0ZXIgfSBmcm9tIFwiLi4vLi4vc2VydmVyL3dlYi9zcGVjLWV4dGVuc2lvbi9hZGFwdGVycy9oZWFkZXJzXCI7XG5pbXBvcnQgeyBSZXF1ZXN0Q29va2llcyB9IGZyb20gXCIuLi8uLi9zZXJ2ZXIvd2ViL3NwZWMtZXh0ZW5zaW9uL2Nvb2tpZXNcIjtcbmltcG9ydCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UgfSBmcm9tIFwiLi9yZXF1ZXN0LWFzeW5jLXN0b3JhZ2UuZXh0ZXJuYWxcIjtcbmltcG9ydCB7IGFjdGlvbkFzeW5jU3RvcmFnZSB9IGZyb20gXCIuL2FjdGlvbi1hc3luYy1zdG9yYWdlLmV4dGVybmFsXCI7XG5pbXBvcnQgeyBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCB9IGZyb20gXCIuL3N0YXRpYy1nZW5lcmF0aW9uLWJhaWxvdXRcIjtcbmltcG9ydCB7IERyYWZ0TW9kZSB9IGZyb20gXCIuL2RyYWZ0LW1vZGVcIjtcbmV4cG9ydCBmdW5jdGlvbiBoZWFkZXJzKCkge1xuICAgIGlmIChzdGF0aWNHZW5lcmF0aW9uQmFpbG91dChcImhlYWRlcnNcIiwge1xuICAgICAgICBsaW5rOiBcImh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwcC9idWlsZGluZy15b3VyLWFwcGxpY2F0aW9uL3JlbmRlcmluZy9zdGF0aWMtYW5kLWR5bmFtaWMjZHluYW1pYy1yZW5kZXJpbmdcIlxuICAgIH0pKSB7XG4gICAgICAgIHJldHVybiBIZWFkZXJzQWRhcHRlci5zZWFsKG5ldyBIZWFkZXJzKHt9KSk7XG4gICAgfVxuICAgIGNvbnN0IHJlcXVlc3RTdG9yZSA9IHJlcXVlc3RBc3luY1N0b3JhZ2UuZ2V0U3RvcmUoKTtcbiAgICBpZiAoIXJlcXVlc3RTdG9yZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhcmlhbnQ6IGhlYWRlcnMoKSBleHBlY3RzIHRvIGhhdmUgcmVxdWVzdEFzeW5jU3RvcmFnZSwgbm9uZSBhdmFpbGFibGUuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gcmVxdWVzdFN0b3JlLmhlYWRlcnM7XG59XG5leHBvcnQgZnVuY3Rpb24gY29va2llcygpIHtcbiAgICBpZiAoc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQoXCJjb29raWVzXCIsIHtcbiAgICAgICAgbGluazogXCJodHRwczovL25leHRqcy5vcmcvZG9jcy9hcHAvYnVpbGRpbmcteW91ci1hcHBsaWNhdGlvbi9yZW5kZXJpbmcvc3RhdGljLWFuZC1keW5hbWljI2R5bmFtaWMtcmVuZGVyaW5nXCJcbiAgICB9KSkge1xuICAgICAgICByZXR1cm4gUmVxdWVzdENvb2tpZXNBZGFwdGVyLnNlYWwobmV3IFJlcXVlc3RDb29raWVzKG5ldyBIZWFkZXJzKHt9KSkpO1xuICAgIH1cbiAgICBjb25zdCByZXF1ZXN0U3RvcmUgPSByZXF1ZXN0QXN5bmNTdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgaWYgKCFyZXF1ZXN0U3RvcmUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YXJpYW50OiBjb29raWVzKCkgZXhwZWN0cyB0byBoYXZlIHJlcXVlc3RBc3luY1N0b3JhZ2UsIG5vbmUgYXZhaWxhYmxlLlwiKTtcbiAgICB9XG4gICAgY29uc3QgYXN5bmNBY3Rpb25TdG9yZSA9IGFjdGlvbkFzeW5jU3RvcmFnZS5nZXRTdG9yZSgpO1xuICAgIGlmIChhc3luY0FjdGlvblN0b3JlICYmIChhc3luY0FjdGlvblN0b3JlLmlzQWN0aW9uIHx8IGFzeW5jQWN0aW9uU3RvcmUuaXNBcHBSb3V0ZSkpIHtcbiAgICAgICAgLy8gV2UgY2FuJ3QgY29uZGl0aW9uYWxseSByZXR1cm4gZGlmZmVyZW50IHR5cGVzIGhlcmUgYmFzZWQgb24gdGhlIGNvbnRleHQuXG4gICAgICAgIC8vIFRvIGF2b2lkIGNvbmZ1c2lvbiwgd2UgYWx3YXlzIHJldHVybiB0aGUgcmVhZG9ubHkgdHlwZSBoZXJlLlxuICAgICAgICByZXR1cm4gcmVxdWVzdFN0b3JlLm11dGFibGVDb29raWVzO1xuICAgIH1cbiAgICByZXR1cm4gcmVxdWVzdFN0b3JlLmNvb2tpZXM7XG59XG5leHBvcnQgZnVuY3Rpb24gZHJhZnRNb2RlKCkge1xuICAgIGNvbnN0IHJlcXVlc3RTdG9yZSA9IHJlcXVlc3RBc3luY1N0b3JhZ2UuZ2V0U3RvcmUoKTtcbiAgICBpZiAoIXJlcXVlc3RTdG9yZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhcmlhbnQ6IGRyYWZ0TW9kZSgpIGV4cGVjdHMgdG8gaGF2ZSByZXF1ZXN0QXN5bmNTdG9yYWdlLCBub25lIGF2YWlsYWJsZS5cIik7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRHJhZnRNb2RlKHJlcXVlc3RTdG9yZS5kcmFmdE1vZGUpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWFkZXJzLmpzLm1hcCJdLCJuYW1lcyI6WyJSZXF1ZXN0Q29va2llc0FkYXB0ZXIiLCJIZWFkZXJzQWRhcHRlciIsIlJlcXVlc3RDb29raWVzIiwicmVxdWVzdEFzeW5jU3RvcmFnZSIsImFjdGlvbkFzeW5jU3RvcmFnZSIsInN0YXRpY0dlbmVyYXRpb25CYWlsb3V0IiwiRHJhZnRNb2RlIiwiaGVhZGVycyIsImxpbmsiLCJzZWFsIiwiSGVhZGVycyIsInJlcXVlc3RTdG9yZSIsImdldFN0b3JlIiwiRXJyb3IiLCJjb29raWVzIiwiYXN5bmNBY3Rpb25TdG9yZSIsImlzQWN0aW9uIiwiaXNBcHBSb3V0ZSIsIm11dGFibGVDb29raWVzIiwiZHJhZnRNb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/client/components/headers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/client/components/hooks-server-context.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/esm/client/components/hooks-server-context.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DynamicServerError: () => (/* binding */ DynamicServerError),\n/* harmony export */   isDynamicServerError: () => (/* binding */ isDynamicServerError)\n/* harmony export */ });\nconst DYNAMIC_ERROR_CODE = \"DYNAMIC_SERVER_USAGE\";\nclass DynamicServerError extends Error {\n    constructor(description){\n        super(\"Dynamic server usage: \" + description);\n        this.description = description;\n        this.digest = DYNAMIC_ERROR_CODE;\n    }\n}\nfunction isDynamicServerError(err) {\n    if (typeof err !== \"object\" || err === null || !(\"digest\" in err) || typeof err.digest !== \"string\") {\n        return false;\n    }\n    return err.digest === DYNAMIC_ERROR_CODE;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9jbGllbnQvY29tcG9uZW50cy9ob29rcy1zZXJ2ZXItY29udGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLE1BQU1BLHFCQUFxQjtBQUNwQixNQUFNQywyQkFBMkJDO0lBQ3BDQyxZQUFZQyxXQUFXLENBQUM7UUFDcEIsS0FBSyxDQUFDLDJCQUEyQkE7UUFDakMsSUFBSSxDQUFDQSxXQUFXLEdBQUdBO1FBQ25CLElBQUksQ0FBQ0MsTUFBTSxHQUFHTDtJQUNsQjtBQUNKO0FBQ08sU0FBU00scUJBQXFCQyxHQUFHO0lBQ3BDLElBQUksT0FBT0EsUUFBUSxZQUFZQSxRQUFRLFFBQVEsQ0FBRSxhQUFZQSxHQUFBQSxLQUFRLE9BQU9BLElBQUlGLE1BQU0sS0FBSyxVQUFVO1FBQ2pHLE9BQU87SUFDWDtJQUNBLE9BQU9FLElBQUlGLE1BQU0sS0FBS0w7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vY2xpZW50L2NvbXBvbmVudHMvaG9va3Mtc2VydmVyLWNvbnRleHQuanM/ODJlZCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBEWU5BTUlDX0VSUk9SX0NPREUgPSBcIkRZTkFNSUNfU0VSVkVSX1VTQUdFXCI7XG5leHBvcnQgY2xhc3MgRHluYW1pY1NlcnZlckVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGRlc2NyaXB0aW9uKXtcbiAgICAgICAgc3VwZXIoXCJEeW5hbWljIHNlcnZlciB1c2FnZTogXCIgKyBkZXNjcmlwdGlvbik7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5kaWdlc3QgPSBEWU5BTUlDX0VSUk9SX0NPREU7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRHluYW1pY1NlcnZlckVycm9yKGVycikge1xuICAgIGlmICh0eXBlb2YgZXJyICE9PSBcIm9iamVjdFwiIHx8IGVyciA9PT0gbnVsbCB8fCAhKFwiZGlnZXN0XCIgaW4gZXJyKSB8fCB0eXBlb2YgZXJyLmRpZ2VzdCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBlcnIuZGlnZXN0ID09PSBEWU5BTUlDX0VSUk9SX0NPREU7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhvb2tzLXNlcnZlci1jb250ZXh0LmpzLm1hcCJdLCJuYW1lcyI6WyJEWU5BTUlDX0VSUk9SX0NPREUiLCJEeW5hbWljU2VydmVyRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwiZGVzY3JpcHRpb24iLCJkaWdlc3QiLCJpc0R5bmFtaWNTZXJ2ZXJFcnJvciIsImVyciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/client/components/hooks-server-context.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/client/components/not-found.js":
/*!*******************************************************************!*\
  !*** ./node_modules/next/dist/esm/client/components/not-found.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNotFoundError: () => (/* binding */ isNotFoundError),\n/* harmony export */   notFound: () => (/* binding */ notFound)\n/* harmony export */ });\nconst NOT_FOUND_ERROR_CODE = \"NEXT_NOT_FOUND\";\n/**\n * When used in a React server component, this will set the status code to 404.\n * When used in a custom app route it will just send a 404 status.\n */ function notFound() {\n    // eslint-disable-next-line no-throw-literal\n    const error = new Error(NOT_FOUND_ERROR_CODE);\n    error.digest = NOT_FOUND_ERROR_CODE;\n    throw error;\n}\n/**\n * Checks an error to determine if it's an error generated by the `notFound()`\n * helper.\n *\n * @param error the error that may reference a not found error\n * @returns true if the error is a not found error\n */ function isNotFoundError(error) {\n    if (typeof error !== \"object\" || error === null || !(\"digest\" in error)) {\n        return false;\n    }\n    return error.digest === NOT_FOUND_ERROR_CODE;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9jbGllbnQvY29tcG9uZW50cy9ub3QtZm91bmQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxNQUFNQSx1QkFBdUI7QUFDN0I7OztDQUdBLEdBQVcsU0FBU0M7SUFDaEI7SUFDQSxNQUFNQyxRQUFRLElBQUlDLE1BQU1IO0lBQ3hCRSxNQUFNRSxNQUFNLEdBQUdKO0lBQ2YsTUFBTUU7QUFDVjtBQUNBOzs7Ozs7Q0FNQSxHQUFXLFNBQVNHLGdCQUFnQkgsS0FBSztJQUNyQyxJQUFJLE9BQU9BLFVBQVUsWUFBWUEsVUFBVSxRQUFRLENBQUUsYUFBWUEsS0FBQUEsR0FBUTtRQUNyRSxPQUFPO0lBQ1g7SUFDQSxPQUFPQSxNQUFNRSxNQUFNLEtBQUtKO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvZXNtL2NsaWVudC9jb21wb25lbnRzL25vdC1mb3VuZC5qcz9hOGYzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE5PVF9GT1VORF9FUlJPUl9DT0RFID0gXCJORVhUX05PVF9GT1VORFwiO1xuLyoqXG4gKiBXaGVuIHVzZWQgaW4gYSBSZWFjdCBzZXJ2ZXIgY29tcG9uZW50LCB0aGlzIHdpbGwgc2V0IHRoZSBzdGF0dXMgY29kZSB0byA0MDQuXG4gKiBXaGVuIHVzZWQgaW4gYSBjdXN0b20gYXBwIHJvdXRlIGl0IHdpbGwganVzdCBzZW5kIGEgNDA0IHN0YXR1cy5cbiAqLyBleHBvcnQgZnVuY3Rpb24gbm90Rm91bmQoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihOT1RfRk9VTkRfRVJST1JfQ09ERSk7XG4gICAgZXJyb3IuZGlnZXN0ID0gTk9UX0ZPVU5EX0VSUk9SX0NPREU7XG4gICAgdGhyb3cgZXJyb3I7XG59XG4vKipcbiAqIENoZWNrcyBhbiBlcnJvciB0byBkZXRlcm1pbmUgaWYgaXQncyBhbiBlcnJvciBnZW5lcmF0ZWQgYnkgdGhlIGBub3RGb3VuZCgpYFxuICogaGVscGVyLlxuICpcbiAqIEBwYXJhbSBlcnJvciB0aGUgZXJyb3IgdGhhdCBtYXkgcmVmZXJlbmNlIGEgbm90IGZvdW5kIGVycm9yXG4gKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBlcnJvciBpcyBhIG5vdCBmb3VuZCBlcnJvclxuICovIGV4cG9ydCBmdW5jdGlvbiBpc05vdEZvdW5kRXJyb3IoZXJyb3IpIHtcbiAgICBpZiAodHlwZW9mIGVycm9yICE9PSBcIm9iamVjdFwiIHx8IGVycm9yID09PSBudWxsIHx8ICEoXCJkaWdlc3RcIiBpbiBlcnJvcikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gZXJyb3IuZGlnZXN0ID09PSBOT1RfRk9VTkRfRVJST1JfQ09ERTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm90LWZvdW5kLmpzLm1hcCJdLCJuYW1lcyI6WyJOT1RfRk9VTkRfRVJST1JfQ09ERSIsIm5vdEZvdW5kIiwiZXJyb3IiLCJFcnJvciIsImRpZ2VzdCIsImlzTm90Rm91bmRFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/client/components/not-found.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/client/components/redirect-status-code.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/esm/client/components/redirect-status-code.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RedirectStatusCode: () => (/* binding */ RedirectStatusCode)\n/* harmony export */ });\nvar RedirectStatusCode;\n(function(RedirectStatusCode) {\n    RedirectStatusCode[RedirectStatusCode[\"SeeOther\"] = 303] = \"SeeOther\";\n    RedirectStatusCode[RedirectStatusCode[\"TemporaryRedirect\"] = 307] = \"TemporaryRedirect\";\n    RedirectStatusCode[RedirectStatusCode[\"PermanentRedirect\"] = 308] = \"PermanentRedirect\";\n})(RedirectStatusCode || (RedirectStatusCode = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9jbGllbnQvY29tcG9uZW50cy9yZWRpcmVjdC1zdGF0dXMtY29kZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sSUFBSUEsbUJBQWtCO0FBQzVCLFVBQVNBLGtCQUFrQjtJQUN4QkEsa0JBQWtCLENBQUNBLGtCQUFrQixDQUFDLFdBQVcsR0FBRyxJQUFJLEdBQUc7SUFDM0RBLGtCQUFrQixDQUFDQSxrQkFBa0IsQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLEdBQUc7SUFDcEVBLGtCQUFrQixDQUFDQSxrQkFBa0IsQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLEdBQUc7QUFDeEUsR0FBR0Esc0JBQXVCQSxDQUFBQSxxQkFBcUIsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9jbGllbnQvY29tcG9uZW50cy9yZWRpcmVjdC1zdGF0dXMtY29kZS5qcz9jOTMwIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgUmVkaXJlY3RTdGF0dXNDb2RlO1xuKGZ1bmN0aW9uKFJlZGlyZWN0U3RhdHVzQ29kZSkge1xuICAgIFJlZGlyZWN0U3RhdHVzQ29kZVtSZWRpcmVjdFN0YXR1c0NvZGVbXCJTZWVPdGhlclwiXSA9IDMwM10gPSBcIlNlZU90aGVyXCI7XG4gICAgUmVkaXJlY3RTdGF0dXNDb2RlW1JlZGlyZWN0U3RhdHVzQ29kZVtcIlRlbXBvcmFyeVJlZGlyZWN0XCJdID0gMzA3XSA9IFwiVGVtcG9yYXJ5UmVkaXJlY3RcIjtcbiAgICBSZWRpcmVjdFN0YXR1c0NvZGVbUmVkaXJlY3RTdGF0dXNDb2RlW1wiUGVybWFuZW50UmVkaXJlY3RcIl0gPSAzMDhdID0gXCJQZXJtYW5lbnRSZWRpcmVjdFwiO1xufSkoUmVkaXJlY3RTdGF0dXNDb2RlIHx8IChSZWRpcmVjdFN0YXR1c0NvZGUgPSB7fSkpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWRpcmVjdC1zdGF0dXMtY29kZS5qcy5tYXAiXSwibmFtZXMiOlsiUmVkaXJlY3RTdGF0dXNDb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/client/components/redirect-status-code.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/client/components/redirect.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/esm/client/components/redirect.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RedirectType: () => (/* binding */ RedirectType),\n/* harmony export */   getRedirectError: () => (/* binding */ getRedirectError),\n/* harmony export */   getRedirectStatusCodeFromError: () => (/* binding */ getRedirectStatusCodeFromError),\n/* harmony export */   getRedirectTypeFromError: () => (/* binding */ getRedirectTypeFromError),\n/* harmony export */   getURLFromRedirectError: () => (/* binding */ getURLFromRedirectError),\n/* harmony export */   isRedirectError: () => (/* binding */ isRedirectError),\n/* harmony export */   permanentRedirect: () => (/* binding */ permanentRedirect),\n/* harmony export */   redirect: () => (/* binding */ redirect)\n/* harmony export */ });\n/* harmony import */ var _request_async_storage_external__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./request-async-storage.external */ \"(shared)/./node_modules/next/dist/esm/client/components/request-async-storage.external.js\");\n/* harmony import */ var _action_async_storage_external__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./action-async-storage.external */ \"(shared)/./node_modules/next/dist/esm/client/components/action-async-storage.external.js\");\n/* harmony import */ var _redirect_status_code__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./redirect-status-code */ \"(rsc)/./node_modules/next/dist/esm/client/components/redirect-status-code.js\");\n\n\n\nconst REDIRECT_ERROR_CODE = \"NEXT_REDIRECT\";\nvar RedirectType;\n(function(RedirectType) {\n    RedirectType[\"push\"] = \"push\";\n    RedirectType[\"replace\"] = \"replace\";\n})(RedirectType || (RedirectType = {}));\nfunction getRedirectError(url, type, statusCode) {\n    if (statusCode === void 0) statusCode = _redirect_status_code__WEBPACK_IMPORTED_MODULE_2__.RedirectStatusCode.TemporaryRedirect;\n    const error = new Error(REDIRECT_ERROR_CODE);\n    error.digest = REDIRECT_ERROR_CODE + \";\" + type + \";\" + url + \";\" + statusCode + \";\";\n    const requestStore = _request_async_storage_external__WEBPACK_IMPORTED_MODULE_0__.requestAsyncStorage.getStore();\n    if (requestStore) {\n        error.mutableCookies = requestStore.mutableCookies;\n    }\n    return error;\n}\n/**\n * When used in a streaming context, this will insert a meta tag to\n * redirect the user to the target page. When used in a custom app route, it\n * will serve a 307/303 to the caller.\n *\n * @param url the url to redirect to\n */ function redirect(url, type) {\n    if (type === void 0) type = \"replace\";\n    const actionStore = _action_async_storage_external__WEBPACK_IMPORTED_MODULE_1__.actionAsyncStorage.getStore();\n    throw getRedirectError(url, type, // If we're in an action, we want to use a 303 redirect\n    // as we don't want the POST request to follow the redirect,\n    // as it could result in erroneous re-submissions.\n    (actionStore == null ? void 0 : actionStore.isAction) ? _redirect_status_code__WEBPACK_IMPORTED_MODULE_2__.RedirectStatusCode.SeeOther : _redirect_status_code__WEBPACK_IMPORTED_MODULE_2__.RedirectStatusCode.TemporaryRedirect);\n}\n/**\n * When used in a streaming context, this will insert a meta tag to\n * redirect the user to the target page. When used in a custom app route, it\n * will serve a 308/303 to the caller.\n *\n * @param url the url to redirect to\n */ function permanentRedirect(url, type) {\n    if (type === void 0) type = \"replace\";\n    const actionStore = _action_async_storage_external__WEBPACK_IMPORTED_MODULE_1__.actionAsyncStorage.getStore();\n    throw getRedirectError(url, type, // If we're in an action, we want to use a 303 redirect\n    // as we don't want the POST request to follow the redirect,\n    // as it could result in erroneous re-submissions.\n    (actionStore == null ? void 0 : actionStore.isAction) ? _redirect_status_code__WEBPACK_IMPORTED_MODULE_2__.RedirectStatusCode.SeeOther : _redirect_status_code__WEBPACK_IMPORTED_MODULE_2__.RedirectStatusCode.PermanentRedirect);\n}\n/**\n * Checks an error to determine if it's an error generated by the\n * `redirect(url)` helper.\n *\n * @param error the error that may reference a redirect error\n * @returns true if the error is a redirect error\n */ function isRedirectError(error) {\n    if (typeof error !== \"object\" || error === null || !(\"digest\" in error) || typeof error.digest !== \"string\") {\n        return false;\n    }\n    const [errorCode, type, destination, status] = error.digest.split(\";\", 4);\n    const statusCode = Number(status);\n    return errorCode === REDIRECT_ERROR_CODE && (type === \"replace\" || type === \"push\") && typeof destination === \"string\" && !isNaN(statusCode) && statusCode in _redirect_status_code__WEBPACK_IMPORTED_MODULE_2__.RedirectStatusCode;\n}\nfunction getURLFromRedirectError(error) {\n    if (!isRedirectError(error)) return null;\n    // Slices off the beginning of the digest that contains the code and the\n    // separating ';'.\n    return error.digest.split(\";\", 3)[2];\n}\nfunction getRedirectTypeFromError(error) {\n    if (!isRedirectError(error)) {\n        throw new Error(\"Not a redirect error\");\n    }\n    return error.digest.split(\";\", 2)[1];\n}\nfunction getRedirectStatusCodeFromError(error) {\n    if (!isRedirectError(error)) {\n        throw new Error(\"Not a redirect error\");\n    }\n    return Number(error.digest.split(\";\", 4)[3]);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/client/components/redirect.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/client/components/static-generation-bailout.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/next/dist/esm/client/components/static-generation-bailout.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isStaticGenBailoutError: () => (/* binding */ isStaticGenBailoutError),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var _hooks_server_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hooks-server-context */ \"(rsc)/./node_modules/next/dist/esm/client/components/hooks-server-context.js\");\n/* harmony import */ var _static_generation_async_storage_external__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./static-generation-async-storage.external */ \"(shared)/./node_modules/next/dist/esm/client/components/static-generation-async-storage.external.js\");\n\n\nconst NEXT_STATIC_GEN_BAILOUT = \"NEXT_STATIC_GEN_BAILOUT\";\nclass StaticGenBailoutError extends Error {\n    constructor(...args){\n        super(...args);\n        this.code = NEXT_STATIC_GEN_BAILOUT;\n    }\n}\nfunction isStaticGenBailoutError(error) {\n    if (typeof error !== \"object\" || error === null || !(\"code\" in error)) {\n        return false;\n    }\n    return error.code === NEXT_STATIC_GEN_BAILOUT;\n}\nfunction formatErrorMessage(reason, opts) {\n    const { dynamic, link } = opts || {};\n    const suffix = link ? \" See more info here: \" + link : \"\";\n    return \"Page\" + (dynamic ? ' with `dynamic = \"' + dynamic + '\"`' : \"\") + \" couldn't be rendered statically because it used `\" + reason + \"`.\" + suffix;\n}\nconst staticGenerationBailout = (reason, param)=>{\n    let { dynamic, link } = param === void 0 ? {} : param;\n    const staticGenerationStore = _static_generation_async_storage_external__WEBPACK_IMPORTED_MODULE_1__.staticGenerationAsyncStorage.getStore();\n    if (!staticGenerationStore) return false;\n    if (staticGenerationStore.forceStatic) {\n        return true;\n    }\n    if (staticGenerationStore.dynamicShouldError) {\n        throw new StaticGenBailoutError(formatErrorMessage(reason, {\n            link,\n            dynamic: dynamic != null ? dynamic : \"error\"\n        }));\n    }\n    const message = formatErrorMessage(reason, {\n        dynamic,\n        // this error should be caught by Next to bail out of static generation\n        // in case it's uncaught, this link provides some additional context as to why\n        link: \"https://nextjs.org/docs/messages/dynamic-server-error\"\n    });\n    // If postpone is available, we should postpone the render.\n    staticGenerationStore.postpone == null ? void 0 : staticGenerationStore.postpone.call(staticGenerationStore, reason);\n    // As this is a bailout, we don't want to revalidate, so set the revalidate\n    // to 0.\n    staticGenerationStore.revalidate = 0;\n    if (staticGenerationStore.isStaticGeneration) {\n        const err = new _hooks_server_context__WEBPACK_IMPORTED_MODULE_0__.DynamicServerError(message);\n        staticGenerationStore.dynamicUsageDescription = reason;\n        staticGenerationStore.dynamicUsageStack = err.stack;\n        throw err;\n    }\n    return false;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9jbGllbnQvY29tcG9uZW50cy9zdGF0aWMtZ2VuZXJhdGlvbi1iYWlsb3V0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBMkQ7QUFDOEI7QUFDekYsTUFBTUUsMEJBQTBCO0FBQ2hDLE1BQU1DLDhCQUE4QkM7SUFDaENDLFlBQVksR0FBR0MsSUFBSSxDQUFDO1FBQ2hCLEtBQUssSUFBSUE7UUFDVCxJQUFJLENBQUNDLElBQUksR0FBR0w7SUFDaEI7QUFDSjtBQUNPLFNBQVNNLHdCQUF3QkMsS0FBSztJQUN6QyxJQUFJLE9BQU9BLFVBQVUsWUFBWUEsVUFBVSxRQUFRLENBQUUsV0FBVUEsS0FBQUEsR0FBUTtRQUNuRSxPQUFPO0lBQ1g7SUFDQSxPQUFPQSxNQUFNRixJQUFJLEtBQUtMO0FBQzFCO0FBQ0EsU0FBU1EsbUJBQW1CQyxNQUFNLEVBQUVDLElBQUk7SUFDcEMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLElBQUFBLEVBQU0sR0FBR0YsUUFBUSxDQUFDO0lBQ25DLE1BQU1HLFNBQVNELE9BQU8sMEJBQTBCQSxPQUFPO0lBQ3ZELE9BQU8sU0FBVUQsQ0FBQUEsVUFBVSx1QkFBdUJBLFVBQVUsT0FBTyxNQUFNLHVEQUF1REYsU0FBUyxPQUFPSTtBQUNwSjtBQUNPLE1BQU1DLDBCQUEwQkEsQ0FBQ0wsUUFBUU07SUFDNUMsSUFBSSxFQUFFSixPQUFPLEVBQUVDLElBQUFBLEVBQU0sR0FBR0csVUFBVSxLQUFLLElBQUksQ0FBQyxJQUFJQTtJQUNoRCxNQUFNQyx3QkFBd0JqQixtR0FBNEJBLENBQUNrQixRQUFRO0lBQ25FLElBQUksQ0FBQ0QsdUJBQXVCLE9BQU87SUFDbkMsSUFBSUEsc0JBQXNCRSxXQUFXLEVBQUU7UUFDbkMsT0FBTztJQUNYO0lBQ0EsSUFBSUYsc0JBQXNCRyxrQkFBa0IsRUFBRTtRQUMxQyxNQUFNLElBQUlsQixzQkFBc0JPLG1CQUFtQkMsUUFBUTtZQUN2REc7WUFDQUQsU0FBU0EsV0FBVyxPQUFPQSxVQUFVO1FBQ3pDO0lBQ0o7SUFDQSxNQUFNUyxVQUFVWixtQkFBbUJDLFFBQVE7UUFDdkNFO1FBQ0E7UUFDQTtRQUNBQyxNQUFNO0lBQ1Y7SUFDQTtJQUNBSSxzQkFBc0JLLFFBQVEsSUFBSSxPQUFPLEtBQUssSUFBSUwsc0JBQXNCSyxRQUFRLENBQUNDLElBQUksQ0FBQ04sdUJBQXVCUDtJQUM3RztJQUNBO0lBQ0FPLHNCQUFzQk8sVUFBVSxHQUFHO0lBQ25DLElBQUlQLHNCQUFzQlEsa0JBQWtCLEVBQUU7UUFDMUMsTUFBTUMsTUFBTSxJQUFJM0IscUVBQWtCQSxDQUFDc0I7UUFDbkNKLHNCQUFzQlUsdUJBQXVCLEdBQUdqQjtRQUNoRE8sc0JBQXNCVyxpQkFBaUIsR0FBR0YsSUFBSUcsS0FBSztRQUNuRCxNQUFNSDtJQUNWO0lBQ0EsT0FBTztBQUNYLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vY2xpZW50L2NvbXBvbmVudHMvc3RhdGljLWdlbmVyYXRpb24tYmFpbG91dC5qcz9kYzgzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IER5bmFtaWNTZXJ2ZXJFcnJvciB9IGZyb20gXCIuL2hvb2tzLXNlcnZlci1jb250ZXh0XCI7XG5pbXBvcnQgeyBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlIH0gZnJvbSBcIi4vc3RhdGljLWdlbmVyYXRpb24tYXN5bmMtc3RvcmFnZS5leHRlcm5hbFwiO1xuY29uc3QgTkVYVF9TVEFUSUNfR0VOX0JBSUxPVVQgPSBcIk5FWFRfU1RBVElDX0dFTl9CQUlMT1VUXCI7XG5jbGFzcyBTdGF0aWNHZW5CYWlsb3V0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoLi4uYXJncyl7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3MpO1xuICAgICAgICB0aGlzLmNvZGUgPSBORVhUX1NUQVRJQ19HRU5fQkFJTE9VVDtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaXNTdGF0aWNHZW5CYWlsb3V0RXJyb3IoZXJyb3IpIHtcbiAgICBpZiAodHlwZW9mIGVycm9yICE9PSBcIm9iamVjdFwiIHx8IGVycm9yID09PSBudWxsIHx8ICEoXCJjb2RlXCIgaW4gZXJyb3IpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGVycm9yLmNvZGUgPT09IE5FWFRfU1RBVElDX0dFTl9CQUlMT1VUO1xufVxuZnVuY3Rpb24gZm9ybWF0RXJyb3JNZXNzYWdlKHJlYXNvbiwgb3B0cykge1xuICAgIGNvbnN0IHsgZHluYW1pYywgbGluayB9ID0gb3B0cyB8fCB7fTtcbiAgICBjb25zdCBzdWZmaXggPSBsaW5rID8gXCIgU2VlIG1vcmUgaW5mbyBoZXJlOiBcIiArIGxpbmsgOiBcIlwiO1xuICAgIHJldHVybiBcIlBhZ2VcIiArIChkeW5hbWljID8gJyB3aXRoIGBkeW5hbWljID0gXCInICsgZHluYW1pYyArICdcImAnIDogXCJcIikgKyBcIiBjb3VsZG4ndCBiZSByZW5kZXJlZCBzdGF0aWNhbGx5IGJlY2F1c2UgaXQgdXNlZCBgXCIgKyByZWFzb24gKyBcImAuXCIgKyBzdWZmaXg7XG59XG5leHBvcnQgY29uc3Qgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQgPSAocmVhc29uLCBwYXJhbSk9PntcbiAgICBsZXQgeyBkeW5hbWljLCBsaW5rIH0gPSBwYXJhbSA9PT0gdm9pZCAwID8ge30gOiBwYXJhbTtcbiAgICBjb25zdCBzdGF0aWNHZW5lcmF0aW9uU3RvcmUgPSBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgaWYgKCFzdGF0aWNHZW5lcmF0aW9uU3RvcmUpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoc3RhdGljR2VuZXJhdGlvblN0b3JlLmZvcmNlU3RhdGljKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoc3RhdGljR2VuZXJhdGlvblN0b3JlLmR5bmFtaWNTaG91bGRFcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgU3RhdGljR2VuQmFpbG91dEVycm9yKGZvcm1hdEVycm9yTWVzc2FnZShyZWFzb24sIHtcbiAgICAgICAgICAgIGxpbmssXG4gICAgICAgICAgICBkeW5hbWljOiBkeW5hbWljICE9IG51bGwgPyBkeW5hbWljIDogXCJlcnJvclwiXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgY29uc3QgbWVzc2FnZSA9IGZvcm1hdEVycm9yTWVzc2FnZShyZWFzb24sIHtcbiAgICAgICAgZHluYW1pYyxcbiAgICAgICAgLy8gdGhpcyBlcnJvciBzaG91bGQgYmUgY2F1Z2h0IGJ5IE5leHQgdG8gYmFpbCBvdXQgb2Ygc3RhdGljIGdlbmVyYXRpb25cbiAgICAgICAgLy8gaW4gY2FzZSBpdCdzIHVuY2F1Z2h0LCB0aGlzIGxpbmsgcHJvdmlkZXMgc29tZSBhZGRpdGlvbmFsIGNvbnRleHQgYXMgdG8gd2h5XG4gICAgICAgIGxpbms6IFwiaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvZHluYW1pYy1zZXJ2ZXItZXJyb3JcIlxuICAgIH0pO1xuICAgIC8vIElmIHBvc3Rwb25lIGlzIGF2YWlsYWJsZSwgd2Ugc2hvdWxkIHBvc3Rwb25lIHRoZSByZW5kZXIuXG4gICAgc3RhdGljR2VuZXJhdGlvblN0b3JlLnBvc3Rwb25lID09IG51bGwgPyB2b2lkIDAgOiBzdGF0aWNHZW5lcmF0aW9uU3RvcmUucG9zdHBvbmUuY2FsbChzdGF0aWNHZW5lcmF0aW9uU3RvcmUsIHJlYXNvbik7XG4gICAgLy8gQXMgdGhpcyBpcyBhIGJhaWxvdXQsIHdlIGRvbid0IHdhbnQgdG8gcmV2YWxpZGF0ZSwgc28gc2V0IHRoZSByZXZhbGlkYXRlXG4gICAgLy8gdG8gMC5cbiAgICBzdGF0aWNHZW5lcmF0aW9uU3RvcmUucmV2YWxpZGF0ZSA9IDA7XG4gICAgaWYgKHN0YXRpY0dlbmVyYXRpb25TdG9yZS5pc1N0YXRpY0dlbmVyYXRpb24pIHtcbiAgICAgICAgY29uc3QgZXJyID0gbmV3IER5bmFtaWNTZXJ2ZXJFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvblN0b3JlLmR5bmFtaWNVc2FnZURlc2NyaXB0aW9uID0gcmVhc29uO1xuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uU3RvcmUuZHluYW1pY1VzYWdlU3RhY2sgPSBlcnIuc3RhY2s7XG4gICAgICAgIHRocm93IGVycjtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdGljLWdlbmVyYXRpb24tYmFpbG91dC5qcy5tYXAiXSwibmFtZXMiOlsiRHluYW1pY1NlcnZlckVycm9yIiwic3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSIsIk5FWFRfU1RBVElDX0dFTl9CQUlMT1VUIiwiU3RhdGljR2VuQmFpbG91dEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsImFyZ3MiLCJjb2RlIiwiaXNTdGF0aWNHZW5CYWlsb3V0RXJyb3IiLCJlcnJvciIsImZvcm1hdEVycm9yTWVzc2FnZSIsInJlYXNvbiIsIm9wdHMiLCJkeW5hbWljIiwibGluayIsInN1ZmZpeCIsInN0YXRpY0dlbmVyYXRpb25CYWlsb3V0IiwicGFyYW0iLCJzdGF0aWNHZW5lcmF0aW9uU3RvcmUiLCJnZXRTdG9yZSIsImZvcmNlU3RhdGljIiwiZHluYW1pY1Nob3VsZEVycm9yIiwibWVzc2FnZSIsInBvc3Rwb25lIiwiY2FsbCIsInJldmFsaWRhdGUiLCJpc1N0YXRpY0dlbmVyYXRpb24iLCJlcnIiLCJkeW5hbWljVXNhZ2VEZXNjcmlwdGlvbiIsImR5bmFtaWNVc2FnZVN0YWNrIiwic3RhY2siXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/client/components/static-generation-bailout.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/lib/constants.js":
/*!*****************************************************!*\
  !*** ./node_modules/next/dist/esm/lib/constants.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APP_DIR_ALIAS: () => (/* binding */ APP_DIR_ALIAS),\n/* harmony export */   CACHE_ONE_YEAR: () => (/* binding */ CACHE_ONE_YEAR),\n/* harmony export */   DOT_NEXT_ALIAS: () => (/* binding */ DOT_NEXT_ALIAS),\n/* harmony export */   ESLINT_DEFAULT_DIRS: () => (/* binding */ ESLINT_DEFAULT_DIRS),\n/* harmony export */   ESLINT_PROMPT_VALUES: () => (/* binding */ ESLINT_PROMPT_VALUES),\n/* harmony export */   GSP_NO_RETURNED_VALUE: () => (/* binding */ GSP_NO_RETURNED_VALUE),\n/* harmony export */   GSSP_COMPONENT_MEMBER_ERROR: () => (/* binding */ GSSP_COMPONENT_MEMBER_ERROR),\n/* harmony export */   GSSP_NO_RETURNED_VALUE: () => (/* binding */ GSSP_NO_RETURNED_VALUE),\n/* harmony export */   INSTRUMENTATION_HOOK_FILENAME: () => (/* binding */ INSTRUMENTATION_HOOK_FILENAME),\n/* harmony export */   MIDDLEWARE_FILENAME: () => (/* binding */ MIDDLEWARE_FILENAME),\n/* harmony export */   MIDDLEWARE_LOCATION_REGEXP: () => (/* binding */ MIDDLEWARE_LOCATION_REGEXP),\n/* harmony export */   NEXT_BODY_SUFFIX: () => (/* binding */ NEXT_BODY_SUFFIX),\n/* harmony export */   NEXT_CACHE_IMPLICIT_TAG_ID: () => (/* binding */ NEXT_CACHE_IMPLICIT_TAG_ID),\n/* harmony export */   NEXT_CACHE_REVALIDATED_TAGS_HEADER: () => (/* binding */ NEXT_CACHE_REVALIDATED_TAGS_HEADER),\n/* harmony export */   NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER: () => (/* binding */ NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER),\n/* harmony export */   NEXT_CACHE_SOFT_TAGS_HEADER: () => (/* binding */ NEXT_CACHE_SOFT_TAGS_HEADER),\n/* harmony export */   NEXT_CACHE_SOFT_TAG_MAX_LENGTH: () => (/* binding */ NEXT_CACHE_SOFT_TAG_MAX_LENGTH),\n/* harmony export */   NEXT_CACHE_TAGS_HEADER: () => (/* binding */ NEXT_CACHE_TAGS_HEADER),\n/* harmony export */   NEXT_CACHE_TAG_MAX_LENGTH: () => (/* binding */ NEXT_CACHE_TAG_MAX_LENGTH),\n/* harmony export */   NEXT_DATA_SUFFIX: () => (/* binding */ NEXT_DATA_SUFFIX),\n/* harmony export */   NEXT_META_SUFFIX: () => (/* binding */ NEXT_META_SUFFIX),\n/* harmony export */   NEXT_QUERY_PARAM_PREFIX: () => (/* binding */ NEXT_QUERY_PARAM_PREFIX),\n/* harmony export */   NON_STANDARD_NODE_ENV: () => (/* binding */ NON_STANDARD_NODE_ENV),\n/* harmony export */   PAGES_DIR_ALIAS: () => (/* binding */ PAGES_DIR_ALIAS),\n/* harmony export */   PRERENDER_REVALIDATE_HEADER: () => (/* binding */ PRERENDER_REVALIDATE_HEADER),\n/* harmony export */   PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER: () => (/* binding */ PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER),\n/* harmony export */   PUBLIC_DIR_MIDDLEWARE_CONFLICT: () => (/* binding */ PUBLIC_DIR_MIDDLEWARE_CONFLICT),\n/* harmony export */   ROOT_DIR_ALIAS: () => (/* binding */ ROOT_DIR_ALIAS),\n/* harmony export */   RSC_ACTION_CLIENT_WRAPPER_ALIAS: () => (/* binding */ RSC_ACTION_CLIENT_WRAPPER_ALIAS),\n/* harmony export */   RSC_ACTION_ENCRYPTION_ALIAS: () => (/* binding */ RSC_ACTION_ENCRYPTION_ALIAS),\n/* harmony export */   RSC_ACTION_PROXY_ALIAS: () => (/* binding */ RSC_ACTION_PROXY_ALIAS),\n/* harmony export */   RSC_ACTION_VALIDATE_ALIAS: () => (/* binding */ RSC_ACTION_VALIDATE_ALIAS),\n/* harmony export */   RSC_MOD_REF_PROXY_ALIAS: () => (/* binding */ RSC_MOD_REF_PROXY_ALIAS),\n/* harmony export */   RSC_PREFETCH_SUFFIX: () => (/* binding */ RSC_PREFETCH_SUFFIX),\n/* harmony export */   RSC_SUFFIX: () => (/* binding */ RSC_SUFFIX),\n/* harmony export */   SERVER_PROPS_EXPORT_ERROR: () => (/* binding */ SERVER_PROPS_EXPORT_ERROR),\n/* harmony export */   SERVER_PROPS_GET_INIT_PROPS_CONFLICT: () => (/* binding */ SERVER_PROPS_GET_INIT_PROPS_CONFLICT),\n/* harmony export */   SERVER_PROPS_SSG_CONFLICT: () => (/* binding */ SERVER_PROPS_SSG_CONFLICT),\n/* harmony export */   SERVER_RUNTIME: () => (/* binding */ SERVER_RUNTIME),\n/* harmony export */   SSG_FALLBACK_EXPORT_ERROR: () => (/* binding */ SSG_FALLBACK_EXPORT_ERROR),\n/* harmony export */   SSG_GET_INITIAL_PROPS_CONFLICT: () => (/* binding */ SSG_GET_INITIAL_PROPS_CONFLICT),\n/* harmony export */   STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR: () => (/* binding */ STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR),\n/* harmony export */   UNSTABLE_REVALIDATE_RENAME_ERROR: () => (/* binding */ UNSTABLE_REVALIDATE_RENAME_ERROR),\n/* harmony export */   WEBPACK_LAYERS: () => (/* binding */ WEBPACK_LAYERS),\n/* harmony export */   WEBPACK_RESOURCE_QUERIES: () => (/* binding */ WEBPACK_RESOURCE_QUERIES)\n/* harmony export */ });\nconst NEXT_QUERY_PARAM_PREFIX = \"nxtP\";\nconst PRERENDER_REVALIDATE_HEADER = \"x-prerender-revalidate\";\nconst PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER = \"x-prerender-revalidate-if-generated\";\nconst RSC_PREFETCH_SUFFIX = \".prefetch.rsc\";\nconst RSC_SUFFIX = \".rsc\";\nconst NEXT_DATA_SUFFIX = \".json\";\nconst NEXT_META_SUFFIX = \".meta\";\nconst NEXT_BODY_SUFFIX = \".body\";\nconst NEXT_CACHE_TAGS_HEADER = \"x-next-cache-tags\";\nconst NEXT_CACHE_SOFT_TAGS_HEADER = \"x-next-cache-soft-tags\";\nconst NEXT_CACHE_REVALIDATED_TAGS_HEADER = \"x-next-revalidated-tags\";\nconst NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER = \"x-next-revalidate-tag-token\";\nconst NEXT_CACHE_TAG_MAX_LENGTH = 256;\nconst NEXT_CACHE_SOFT_TAG_MAX_LENGTH = 1024;\nconst NEXT_CACHE_IMPLICIT_TAG_ID = \"_N_T_\";\n// in seconds\nconst CACHE_ONE_YEAR = 31536000;\n// Patterns to detect middleware files\nconst MIDDLEWARE_FILENAME = \"middleware\";\nconst MIDDLEWARE_LOCATION_REGEXP = `(?:src/)?${MIDDLEWARE_FILENAME}`;\n// Pattern to detect instrumentation hooks file\nconst INSTRUMENTATION_HOOK_FILENAME = \"instrumentation\";\n// Because on Windows absolute paths in the generated code can break because of numbers, eg 1 in the path,\n// we have to use a private alias\nconst PAGES_DIR_ALIAS = \"private-next-pages\";\nconst DOT_NEXT_ALIAS = \"private-dot-next\";\nconst ROOT_DIR_ALIAS = \"private-next-root-dir\";\nconst APP_DIR_ALIAS = \"private-next-app-dir\";\nconst RSC_MOD_REF_PROXY_ALIAS = \"next/dist/build/webpack/loaders/next-flight-loader/module-proxy\";\nconst RSC_ACTION_VALIDATE_ALIAS = \"private-next-rsc-action-validate\";\nconst RSC_ACTION_PROXY_ALIAS = \"private-next-rsc-server-reference\";\nconst RSC_ACTION_ENCRYPTION_ALIAS = \"private-next-rsc-action-encryption\";\nconst RSC_ACTION_CLIENT_WRAPPER_ALIAS = \"private-next-rsc-action-client-wrapper\";\nconst PUBLIC_DIR_MIDDLEWARE_CONFLICT = `You can not have a '_next' folder inside of your public folder. This conflicts with the internal '/_next' route. https://nextjs.org/docs/messages/public-next-folder-conflict`;\nconst SSG_GET_INITIAL_PROPS_CONFLICT = `You can not use getInitialProps with getStaticProps. To use SSG, please remove your getInitialProps`;\nconst SERVER_PROPS_GET_INIT_PROPS_CONFLICT = `You can not use getInitialProps with getServerSideProps. Please remove getInitialProps.`;\nconst SERVER_PROPS_SSG_CONFLICT = `You can not use getStaticProps or getStaticPaths with getServerSideProps. To use SSG, please remove getServerSideProps`;\nconst STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR = `can not have getInitialProps/getServerSideProps, https://nextjs.org/docs/messages/404-get-initial-props`;\nconst SERVER_PROPS_EXPORT_ERROR = `pages with \\`getServerSideProps\\` can not be exported. See more info here: https://nextjs.org/docs/messages/gssp-export`;\nconst GSP_NO_RETURNED_VALUE = \"Your `getStaticProps` function did not return an object. Did you forget to add a `return`?\";\nconst GSSP_NO_RETURNED_VALUE = \"Your `getServerSideProps` function did not return an object. Did you forget to add a `return`?\";\nconst UNSTABLE_REVALIDATE_RENAME_ERROR = \"The `unstable_revalidate` property is available for general use.\\n\" + \"Please use `revalidate` instead.\";\nconst GSSP_COMPONENT_MEMBER_ERROR = `can not be attached to a page's component and must be exported from the page. See more info here: https://nextjs.org/docs/messages/gssp-component-member`;\nconst NON_STANDARD_NODE_ENV = `You are using a non-standard \"NODE_ENV\" value in your environment. This creates inconsistencies in the project and is strongly advised against. Read more: https://nextjs.org/docs/messages/non-standard-node-env`;\nconst SSG_FALLBACK_EXPORT_ERROR = `Pages with \\`fallback\\` enabled in \\`getStaticPaths\\` can not be exported. See more info here: https://nextjs.org/docs/messages/ssg-fallback-true-export`;\nconst ESLINT_DEFAULT_DIRS = [\"app\", \"pages\", \"components\", \"lib\", \"src\"];\nconst ESLINT_PROMPT_VALUES = [{\n  title: \"Strict\",\n  recommended: true,\n  config: {\n    extends: \"next/core-web-vitals\"\n  }\n}, {\n  title: \"Base\",\n  config: {\n    extends: \"next\"\n  }\n}, {\n  title: \"Cancel\",\n  config: null\n}];\nconst SERVER_RUNTIME = {\n  edge: \"edge\",\n  experimentalEdge: \"experimental-edge\",\n  nodejs: \"nodejs\"\n};\n/**\n * The names of the webpack layers. These layers are the primitives for the\n * webpack chunks.\n */\nconst WEBPACK_LAYERS_NAMES = {\n  /**\n  * The layer for the shared code between the client and server bundles.\n  */\n  shared: \"shared\",\n  /**\n  * React Server Components layer (rsc).\n  */\n  reactServerComponents: \"rsc\",\n  /**\n  * Server Side Rendering layer for app (ssr).\n  */\n  serverSideRendering: \"ssr\",\n  /**\n  * The browser client bundle layer for actions.\n  */\n  actionBrowser: \"action-browser\",\n  /**\n  * The layer for the API routes.\n  */\n  api: \"api\",\n  /**\n  * The layer for the middleware code.\n  */\n  middleware: \"middleware\",\n  /**\n  * The layer for assets on the edge.\n  */\n  edgeAsset: \"edge-asset\",\n  /**\n  * The browser client bundle layer for App directory.\n  */\n  appPagesBrowser: \"app-pages-browser\",\n  /**\n  * The server bundle layer for metadata routes.\n  */\n  appMetadataRoute: \"app-metadata-route\",\n  /**\n  * The layer for the server bundle for App Route handlers.\n  */\n  appRouteHandler: \"app-route-handler\"\n};\nconst WEBPACK_LAYERS = {\n  ...WEBPACK_LAYERS_NAMES,\n  GROUP: {\n    server: [WEBPACK_LAYERS_NAMES.reactServerComponents, WEBPACK_LAYERS_NAMES.actionBrowser, WEBPACK_LAYERS_NAMES.appMetadataRoute, WEBPACK_LAYERS_NAMES.appRouteHandler],\n    nonClientServerTarget: [\n    // plus middleware and pages api\n    WEBPACK_LAYERS_NAMES.middleware, WEBPACK_LAYERS_NAMES.api],\n    app: [WEBPACK_LAYERS_NAMES.reactServerComponents, WEBPACK_LAYERS_NAMES.actionBrowser, WEBPACK_LAYERS_NAMES.appMetadataRoute, WEBPACK_LAYERS_NAMES.appRouteHandler, WEBPACK_LAYERS_NAMES.serverSideRendering, WEBPACK_LAYERS_NAMES.appPagesBrowser, WEBPACK_LAYERS_NAMES.shared]\n  }\n};\nconst WEBPACK_RESOURCE_QUERIES = {\n  edgeSSREntry: \"__next_edge_ssr_entry__\",\n  metadata: \"__next_metadata__\",\n  metadataRoute: \"__next_metadata_route__\",\n  metadataImageMeta: \"__next_metadata_image_meta__\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/lib/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/lib/picocolors.js":
/*!******************************************************!*\
  !*** ./node_modules/next/dist/esm/lib/picocolors.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bgBlack: () => (/* binding */ bgBlack),\n/* harmony export */   bgBlue: () => (/* binding */ bgBlue),\n/* harmony export */   bgCyan: () => (/* binding */ bgCyan),\n/* harmony export */   bgGreen: () => (/* binding */ bgGreen),\n/* harmony export */   bgMagenta: () => (/* binding */ bgMagenta),\n/* harmony export */   bgRed: () => (/* binding */ bgRed),\n/* harmony export */   bgWhite: () => (/* binding */ bgWhite),\n/* harmony export */   bgYellow: () => (/* binding */ bgYellow),\n/* harmony export */   black: () => (/* binding */ black),\n/* harmony export */   blue: () => (/* binding */ blue),\n/* harmony export */   bold: () => (/* binding */ bold),\n/* harmony export */   cyan: () => (/* binding */ cyan),\n/* harmony export */   dim: () => (/* binding */ dim),\n/* harmony export */   gray: () => (/* binding */ gray),\n/* harmony export */   green: () => (/* binding */ green),\n/* harmony export */   hidden: () => (/* binding */ hidden),\n/* harmony export */   inverse: () => (/* binding */ inverse),\n/* harmony export */   italic: () => (/* binding */ italic),\n/* harmony export */   magenta: () => (/* binding */ magenta),\n/* harmony export */   purple: () => (/* binding */ purple),\n/* harmony export */   red: () => (/* binding */ red),\n/* harmony export */   reset: () => (/* binding */ reset),\n/* harmony export */   strikethrough: () => (/* binding */ strikethrough),\n/* harmony export */   underline: () => (/* binding */ underline),\n/* harmony export */   white: () => (/* binding */ white),\n/* harmony export */   yellow: () => (/* binding */ yellow)\n/* harmony export */ });\n// ISC License\n// Copyright (c) 2021 Alexey Raspopov, Kostiantyn Denysov, Anton Verinov\n// Permission to use, copy, modify, and/or distribute this software for any\n// purpose with or without fee is hereby granted, provided that the above\n// copyright notice and this permission notice appear in all copies.\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n//\n// https://github.com/alexeyraspopov/picocolors/blob/b6261487e7b81aaab2440e397a356732cad9e342/picocolors.js#L1\nvar _globalThis;\nconst {\n  env,\n  stdout\n} = ((_globalThis = globalThis) == null ? void 0 : _globalThis.process) ?? {};\nconst enabled = env && !env.NO_COLOR && (env.FORCE_COLOR || (stdout == null ? void 0 : stdout.isTTY) && !env.CI && env.TERM !== \"dumb\");\nconst replaceClose = (str, close, replace, index) => {\n  const start = str.substring(0, index) + replace;\n  const end = str.substring(index + close.length);\n  const nextIndex = end.indexOf(close);\n  return ~nextIndex ? start + replaceClose(end, close, replace, nextIndex) : start + end;\n};\nconst formatter = (open, close, replace = open) => {\n  if (!enabled) return String;\n  return input => {\n    const string = \"\" + input;\n    const index = string.indexOf(close, open.length);\n    return ~index ? open + replaceClose(string, close, replace, index) + close : open + string + close;\n  };\n};\nconst reset = enabled ? s => `\\x1b[0m${s}\\x1b[0m` : String;\nconst bold = formatter(\"\\x1b[1m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[1m\");\nconst dim = formatter(\"\\x1b[2m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[2m\");\nconst italic = formatter(\"\\x1b[3m\", \"\\x1b[23m\");\nconst underline = formatter(\"\\x1b[4m\", \"\\x1b[24m\");\nconst inverse = formatter(\"\\x1b[7m\", \"\\x1b[27m\");\nconst hidden = formatter(\"\\x1b[8m\", \"\\x1b[28m\");\nconst strikethrough = formatter(\"\\x1b[9m\", \"\\x1b[29m\");\nconst black = formatter(\"\\x1b[30m\", \"\\x1b[39m\");\nconst red = formatter(\"\\x1b[31m\", \"\\x1b[39m\");\nconst green = formatter(\"\\x1b[32m\", \"\\x1b[39m\");\nconst yellow = formatter(\"\\x1b[33m\", \"\\x1b[39m\");\nconst blue = formatter(\"\\x1b[34m\", \"\\x1b[39m\");\nconst magenta = formatter(\"\\x1b[35m\", \"\\x1b[39m\");\nconst purple = formatter(\"\\x1b[38;2;173;127;168m\", \"\\x1b[39m\");\nconst cyan = formatter(\"\\x1b[36m\", \"\\x1b[39m\");\nconst white = formatter(\"\\x1b[37m\", \"\\x1b[39m\");\nconst gray = formatter(\"\\x1b[90m\", \"\\x1b[39m\");\nconst bgBlack = formatter(\"\\x1b[40m\", \"\\x1b[49m\");\nconst bgRed = formatter(\"\\x1b[41m\", \"\\x1b[49m\");\nconst bgGreen = formatter(\"\\x1b[42m\", \"\\x1b[49m\");\nconst bgYellow = formatter(\"\\x1b[43m\", \"\\x1b[49m\");\nconst bgBlue = formatter(\"\\x1b[44m\", \"\\x1b[49m\");\nconst bgMagenta = formatter(\"\\x1b[45m\", \"\\x1b[49m\");\nconst bgCyan = formatter(\"\\x1b[46m\", \"\\x1b[49m\");\nconst bgWhite = formatter(\"\\x1b[47m\", \"\\x1b[49m\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/lib/picocolors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/api-utils/get-cookie-parser.js":
/*!**************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/api-utils/get-cookie-parser.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCookieParser: () => (/* binding */ getCookieParser)\n/* harmony export */ });\n/**\n * Parse cookies from the `headers` of request\n * @param req request object\n */function getCookieParser(headers) {\n  return function parseCookie() {\n    const {\n      cookie\n    } = headers;\n    if (!cookie) {\n      return {};\n    }\n    const {\n      parse: parseCookieFn\n    } = __webpack_require__(/*! next/dist/compiled/cookie */ \"(rsc)/./node_modules/next/dist/compiled/cookie/index.js\");\n    return parseCookieFn(Array.isArray(cookie) ? cookie.join(\"; \") : cookie);\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvYXBpLXV0aWxzL2dldC1jb29raWUtcGFyc2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQSxHQUFXLFNBQVNBLGVBQWVBLENBQUNDLE9BQU8sRUFBRTtFQUN6QyxPQUFPLFNBQVNDLFdBQVdBLENBQUEsRUFBRztJQUMxQixNQUFNO01BQUVDO0lBQU8sQ0FBQyxHQUFHRixPQUFPO0lBQzFCLElBQUksQ0FBQ0UsTUFBTSxFQUFFO01BQ1QsT0FBTyxDQUFDLENBQUM7SUFDYjtJQUNBLE1BQU07TUFBRUMsS0FBSyxFQUFFQztJQUFjLENBQUMsR0FBR0MsbUJBQU8sQ0FBQywwRkFBMkIsQ0FBQztJQUNyRSxPQUFPRCxhQUFhLENBQUNFLEtBQUssQ0FBQ0MsT0FBTyxDQUFDTCxNQUFNLENBQUMsR0FBR0EsTUFBTSxDQUFDTSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUdOLE1BQU0sQ0FBQztFQUM1RSxDQUFDO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2VydmVyL2FwaS11dGlscy9nZXQtY29va2llLXBhcnNlci5qcz8wYzEwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUGFyc2UgY29va2llcyBmcm9tIHRoZSBgaGVhZGVyc2Agb2YgcmVxdWVzdFxuICogQHBhcmFtIHJlcSByZXF1ZXN0IG9iamVjdFxuICovIGV4cG9ydCBmdW5jdGlvbiBnZXRDb29raWVQYXJzZXIoaGVhZGVycykge1xuICAgIHJldHVybiBmdW5jdGlvbiBwYXJzZUNvb2tpZSgpIHtcbiAgICAgICAgY29uc3QgeyBjb29raWUgfSA9IGhlYWRlcnM7XG4gICAgICAgIGlmICghY29va2llKSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBwYXJzZTogcGFyc2VDb29raWVGbiB9ID0gcmVxdWlyZShcIm5leHQvZGlzdC9jb21waWxlZC9jb29raWVcIik7XG4gICAgICAgIHJldHVybiBwYXJzZUNvb2tpZUZuKEFycmF5LmlzQXJyYXkoY29va2llKSA/IGNvb2tpZS5qb2luKFwiOyBcIikgOiBjb29raWUpO1xuICAgIH07XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldC1jb29raWUtcGFyc2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRDb29raWVQYXJzZXIiLCJoZWFkZXJzIiwicGFyc2VDb29raWUiLCJjb29raWUiLCJwYXJzZSIsInBhcnNlQ29va2llRm4iLCJyZXF1aXJlIiwiQXJyYXkiLCJpc0FycmF5Iiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/api-utils/get-cookie-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/api-utils/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/api-utils/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiError: () => (/* binding */ ApiError),\n/* harmony export */   COOKIE_NAME_PRERENDER_BYPASS: () => (/* binding */ COOKIE_NAME_PRERENDER_BYPASS),\n/* harmony export */   COOKIE_NAME_PRERENDER_DATA: () => (/* binding */ COOKIE_NAME_PRERENDER_DATA),\n/* harmony export */   RESPONSE_LIMIT_DEFAULT: () => (/* binding */ RESPONSE_LIMIT_DEFAULT),\n/* harmony export */   SYMBOL_CLEARED_COOKIES: () => (/* binding */ SYMBOL_CLEARED_COOKIES),\n/* harmony export */   SYMBOL_PREVIEW_DATA: () => (/* binding */ SYMBOL_PREVIEW_DATA),\n/* harmony export */   checkIsOnDemandRevalidate: () => (/* binding */ checkIsOnDemandRevalidate),\n/* harmony export */   clearPreviewData: () => (/* binding */ clearPreviewData),\n/* harmony export */   redirect: () => (/* binding */ redirect),\n/* harmony export */   sendError: () => (/* binding */ sendError),\n/* harmony export */   sendStatusCode: () => (/* binding */ sendStatusCode),\n/* harmony export */   setLazyProp: () => (/* binding */ setLazyProp)\n/* harmony export */ });\n/* harmony import */ var _web_spec_extension_adapters_headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../web/spec-extension/adapters/headers */ \"(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/adapters/headers.js\");\n/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/constants */ \"(rsc)/./node_modules/next/dist/esm/lib/constants.js\");\n\n\n/**\n *\n * @param res response object\n * @param statusCode `HTTP` status code of response\n */\nfunction sendStatusCode(res, statusCode) {\n  res.statusCode = statusCode;\n  return res;\n}\n/**\n *\n * @param res response object\n * @param [statusOrUrl] `HTTP` status code of redirect\n * @param url URL of redirect\n */\nfunction redirect(res, statusOrUrl, url) {\n  if (typeof statusOrUrl === \"string\") {\n    url = statusOrUrl;\n    statusOrUrl = 307;\n  }\n  if (typeof statusOrUrl !== \"number\" || typeof url !== \"string\") {\n    throw new Error(`Invalid redirect arguments. Please use a single argument URL, e.g. res.redirect('/destination') or use a status code and URL, e.g. res.redirect(307, '/destination').`);\n  }\n  res.writeHead(statusOrUrl, {\n    Location: url\n  });\n  res.write(url);\n  res.end();\n  return res;\n}\nfunction checkIsOnDemandRevalidate(req, previewProps) {\n  const headers = _web_spec_extension_adapters_headers__WEBPACK_IMPORTED_MODULE_0__.HeadersAdapter.from(req.headers);\n  const previewModeId = headers.get(_lib_constants__WEBPACK_IMPORTED_MODULE_1__.PRERENDER_REVALIDATE_HEADER);\n  const isOnDemandRevalidate = previewModeId === previewProps.previewModeId;\n  const revalidateOnlyGenerated = headers.has(_lib_constants__WEBPACK_IMPORTED_MODULE_1__.PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER);\n  return {\n    isOnDemandRevalidate,\n    revalidateOnlyGenerated\n  };\n}\nconst COOKIE_NAME_PRERENDER_BYPASS = `__prerender_bypass`;\nconst COOKIE_NAME_PRERENDER_DATA = `__next_preview_data`;\nconst RESPONSE_LIMIT_DEFAULT = 4 * 1024 * 1024;\nconst SYMBOL_PREVIEW_DATA = Symbol(COOKIE_NAME_PRERENDER_DATA);\nconst SYMBOL_CLEARED_COOKIES = Symbol(COOKIE_NAME_PRERENDER_BYPASS);\nfunction clearPreviewData(res, options = {}) {\n  if (SYMBOL_CLEARED_COOKIES in res) {\n    return res;\n  }\n  const {\n    serialize\n  } = __webpack_require__(/*! next/dist/compiled/cookie */ \"(rsc)/./node_modules/next/dist/compiled/cookie/index.js\");\n  const previous = res.getHeader(\"Set-Cookie\");\n  res.setHeader(`Set-Cookie`, [...(typeof previous === \"string\" ? [previous] : Array.isArray(previous) ? previous : []), serialize(COOKIE_NAME_PRERENDER_BYPASS, \"\", {\n    // To delete a cookie, set `expires` to a date in the past:\n    // https://tools.ietf.org/html/rfc6265#section-4.1.1\n    // `Max-Age: 0` is not valid, thus ignored, and the cookie is persisted.\n    expires: new Date(0),\n    httpOnly: true,\n    sameSite:  false ? 0 : \"lax\",\n    secure: false,\n    path: \"/\",\n    ...(options.path !== undefined ? {\n      path: options.path\n    } : undefined)\n  }), serialize(COOKIE_NAME_PRERENDER_DATA, \"\", {\n    // To delete a cookie, set `expires` to a date in the past:\n    // https://tools.ietf.org/html/rfc6265#section-4.1.1\n    // `Max-Age: 0` is not valid, thus ignored, and the cookie is persisted.\n    expires: new Date(0),\n    httpOnly: true,\n    sameSite:  false ? 0 : \"lax\",\n    secure: false,\n    path: \"/\",\n    ...(options.path !== undefined ? {\n      path: options.path\n    } : undefined)\n  })]);\n  Object.defineProperty(res, SYMBOL_CLEARED_COOKIES, {\n    value: true,\n    enumerable: false\n  });\n  return res;\n}\n/**\n * Custom error class\n */\nclass ApiError extends Error {\n  constructor(statusCode, message) {\n    super(message);\n    this.statusCode = statusCode;\n  }\n}\n/**\n * Sends error in `response`\n * @param res response object\n * @param statusCode of response\n * @param message of response\n */\nfunction sendError(res, statusCode, message) {\n  res.statusCode = statusCode;\n  res.statusMessage = message;\n  res.end(message);\n}\n/**\n * Execute getter function only if its needed\n * @param LazyProps `req` and `params` for lazyProp\n * @param prop name of property\n * @param getter function to get data\n */\nfunction setLazyProp({\n  req\n}, prop, getter) {\n  const opts = {\n    configurable: true,\n    enumerable: true\n  };\n  const optsReset = {\n    ...opts,\n    writable: true\n  };\n  Object.defineProperty(req, prop, {\n    ...opts,\n    get: () => {\n      const value = getter();\n      // we set the property on the object to avoid recalculating it\n      Object.defineProperty(req, prop, {\n        ...optsReset,\n        value\n      });\n      return value;\n    },\n    set: value => {\n      Object.defineProperty(req, prop, {\n        ...optsReset,\n        value\n      });\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/api-utils/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/async-storage/draft-mode-provider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/async-storage/draft-mode-provider.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DraftModeProvider: () => (/* binding */ DraftModeProvider)\n/* harmony export */ });\n/* harmony import */ var _api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api-utils */ \"(rsc)/./node_modules/next/dist/esm/server/api-utils/index.js\");\n\nclass DraftModeProvider {\n  constructor(previewProps, req, cookies, mutableCookies) {\n    var _cookies_get;\n    // The logic for draftMode() is very similar to tryGetPreviewData()\n    // but Draft Mode does not have any data associated with it.\n    const isOnDemandRevalidate = previewProps && (0,_api_utils__WEBPACK_IMPORTED_MODULE_0__.checkIsOnDemandRevalidate)(req, previewProps).isOnDemandRevalidate;\n    const cookieValue = (_cookies_get = cookies.get(_api_utils__WEBPACK_IMPORTED_MODULE_0__.COOKIE_NAME_PRERENDER_BYPASS)) == null ? void 0 : _cookies_get.value;\n    this.isEnabled = Boolean(!isOnDemandRevalidate && cookieValue && previewProps && cookieValue === previewProps.previewModeId);\n    this._previewModeId = previewProps == null ? void 0 : previewProps.previewModeId;\n    this._mutableCookies = mutableCookies;\n  }\n  enable() {\n    if (!this._previewModeId) {\n      throw new Error(\"Invariant: previewProps missing previewModeId this should never happen\");\n    }\n    this._mutableCookies.set({\n      name: _api_utils__WEBPACK_IMPORTED_MODULE_0__.COOKIE_NAME_PRERENDER_BYPASS,\n      value: this._previewModeId,\n      httpOnly: true,\n      sameSite:  false ? 0 : \"lax\",\n      secure: false,\n      path: \"/\"\n    });\n  }\n  disable() {\n    // To delete a cookie, set `expires` to a date in the past:\n    // https://tools.ietf.org/html/rfc6265#section-4.1.1\n    // `Max-Age: 0` is not valid, thus ignored, and the cookie is persisted.\n    this._mutableCookies.set({\n      name: _api_utils__WEBPACK_IMPORTED_MODULE_0__.COOKIE_NAME_PRERENDER_BYPASS,\n      value: \"\",\n      httpOnly: true,\n      sameSite:  false ? 0 : \"lax\",\n      secure: false,\n      path: \"/\",\n      expires: new Date(0)\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvYXN5bmMtc3RvcmFnZS9kcmFmdC1tb2RlLXByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVGO0FBQ2hGLE1BQU1FLGlCQUFpQixDQUFDO0VBQzNCQyxXQUFXQSxDQUFDQyxZQUFZLEVBQUVDLEdBQUcsRUFBRUMsT0FBTyxFQUFFQyxjQUFjLEVBQUM7SUFDbkQsSUFBSUMsWUFBWTtJQUNoQjtJQUNBO0lBQ0EsTUFBTUMsb0JBQW9CLEdBQUdMLFlBQVksSUFBSUgscUVBQXlCLENBQUNJLEdBQUcsRUFBRUQsWUFBWSxDQUFDLENBQUNLLG9CQUFvQjtJQUM5RyxNQUFNQyxXQUFXLEdBQUcsQ0FBQ0YsWUFBWSxHQUFHRixPQUFPLENBQUNLLEdBQUcsQ0FBQ1gsb0VBQTRCLENBQUMsS0FBSyxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUdRLFlBQVksQ0FBQ0ksS0FBSztJQUNwSCxJQUFJLENBQUNDLFNBQVMsR0FBR0MsT0FBTyxDQUFDLENBQUNMLG9CQUFvQixJQUFJQyxXQUFXLElBQUlOLFlBQVksSUFBSU0sV0FBVyxLQUFLTixZQUFZLENBQUNXLGFBQWEsQ0FBQztJQUM1SCxJQUFJLENBQUNDLGNBQWMsR0FBR1osWUFBWSxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsR0FBR0EsWUFBWSxDQUFDVyxhQUFhO0lBQ2hGLElBQUksQ0FBQ0UsZUFBZSxHQUFHVixjQUFjO0VBQ3pDO0VBQ0FXLE1BQU1BLENBQUEsRUFBRztJQUNMLElBQUksQ0FBQyxJQUFJLENBQUNGLGNBQWMsRUFBRTtNQUN0QixNQUFNLElBQUlHLEtBQUssQ0FBQyx3RUFBd0UsQ0FBQztJQUM3RjtJQUNBLElBQUksQ0FBQ0YsZUFBZSxDQUFDRyxHQUFHLENBQUM7TUFDckJDLElBQUksRUFBRXJCLG9FQUE0QjtNQUNsQ1ksS0FBSyxFQUFFLElBQUksQ0FBQ0ksY0FBYztNQUMxQk0sUUFBUSxFQUFFLElBQUk7TUFDZEMsUUFBUSxFQUFFLFNBQXlDLENBQU0sR0FBRyxLQUFLO01BQ2pFQyxNQUFNLE9BQXdDO01BQzlDQyxJQUFJLEVBQUU7SUFDVixDQUFDLENBQUM7RUFDTjtFQUNBQyxPQUFPQSxDQUFBLEVBQUc7SUFDTjtJQUNBO0lBQ0E7SUFDQSxJQUFJLENBQUNULGVBQWUsQ0FBQ0csR0FBRyxDQUFDO01BQ3JCQyxJQUFJLEVBQUVyQixvRUFBNEI7TUFDbENZLEtBQUssRUFBRSxFQUFFO01BQ1RVLFFBQVEsRUFBRSxJQUFJO01BQ2RDLFFBQVEsRUFBRSxTQUF5QyxDQUFNLEdBQUcsS0FBSztNQUNqRUMsTUFBTSxPQUF3QztNQUM5Q0MsSUFBSSxFQUFFLEdBQUc7TUFDVEUsT0FBTyxFQUFFLElBQUlDLElBQUksQ0FBQyxDQUFDO0lBQ3ZCLENBQUMsQ0FBQztFQUNOO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2VydmVyL2FzeW5jLXN0b3JhZ2UvZHJhZnQtbW9kZS1wcm92aWRlci5qcz84N2UwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENPT0tJRV9OQU1FX1BSRVJFTkRFUl9CWVBBU1MsIGNoZWNrSXNPbkRlbWFuZFJldmFsaWRhdGUgfSBmcm9tIFwiLi4vYXBpLXV0aWxzXCI7XG5leHBvcnQgY2xhc3MgRHJhZnRNb2RlUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKHByZXZpZXdQcm9wcywgcmVxLCBjb29raWVzLCBtdXRhYmxlQ29va2llcyl7XG4gICAgICAgIHZhciBfY29va2llc19nZXQ7XG4gICAgICAgIC8vIFRoZSBsb2dpYyBmb3IgZHJhZnRNb2RlKCkgaXMgdmVyeSBzaW1pbGFyIHRvIHRyeUdldFByZXZpZXdEYXRhKClcbiAgICAgICAgLy8gYnV0IERyYWZ0IE1vZGUgZG9lcyBub3QgaGF2ZSBhbnkgZGF0YSBhc3NvY2lhdGVkIHdpdGggaXQuXG4gICAgICAgIGNvbnN0IGlzT25EZW1hbmRSZXZhbGlkYXRlID0gcHJldmlld1Byb3BzICYmIGNoZWNrSXNPbkRlbWFuZFJldmFsaWRhdGUocmVxLCBwcmV2aWV3UHJvcHMpLmlzT25EZW1hbmRSZXZhbGlkYXRlO1xuICAgICAgICBjb25zdCBjb29raWVWYWx1ZSA9IChfY29va2llc19nZXQgPSBjb29raWVzLmdldChDT09LSUVfTkFNRV9QUkVSRU5ERVJfQllQQVNTKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jb29raWVzX2dldC52YWx1ZTtcbiAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSBCb29sZWFuKCFpc09uRGVtYW5kUmV2YWxpZGF0ZSAmJiBjb29raWVWYWx1ZSAmJiBwcmV2aWV3UHJvcHMgJiYgY29va2llVmFsdWUgPT09IHByZXZpZXdQcm9wcy5wcmV2aWV3TW9kZUlkKTtcbiAgICAgICAgdGhpcy5fcHJldmlld01vZGVJZCA9IHByZXZpZXdQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogcHJldmlld1Byb3BzLnByZXZpZXdNb2RlSWQ7XG4gICAgICAgIHRoaXMuX211dGFibGVDb29raWVzID0gbXV0YWJsZUNvb2tpZXM7XG4gICAgfVxuICAgIGVuYWJsZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9wcmV2aWV3TW9kZUlkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhcmlhbnQ6IHByZXZpZXdQcm9wcyBtaXNzaW5nIHByZXZpZXdNb2RlSWQgdGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX211dGFibGVDb29raWVzLnNldCh7XG4gICAgICAgICAgICBuYW1lOiBDT09LSUVfTkFNRV9QUkVSRU5ERVJfQllQQVNTLFxuICAgICAgICAgICAgdmFsdWU6IHRoaXMuX3ByZXZpZXdNb2RlSWQsXG4gICAgICAgICAgICBodHRwT25seTogdHJ1ZSxcbiAgICAgICAgICAgIHNhbWVTaXRlOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJkZXZlbG9wbWVudFwiID8gXCJub25lXCIgOiBcImxheFwiLFxuICAgICAgICAgICAgc2VjdXJlOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJkZXZlbG9wbWVudFwiLFxuICAgICAgICAgICAgcGF0aDogXCIvXCJcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGRpc2FibGUoKSB7XG4gICAgICAgIC8vIFRvIGRlbGV0ZSBhIGNvb2tpZSwgc2V0IGBleHBpcmVzYCB0byBhIGRhdGUgaW4gdGhlIHBhc3Q6XG4gICAgICAgIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2MjY1I3NlY3Rpb24tNC4xLjFcbiAgICAgICAgLy8gYE1heC1BZ2U6IDBgIGlzIG5vdCB2YWxpZCwgdGh1cyBpZ25vcmVkLCBhbmQgdGhlIGNvb2tpZSBpcyBwZXJzaXN0ZWQuXG4gICAgICAgIHRoaXMuX211dGFibGVDb29raWVzLnNldCh7XG4gICAgICAgICAgICBuYW1lOiBDT09LSUVfTkFNRV9QUkVSRU5ERVJfQllQQVNTLFxuICAgICAgICAgICAgdmFsdWU6IFwiXCIsXG4gICAgICAgICAgICBodHRwT25seTogdHJ1ZSxcbiAgICAgICAgICAgIHNhbWVTaXRlOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJkZXZlbG9wbWVudFwiID8gXCJub25lXCIgOiBcImxheFwiLFxuICAgICAgICAgICAgc2VjdXJlOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJkZXZlbG9wbWVudFwiLFxuICAgICAgICAgICAgcGF0aDogXCIvXCIsXG4gICAgICAgICAgICBleHBpcmVzOiBuZXcgRGF0ZSgwKVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRyYWZ0LW1vZGUtcHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbIkNPT0tJRV9OQU1FX1BSRVJFTkRFUl9CWVBBU1MiLCJjaGVja0lzT25EZW1hbmRSZXZhbGlkYXRlIiwiRHJhZnRNb2RlUHJvdmlkZXIiLCJjb25zdHJ1Y3RvciIsInByZXZpZXdQcm9wcyIsInJlcSIsImNvb2tpZXMiLCJtdXRhYmxlQ29va2llcyIsIl9jb29raWVzX2dldCIsImlzT25EZW1hbmRSZXZhbGlkYXRlIiwiY29va2llVmFsdWUiLCJnZXQiLCJ2YWx1ZSIsImlzRW5hYmxlZCIsIkJvb2xlYW4iLCJwcmV2aWV3TW9kZUlkIiwiX3ByZXZpZXdNb2RlSWQiLCJfbXV0YWJsZUNvb2tpZXMiLCJlbmFibGUiLCJFcnJvciIsInNldCIsIm5hbWUiLCJodHRwT25seSIsInNhbWVTaXRlIiwic2VjdXJlIiwicGF0aCIsImRpc2FibGUiLCJleHBpcmVzIiwiRGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/async-storage/draft-mode-provider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/async-storage/request-async-storage-wrapper.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/async-storage/request-async-storage-wrapper.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RequestAsyncStorageWrapper: () => (/* binding */ RequestAsyncStorageWrapper)\n/* harmony export */ });\n/* harmony import */ var _client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../client/components/app-router-headers */ \"(rsc)/./node_modules/next/dist/esm/client/components/app-router-headers.js\");\n/* harmony import */ var _web_spec_extension_adapters_headers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../web/spec-extension/adapters/headers */ \"(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/adapters/headers.js\");\n/* harmony import */ var _web_spec_extension_adapters_request_cookies__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../web/spec-extension/adapters/request-cookies */ \"(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/adapters/request-cookies.js\");\n/* harmony import */ var _web_spec_extension_cookies__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../web/spec-extension/cookies */ \"(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/cookies.js\");\n/* harmony import */ var _draft_mode_provider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./draft-mode-provider */ \"(rsc)/./node_modules/next/dist/esm/server/async-storage/draft-mode-provider.js\");\n\n\n\n\n\nfunction getHeaders(headers) {\n  const cleaned = _web_spec_extension_adapters_headers__WEBPACK_IMPORTED_MODULE_1__.HeadersAdapter.from(headers);\n  for (const param of _client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_0__.FLIGHT_PARAMETERS) {\n    cleaned.delete(param.toString().toLowerCase());\n  }\n  return _web_spec_extension_adapters_headers__WEBPACK_IMPORTED_MODULE_1__.HeadersAdapter.seal(cleaned);\n}\nfunction getCookies(headers) {\n  const cookies = new _web_spec_extension_cookies__WEBPACK_IMPORTED_MODULE_3__.RequestCookies(_web_spec_extension_adapters_headers__WEBPACK_IMPORTED_MODULE_1__.HeadersAdapter.from(headers));\n  return _web_spec_extension_adapters_request_cookies__WEBPACK_IMPORTED_MODULE_2__.RequestCookiesAdapter.seal(cookies);\n}\nfunction getMutableCookies(headers, onUpdateCookies) {\n  const cookies = new _web_spec_extension_cookies__WEBPACK_IMPORTED_MODULE_3__.RequestCookies(_web_spec_extension_adapters_headers__WEBPACK_IMPORTED_MODULE_1__.HeadersAdapter.from(headers));\n  return _web_spec_extension_adapters_request_cookies__WEBPACK_IMPORTED_MODULE_2__.MutableRequestCookiesAdapter.wrap(cookies, onUpdateCookies);\n}\nconst RequestAsyncStorageWrapper = {\n  /**\n  * Wrap the callback with the given store so it can access the underlying\n  * store using hooks.\n  *\n  * @param storage underlying storage object returned by the module\n  * @param context context to seed the store\n  * @param callback function to call within the scope of the context\n  * @returns the result returned by the callback\n  */\n  wrap(storage, {\n    req,\n    res,\n    renderOpts\n  }, callback) {\n    let previewProps = undefined;\n    if (renderOpts && \"previewProps\" in renderOpts) {\n      // TODO: investigate why previewProps isn't on RenderOpts\n      previewProps = renderOpts.previewProps;\n    }\n    function defaultOnUpdateCookies(cookies) {\n      if (res) {\n        res.setHeader(\"Set-Cookie\", cookies);\n      }\n    }\n    const cache = {};\n    const store = {\n      get headers() {\n        if (!cache.headers) {\n          // Seal the headers object that'll freeze out any methods that could\n          // mutate the underlying data.\n          cache.headers = getHeaders(req.headers);\n        }\n        return cache.headers;\n      },\n      get cookies() {\n        if (!cache.cookies) {\n          // Seal the cookies object that'll freeze out any methods that could\n          // mutate the underlying data.\n          cache.cookies = getCookies(req.headers);\n        }\n        return cache.cookies;\n      },\n      get mutableCookies() {\n        if (!cache.mutableCookies) {\n          cache.mutableCookies = getMutableCookies(req.headers, (renderOpts == null ? void 0 : renderOpts.onUpdateCookies) || (res ? defaultOnUpdateCookies : undefined));\n        }\n        return cache.mutableCookies;\n      },\n      get draftMode() {\n        if (!cache.draftMode) {\n          cache.draftMode = new _draft_mode_provider__WEBPACK_IMPORTED_MODULE_4__.DraftModeProvider(previewProps, req, this.cookies, this.mutableCookies);\n        }\n        return cache.draftMode;\n      }\n    };\n    return storage.run(store, callback, store);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/async-storage/request-async-storage-wrapper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/async-storage/static-generation-async-storage-wrapper.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/async-storage/static-generation-async-storage-wrapper.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StaticGenerationAsyncStorageWrapper: () => (/* binding */ StaticGenerationAsyncStorageWrapper)\n/* harmony export */ });\nconst StaticGenerationAsyncStorageWrapper = {\n  wrap(storage, {\n    urlPathname,\n    renderOpts,\n    postpone\n  }, callback) {\n    /**\n    * Rules of Static & Dynamic HTML:\n    *\n    *    1.) We must generate static HTML unless the caller explicitly opts\n    *        in to dynamic HTML support.\n    *\n    *    2.) If dynamic HTML support is requested, we must honor that request\n    *        or throw an error. It is the sole responsibility of the caller to\n    *        ensure they aren't e.g. requesting dynamic HTML for an AMP page.\n    *\n    *    3.) If the request is in draft mode, we must generate dynamic HTML.\n    *\n    *    4.) If the request is a server action, we must generate dynamic HTML.\n    *\n    * These rules help ensure that other existing features like request caching,\n    * coalescing, and ISR continue working as intended.\n    */\n    const isStaticGeneration = !renderOpts.supportsDynamicHTML && !renderOpts.isDraftMode && !renderOpts.isServerAction;\n    const store = {\n      isStaticGeneration,\n      urlPathname,\n      pagePath: renderOpts.originalPathname,\n      incrementalCache:\n      // we fallback to a global incremental cache for edge-runtime locally\n      // so that it can access the fs cache without mocks\n      renderOpts.incrementalCache || globalThis.__incrementalCache,\n      isRevalidate: renderOpts.isRevalidate,\n      isPrerendering: renderOpts.nextExport,\n      fetchCache: renderOpts.fetchCache,\n      isOnDemandRevalidate: renderOpts.isOnDemandRevalidate,\n      isDraftMode: renderOpts.isDraftMode,\n      postpone:\n      // If we aren't performing a static generation or we aren't using PPR then\n      // we don't need to postpone.\n      isStaticGeneration && renderOpts.experimental.ppr && postpone ? reason => {\n        // Keep track of if the postpone API has been called.\n        store.postponeWasTriggered = true;\n        return postpone(`This page needs to bail out of prerendering at this point because it used ${reason}. ` + `React throws this special object to indicate where. It should not be caught by ` + `your own try/catch. Learn more: https://nextjs.org/docs/messages/ppr-caught-error`);\n      } : undefined\n    };\n    // TODO: remove this when we resolve accessing the store outside the execution context\n    renderOpts.store = store;\n    return storage.run(store, callback, store);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvYXN5bmMtc3RvcmFnZS9zdGF0aWMtZ2VuZXJhdGlvbi1hc3luYy1zdG9yYWdlLXdyYXBwZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLG1DQUFtQyxHQUFHO0VBQy9DQyxJQUFJQSxDQUFFQyxPQUFPLEVBQUU7SUFBRUMsV0FBVztJQUFFQyxVQUFVO0lBQUVDO0VBQVMsQ0FBQyxFQUFFQyxRQUFRLEVBQUU7SUFDNUQ7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtJQUFRLE1BQU1DLGtCQUFrQixHQUFHLENBQUNILFVBQVUsQ0FBQ0ksbUJBQW1CLElBQUksQ0FBQ0osVUFBVSxDQUFDSyxXQUFXLElBQUksQ0FBQ0wsVUFBVSxDQUFDTSxjQUFjO0lBQ25ILE1BQU1DLEtBQUssR0FBRztNQUNWSixrQkFBa0I7TUFDbEJKLFdBQVc7TUFDWFMsUUFBUSxFQUFFUixVQUFVLENBQUNTLGdCQUFnQjtNQUNyQ0MsZ0JBQWdCO01BQUU7TUFDbEI7TUFDQVYsVUFBVSxDQUFDVSxnQkFBZ0IsSUFBSUMsVUFBVSxDQUFDQyxrQkFBa0I7TUFDNURDLFlBQVksRUFBRWIsVUFBVSxDQUFDYSxZQUFZO01BQ3JDQyxjQUFjLEVBQUVkLFVBQVUsQ0FBQ2UsVUFBVTtNQUNyQ0MsVUFBVSxFQUFFaEIsVUFBVSxDQUFDZ0IsVUFBVTtNQUNqQ0Msb0JBQW9CLEVBQUVqQixVQUFVLENBQUNpQixvQkFBb0I7TUFDckRaLFdBQVcsRUFBRUwsVUFBVSxDQUFDSyxXQUFXO01BQ25DSixRQUFRO01BQUU7TUFDVjtNQUNBRSxrQkFBa0IsSUFBSUgsVUFBVSxDQUFDa0IsWUFBWSxDQUFDQyxHQUFHLElBQUlsQixRQUFRLEdBQUltQixNQUFNLElBQUc7UUFDdEU7UUFDQWIsS0FBSyxDQUFDYyxvQkFBb0IsR0FBRyxJQUFJO1FBQ2pDLE9BQU9wQixRQUFRLENBQUUsNkVBQTRFbUIsTUFBTyxJQUFHLEdBQUksaUZBQWdGLEdBQUksbUZBQWtGLENBQUM7TUFDdFIsQ0FBQyxHQUFHRTtJQUNSLENBQUM7SUFDRDtJQUNBdEIsVUFBVSxDQUFDTyxLQUFLLEdBQUdBLEtBQUs7SUFDeEIsT0FBT1QsT0FBTyxDQUFDeUIsR0FBRyxDQUFDaEIsS0FBSyxFQUFFTCxRQUFRLEVBQUVLLEtBQUssQ0FBQztFQUM5QztBQUNKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2VydmVyL2FzeW5jLXN0b3JhZ2Uvc3RhdGljLWdlbmVyYXRpb24tYXN5bmMtc3RvcmFnZS13cmFwcGVyLmpzP2FiZDMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VXcmFwcGVyID0ge1xuICAgIHdyYXAgKHN0b3JhZ2UsIHsgdXJsUGF0aG5hbWUsIHJlbmRlck9wdHMsIHBvc3Rwb25lIH0sIGNhbGxiYWNrKSB7XG4gICAgICAgIC8qKlxuICAgICAqIFJ1bGVzIG9mIFN0YXRpYyAmIER5bmFtaWMgSFRNTDpcbiAgICAgKlxuICAgICAqICAgIDEuKSBXZSBtdXN0IGdlbmVyYXRlIHN0YXRpYyBIVE1MIHVubGVzcyB0aGUgY2FsbGVyIGV4cGxpY2l0bHkgb3B0c1xuICAgICAqICAgICAgICBpbiB0byBkeW5hbWljIEhUTUwgc3VwcG9ydC5cbiAgICAgKlxuICAgICAqICAgIDIuKSBJZiBkeW5hbWljIEhUTUwgc3VwcG9ydCBpcyByZXF1ZXN0ZWQsIHdlIG11c3QgaG9ub3IgdGhhdCByZXF1ZXN0XG4gICAgICogICAgICAgIG9yIHRocm93IGFuIGVycm9yLiBJdCBpcyB0aGUgc29sZSByZXNwb25zaWJpbGl0eSBvZiB0aGUgY2FsbGVyIHRvXG4gICAgICogICAgICAgIGVuc3VyZSB0aGV5IGFyZW4ndCBlLmcuIHJlcXVlc3RpbmcgZHluYW1pYyBIVE1MIGZvciBhbiBBTVAgcGFnZS5cbiAgICAgKlxuICAgICAqICAgIDMuKSBJZiB0aGUgcmVxdWVzdCBpcyBpbiBkcmFmdCBtb2RlLCB3ZSBtdXN0IGdlbmVyYXRlIGR5bmFtaWMgSFRNTC5cbiAgICAgKlxuICAgICAqICAgIDQuKSBJZiB0aGUgcmVxdWVzdCBpcyBhIHNlcnZlciBhY3Rpb24sIHdlIG11c3QgZ2VuZXJhdGUgZHluYW1pYyBIVE1MLlxuICAgICAqXG4gICAgICogVGhlc2UgcnVsZXMgaGVscCBlbnN1cmUgdGhhdCBvdGhlciBleGlzdGluZyBmZWF0dXJlcyBsaWtlIHJlcXVlc3QgY2FjaGluZyxcbiAgICAgKiBjb2FsZXNjaW5nLCBhbmQgSVNSIGNvbnRpbnVlIHdvcmtpbmcgYXMgaW50ZW5kZWQuXG4gICAgICovIGNvbnN0IGlzU3RhdGljR2VuZXJhdGlvbiA9ICFyZW5kZXJPcHRzLnN1cHBvcnRzRHluYW1pY0hUTUwgJiYgIXJlbmRlck9wdHMuaXNEcmFmdE1vZGUgJiYgIXJlbmRlck9wdHMuaXNTZXJ2ZXJBY3Rpb247XG4gICAgICAgIGNvbnN0IHN0b3JlID0ge1xuICAgICAgICAgICAgaXNTdGF0aWNHZW5lcmF0aW9uLFxuICAgICAgICAgICAgdXJsUGF0aG5hbWUsXG4gICAgICAgICAgICBwYWdlUGF0aDogcmVuZGVyT3B0cy5vcmlnaW5hbFBhdGhuYW1lLFxuICAgICAgICAgICAgaW5jcmVtZW50YWxDYWNoZTogLy8gd2UgZmFsbGJhY2sgdG8gYSBnbG9iYWwgaW5jcmVtZW50YWwgY2FjaGUgZm9yIGVkZ2UtcnVudGltZSBsb2NhbGx5XG4gICAgICAgICAgICAvLyBzbyB0aGF0IGl0IGNhbiBhY2Nlc3MgdGhlIGZzIGNhY2hlIHdpdGhvdXQgbW9ja3NcbiAgICAgICAgICAgIHJlbmRlck9wdHMuaW5jcmVtZW50YWxDYWNoZSB8fCBnbG9iYWxUaGlzLl9faW5jcmVtZW50YWxDYWNoZSxcbiAgICAgICAgICAgIGlzUmV2YWxpZGF0ZTogcmVuZGVyT3B0cy5pc1JldmFsaWRhdGUsXG4gICAgICAgICAgICBpc1ByZXJlbmRlcmluZzogcmVuZGVyT3B0cy5uZXh0RXhwb3J0LFxuICAgICAgICAgICAgZmV0Y2hDYWNoZTogcmVuZGVyT3B0cy5mZXRjaENhY2hlLFxuICAgICAgICAgICAgaXNPbkRlbWFuZFJldmFsaWRhdGU6IHJlbmRlck9wdHMuaXNPbkRlbWFuZFJldmFsaWRhdGUsXG4gICAgICAgICAgICBpc0RyYWZ0TW9kZTogcmVuZGVyT3B0cy5pc0RyYWZ0TW9kZSxcbiAgICAgICAgICAgIHBvc3Rwb25lOiAvLyBJZiB3ZSBhcmVuJ3QgcGVyZm9ybWluZyBhIHN0YXRpYyBnZW5lcmF0aW9uIG9yIHdlIGFyZW4ndCB1c2luZyBQUFIgdGhlblxuICAgICAgICAgICAgLy8gd2UgZG9uJ3QgbmVlZCB0byBwb3N0cG9uZS5cbiAgICAgICAgICAgIGlzU3RhdGljR2VuZXJhdGlvbiAmJiByZW5kZXJPcHRzLmV4cGVyaW1lbnRhbC5wcHIgJiYgcG9zdHBvbmUgPyAocmVhc29uKT0+e1xuICAgICAgICAgICAgICAgIC8vIEtlZXAgdHJhY2sgb2YgaWYgdGhlIHBvc3Rwb25lIEFQSSBoYXMgYmVlbiBjYWxsZWQuXG4gICAgICAgICAgICAgICAgc3RvcmUucG9zdHBvbmVXYXNUcmlnZ2VyZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBwb3N0cG9uZShgVGhpcyBwYWdlIG5lZWRzIHRvIGJhaWwgb3V0IG9mIHByZXJlbmRlcmluZyBhdCB0aGlzIHBvaW50IGJlY2F1c2UgaXQgdXNlZCAke3JlYXNvbn0uIGAgKyBgUmVhY3QgdGhyb3dzIHRoaXMgc3BlY2lhbCBvYmplY3QgdG8gaW5kaWNhdGUgd2hlcmUuIEl0IHNob3VsZCBub3QgYmUgY2F1Z2h0IGJ5IGAgKyBgeW91ciBvd24gdHJ5L2NhdGNoLiBMZWFybiBtb3JlOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy9wcHItY2F1Z2h0LWVycm9yYCk7XG4gICAgICAgICAgICB9IDogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgICAgIC8vIFRPRE86IHJlbW92ZSB0aGlzIHdoZW4gd2UgcmVzb2x2ZSBhY2Nlc3NpbmcgdGhlIHN0b3JlIG91dHNpZGUgdGhlIGV4ZWN1dGlvbiBjb250ZXh0XG4gICAgICAgIHJlbmRlck9wdHMuc3RvcmUgPSBzdG9yZTtcbiAgICAgICAgcmV0dXJuIHN0b3JhZ2UucnVuKHN0b3JlLCBjYWxsYmFjaywgc3RvcmUpO1xuICAgIH1cbn07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRpYy1nZW5lcmF0aW9uLWFzeW5jLXN0b3JhZ2Utd3JhcHBlci5qcy5tYXAiXSwibmFtZXMiOlsiU3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVdyYXBwZXIiLCJ3cmFwIiwic3RvcmFnZSIsInVybFBhdGhuYW1lIiwicmVuZGVyT3B0cyIsInBvc3Rwb25lIiwiY2FsbGJhY2siLCJpc1N0YXRpY0dlbmVyYXRpb24iLCJzdXBwb3J0c0R5bmFtaWNIVE1MIiwiaXNEcmFmdE1vZGUiLCJpc1NlcnZlckFjdGlvbiIsInN0b3JlIiwicGFnZVBhdGgiLCJvcmlnaW5hbFBhdGhuYW1lIiwiaW5jcmVtZW50YWxDYWNoZSIsImdsb2JhbFRoaXMiLCJfX2luY3JlbWVudGFsQ2FjaGUiLCJpc1JldmFsaWRhdGUiLCJpc1ByZXJlbmRlcmluZyIsIm5leHRFeHBvcnQiLCJmZXRjaENhY2hlIiwiaXNPbkRlbWFuZFJldmFsaWRhdGUiLCJleHBlcmltZW50YWwiLCJwcHIiLCJyZWFzb24iLCJwb3N0cG9uZVdhc1RyaWdnZXJlZCIsInVuZGVmaW5lZCIsInJ1biJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/async-storage/static-generation-async-storage-wrapper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/future/helpers/interception-routes.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/future/helpers/interception-routes.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INTERCEPTION_ROUTE_MARKERS: () => (/* binding */ INTERCEPTION_ROUTE_MARKERS),\n/* harmony export */   extractInterceptionRouteInformation: () => (/* binding */ extractInterceptionRouteInformation),\n/* harmony export */   isInterceptionRouteAppPath: () => (/* binding */ isInterceptionRouteAppPath)\n/* harmony export */ });\n/* harmony import */ var _shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../shared/lib/router/utils/app-paths */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/app-paths.js\");\n\n// order matters here, the first match will be used\nconst INTERCEPTION_ROUTE_MARKERS = [\"(..)(..)\", \"(.)\", \"(..)\", \"(...)\"];\nfunction isInterceptionRouteAppPath(path) {\n  // TODO-APP: add more serious validation\n  return path.split(\"/\").find(segment => INTERCEPTION_ROUTE_MARKERS.find(m => segment.startsWith(m))) !== undefined;\n}\nfunction extractInterceptionRouteInformation(path) {\n  let interceptingRoute, marker, interceptedRoute;\n  for (const segment of path.split(\"/\")) {\n    marker = INTERCEPTION_ROUTE_MARKERS.find(m => segment.startsWith(m));\n    if (marker) {\n      [interceptingRoute, interceptedRoute] = path.split(marker, 2);\n      break;\n    }\n  }\n  if (!interceptingRoute || !marker || !interceptedRoute) {\n    throw new Error(`Invalid interception route: ${path}. Must be in the format /<intercepting route>/(..|...|..)(..)/<intercepted route>`);\n  }\n  interceptingRoute = (0,_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_0__.normalizeAppPath)(interceptingRoute) // normalize the path, e.g. /(blog)/feed -> /feed\n  ;\n\n  switch (marker) {\n    case \"(.)\":\n      // (.) indicates that we should match with sibling routes, so we just need to append the intercepted route to the intercepting route\n      if (interceptingRoute === \"/\") {\n        interceptedRoute = `/${interceptedRoute}`;\n      } else {\n        interceptedRoute = interceptingRoute + \"/\" + interceptedRoute;\n      }\n      break;\n    case \"(..)\":\n      // (..) indicates that we should match at one level up, so we need to remove the last segment of the intercepting route\n      if (interceptingRoute === \"/\") {\n        throw new Error(`Invalid interception route: ${path}. Cannot use (..) marker at the root level, use (.) instead.`);\n      }\n      interceptedRoute = interceptingRoute.split(\"/\").slice(0, -1).concat(interceptedRoute).join(\"/\");\n      break;\n    case \"(...)\":\n      // (...) will match the route segment in the root directory, so we need to use the root directory to prepend the intercepted route\n      interceptedRoute = \"/\" + interceptedRoute;\n      break;\n    case \"(..)(..)\":\n      // (..)(..) indicates that we should match at two levels up, so we need to remove the last two segments of the intercepting route\n      const splitInterceptingRoute = interceptingRoute.split(\"/\");\n      if (splitInterceptingRoute.length <= 2) {\n        throw new Error(`Invalid interception route: ${path}. Cannot use (..)(..) marker at the root level or one level up.`);\n      }\n      interceptedRoute = splitInterceptingRoute.slice(0, -2).concat(interceptedRoute).join(\"/\");\n      break;\n    default:\n      throw new Error(\"Invariant: unexpected marker\");\n  }\n  return {\n    interceptingRoute,\n    interceptedRoute\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvZnV0dXJlL2hlbHBlcnMvaW50ZXJjZXB0aW9uLXJvdXRlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQThFO0FBQzlFO0FBQ08sTUFBTUMsMEJBQTBCLEdBQUcsQ0FDdEMsVUFBVSxFQUNWLEtBQUssRUFDTCxNQUFNLEVBQ04sT0FBTyxDQUNWO0FBQ00sU0FBU0MsMEJBQTBCQSxDQUFDQyxJQUFJLEVBQUU7RUFDN0M7RUFDQSxPQUFPQSxJQUFJLENBQUNDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFFQyxPQUFPLElBQUdMLDBCQUEwQixDQUFDSSxJQUFJLENBQUVFLENBQUMsSUFBR0QsT0FBTyxDQUFDRSxVQUFVLENBQUNELENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBS0UsU0FBUztBQUNySDtBQUNPLFNBQVNDLG1DQUFtQ0EsQ0FBQ1AsSUFBSSxFQUFFO0VBQ3RELElBQUlRLGlCQUFpQixFQUFFQyxNQUFNLEVBQUVDLGdCQUFnQjtFQUMvQyxLQUFLLE1BQU1QLE9BQU8sSUFBSUgsSUFBSSxDQUFDQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUM7SUFDbENRLE1BQU0sR0FBR1gsMEJBQTBCLENBQUNJLElBQUksQ0FBRUUsQ0FBQyxJQUFHRCxPQUFPLENBQUNFLFVBQVUsQ0FBQ0QsQ0FBQyxDQUFDLENBQUM7SUFDcEUsSUFBSUssTUFBTSxFQUFFO01BQ1IsQ0FBQ0QsaUJBQWlCLEVBQUVFLGdCQUFnQixDQUFDLEdBQUdWLElBQUksQ0FBQ0MsS0FBSyxDQUFDUSxNQUFNLEVBQUUsQ0FBQyxDQUFDO01BQzdEO0lBQ0o7RUFDSjtFQUNBLElBQUksQ0FBQ0QsaUJBQWlCLElBQUksQ0FBQ0MsTUFBTSxJQUFJLENBQUNDLGdCQUFnQixFQUFFO0lBQ3BELE1BQU0sSUFBSUMsS0FBSyxDQUFFLCtCQUE4QlgsSUFBSyxtRkFBa0YsQ0FBQztFQUMzSTtFQUNBUSxpQkFBaUIsR0FBR1gsb0ZBQWdCLENBQUNXLGlCQUFpQixDQUFDLENBQUM7RUFBQTs7RUFFeEQsUUFBT0MsTUFBTTtJQUNULEtBQUssS0FBSztNQUNOO01BQ0EsSUFBSUQsaUJBQWlCLEtBQUssR0FBRyxFQUFFO1FBQzNCRSxnQkFBZ0IsR0FBSSxJQUFHQSxnQkFBaUIsRUFBQztNQUM3QyxDQUFDLE1BQU07UUFDSEEsZ0JBQWdCLEdBQUdGLGlCQUFpQixHQUFHLEdBQUcsR0FBR0UsZ0JBQWdCO01BQ2pFO01BQ0E7SUFDSixLQUFLLE1BQU07TUFDUDtNQUNBLElBQUlGLGlCQUFpQixLQUFLLEdBQUcsRUFBRTtRQUMzQixNQUFNLElBQUlHLEtBQUssQ0FBRSwrQkFBOEJYLElBQUssOERBQTZELENBQUM7TUFDdEg7TUFDQVUsZ0JBQWdCLEdBQUdGLGlCQUFpQixDQUFDUCxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUNXLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsTUFBTSxDQUFDSCxnQkFBZ0IsQ0FBQyxDQUFDSSxJQUFJLENBQUMsR0FBRyxDQUFDO01BQy9GO0lBQ0osS0FBSyxPQUFPO01BQ1I7TUFDQUosZ0JBQWdCLEdBQUcsR0FBRyxHQUFHQSxnQkFBZ0I7TUFDekM7SUFDSixLQUFLLFVBQVU7TUFDWDtNQUNBLE1BQU1LLHNCQUFzQixHQUFHUCxpQkFBaUIsQ0FBQ1AsS0FBSyxDQUFDLEdBQUcsQ0FBQztNQUMzRCxJQUFJYyxzQkFBc0IsQ0FBQ0MsTUFBTSxJQUFJLENBQUMsRUFBRTtRQUNwQyxNQUFNLElBQUlMLEtBQUssQ0FBRSwrQkFBOEJYLElBQUssaUVBQWdFLENBQUM7TUFDekg7TUFDQVUsZ0JBQWdCLEdBQUdLLHNCQUFzQixDQUFDSCxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUNDLE1BQU0sQ0FBQ0gsZ0JBQWdCLENBQUMsQ0FBQ0ksSUFBSSxDQUFDLEdBQUcsQ0FBQztNQUN6RjtJQUNKO01BQ0ksTUFBTSxJQUFJSCxLQUFLLENBQUMsOEJBQThCLENBQUM7RUFDdkQ7RUFDQSxPQUFPO0lBQ0hILGlCQUFpQjtJQUNqQkU7RUFDSixDQUFDO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2VydmVyL2Z1dHVyZS9oZWxwZXJzL2ludGVyY2VwdGlvbi1yb3V0ZXMuanM/OTdlMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBub3JtYWxpemVBcHBQYXRoIH0gZnJvbSBcIi4uLy4uLy4uL3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2FwcC1wYXRoc1wiO1xuLy8gb3JkZXIgbWF0dGVycyBoZXJlLCB0aGUgZmlyc3QgbWF0Y2ggd2lsbCBiZSB1c2VkXG5leHBvcnQgY29uc3QgSU5URVJDRVBUSU9OX1JPVVRFX01BUktFUlMgPSBbXG4gICAgXCIoLi4pKC4uKVwiLFxuICAgIFwiKC4pXCIsXG4gICAgXCIoLi4pXCIsXG4gICAgXCIoLi4uKVwiXG5dO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSW50ZXJjZXB0aW9uUm91dGVBcHBQYXRoKHBhdGgpIHtcbiAgICAvLyBUT0RPLUFQUDogYWRkIG1vcmUgc2VyaW91cyB2YWxpZGF0aW9uXG4gICAgcmV0dXJuIHBhdGguc3BsaXQoXCIvXCIpLmZpbmQoKHNlZ21lbnQpPT5JTlRFUkNFUFRJT05fUk9VVEVfTUFSS0VSUy5maW5kKChtKT0+c2VnbWVudC5zdGFydHNXaXRoKG0pKSkgIT09IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0SW50ZXJjZXB0aW9uUm91dGVJbmZvcm1hdGlvbihwYXRoKSB7XG4gICAgbGV0IGludGVyY2VwdGluZ1JvdXRlLCBtYXJrZXIsIGludGVyY2VwdGVkUm91dGU7XG4gICAgZm9yIChjb25zdCBzZWdtZW50IG9mIHBhdGguc3BsaXQoXCIvXCIpKXtcbiAgICAgICAgbWFya2VyID0gSU5URVJDRVBUSU9OX1JPVVRFX01BUktFUlMuZmluZCgobSk9PnNlZ21lbnQuc3RhcnRzV2l0aChtKSk7XG4gICAgICAgIGlmIChtYXJrZXIpIHtcbiAgICAgICAgICAgIFtpbnRlcmNlcHRpbmdSb3V0ZSwgaW50ZXJjZXB0ZWRSb3V0ZV0gPSBwYXRoLnNwbGl0KG1hcmtlciwgMik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWludGVyY2VwdGluZ1JvdXRlIHx8ICFtYXJrZXIgfHwgIWludGVyY2VwdGVkUm91dGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGludGVyY2VwdGlvbiByb3V0ZTogJHtwYXRofS4gTXVzdCBiZSBpbiB0aGUgZm9ybWF0IC88aW50ZXJjZXB0aW5nIHJvdXRlPi8oLi58Li4ufC4uKSguLikvPGludGVyY2VwdGVkIHJvdXRlPmApO1xuICAgIH1cbiAgICBpbnRlcmNlcHRpbmdSb3V0ZSA9IG5vcm1hbGl6ZUFwcFBhdGgoaW50ZXJjZXB0aW5nUm91dGUpIC8vIG5vcm1hbGl6ZSB0aGUgcGF0aCwgZS5nLiAvKGJsb2cpL2ZlZWQgLT4gL2ZlZWRcbiAgICA7XG4gICAgc3dpdGNoKG1hcmtlcil7XG4gICAgICAgIGNhc2UgXCIoLilcIjpcbiAgICAgICAgICAgIC8vICguKSBpbmRpY2F0ZXMgdGhhdCB3ZSBzaG91bGQgbWF0Y2ggd2l0aCBzaWJsaW5nIHJvdXRlcywgc28gd2UganVzdCBuZWVkIHRvIGFwcGVuZCB0aGUgaW50ZXJjZXB0ZWQgcm91dGUgdG8gdGhlIGludGVyY2VwdGluZyByb3V0ZVxuICAgICAgICAgICAgaWYgKGludGVyY2VwdGluZ1JvdXRlID09PSBcIi9cIikge1xuICAgICAgICAgICAgICAgIGludGVyY2VwdGVkUm91dGUgPSBgLyR7aW50ZXJjZXB0ZWRSb3V0ZX1gO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbnRlcmNlcHRlZFJvdXRlID0gaW50ZXJjZXB0aW5nUm91dGUgKyBcIi9cIiArIGludGVyY2VwdGVkUm91dGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIiguLilcIjpcbiAgICAgICAgICAgIC8vICguLikgaW5kaWNhdGVzIHRoYXQgd2Ugc2hvdWxkIG1hdGNoIGF0IG9uZSBsZXZlbCB1cCwgc28gd2UgbmVlZCB0byByZW1vdmUgdGhlIGxhc3Qgc2VnbWVudCBvZiB0aGUgaW50ZXJjZXB0aW5nIHJvdXRlXG4gICAgICAgICAgICBpZiAoaW50ZXJjZXB0aW5nUm91dGUgPT09IFwiL1wiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGludGVyY2VwdGlvbiByb3V0ZTogJHtwYXRofS4gQ2Fubm90IHVzZSAoLi4pIG1hcmtlciBhdCB0aGUgcm9vdCBsZXZlbCwgdXNlICguKSBpbnN0ZWFkLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW50ZXJjZXB0ZWRSb3V0ZSA9IGludGVyY2VwdGluZ1JvdXRlLnNwbGl0KFwiL1wiKS5zbGljZSgwLCAtMSkuY29uY2F0KGludGVyY2VwdGVkUm91dGUpLmpvaW4oXCIvXCIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCIoLi4uKVwiOlxuICAgICAgICAgICAgLy8gKC4uLikgd2lsbCBtYXRjaCB0aGUgcm91dGUgc2VnbWVudCBpbiB0aGUgcm9vdCBkaXJlY3RvcnksIHNvIHdlIG5lZWQgdG8gdXNlIHRoZSByb290IGRpcmVjdG9yeSB0byBwcmVwZW5kIHRoZSBpbnRlcmNlcHRlZCByb3V0ZVxuICAgICAgICAgICAgaW50ZXJjZXB0ZWRSb3V0ZSA9IFwiL1wiICsgaW50ZXJjZXB0ZWRSb3V0ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiKC4uKSguLilcIjpcbiAgICAgICAgICAgIC8vICguLikoLi4pIGluZGljYXRlcyB0aGF0IHdlIHNob3VsZCBtYXRjaCBhdCB0d28gbGV2ZWxzIHVwLCBzbyB3ZSBuZWVkIHRvIHJlbW92ZSB0aGUgbGFzdCB0d28gc2VnbWVudHMgb2YgdGhlIGludGVyY2VwdGluZyByb3V0ZVxuICAgICAgICAgICAgY29uc3Qgc3BsaXRJbnRlcmNlcHRpbmdSb3V0ZSA9IGludGVyY2VwdGluZ1JvdXRlLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgICAgIGlmIChzcGxpdEludGVyY2VwdGluZ1JvdXRlLmxlbmd0aCA8PSAyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGludGVyY2VwdGlvbiByb3V0ZTogJHtwYXRofS4gQ2Fubm90IHVzZSAoLi4pKC4uKSBtYXJrZXIgYXQgdGhlIHJvb3QgbGV2ZWwgb3Igb25lIGxldmVsIHVwLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW50ZXJjZXB0ZWRSb3V0ZSA9IHNwbGl0SW50ZXJjZXB0aW5nUm91dGUuc2xpY2UoMCwgLTIpLmNvbmNhdChpbnRlcmNlcHRlZFJvdXRlKS5qb2luKFwiL1wiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YXJpYW50OiB1bmV4cGVjdGVkIG1hcmtlclwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW50ZXJjZXB0aW5nUm91dGUsXG4gICAgICAgIGludGVyY2VwdGVkUm91dGVcbiAgICB9O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcmNlcHRpb24tcm91dGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJub3JtYWxpemVBcHBQYXRoIiwiSU5URVJDRVBUSU9OX1JPVVRFX01BUktFUlMiLCJpc0ludGVyY2VwdGlvblJvdXRlQXBwUGF0aCIsInBhdGgiLCJzcGxpdCIsImZpbmQiLCJzZWdtZW50IiwibSIsInN0YXJ0c1dpdGgiLCJ1bmRlZmluZWQiLCJleHRyYWN0SW50ZXJjZXB0aW9uUm91dGVJbmZvcm1hdGlvbiIsImludGVyY2VwdGluZ1JvdXRlIiwibWFya2VyIiwiaW50ZXJjZXB0ZWRSb3V0ZSIsIkVycm9yIiwic2xpY2UiLCJjb25jYXQiLCJqb2luIiwic3BsaXRJbnRlcmNlcHRpbmdSb3V0ZSIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/future/helpers/interception-routes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/future/route-kind.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/future/route-kind.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RouteKind: () => (/* binding */ RouteKind)\n/* harmony export */ });\nvar RouteKind;\n(function (RouteKind) {\n  RouteKind[\n  /**\n  * `PAGES` represents all the React pages that are under `pages/`.\n  */\n  \"PAGES\"] = \"PAGES\";\n  RouteKind[\n  /**\n  * `PAGES_API` represents all the API routes under `pages/api/`.\n  */\n  \"PAGES_API\"] = \"PAGES_API\";\n  RouteKind[\n  /**\n  * `APP_PAGE` represents all the React pages that are under `app/` with the\n  * filename of `page.{j,t}s{,x}`.\n  */\n  \"APP_PAGE\"] = \"APP_PAGE\";\n  RouteKind[\n  /**\n  * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the\n  * filename of `route.{j,t}s{,x}`.\n  */\n  \"APP_ROUTE\"] = \"APP_ROUTE\";\n})(RouteKind || (RouteKind = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLElBQUlBLFNBQVM7QUFDcEIsQ0FBQyxVQUFTQSxTQUFTLEVBQUU7RUFDakJBLFNBQVM7RUFBQztBQUNkO0FBQ0E7RUFBTSxPQUFPLENBQUMsR0FBRyxPQUFPO0VBQ3BCQSxTQUFTO0VBQUM7QUFDZDtBQUNBO0VBQU0sV0FBVyxDQUFDLEdBQUcsV0FBVztFQUM1QkEsU0FBUztFQUFDO0FBQ2Q7QUFDQTtBQUNBO0VBQU0sVUFBVSxDQUFDLEdBQUcsVUFBVTtFQUMxQkEsU0FBUztFQUFDO0FBQ2Q7QUFDQTtBQUNBO0VBQU0sV0FBVyxDQUFDLEdBQUcsV0FBVztBQUNoQyxDQUFDLEVBQUVBLFNBQVMsS0FBS0EsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kLmpzPzA5ZGEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBSb3V0ZUtpbmQ7XG4oZnVuY3Rpb24oUm91dGVLaW5kKSB7XG4gICAgUm91dGVLaW5kWy8qKlxuICAgKiBgUEFHRVNgIHJlcHJlc2VudHMgYWxsIHRoZSBSZWFjdCBwYWdlcyB0aGF0IGFyZSB1bmRlciBgcGFnZXMvYC5cbiAgICovIFwiUEFHRVNcIl0gPSBcIlBBR0VTXCI7XG4gICAgUm91dGVLaW5kWy8qKlxuICAgKiBgUEFHRVNfQVBJYCByZXByZXNlbnRzIGFsbCB0aGUgQVBJIHJvdXRlcyB1bmRlciBgcGFnZXMvYXBpL2AuXG4gICAqLyBcIlBBR0VTX0FQSVwiXSA9IFwiUEFHRVNfQVBJXCI7XG4gICAgUm91dGVLaW5kWy8qKlxuICAgKiBgQVBQX1BBR0VgIHJlcHJlc2VudHMgYWxsIHRoZSBSZWFjdCBwYWdlcyB0aGF0IGFyZSB1bmRlciBgYXBwL2Agd2l0aCB0aGVcbiAgICogZmlsZW5hbWUgb2YgYHBhZ2Uue2osdH1zeyx4fWAuXG4gICAqLyBcIkFQUF9QQUdFXCJdID0gXCJBUFBfUEFHRVwiO1xuICAgIFJvdXRlS2luZFsvKipcbiAgICogYEFQUF9ST1VURWAgcmVwcmVzZW50cyBhbGwgdGhlIEFQSSByb3V0ZXMgYW5kIG1ldGFkYXRhIHJvdXRlcyB0aGF0IGFyZSB1bmRlciBgYXBwL2Agd2l0aCB0aGVcbiAgICogZmlsZW5hbWUgb2YgYHJvdXRlLntqLHR9c3sseH1gLlxuICAgKi8gXCJBUFBfUk9VVEVcIl0gPSBcIkFQUF9ST1VURVwiO1xufSkoUm91dGVLaW5kIHx8IChSb3V0ZUtpbmQgPSB7fSkpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3V0ZS1raW5kLmpzLm1hcCJdLCJuYW1lcyI6WyJSb3V0ZUtpbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/future/route-kind.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/future/route-matchers/route-matcher.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/future/route-matchers/route-matcher.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RouteMatcher: () => (/* binding */ RouteMatcher)\n/* harmony export */ });\n/* harmony import */ var _shared_lib_router_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../shared/lib/router/utils */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/index.js\");\n/* harmony import */ var _shared_lib_router_utils_route_matcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../shared/lib/router/utils/route-matcher */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/route-matcher.js\");\n/* harmony import */ var _shared_lib_router_utils_route_regex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../shared/lib/router/utils/route-regex */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/route-regex.js\");\n\n\n\nclass RouteMatcher {\n  constructor(definition) {\n    this.definition = definition;\n    if ((0,_shared_lib_router_utils__WEBPACK_IMPORTED_MODULE_0__.isDynamicRoute)(definition.pathname)) {\n      this.dynamic = (0,_shared_lib_router_utils_route_matcher__WEBPACK_IMPORTED_MODULE_1__.getRouteMatcher)((0,_shared_lib_router_utils_route_regex__WEBPACK_IMPORTED_MODULE_2__.getRouteRegex)(definition.pathname));\n    }\n  }\n  /**\n  * Identity returns the identity part of the matcher. This is used to compare\n  * a unique matcher to another. This is also used when sorting dynamic routes,\n  * so it must contain the pathname part.\n  */\n  get identity() {\n    return this.definition.pathname;\n  }\n  get isDynamic() {\n    return this.dynamic !== undefined;\n  }\n  match(pathname) {\n    const result = this.test(pathname);\n    if (!result) return null;\n    return {\n      definition: this.definition,\n      params: result.params\n    };\n  }\n  test(pathname) {\n    if (this.dynamic) {\n      const params = this.dynamic(pathname);\n      if (!params) return null;\n      return {\n        params\n      };\n    }\n    if (pathname === this.definition.pathname) {\n      return {};\n    }\n    return null;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1hdGNoZXJzL3JvdXRlLW1hdGNoZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFrRTtBQUNlO0FBQ0o7QUFDdEUsTUFBTUcsWUFBWSxDQUFDO0VBQ3RCQyxXQUFXQSxDQUFDQyxVQUFVLEVBQUM7SUFDbkIsSUFBSSxDQUFDQSxVQUFVLEdBQUdBLFVBQVU7SUFDNUIsSUFBSUwsd0VBQWMsQ0FBQ0ssVUFBVSxDQUFDQyxRQUFRLENBQUMsRUFBRTtNQUNyQyxJQUFJLENBQUNDLE9BQU8sR0FBR04sdUZBQWUsQ0FBQ0MsbUZBQWEsQ0FBQ0csVUFBVSxDQUFDQyxRQUFRLENBQUMsQ0FBQztJQUN0RTtFQUNKO0VBQ0E7QUFDSjtBQUNBO0FBQ0E7QUFDQTtFQUFNLElBQUlFLFFBQVFBLENBQUEsRUFBRztJQUNiLE9BQU8sSUFBSSxDQUFDSCxVQUFVLENBQUNDLFFBQVE7RUFDbkM7RUFDQSxJQUFJRyxTQUFTQSxDQUFBLEVBQUc7SUFDWixPQUFPLElBQUksQ0FBQ0YsT0FBTyxLQUFLRyxTQUFTO0VBQ3JDO0VBQ0FDLEtBQUtBLENBQUNMLFFBQVEsRUFBRTtJQUNaLE1BQU1NLE1BQU0sR0FBRyxJQUFJLENBQUNDLElBQUksQ0FBQ1AsUUFBUSxDQUFDO0lBQ2xDLElBQUksQ0FBQ00sTUFBTSxFQUFFLE9BQU8sSUFBSTtJQUN4QixPQUFPO01BQ0hQLFVBQVUsRUFBRSxJQUFJLENBQUNBLFVBQVU7TUFDM0JTLE1BQU0sRUFBRUYsTUFBTSxDQUFDRTtJQUNuQixDQUFDO0VBQ0w7RUFDQUQsSUFBSUEsQ0FBQ1AsUUFBUSxFQUFFO0lBQ1gsSUFBSSxJQUFJLENBQUNDLE9BQU8sRUFBRTtNQUNkLE1BQU1PLE1BQU0sR0FBRyxJQUFJLENBQUNQLE9BQU8sQ0FBQ0QsUUFBUSxDQUFDO01BQ3JDLElBQUksQ0FBQ1EsTUFBTSxFQUFFLE9BQU8sSUFBSTtNQUN4QixPQUFPO1FBQ0hBO01BQ0osQ0FBQztJQUNMO0lBQ0EsSUFBSVIsUUFBUSxLQUFLLElBQUksQ0FBQ0QsVUFBVSxDQUFDQyxRQUFRLEVBQUU7TUFDdkMsT0FBTyxDQUFDLENBQUM7SUFDYjtJQUNBLE9BQU8sSUFBSTtFQUNmO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2VydmVyL2Z1dHVyZS9yb3V0ZS1tYXRjaGVycy9yb3V0ZS1tYXRjaGVyLmpzPzQ4N2QiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNEeW5hbWljUm91dGUgfSBmcm9tIFwiLi4vLi4vLi4vc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHNcIjtcbmltcG9ydCB7IGdldFJvdXRlTWF0Y2hlciB9IGZyb20gXCIuLi8uLi8uLi9zaGFyZWQvbGliL3JvdXRlci91dGlscy9yb3V0ZS1tYXRjaGVyXCI7XG5pbXBvcnQgeyBnZXRSb3V0ZVJlZ2V4IH0gZnJvbSBcIi4uLy4uLy4uL3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3JvdXRlLXJlZ2V4XCI7XG5leHBvcnQgY2xhc3MgUm91dGVNYXRjaGVyIHtcbiAgICBjb25zdHJ1Y3RvcihkZWZpbml0aW9uKXtcbiAgICAgICAgdGhpcy5kZWZpbml0aW9uID0gZGVmaW5pdGlvbjtcbiAgICAgICAgaWYgKGlzRHluYW1pY1JvdXRlKGRlZmluaXRpb24ucGF0aG5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLmR5bmFtaWMgPSBnZXRSb3V0ZU1hdGNoZXIoZ2V0Um91dGVSZWdleChkZWZpbml0aW9uLnBhdGhuYW1lKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAqIElkZW50aXR5IHJldHVybnMgdGhlIGlkZW50aXR5IHBhcnQgb2YgdGhlIG1hdGNoZXIuIFRoaXMgaXMgdXNlZCB0byBjb21wYXJlXG4gICAqIGEgdW5pcXVlIG1hdGNoZXIgdG8gYW5vdGhlci4gVGhpcyBpcyBhbHNvIHVzZWQgd2hlbiBzb3J0aW5nIGR5bmFtaWMgcm91dGVzLFxuICAgKiBzbyBpdCBtdXN0IGNvbnRhaW4gdGhlIHBhdGhuYW1lIHBhcnQuXG4gICAqLyBnZXQgaWRlbnRpdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlZmluaXRpb24ucGF0aG5hbWU7XG4gICAgfVxuICAgIGdldCBpc0R5bmFtaWMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmR5bmFtaWMgIT09IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgbWF0Y2gocGF0aG5hbWUpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy50ZXN0KHBhdGhuYW1lKTtcbiAgICAgICAgaWYgKCFyZXN1bHQpIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGVmaW5pdGlvbjogdGhpcy5kZWZpbml0aW9uLFxuICAgICAgICAgICAgcGFyYW1zOiByZXN1bHQucGFyYW1zXG4gICAgICAgIH07XG4gICAgfVxuICAgIHRlc3QocGF0aG5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuZHluYW1pYykge1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gdGhpcy5keW5hbWljKHBhdGhuYW1lKTtcbiAgICAgICAgICAgIGlmICghcGFyYW1zKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcGFyYW1zXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXRobmFtZSA9PT0gdGhpcy5kZWZpbml0aW9uLnBhdGhuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3V0ZS1tYXRjaGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJpc0R5bmFtaWNSb3V0ZSIsImdldFJvdXRlTWF0Y2hlciIsImdldFJvdXRlUmVnZXgiLCJSb3V0ZU1hdGNoZXIiLCJjb25zdHJ1Y3RvciIsImRlZmluaXRpb24iLCJwYXRobmFtZSIsImR5bmFtaWMiLCJpZGVudGl0eSIsImlzRHluYW1pYyIsInVuZGVmaW5lZCIsIm1hdGNoIiwicmVzdWx0IiwidGVzdCIsInBhcmFtcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/future/route-matchers/route-matcher.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/auto-implement-methods.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/auto-implement-methods.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   autoImplementMethods: () => (/* binding */ autoImplementMethods)\n/* harmony export */ });\n/* harmony import */ var _web_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../web/http */ \"(rsc)/./node_modules/next/dist/esm/server/web/http.js\");\n/* harmony import */ var _helpers_response_handlers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../helpers/response-handlers */ \"(rsc)/./node_modules/next/dist/esm/server/future/route-modules/helpers/response-handlers.js\");\n\n\nconst AUTOMATIC_ROUTE_METHODS = [\"HEAD\", \"OPTIONS\"];\nfunction autoImplementMethods(handlers) {\n  // Loop through all the HTTP methods to create the initial methods object.\n  // Each of the methods will be set to the the 405 response handler.\n  const methods = _web_http__WEBPACK_IMPORTED_MODULE_0__.HTTP_METHODS.reduce((acc, method) => ({\n    ...acc,\n    // If the userland module implements the method, then use it. Otherwise,\n    // use the 405 response handler.\n    [method]: handlers[method] ?? _helpers_response_handlers__WEBPACK_IMPORTED_MODULE_1__.handleMethodNotAllowedResponse\n  }), {});\n  // Get all the methods that could be automatically implemented that were not\n  // implemented by the userland module.\n  const implemented = new Set(_web_http__WEBPACK_IMPORTED_MODULE_0__.HTTP_METHODS.filter(method => handlers[method]));\n  const missing = AUTOMATIC_ROUTE_METHODS.filter(method => !implemented.has(method));\n  // Loop over the missing methods to automatically implement them if we can.\n  for (const method of missing) {\n    // If the userland module doesn't implement the HEAD method, then\n    // we'll automatically implement it by calling the GET method (if it\n    // exists).\n    if (method === \"HEAD\") {\n      // If the userland module doesn't implement the GET method, then\n      // we're done.\n      if (!handlers.GET) break;\n      // Implement the HEAD method by calling the GET method.\n      methods.HEAD = handlers.GET;\n      // Mark it as implemented.\n      implemented.add(\"HEAD\");\n      continue;\n    }\n    // If OPTIONS is not provided then implement it.\n    if (method === \"OPTIONS\") {\n      // TODO: check if HEAD is implemented, if so, use it to add more headers\n      // Get all the methods that were implemented by the userland module.\n      const allow = [\"OPTIONS\", ...implemented];\n      // If the list of methods doesn't include HEAD, but it includes GET, then\n      // add HEAD as it's automatically implemented.\n      if (!implemented.has(\"HEAD\") && implemented.has(\"GET\")) {\n        allow.push(\"HEAD\");\n      }\n      // Sort and join the list with commas to create the `Allow` header. See:\n      // https://httpwg.org/specs/rfc9110.html#field.allow\n      const headers = {\n        Allow: allow.sort().join(\", \")\n      };\n      // Implement the OPTIONS method by returning a 204 response with the\n      // `Allow` header.\n      methods.OPTIONS = () => new Response(null, {\n        status: 204,\n        headers\n      });\n      // Mark this method as implemented.\n      implemented.add(\"OPTIONS\");\n      continue;\n    }\n    throw new Error(`Invariant: should handle all automatic implementable methods, got method: ${method}`);\n  }\n  return methods;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL2hlbHBlcnMvYXV0by1pbXBsZW1lbnQtbWV0aG9kcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBb0Q7QUFDNkI7QUFDakYsTUFBTUUsdUJBQXVCLEdBQUcsQ0FDNUIsTUFBTSxFQUNOLFNBQVMsQ0FDWjtBQUNNLFNBQVNDLG9CQUFvQkEsQ0FBQ0MsUUFBUSxFQUFFO0VBQzNDO0VBQ0E7RUFDQSxNQUFNQyxPQUFPLEdBQUdMLG1EQUFZLENBQUNNLE1BQU0sQ0FBQyxDQUFDQyxHQUFHLEVBQUVDLE1BQU0sTUFBSTtJQUM1QyxHQUFHRCxHQUFHO0lBQ047SUFDQTtJQUNBLENBQUNDLE1BQU0sR0FBR0osUUFBUSxDQUFDSSxNQUFNLENBQUMsSUFBSVAsc0ZBQThCQTtFQUNoRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUNYO0VBQ0E7RUFDQSxNQUFNUSxXQUFXLEdBQUcsSUFBSUMsR0FBRyxDQUFDVixtREFBWSxDQUFDVyxNQUFNLENBQUVILE1BQU0sSUFBR0osUUFBUSxDQUFDSSxNQUFNLENBQUMsQ0FBQyxDQUFDO0VBQzVFLE1BQU1JLE9BQU8sR0FBR1YsdUJBQXVCLENBQUNTLE1BQU0sQ0FBRUgsTUFBTSxJQUFHLENBQUNDLFdBQVcsQ0FBQ0ksR0FBRyxDQUFDTCxNQUFNLENBQUMsQ0FBQztFQUNsRjtFQUNBLEtBQUssTUFBTUEsTUFBTSxJQUFJSSxPQUFPLEVBQUM7SUFDekI7SUFDQTtJQUNBO0lBQ0EsSUFBSUosTUFBTSxLQUFLLE1BQU0sRUFBRTtNQUNuQjtNQUNBO01BQ0EsSUFBSSxDQUFDSixRQUFRLENBQUNVLEdBQUcsRUFBRTtNQUNuQjtNQUNBVCxPQUFPLENBQUNVLElBQUksR0FBR1gsUUFBUSxDQUFDVSxHQUFHO01BQzNCO01BQ0FMLFdBQVcsQ0FBQ08sR0FBRyxDQUFDLE1BQU0sQ0FBQztNQUN2QjtJQUNKO0lBQ0E7SUFDQSxJQUFJUixNQUFNLEtBQUssU0FBUyxFQUFFO01BQ3RCO01BQ0E7TUFDQSxNQUFNUyxLQUFLLEdBQUcsQ0FDVixTQUFTLEVBQ1QsR0FBR1IsV0FBVyxDQUNqQjtNQUNEO01BQ0E7TUFDQSxJQUFJLENBQUNBLFdBQVcsQ0FBQ0ksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJSixXQUFXLENBQUNJLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNwREksS0FBSyxDQUFDQyxJQUFJLENBQUMsTUFBTSxDQUFDO01BQ3RCO01BQ0E7TUFDQTtNQUNBLE1BQU1DLE9BQU8sR0FBRztRQUNaQyxLQUFLLEVBQUVILEtBQUssQ0FBQ0ksSUFBSSxDQUFDLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLElBQUk7TUFDakMsQ0FBQztNQUNEO01BQ0E7TUFDQWpCLE9BQU8sQ0FBQ2tCLE9BQU8sR0FBRyxNQUFJLElBQUlDLFFBQVEsQ0FBQyxJQUFJLEVBQUU7UUFDakNDLE1BQU0sRUFBRSxHQUFHO1FBQ1hOO01BQ0osQ0FBQyxDQUFDO01BQ047TUFDQVYsV0FBVyxDQUFDTyxHQUFHLENBQUMsU0FBUyxDQUFDO01BQzFCO0lBQ0o7SUFDQSxNQUFNLElBQUlVLEtBQUssQ0FBRSw2RUFBNEVsQixNQUFPLEVBQUMsQ0FBQztFQUMxRztFQUNBLE9BQU9ILE9BQU87QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9oZWxwZXJzL2F1dG8taW1wbGVtZW50LW1ldGhvZHMuanM/MTI3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIVFRQX01FVEhPRFMgfSBmcm9tIFwiLi4vLi4vLi4vLi4vd2ViL2h0dHBcIjtcbmltcG9ydCB7IGhhbmRsZU1ldGhvZE5vdEFsbG93ZWRSZXNwb25zZSB9IGZyb20gXCIuLi8uLi9oZWxwZXJzL3Jlc3BvbnNlLWhhbmRsZXJzXCI7XG5jb25zdCBBVVRPTUFUSUNfUk9VVEVfTUVUSE9EUyA9IFtcbiAgICBcIkhFQURcIixcbiAgICBcIk9QVElPTlNcIlxuXTtcbmV4cG9ydCBmdW5jdGlvbiBhdXRvSW1wbGVtZW50TWV0aG9kcyhoYW5kbGVycykge1xuICAgIC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIEhUVFAgbWV0aG9kcyB0byBjcmVhdGUgdGhlIGluaXRpYWwgbWV0aG9kcyBvYmplY3QuXG4gICAgLy8gRWFjaCBvZiB0aGUgbWV0aG9kcyB3aWxsIGJlIHNldCB0byB0aGUgdGhlIDQwNSByZXNwb25zZSBoYW5kbGVyLlxuICAgIGNvbnN0IG1ldGhvZHMgPSBIVFRQX01FVEhPRFMucmVkdWNlKChhY2MsIG1ldGhvZCk9Pih7XG4gICAgICAgICAgICAuLi5hY2MsXG4gICAgICAgICAgICAvLyBJZiB0aGUgdXNlcmxhbmQgbW9kdWxlIGltcGxlbWVudHMgdGhlIG1ldGhvZCwgdGhlbiB1c2UgaXQuIE90aGVyd2lzZSxcbiAgICAgICAgICAgIC8vIHVzZSB0aGUgNDA1IHJlc3BvbnNlIGhhbmRsZXIuXG4gICAgICAgICAgICBbbWV0aG9kXTogaGFuZGxlcnNbbWV0aG9kXSA/PyBoYW5kbGVNZXRob2ROb3RBbGxvd2VkUmVzcG9uc2VcbiAgICAgICAgfSksIHt9KTtcbiAgICAvLyBHZXQgYWxsIHRoZSBtZXRob2RzIHRoYXQgY291bGQgYmUgYXV0b21hdGljYWxseSBpbXBsZW1lbnRlZCB0aGF0IHdlcmUgbm90XG4gICAgLy8gaW1wbGVtZW50ZWQgYnkgdGhlIHVzZXJsYW5kIG1vZHVsZS5cbiAgICBjb25zdCBpbXBsZW1lbnRlZCA9IG5ldyBTZXQoSFRUUF9NRVRIT0RTLmZpbHRlcigobWV0aG9kKT0+aGFuZGxlcnNbbWV0aG9kXSkpO1xuICAgIGNvbnN0IG1pc3NpbmcgPSBBVVRPTUFUSUNfUk9VVEVfTUVUSE9EUy5maWx0ZXIoKG1ldGhvZCk9PiFpbXBsZW1lbnRlZC5oYXMobWV0aG9kKSk7XG4gICAgLy8gTG9vcCBvdmVyIHRoZSBtaXNzaW5nIG1ldGhvZHMgdG8gYXV0b21hdGljYWxseSBpbXBsZW1lbnQgdGhlbSBpZiB3ZSBjYW4uXG4gICAgZm9yIChjb25zdCBtZXRob2Qgb2YgbWlzc2luZyl7XG4gICAgICAgIC8vIElmIHRoZSB1c2VybGFuZCBtb2R1bGUgZG9lc24ndCBpbXBsZW1lbnQgdGhlIEhFQUQgbWV0aG9kLCB0aGVuXG4gICAgICAgIC8vIHdlJ2xsIGF1dG9tYXRpY2FsbHkgaW1wbGVtZW50IGl0IGJ5IGNhbGxpbmcgdGhlIEdFVCBtZXRob2QgKGlmIGl0XG4gICAgICAgIC8vIGV4aXN0cykuXG4gICAgICAgIGlmIChtZXRob2QgPT09IFwiSEVBRFwiKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgdXNlcmxhbmQgbW9kdWxlIGRvZXNuJ3QgaW1wbGVtZW50IHRoZSBHRVQgbWV0aG9kLCB0aGVuXG4gICAgICAgICAgICAvLyB3ZSdyZSBkb25lLlxuICAgICAgICAgICAgaWYgKCFoYW5kbGVycy5HRVQpIGJyZWFrO1xuICAgICAgICAgICAgLy8gSW1wbGVtZW50IHRoZSBIRUFEIG1ldGhvZCBieSBjYWxsaW5nIHRoZSBHRVQgbWV0aG9kLlxuICAgICAgICAgICAgbWV0aG9kcy5IRUFEID0gaGFuZGxlcnMuR0VUO1xuICAgICAgICAgICAgLy8gTWFyayBpdCBhcyBpbXBsZW1lbnRlZC5cbiAgICAgICAgICAgIGltcGxlbWVudGVkLmFkZChcIkhFQURcIik7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBPUFRJT05TIGlzIG5vdCBwcm92aWRlZCB0aGVuIGltcGxlbWVudCBpdC5cbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJPUFRJT05TXCIpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IGNoZWNrIGlmIEhFQUQgaXMgaW1wbGVtZW50ZWQsIGlmIHNvLCB1c2UgaXQgdG8gYWRkIG1vcmUgaGVhZGVyc1xuICAgICAgICAgICAgLy8gR2V0IGFsbCB0aGUgbWV0aG9kcyB0aGF0IHdlcmUgaW1wbGVtZW50ZWQgYnkgdGhlIHVzZXJsYW5kIG1vZHVsZS5cbiAgICAgICAgICAgIGNvbnN0IGFsbG93ID0gW1xuICAgICAgICAgICAgICAgIFwiT1BUSU9OU1wiLFxuICAgICAgICAgICAgICAgIC4uLmltcGxlbWVudGVkXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgLy8gSWYgdGhlIGxpc3Qgb2YgbWV0aG9kcyBkb2Vzbid0IGluY2x1ZGUgSEVBRCwgYnV0IGl0IGluY2x1ZGVzIEdFVCwgdGhlblxuICAgICAgICAgICAgLy8gYWRkIEhFQUQgYXMgaXQncyBhdXRvbWF0aWNhbGx5IGltcGxlbWVudGVkLlxuICAgICAgICAgICAgaWYgKCFpbXBsZW1lbnRlZC5oYXMoXCJIRUFEXCIpICYmIGltcGxlbWVudGVkLmhhcyhcIkdFVFwiKSkge1xuICAgICAgICAgICAgICAgIGFsbG93LnB1c2goXCJIRUFEXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU29ydCBhbmQgam9pbiB0aGUgbGlzdCB3aXRoIGNvbW1hcyB0byBjcmVhdGUgdGhlIGBBbGxvd2AgaGVhZGVyLiBTZWU6XG4gICAgICAgICAgICAvLyBodHRwczovL2h0dHB3Zy5vcmcvc3BlY3MvcmZjOTExMC5odG1sI2ZpZWxkLmFsbG93XG4gICAgICAgICAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgIEFsbG93OiBhbGxvdy5zb3J0KCkuam9pbihcIiwgXCIpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gSW1wbGVtZW50IHRoZSBPUFRJT05TIG1ldGhvZCBieSByZXR1cm5pbmcgYSAyMDQgcmVzcG9uc2Ugd2l0aCB0aGVcbiAgICAgICAgICAgIC8vIGBBbGxvd2AgaGVhZGVyLlxuICAgICAgICAgICAgbWV0aG9kcy5PUFRJT05TID0gKCk9Pm5ldyBSZXNwb25zZShudWxsLCB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogMjA0LFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBNYXJrIHRoaXMgbWV0aG9kIGFzIGltcGxlbWVudGVkLlxuICAgICAgICAgICAgaW1wbGVtZW50ZWQuYWRkKFwiT1BUSU9OU1wiKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YXJpYW50OiBzaG91bGQgaGFuZGxlIGFsbCBhdXRvbWF0aWMgaW1wbGVtZW50YWJsZSBtZXRob2RzLCBnb3QgbWV0aG9kOiAke21ldGhvZH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIG1ldGhvZHM7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dG8taW1wbGVtZW50LW1ldGhvZHMuanMubWFwIl0sIm5hbWVzIjpbIkhUVFBfTUVUSE9EUyIsImhhbmRsZU1ldGhvZE5vdEFsbG93ZWRSZXNwb25zZSIsIkFVVE9NQVRJQ19ST1VURV9NRVRIT0RTIiwiYXV0b0ltcGxlbWVudE1ldGhvZHMiLCJoYW5kbGVycyIsIm1ldGhvZHMiLCJyZWR1Y2UiLCJhY2MiLCJtZXRob2QiLCJpbXBsZW1lbnRlZCIsIlNldCIsImZpbHRlciIsIm1pc3NpbmciLCJoYXMiLCJHRVQiLCJIRUFEIiwiYWRkIiwiYWxsb3ciLCJwdXNoIiwiaGVhZGVycyIsIkFsbG93Iiwic29ydCIsImpvaW4iLCJPUFRJT05TIiwiUmVzcG9uc2UiLCJzdGF0dXMiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/auto-implement-methods.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/clean-url.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/clean-url.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cleanURL: () => (/* binding */ cleanURL)\n/* harmony export */ });\n/**\n * Cleans a URL by stripping the protocol, host, and search params.\n *\n * @param urlString the url to clean\n * @returns the cleaned url\n */function cleanURL(urlString) {\n  const url = new URL(urlString);\n  url.host = \"localhost:3000\";\n  url.search = \"\";\n  url.protocol = \"http\";\n  return url.toString();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL2hlbHBlcnMvY2xlYW4tdXJsLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBVyxTQUFTQSxRQUFRQSxDQUFDQyxTQUFTLEVBQUU7RUFDcEMsTUFBTUMsR0FBRyxHQUFHLElBQUlDLEdBQUcsQ0FBQ0YsU0FBUyxDQUFDO0VBQzlCQyxHQUFHLENBQUNFLElBQUksR0FBRyxnQkFBZ0I7RUFDM0JGLEdBQUcsQ0FBQ0csTUFBTSxHQUFHLEVBQUU7RUFDZkgsR0FBRyxDQUFDSSxRQUFRLEdBQUcsTUFBTTtFQUNyQixPQUFPSixHQUFHLENBQUNLLFFBQVEsQ0FBQyxDQUFDO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvZXNtL3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9jbGVhbi11cmwuanM/YmVhNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENsZWFucyBhIFVSTCBieSBzdHJpcHBpbmcgdGhlIHByb3RvY29sLCBob3N0LCBhbmQgc2VhcmNoIHBhcmFtcy5cbiAqXG4gKiBAcGFyYW0gdXJsU3RyaW5nIHRoZSB1cmwgdG8gY2xlYW5cbiAqIEByZXR1cm5zIHRoZSBjbGVhbmVkIHVybFxuICovIGV4cG9ydCBmdW5jdGlvbiBjbGVhblVSTCh1cmxTdHJpbmcpIHtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHVybFN0cmluZyk7XG4gICAgdXJsLmhvc3QgPSBcImxvY2FsaG9zdDozMDAwXCI7XG4gICAgdXJsLnNlYXJjaCA9IFwiXCI7XG4gICAgdXJsLnByb3RvY29sID0gXCJodHRwXCI7XG4gICAgcmV0dXJuIHVybC50b1N0cmluZygpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGVhbi11cmwuanMubWFwIl0sIm5hbWVzIjpbImNsZWFuVVJMIiwidXJsU3RyaW5nIiwidXJsIiwiVVJMIiwiaG9zdCIsInNlYXJjaCIsInByb3RvY29sIiwidG9TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/clean-url.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/get-non-static-methods.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/get-non-static-methods.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getNonStaticMethods: () => (/* binding */ getNonStaticMethods)\n/* harmony export */ });\nconst NON_STATIC_METHODS = [\"OPTIONS\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"];\n/**\n * Gets all the method names for handlers that are not considered static.\n *\n * @param handlers the handlers from the userland module\n * @returns the method names that are not considered static or false if all\n *          methods are static\n */\nfunction getNonStaticMethods(handlers) {\n  // We can currently only statically optimize if only GET/HEAD are used as\n  // prerender can't be used conditionally based on the method currently.\n  const methods = NON_STATIC_METHODS.filter(method => handlers[method]);\n  if (methods.length === 0) return false;\n  return methods;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL2hlbHBlcnMvZ2V0LW5vbi1zdGF0aWMtbWV0aG9kcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsa0JBQWtCLEdBQUcsQ0FDdkIsU0FBUyxFQUNULE1BQU0sRUFDTixLQUFLLEVBQ0wsUUFBUSxFQUNSLE9BQU8sQ0FDVjtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQVcsU0FBU0MsbUJBQW1CQSxDQUFDQyxRQUFRLEVBQUU7RUFDOUM7RUFDQTtFQUNBLE1BQU1DLE9BQU8sR0FBR0gsa0JBQWtCLENBQUNJLE1BQU0sQ0FBRUMsTUFBTSxJQUFHSCxRQUFRLENBQUNHLE1BQU0sQ0FBQyxDQUFDO0VBQ3JFLElBQUlGLE9BQU8sQ0FBQ0csTUFBTSxLQUFLLENBQUMsRUFBRSxPQUFPLEtBQUs7RUFDdEMsT0FBT0gsT0FBTztBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL2hlbHBlcnMvZ2V0LW5vbi1zdGF0aWMtbWV0aG9kcy5qcz8yNzFkIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE5PTl9TVEFUSUNfTUVUSE9EUyA9IFtcbiAgICBcIk9QVElPTlNcIixcbiAgICBcIlBPU1RcIixcbiAgICBcIlBVVFwiLFxuICAgIFwiREVMRVRFXCIsXG4gICAgXCJQQVRDSFwiXG5dO1xuLyoqXG4gKiBHZXRzIGFsbCB0aGUgbWV0aG9kIG5hbWVzIGZvciBoYW5kbGVycyB0aGF0IGFyZSBub3QgY29uc2lkZXJlZCBzdGF0aWMuXG4gKlxuICogQHBhcmFtIGhhbmRsZXJzIHRoZSBoYW5kbGVycyBmcm9tIHRoZSB1c2VybGFuZCBtb2R1bGVcbiAqIEByZXR1cm5zIHRoZSBtZXRob2QgbmFtZXMgdGhhdCBhcmUgbm90IGNvbnNpZGVyZWQgc3RhdGljIG9yIGZhbHNlIGlmIGFsbFxuICogICAgICAgICAgbWV0aG9kcyBhcmUgc3RhdGljXG4gKi8gZXhwb3J0IGZ1bmN0aW9uIGdldE5vblN0YXRpY01ldGhvZHMoaGFuZGxlcnMpIHtcbiAgICAvLyBXZSBjYW4gY3VycmVudGx5IG9ubHkgc3RhdGljYWxseSBvcHRpbWl6ZSBpZiBvbmx5IEdFVC9IRUFEIGFyZSB1c2VkIGFzXG4gICAgLy8gcHJlcmVuZGVyIGNhbid0IGJlIHVzZWQgY29uZGl0aW9uYWxseSBiYXNlZCBvbiB0aGUgbWV0aG9kIGN1cnJlbnRseS5cbiAgICBjb25zdCBtZXRob2RzID0gTk9OX1NUQVRJQ19NRVRIT0RTLmZpbHRlcigobWV0aG9kKT0+aGFuZGxlcnNbbWV0aG9kXSk7XG4gICAgaWYgKG1ldGhvZHMubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIG1ldGhvZHM7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldC1ub24tc3RhdGljLW1ldGhvZHMuanMubWFwIl0sIm5hbWVzIjpbIk5PTl9TVEFUSUNfTUVUSE9EUyIsImdldE5vblN0YXRpY01ldGhvZHMiLCJoYW5kbGVycyIsIm1ldGhvZHMiLCJmaWx0ZXIiLCJtZXRob2QiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/get-non-static-methods.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/get-pathname-from-absolute-path.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/get-pathname-from-absolute-path.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPathnameFromAbsolutePath: () => (/* binding */ getPathnameFromAbsolutePath)\n/* harmony export */ });\n/**\n * Get pathname from absolute path.\n *\n * @param absolutePath the absolute path\n * @returns the pathname\n */function getPathnameFromAbsolutePath(absolutePath) {\n  // Remove prefix including app dir\n  let appDir = \"/app/\";\n  if (!absolutePath.includes(appDir)) {\n    appDir = \"\\\\app\\\\\";\n  }\n  const [, ...parts] = absolutePath.split(appDir);\n  const relativePath = appDir[0] + parts.join(appDir);\n  // remove extension\n  const pathname = relativePath.split(\".\").slice(0, -1).join(\".\");\n  return pathname;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL2hlbHBlcnMvZ2V0LXBhdGhuYW1lLWZyb20tYWJzb2x1dGUtcGF0aC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQVcsU0FBU0EsMkJBQTJCQSxDQUFDQyxZQUFZLEVBQUU7RUFDMUQ7RUFDQSxJQUFJQyxNQUFNLEdBQUcsT0FBTztFQUNwQixJQUFJLENBQUNELFlBQVksQ0FBQ0UsUUFBUSxDQUFDRCxNQUFNLENBQUMsRUFBRTtJQUNoQ0EsTUFBTSxHQUFHLFNBQVM7RUFDdEI7RUFDQSxNQUFNLEdBQUcsR0FBR0UsS0FBSyxDQUFDLEdBQUdILFlBQVksQ0FBQ0ksS0FBSyxDQUFDSCxNQUFNLENBQUM7RUFDL0MsTUFBTUksWUFBWSxHQUFHSixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUdFLEtBQUssQ0FBQ0csSUFBSSxDQUFDTCxNQUFNLENBQUM7RUFDbkQ7RUFDQSxNQUFNTSxRQUFRLEdBQUdGLFlBQVksQ0FBQ0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUNGLElBQUksQ0FBQyxHQUFHLENBQUM7RUFDL0QsT0FBT0MsUUFBUTtBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL2hlbHBlcnMvZ2V0LXBhdGhuYW1lLWZyb20tYWJzb2x1dGUtcGF0aC5qcz80MTdjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR2V0IHBhdGhuYW1lIGZyb20gYWJzb2x1dGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gYWJzb2x1dGVQYXRoIHRoZSBhYnNvbHV0ZSBwYXRoXG4gKiBAcmV0dXJucyB0aGUgcGF0aG5hbWVcbiAqLyBleHBvcnQgZnVuY3Rpb24gZ2V0UGF0aG5hbWVGcm9tQWJzb2x1dGVQYXRoKGFic29sdXRlUGF0aCkge1xuICAgIC8vIFJlbW92ZSBwcmVmaXggaW5jbHVkaW5nIGFwcCBkaXJcbiAgICBsZXQgYXBwRGlyID0gXCIvYXBwL1wiO1xuICAgIGlmICghYWJzb2x1dGVQYXRoLmluY2x1ZGVzKGFwcERpcikpIHtcbiAgICAgICAgYXBwRGlyID0gXCJcXFxcYXBwXFxcXFwiO1xuICAgIH1cbiAgICBjb25zdCBbLCAuLi5wYXJ0c10gPSBhYnNvbHV0ZVBhdGguc3BsaXQoYXBwRGlyKTtcbiAgICBjb25zdCByZWxhdGl2ZVBhdGggPSBhcHBEaXJbMF0gKyBwYXJ0cy5qb2luKGFwcERpcik7XG4gICAgLy8gcmVtb3ZlIGV4dGVuc2lvblxuICAgIGNvbnN0IHBhdGhuYW1lID0gcmVsYXRpdmVQYXRoLnNwbGl0KFwiLlwiKS5zbGljZSgwLCAtMSkuam9pbihcIi5cIik7XG4gICAgcmV0dXJuIHBhdGhuYW1lO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXQtcGF0aG5hbWUtZnJvbS1hYnNvbHV0ZS1wYXRoLmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRQYXRobmFtZUZyb21BYnNvbHV0ZVBhdGgiLCJhYnNvbHV0ZVBhdGgiLCJhcHBEaXIiLCJpbmNsdWRlcyIsInBhcnRzIiwic3BsaXQiLCJyZWxhdGl2ZVBhdGgiLCJqb2luIiwicGF0aG5hbWUiLCJzbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/get-pathname-from-absolute-path.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/parsed-url-query-to-params.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/parsed-url-query-to-params.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parsedUrlQueryToParams: () => (/* binding */ parsedUrlQueryToParams)\n/* harmony export */ });\n/**\n * Converts the query into params.\n *\n * @param query the query to convert to params\n * @returns the params\n */function parsedUrlQueryToParams(query) {\n  const params = {};\n  for (const [key, value] of Object.entries(query)) {\n    if (typeof value === \"undefined\") continue;\n    params[key] = value;\n  }\n  return params;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL2hlbHBlcnMvcGFyc2VkLXVybC1xdWVyeS10by1wYXJhbXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFXLFNBQVNBLHNCQUFzQkEsQ0FBQ0MsS0FBSyxFQUFFO0VBQzlDLE1BQU1DLE1BQU0sR0FBRyxDQUFDLENBQUM7RUFDakIsS0FBSyxNQUFNLENBQUNDLEdBQUcsRUFBRUMsS0FBSyxDQUFDLElBQUlDLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDTCxLQUFLLENBQUMsRUFBQztJQUM3QyxJQUFJLE9BQU9HLEtBQUssS0FBSyxXQUFXLEVBQUU7SUFDbENGLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLEdBQUdDLEtBQUs7RUFDdkI7RUFDQSxPQUFPRixNQUFNO0FBQ2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvZXNtL3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9wYXJzZWQtdXJsLXF1ZXJ5LXRvLXBhcmFtcy5qcz9iYjQ5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29udmVydHMgdGhlIHF1ZXJ5IGludG8gcGFyYW1zLlxuICpcbiAqIEBwYXJhbSBxdWVyeSB0aGUgcXVlcnkgdG8gY29udmVydCB0byBwYXJhbXNcbiAqIEByZXR1cm5zIHRoZSBwYXJhbXNcbiAqLyBleHBvcnQgZnVuY3Rpb24gcGFyc2VkVXJsUXVlcnlUb1BhcmFtcyhxdWVyeSkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHt9O1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHF1ZXJ5KSl7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpIGNvbnRpbnVlO1xuICAgICAgICBwYXJhbXNba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gcGFyYW1zO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZWQtdXJsLXF1ZXJ5LXRvLXBhcmFtcy5qcy5tYXAiXSwibmFtZXMiOlsicGFyc2VkVXJsUXVlcnlUb1BhcmFtcyIsInF1ZXJ5IiwicGFyYW1zIiwia2V5IiwidmFsdWUiLCJPYmplY3QiLCJlbnRyaWVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/parsed-url-query-to-params.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/proxy-request.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/proxy-request.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   proxyRequest: () => (/* binding */ proxyRequest)\n/* harmony export */ });\n/* harmony import */ var next_dist_compiled_edge_runtime_cookies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/compiled/@edge-runtime/cookies */ \"(rsc)/./node_modules/next/dist/compiled/@edge-runtime/cookies/index.js\");\n/* harmony import */ var next_dist_compiled_edge_runtime_cookies__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_compiled_edge_runtime_cookies__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _web_next_url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../web/next-url */ \"(rsc)/./node_modules/next/dist/esm/server/web/next-url.js\");\n/* harmony import */ var _clean_url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./clean-url */ \"(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/clean-url.js\");\n\n\n\nfunction proxyRequest(request, {\n  dynamic\n}, hooks) {\n  function handleNextUrlBailout(prop) {\n    switch (prop) {\n      case \"search\":\n      case \"searchParams\":\n      case \"toString\":\n      case \"href\":\n      case \"origin\":\n        hooks.staticGenerationBailout(`nextUrl.${prop}`);\n        return;\n      default:\n        return;\n    }\n  }\n  const cache = {};\n  const handleForceStatic = (url, prop) => {\n    switch (prop) {\n      case \"search\":\n        return \"\";\n      case \"searchParams\":\n        if (!cache.searchParams) cache.searchParams = new URLSearchParams();\n        return cache.searchParams;\n      case \"url\":\n      case \"href\":\n        if (!cache.url) cache.url = (0,_clean_url__WEBPACK_IMPORTED_MODULE_2__.cleanURL)(url);\n        return cache.url;\n      case \"toJSON\":\n      case \"toString\":\n        if (!cache.url) cache.url = (0,_clean_url__WEBPACK_IMPORTED_MODULE_2__.cleanURL)(url);\n        if (!cache.toString) cache.toString = () => cache.url;\n        return cache.toString;\n      case \"headers\":\n        if (!cache.headers) cache.headers = new Headers();\n        return cache.headers;\n      case \"cookies\":\n        if (!cache.headers) cache.headers = new Headers();\n        if (!cache.cookies) cache.cookies = new next_dist_compiled_edge_runtime_cookies__WEBPACK_IMPORTED_MODULE_0__.RequestCookies(cache.headers);\n        return cache.cookies;\n      case \"clone\":\n        if (!cache.url) cache.url = (0,_clean_url__WEBPACK_IMPORTED_MODULE_2__.cleanURL)(url);\n        return () => new _web_next_url__WEBPACK_IMPORTED_MODULE_1__.NextURL(cache.url);\n      default:\n        break;\n    }\n  };\n  const wrappedNextUrl = new Proxy(request.nextUrl, {\n    get(target, prop) {\n      handleNextUrlBailout(prop);\n      if (dynamic === \"force-static\" && typeof prop === \"string\") {\n        const result = handleForceStatic(target.href, prop);\n        if (result !== undefined) return result;\n      }\n      const value = target[prop];\n      if (typeof value === \"function\") {\n        return value.bind(target);\n      }\n      return value;\n    },\n    set(target, prop, value) {\n      handleNextUrlBailout(prop);\n      target[prop] = value;\n      return true;\n    }\n  });\n  const handleReqBailout = prop => {\n    switch (prop) {\n      case \"headers\":\n        hooks.headerHooks.headers();\n        return;\n      // if request.url is accessed directly instead of\n      // request.nextUrl we bail since it includes query\n      // values that can be relied on dynamically\n      case \"url\":\n      case \"cookies\":\n      case \"body\":\n      case \"blob\":\n      case \"json\":\n      case \"text\":\n      case \"arrayBuffer\":\n      case \"formData\":\n        hooks.staticGenerationBailout(`request.${prop}`);\n        return;\n      default:\n        return;\n    }\n  };\n  return new Proxy(request, {\n    get(target, prop) {\n      handleReqBailout(prop);\n      if (prop === \"nextUrl\") {\n        return wrappedNextUrl;\n      }\n      if (dynamic === \"force-static\" && typeof prop === \"string\") {\n        const result = handleForceStatic(target.url, prop);\n        if (result !== undefined) return result;\n      }\n      const value = target[prop];\n      if (typeof value === \"function\") {\n        return value.bind(target);\n      }\n      return value;\n    },\n    set(target, prop, value) {\n      handleReqBailout(prop);\n      target[prop] = value;\n      return true;\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/proxy-request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/resolve-handler-error.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/resolve-handler-error.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveHandlerError: () => (/* binding */ resolveHandlerError)\n/* harmony export */ });\n/* harmony import */ var _client_components_not_found__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../client/components/not-found */ \"(rsc)/./node_modules/next/dist/esm/client/components/not-found.js\");\n/* harmony import */ var _client_components_redirect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../client/components/redirect */ \"(rsc)/./node_modules/next/dist/esm/client/components/redirect.js\");\n/* harmony import */ var _helpers_response_handlers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../helpers/response-handlers */ \"(rsc)/./node_modules/next/dist/esm/server/future/route-modules/helpers/response-handlers.js\");\n\n\n\nfunction resolveHandlerError(err) {\n  if ((0,_client_components_redirect__WEBPACK_IMPORTED_MODULE_1__.isRedirectError)(err)) {\n    const redirect = (0,_client_components_redirect__WEBPACK_IMPORTED_MODULE_1__.getURLFromRedirectError)(err);\n    if (!redirect) {\n      throw new Error(\"Invariant: Unexpected redirect url format\");\n    }\n    const status = (0,_client_components_redirect__WEBPACK_IMPORTED_MODULE_1__.getRedirectStatusCodeFromError)(err);\n    // This is a redirect error! Send the redirect response.\n    return (0,_helpers_response_handlers__WEBPACK_IMPORTED_MODULE_2__.handleRedirectResponse)(redirect, err.mutableCookies, status);\n  }\n  if ((0,_client_components_not_found__WEBPACK_IMPORTED_MODULE_0__.isNotFoundError)(err)) {\n    // This is a not found error! Send the not found response.\n    return (0,_helpers_response_handlers__WEBPACK_IMPORTED_MODULE_2__.handleNotFoundResponse)();\n  }\n  // Return false to indicate that this is not a handled error.\n  return false;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL2hlbHBlcnMvcmVzb2x2ZS1oYW5kbGVyLWVycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNkU7QUFDd0Q7QUFDcEM7QUFDMUYsU0FBU00sbUJBQW1CQSxDQUFDQyxHQUFHLEVBQUU7RUFDckMsSUFBSUwsNEVBQWUsQ0FBQ0ssR0FBRyxDQUFDLEVBQUU7SUFDdEIsTUFBTUMsUUFBUSxHQUFHUCxvRkFBdUIsQ0FBQ00sR0FBRyxDQUFDO0lBQzdDLElBQUksQ0FBQ0MsUUFBUSxFQUFFO01BQ1gsTUFBTSxJQUFJQyxLQUFLLENBQUMsMkNBQTJDLENBQUM7SUFDaEU7SUFDQSxNQUFNQyxNQUFNLEdBQUdQLDJGQUE4QixDQUFDSSxHQUFHLENBQUM7SUFDbEQ7SUFDQSxPQUFPRixrRkFBc0IsQ0FBQ0csUUFBUSxFQUFFRCxHQUFHLENBQUNJLGNBQWMsRUFBRUQsTUFBTSxDQUFDO0VBQ3ZFO0VBQ0EsSUFBSVYsNkVBQWUsQ0FBQ08sR0FBRyxDQUFDLEVBQUU7SUFDdEI7SUFDQSxPQUFPSCxrRkFBc0IsQ0FBQyxDQUFDO0VBQ25DO0VBQ0E7RUFDQSxPQUFPLEtBQUs7QUFDaEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9oZWxwZXJzL3Jlc29sdmUtaGFuZGxlci1lcnJvci5qcz9iMGQwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzTm90Rm91bmRFcnJvciB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9jbGllbnQvY29tcG9uZW50cy9ub3QtZm91bmRcIjtcbmltcG9ydCB7IGdldFVSTEZyb21SZWRpcmVjdEVycm9yLCBpc1JlZGlyZWN0RXJyb3IsIGdldFJlZGlyZWN0U3RhdHVzQ29kZUZyb21FcnJvciB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9jbGllbnQvY29tcG9uZW50cy9yZWRpcmVjdFwiO1xuaW1wb3J0IHsgaGFuZGxlTm90Rm91bmRSZXNwb25zZSwgaGFuZGxlUmVkaXJlY3RSZXNwb25zZSB9IGZyb20gXCIuLi8uLi9oZWxwZXJzL3Jlc3BvbnNlLWhhbmRsZXJzXCI7XG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUhhbmRsZXJFcnJvcihlcnIpIHtcbiAgICBpZiAoaXNSZWRpcmVjdEVycm9yKGVycikpIHtcbiAgICAgICAgY29uc3QgcmVkaXJlY3QgPSBnZXRVUkxGcm9tUmVkaXJlY3RFcnJvcihlcnIpO1xuICAgICAgICBpZiAoIXJlZGlyZWN0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhcmlhbnQ6IFVuZXhwZWN0ZWQgcmVkaXJlY3QgdXJsIGZvcm1hdFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGF0dXMgPSBnZXRSZWRpcmVjdFN0YXR1c0NvZGVGcm9tRXJyb3IoZXJyKTtcbiAgICAgICAgLy8gVGhpcyBpcyBhIHJlZGlyZWN0IGVycm9yISBTZW5kIHRoZSByZWRpcmVjdCByZXNwb25zZS5cbiAgICAgICAgcmV0dXJuIGhhbmRsZVJlZGlyZWN0UmVzcG9uc2UocmVkaXJlY3QsIGVyci5tdXRhYmxlQ29va2llcywgc3RhdHVzKTtcbiAgICB9XG4gICAgaWYgKGlzTm90Rm91bmRFcnJvcihlcnIpKSB7XG4gICAgICAgIC8vIFRoaXMgaXMgYSBub3QgZm91bmQgZXJyb3IhIFNlbmQgdGhlIG5vdCBmb3VuZCByZXNwb25zZS5cbiAgICAgICAgcmV0dXJuIGhhbmRsZU5vdEZvdW5kUmVzcG9uc2UoKTtcbiAgICB9XG4gICAgLy8gUmV0dXJuIGZhbHNlIHRvIGluZGljYXRlIHRoYXQgdGhpcyBpcyBub3QgYSBoYW5kbGVkIGVycm9yLlxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzb2x2ZS1oYW5kbGVyLWVycm9yLmpzLm1hcCJdLCJuYW1lcyI6WyJpc05vdEZvdW5kRXJyb3IiLCJnZXRVUkxGcm9tUmVkaXJlY3RFcnJvciIsImlzUmVkaXJlY3RFcnJvciIsImdldFJlZGlyZWN0U3RhdHVzQ29kZUZyb21FcnJvciIsImhhbmRsZU5vdEZvdW5kUmVzcG9uc2UiLCJoYW5kbGVSZWRpcmVjdFJlc3BvbnNlIiwicmVzb2x2ZUhhbmRsZXJFcnJvciIsImVyciIsInJlZGlyZWN0IiwiRXJyb3IiLCJzdGF0dXMiLCJtdXRhYmxlQ29va2llcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/resolve-handler-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/module.compiled.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/future/route-modules/app-route/module.compiled.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (true) {\n  module.exports = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.js */ \"(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/module.js\");\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZC5qcyIsIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLElBQW1DLEVBQUU7RUFDckNHLDJMQUFxRjtBQUN6RixDQUFDLE1BQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWQuanM/NmNhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpZiAocHJvY2Vzcy5lbnYuTkVYVF9SVU5USU1FID09PSBcImVkZ2VcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5qc1wiKTtcbn0gZWxzZSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibmV4dC9kaXN0L2NvbXBpbGVkL25leHQtc2VydmVyL2FwcC1yb3V0ZS5ydW50aW1lLmRldi5qc1wiKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52LlRVUkJPUEFDSykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvbmV4dC1zZXJ2ZXIvYXBwLXJvdXRlLXR1cmJvLnJ1bnRpbWUucHJvZC5qc1wiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvbmV4dC1zZXJ2ZXIvYXBwLXJvdXRlLnJ1bnRpbWUucHJvZC5qc1wiKTtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZS5jb21waWxlZC5qcy5tYXAiXSwibmFtZXMiOlsicHJvY2VzcyIsImVudiIsIk5FWFRfUlVOVElNRSIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwiVFVSQk9QQUNLIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/module.compiled.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/module.js":
/*!************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/future/route-modules/app-route/module.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppRouteRouteModule: () => (/* binding */ AppRouteRouteModule),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _route_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../route-module */ \"(rsc)/./node_modules/next/dist/esm/server/future/route-modules/route-module.js\");\n/* harmony import */ var _async_storage_request_async_storage_wrapper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../async-storage/request-async-storage-wrapper */ \"(rsc)/./node_modules/next/dist/esm/server/async-storage/request-async-storage-wrapper.js\");\n/* harmony import */ var _async_storage_static_generation_async_storage_wrapper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../async-storage/static-generation-async-storage-wrapper */ \"(rsc)/./node_modules/next/dist/esm/server/async-storage/static-generation-async-storage-wrapper.js\");\n/* harmony import */ var _helpers_response_handlers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/response-handlers */ \"(rsc)/./node_modules/next/dist/esm/server/future/route-modules/helpers/response-handlers.js\");\n/* harmony import */ var _web_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../web/http */ \"(rsc)/./node_modules/next/dist/esm/server/web/http.js\");\n/* harmony import */ var _lib_patch_fetch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/esm/server/lib/patch-fetch.js\");\n/* harmony import */ var _lib_trace_tracer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/esm/server/lib/trace/tracer.js\");\n/* harmony import */ var _lib_trace_constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../lib/trace/constants */ \"(rsc)/./node_modules/next/dist/esm/server/lib/trace/constants.js\");\n/* harmony import */ var _helpers_get_pathname_from_absolute_path__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./helpers/get-pathname-from-absolute-path */ \"(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/get-pathname-from-absolute-path.js\");\n/* harmony import */ var _helpers_proxy_request__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./helpers/proxy-request */ \"(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/proxy-request.js\");\n/* harmony import */ var _helpers_resolve_handler_error__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./helpers/resolve-handler-error */ \"(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/resolve-handler-error.js\");\n/* harmony import */ var _build_output_log__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../build/output/log */ \"(rsc)/./node_modules/next/dist/esm/build/output/log.js\");\n/* harmony import */ var _helpers_auto_implement_methods__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./helpers/auto-implement-methods */ \"(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/auto-implement-methods.js\");\n/* harmony import */ var _helpers_get_non_static_methods__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./helpers/get-non-static-methods */ \"(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/get-non-static-methods.js\");\n/* harmony import */ var _web_spec_extension_adapters_request_cookies__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../web/spec-extension/adapters/request-cookies */ \"(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/adapters/request-cookies.js\");\n/* harmony import */ var _helpers_parsed_url_query_to_params__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./helpers/parsed-url-query-to-params */ \"(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/helpers/parsed-url-query-to-params.js\");\n/* harmony import */ var _client_components_hooks_server_context__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../client/components/hooks-server-context */ \"(rsc)/./node_modules/next/dist/esm/client/components/hooks-server-context.js\");\n/* harmony import */ var _client_components_headers__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../client/components/headers */ \"(rsc)/./node_modules/next/dist/esm/client/components/headers.js\");\n/* harmony import */ var _client_components_static_generation_bailout__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../../client/components/static-generation-bailout */ \"(rsc)/./node_modules/next/dist/esm/client/components/static-generation-bailout.js\");\n/* harmony import */ var _client_components_request_async_storage_external__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../../client/components/request-async-storage.external */ \"(shared)/./node_modules/next/dist/esm/client/components/request-async-storage.external.js\");\n/* harmony import */ var _client_components_static_generation_async_storage_external__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../../../client/components/static-generation-async-storage.external */ \"(shared)/./node_modules/next/dist/esm/client/components/static-generation-async-storage.external.js\");\n/* harmony import */ var _client_components_action_async_storage_external__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../../../client/components/action-async-storage.external */ \"(shared)/./node_modules/next/dist/esm/client/components/action-async-storage.external.js\");\n/* harmony import */ var _shared_modules__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./shared-modules */ \"(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/shared-modules.js\");\n/* harmony import */ var _lib_server_action_request_meta__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../../lib/server-action-request-meta */ \"(rsc)/./node_modules/next/dist/esm/server/lib/server-action-request-meta.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * AppRouteRouteHandler is the handler for app routes.\n */\nclass AppRouteRouteModule extends _route_module__WEBPACK_IMPORTED_MODULE_0__.RouteModule {\n  static #_ = this.sharedModules = _shared_modules__WEBPACK_IMPORTED_MODULE_22__;\n  constructor({\n    userland,\n    definition,\n    resolvedPagePath,\n    nextConfigOutput\n  }) {\n    super({\n      userland,\n      definition\n    });\n    /**\n    * A reference to the request async storage.\n    */\n    this.requestAsyncStorage = _client_components_request_async_storage_external__WEBPACK_IMPORTED_MODULE_19__.requestAsyncStorage;\n    /**\n    * A reference to the static generation async storage.\n    */\n    this.staticGenerationAsyncStorage = _client_components_static_generation_async_storage_external__WEBPACK_IMPORTED_MODULE_20__.staticGenerationAsyncStorage;\n    /**\n    * An interface to call server hooks which interact with the underlying\n    * storage.\n    */\n    this.serverHooks = _client_components_hooks_server_context__WEBPACK_IMPORTED_MODULE_16__;\n    /**\n    * An interface to call header hooks which interact with the underlying\n    * request storage.\n    */\n    this.headerHooks = _client_components_headers__WEBPACK_IMPORTED_MODULE_17__;\n    /**\n    * An interface to call static generation bailout hooks which interact with\n    * the underlying static generation storage.\n    */\n    this.staticGenerationBailout = _client_components_static_generation_bailout__WEBPACK_IMPORTED_MODULE_18__.staticGenerationBailout;\n    /**\n    * A reference to the mutation related async storage, such as mutations of\n    * cookies.\n    */\n    this.actionAsyncStorage = _client_components_action_async_storage_external__WEBPACK_IMPORTED_MODULE_21__.actionAsyncStorage;\n    this.resolvedPagePath = resolvedPagePath;\n    this.nextConfigOutput = nextConfigOutput;\n    // Automatically implement some methods if they aren't implemented by the\n    // userland module.\n    this.methods = (0,_helpers_auto_implement_methods__WEBPACK_IMPORTED_MODULE_12__.autoImplementMethods)(userland);\n    // Get the non-static methods for this route.\n    this.nonStaticMethods = (0,_helpers_get_non_static_methods__WEBPACK_IMPORTED_MODULE_13__.getNonStaticMethods)(userland);\n    // Get the dynamic property from the userland module.\n    this.dynamic = this.userland.dynamic;\n    if (this.nextConfigOutput === \"export\") {\n      if (!this.dynamic || this.dynamic === \"auto\") {\n        this.dynamic = \"error\";\n      } else if (this.dynamic === \"force-dynamic\") {\n        throw new Error(`export const dynamic = \"force-dynamic\" on page \"${definition.pathname}\" cannot be used with \"output: export\". See more info here: https://nextjs.org/docs/advanced-features/static-html-export`);\n      }\n    }\n    // We only warn in development after here, so return if we're not in\n    // development.\n    if (true) {\n      // Print error in development if the exported handlers are in lowercase, only\n      // uppercase handlers are supported.\n      const lowercased = _web_http__WEBPACK_IMPORTED_MODULE_4__.HTTP_METHODS.map(method => method.toLowerCase());\n      for (const method of lowercased) {\n        if (method in this.userland) {\n          _build_output_log__WEBPACK_IMPORTED_MODULE_11__.error(`Detected lowercase method '${method}' in '${this.resolvedPagePath}'. Export the uppercase '${method.toUpperCase()}' method name to fix this error.`);\n        }\n      }\n      // Print error if the module exports a default handler, they must use named\n      // exports for each HTTP method.\n      if (\"default\" in this.userland) {\n        _build_output_log__WEBPACK_IMPORTED_MODULE_11__.error(`Detected default export in '${this.resolvedPagePath}'. Export a named export for each HTTP method instead.`);\n      }\n      // If there is no methods exported by this module, then return a not found\n      // response.\n      if (!_web_http__WEBPACK_IMPORTED_MODULE_4__.HTTP_METHODS.some(method => method in this.userland)) {\n        _build_output_log__WEBPACK_IMPORTED_MODULE_11__.error(`No HTTP methods exported in '${this.resolvedPagePath}'. Export a named export for each HTTP method.`);\n      }\n    }\n  }\n  /**\n  * Resolves the handler function for the given method.\n  *\n  * @param method the requested method\n  * @returns the handler function for the given method\n  */\n  resolve(method) {\n    // Ensure that the requested method is a valid method (to prevent RCE's).\n    if (!(0,_web_http__WEBPACK_IMPORTED_MODULE_4__.isHTTPMethod)(method)) return _helpers_response_handlers__WEBPACK_IMPORTED_MODULE_3__.handleBadRequestResponse;\n    // Return the handler.\n    return this.methods[method];\n  }\n  /**\n  * Executes the route handler.\n  */\n  async execute(request, context) {\n    // Get the handler function for the given method.\n    const handler = this.resolve(request.method);\n    // Get the context for the request.\n    const requestContext = {\n      req: request\n    };\n    requestContext.renderOpts = {\n      previewProps: context.prerenderManifest.preview\n    };\n    // Get the context for the static generation.\n    const staticGenerationContext = {\n      urlPathname: request.nextUrl.pathname,\n      renderOpts: context.renderOpts\n    };\n    // Add the fetchCache option to the renderOpts.\n    staticGenerationContext.renderOpts.fetchCache = this.userland.fetchCache;\n    // Run the handler with the request AsyncLocalStorage to inject the helper\n    // support. We set this to `unknown` because the type is not known until\n    // runtime when we do a instanceof check below.\n    const response = await this.actionAsyncStorage.run({\n      isAppRoute: true,\n      isAction: (0,_lib_server_action_request_meta__WEBPACK_IMPORTED_MODULE_23__.getIsServerAction)(request)\n    }, () => _async_storage_request_async_storage_wrapper__WEBPACK_IMPORTED_MODULE_1__.RequestAsyncStorageWrapper.wrap(this.requestAsyncStorage, requestContext, () => _async_storage_static_generation_async_storage_wrapper__WEBPACK_IMPORTED_MODULE_2__.StaticGenerationAsyncStorageWrapper.wrap(this.staticGenerationAsyncStorage, staticGenerationContext, staticGenerationStore => {\n      var _getTracer_getRootSpanAttributes;\n      // Check to see if we should bail out of static generation based on\n      // having non-static methods.\n      if (this.nonStaticMethods) {\n        this.staticGenerationBailout(`non-static methods used ${this.nonStaticMethods.join(\", \")}`);\n      }\n      // Update the static generation store based on the dynamic property.\n      switch (this.dynamic) {\n        case \"force-dynamic\":\n          // The dynamic property is set to force-dynamic, so we should\n          // force the page to be dynamic.\n          staticGenerationStore.forceDynamic = true;\n          this.staticGenerationBailout(`force-dynamic`, {\n            dynamic: this.dynamic\n          });\n          break;\n        case \"force-static\":\n          // The dynamic property is set to force-static, so we should\n          // force the page to be static.\n          staticGenerationStore.forceStatic = true;\n          break;\n        case \"error\":\n          // The dynamic property is set to error, so we should throw an\n          // error if the page is being statically generated.\n          staticGenerationStore.dynamicShouldError = true;\n          break;\n        default:\n          break;\n      }\n      // If the static generation store does not have a revalidate value\n      // set, then we should set it the revalidate value from the userland\n      // module or default to false.\n      staticGenerationStore.revalidate ??= this.userland.revalidate ?? false;\n      // Wrap the request so we can add additional functionality to cases\n      // that might change it's output or affect the rendering.\n      const wrappedRequest = (0,_helpers_proxy_request__WEBPACK_IMPORTED_MODULE_9__.proxyRequest)(request, {\n        dynamic: this.dynamic\n      }, {\n        headerHooks: this.headerHooks,\n        serverHooks: this.serverHooks,\n        staticGenerationBailout: this.staticGenerationBailout\n      });\n      // TODO: propagate this pathname from route matcher\n      const route = (0,_helpers_get_pathname_from_absolute_path__WEBPACK_IMPORTED_MODULE_8__.getPathnameFromAbsolutePath)(this.resolvedPagePath);\n      (_getTracer_getRootSpanAttributes = (0,_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_6__.getTracer)().getRootSpanAttributes()) == null ? void 0 : _getTracer_getRootSpanAttributes.set(\"next.route\", route);\n      return (0,_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_6__.getTracer)().trace(_lib_trace_constants__WEBPACK_IMPORTED_MODULE_7__.AppRouteRouteHandlersSpan.runHandler, {\n        spanName: `executing api route (app) ${route}`,\n        attributes: {\n          \"next.route\": route\n        }\n      }, async () => {\n        var _staticGenerationStore_tags;\n        // Patch the global fetch.\n        (0,_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_5__.patchFetch)({\n          serverHooks: this.serverHooks,\n          staticGenerationAsyncStorage: this.staticGenerationAsyncStorage\n        });\n        const res = await handler(wrappedRequest, {\n          params: context.params ? (0,_helpers_parsed_url_query_to_params__WEBPACK_IMPORTED_MODULE_15__.parsedUrlQueryToParams)(context.params) : undefined\n        });\n        if (!(res instanceof Response)) {\n          throw new Error(`No response is returned from route handler '${this.resolvedPagePath}'. Ensure you return a \\`Response\\` or a \\`NextResponse\\` in all branches of your handler.`);\n        }\n        context.renderOpts.fetchMetrics = staticGenerationStore.fetchMetrics;\n        context.renderOpts.waitUntil = Promise.all(Object.values(staticGenerationStore.pendingRevalidates || []));\n        (0,_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_5__.addImplicitTags)(staticGenerationStore);\n        context.renderOpts.fetchTags = (_staticGenerationStore_tags = staticGenerationStore.tags) == null ? void 0 : _staticGenerationStore_tags.join(\",\");\n        // It's possible cookies were set in the handler, so we need\n        // to merge the modified cookies and the returned response\n        // here.\n        const requestStore = this.requestAsyncStorage.getStore();\n        if (requestStore && requestStore.mutableCookies) {\n          const headers = new Headers(res.headers);\n          if ((0,_web_spec_extension_adapters_request_cookies__WEBPACK_IMPORTED_MODULE_14__.appendMutableCookies)(headers, requestStore.mutableCookies)) {\n            return new Response(res.body, {\n              status: res.status,\n              statusText: res.statusText,\n              headers\n            });\n          }\n        }\n        return res;\n      });\n    })));\n    // If the handler did't return a valid response, then return the internal\n    // error response.\n    if (!(response instanceof Response)) {\n      // TODO: validate the correct handling behavior, maybe log something?\n      return (0,_helpers_response_handlers__WEBPACK_IMPORTED_MODULE_3__.handleInternalServerErrorResponse)();\n    }\n    if (response.headers.has(\"x-middleware-rewrite\")) {\n      // TODO: move this error into the `NextResponse.rewrite()` function.\n      // TODO-APP: re-enable support below when we can proxy these type of requests\n      throw new Error(\"NextResponse.rewrite() was used in a app route handler, this is not currently supported. Please remove the invocation to continue.\");\n      // // This is a rewrite created via `NextResponse.rewrite()`. We need to send\n      // // the response up so it can be handled by the backing server.\n      // // If the server is running in minimal mode, we just want to forward the\n      // // response (including the rewrite headers) upstream so it can perform the\n      // // redirect for us, otherwise return with the special condition so this\n      // // server can perform a rewrite.\n      // if (!minimalMode) {\n      //   return { response, condition: 'rewrite' }\n      // }\n      // // Relativize the url so it's relative to the base url. This is so the\n      // // outgoing headers upstream can be relative.\n      // const rewritePath = response.headers.get('x-middleware-rewrite')!\n      // const initUrl = getRequestMeta(req, 'initURL')!\n      // const { pathname } = parseUrl(relativizeURL(rewritePath, initUrl))\n      // response.headers.set('x-middleware-rewrite', pathname)\n    }\n\n    if (response.headers.get(\"x-middleware-next\") === \"1\") {\n      // TODO: move this error into the `NextResponse.next()` function.\n      throw new Error(\"NextResponse.next() was used in a app route handler, this is not supported. See here for more info: https://nextjs.org/docs/messages/next-response-next-in-app-route-handler\");\n    }\n    return response;\n  }\n  async handle(request, context) {\n    try {\n      // Execute the route to get the response.\n      const response = await this.execute(request, context);\n      // The response was handled, return it.\n      return response;\n    } catch (err) {\n      // Try to resolve the error to a response, else throw it again.\n      const response = (0,_helpers_resolve_handler_error__WEBPACK_IMPORTED_MODULE_10__.resolveHandlerError)(err);\n      if (!response) throw err;\n      // The response was resolved, return it.\n      return response;\n    }\n  }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AppRouteRouteModule);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE4QztBQUNvRDtBQUNtQjtBQUNWO0FBQzVDO0FBQ1E7QUFDakI7QUFDbUI7QUFDZTtBQUNqQztBQUNlO0FBQ2xCO0FBQ29CO0FBQ0Q7QUFDcUI7QUFDZDtBQUNJO0FBQ2I7QUFDNkI7QUFDQztBQUNtQjtBQUNyQjtBQUMvQztBQUMwQjtBQUM1RTtBQUNBO0FBQ0E7QUFBVyxNQUFNMkIsbUJBQW1CLFNBQVMzQixzREFBVyxDQUFDO0VBQ3JELE9BQU8sQ0FBQzRCLENBQUMsR0FBRyxJQUFJLENBQUNILGFBQWEsR0FBR0EsNkNBQWE7RUFDOUNJLFdBQVdBLENBQUM7SUFBRUMsUUFBUTtJQUFFQyxVQUFVO0lBQUVDLGdCQUFnQjtJQUFFQztFQUFpQixDQUFDLEVBQUM7SUFDckUsS0FBSyxDQUFDO01BQ0ZILFFBQVE7TUFDUkM7SUFDSixDQUFDLENBQUM7SUFDRjtBQUNSO0FBQ0E7SUFBTSxJQUFJLENBQUNULG1CQUFtQixHQUFHQSxtR0FBbUI7SUFDNUM7QUFDUjtBQUNBO0lBQU0sSUFBSSxDQUFDQyw0QkFBNEIsR0FBR0Esc0hBQTRCO0lBQzlEO0FBQ1I7QUFDQTtBQUNBO0lBQU0sSUFBSSxDQUFDSixXQUFXLEdBQUdBLHFFQUFXO0lBQzVCO0FBQ1I7QUFDQTtBQUNBO0lBQU0sSUFBSSxDQUFDQyxXQUFXLEdBQUdBLHdEQUFXO0lBQzVCO0FBQ1I7QUFDQTtBQUNBO0lBQU0sSUFBSSxDQUFDQyx1QkFBdUIsR0FBR0Esa0dBQXVCO0lBQ3BEO0FBQ1I7QUFDQTtBQUNBO0lBQU0sSUFBSSxDQUFDRyxrQkFBa0IsR0FBR0EsaUdBQWtCO0lBQzFDLElBQUksQ0FBQ1EsZ0JBQWdCLEdBQUdBLGdCQUFnQjtJQUN4QyxJQUFJLENBQUNDLGdCQUFnQixH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QUFHLENBQUMsc0JBQXNCLENBQUMsRUFBRTtNQUM5QztNQUNBO01BQ0EsTUFBTSxJQUFJbEUsS0FBSyxDQUFDLG9JQUFvSSxDQUFDO01BQ3pKO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtJQUNBOztJQUNBLElBQUl3QixRQUFRLENBQUNxQyxPQUFPLENBQUNNLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLEdBQUcsRUFBRTtNQUNuRDtNQUNBLE1BQU0sSUFBSW5FLEtBQUssQ0FBQyw4S0FBOEssQ0FBQztJQUNuTTtJQUNBLE9BQU93QixRQUFRO0VBQ25CO0VBQ0EsTUFBTTRDLE1BQU1BLENBQUN6RCxPQUFPLEVBQUVDLE9BQU8sRUFBRTtJQUMzQixJQUFJO01BQ0E7TUFDQSxNQUFNWSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUNkLE9BQU8sQ0FBQ0MsT0FBTyxFQUFFQyxPQUFPLENBQUM7TUFDckQ7TUFDQSxPQUFPWSxRQUFRO0lBQ25CLENBQUMsQ0FBQyxPQUFPNkMsR0FBRyxFQUFFO01BQ1Y7TUFDQSxNQUFNN0MsUUFBUSxHQUFHaEQsb0ZBQW1CLENBQUM2RixHQUFHLENBQUM7TUFDekMsSUFBSSxDQUFDN0MsUUFBUSxFQUFFLE1BQU02QyxHQUFHO01BQ3hCO01BQ0EsT0FBTzdDLFFBQVE7SUFDbkI7RUFDSjtBQUNKO0FBQ0EsaUVBQWVsQyxtQkFBbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuanM/OWViMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSb3V0ZU1vZHVsZSB9IGZyb20gXCIuLi9yb3V0ZS1tb2R1bGVcIjtcbmltcG9ydCB7IFJlcXVlc3RBc3luY1N0b3JhZ2VXcmFwcGVyIH0gZnJvbSBcIi4uLy4uLy4uL2FzeW5jLXN0b3JhZ2UvcmVxdWVzdC1hc3luYy1zdG9yYWdlLXdyYXBwZXJcIjtcbmltcG9ydCB7IFN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VXcmFwcGVyIH0gZnJvbSBcIi4uLy4uLy4uL2FzeW5jLXN0b3JhZ2Uvc3RhdGljLWdlbmVyYXRpb24tYXN5bmMtc3RvcmFnZS13cmFwcGVyXCI7XG5pbXBvcnQgeyBoYW5kbGVCYWRSZXF1ZXN0UmVzcG9uc2UsIGhhbmRsZUludGVybmFsU2VydmVyRXJyb3JSZXNwb25zZSB9IGZyb20gXCIuLi9oZWxwZXJzL3Jlc3BvbnNlLWhhbmRsZXJzXCI7XG5pbXBvcnQgeyBIVFRQX01FVEhPRFMsIGlzSFRUUE1ldGhvZCB9IGZyb20gXCIuLi8uLi8uLi93ZWIvaHR0cFwiO1xuaW1wb3J0IHsgYWRkSW1wbGljaXRUYWdzLCBwYXRjaEZldGNoIH0gZnJvbSBcIi4uLy4uLy4uL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0IHsgZ2V0VHJhY2VyIH0gZnJvbSBcIi4uLy4uLy4uL2xpYi90cmFjZS90cmFjZXJcIjtcbmltcG9ydCB7IEFwcFJvdXRlUm91dGVIYW5kbGVyc1NwYW4gfSBmcm9tIFwiLi4vLi4vLi4vbGliL3RyYWNlL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgZ2V0UGF0aG5hbWVGcm9tQWJzb2x1dGVQYXRoIH0gZnJvbSBcIi4vaGVscGVycy9nZXQtcGF0aG5hbWUtZnJvbS1hYnNvbHV0ZS1wYXRoXCI7XG5pbXBvcnQgeyBwcm94eVJlcXVlc3QgfSBmcm9tIFwiLi9oZWxwZXJzL3Byb3h5LXJlcXVlc3RcIjtcbmltcG9ydCB7IHJlc29sdmVIYW5kbGVyRXJyb3IgfSBmcm9tIFwiLi9oZWxwZXJzL3Jlc29sdmUtaGFuZGxlci1lcnJvclwiO1xuaW1wb3J0ICogYXMgTG9nIGZyb20gXCIuLi8uLi8uLi8uLi9idWlsZC9vdXRwdXQvbG9nXCI7XG5pbXBvcnQgeyBhdXRvSW1wbGVtZW50TWV0aG9kcyB9IGZyb20gXCIuL2hlbHBlcnMvYXV0by1pbXBsZW1lbnQtbWV0aG9kc1wiO1xuaW1wb3J0IHsgZ2V0Tm9uU3RhdGljTWV0aG9kcyB9IGZyb20gXCIuL2hlbHBlcnMvZ2V0LW5vbi1zdGF0aWMtbWV0aG9kc1wiO1xuaW1wb3J0IHsgYXBwZW5kTXV0YWJsZUNvb2tpZXMgfSBmcm9tIFwiLi4vLi4vLi4vd2ViL3NwZWMtZXh0ZW5zaW9uL2FkYXB0ZXJzL3JlcXVlc3QtY29va2llc1wiO1xuaW1wb3J0IHsgcGFyc2VkVXJsUXVlcnlUb1BhcmFtcyB9IGZyb20gXCIuL2hlbHBlcnMvcGFyc2VkLXVybC1xdWVyeS10by1wYXJhbXNcIjtcbmltcG9ydCAqIGFzIHNlcnZlckhvb2tzIGZyb20gXCIuLi8uLi8uLi8uLi9jbGllbnQvY29tcG9uZW50cy9ob29rcy1zZXJ2ZXItY29udGV4dFwiO1xuaW1wb3J0ICogYXMgaGVhZGVySG9va3MgZnJvbSBcIi4uLy4uLy4uLy4uL2NsaWVudC9jb21wb25lbnRzL2hlYWRlcnNcIjtcbmltcG9ydCB7IHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0IH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NsaWVudC9jb21wb25lbnRzL3N0YXRpYy1nZW5lcmF0aW9uLWJhaWxvdXRcIjtcbmltcG9ydCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UgfSBmcm9tIFwiLi4vLi4vLi4vLi4vY2xpZW50L2NvbXBvbmVudHMvcmVxdWVzdC1hc3luYy1zdG9yYWdlLmV4dGVybmFsXCI7XG5pbXBvcnQgeyBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NsaWVudC9jb21wb25lbnRzL3N0YXRpYy1nZW5lcmF0aW9uLWFzeW5jLXN0b3JhZ2UuZXh0ZXJuYWxcIjtcbmltcG9ydCB7IGFjdGlvbkFzeW5jU3RvcmFnZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9jbGllbnQvY29tcG9uZW50cy9hY3Rpb24tYXN5bmMtc3RvcmFnZS5leHRlcm5hbFwiO1xuaW1wb3J0ICogYXMgc2hhcmVkTW9kdWxlcyBmcm9tIFwiLi9zaGFyZWQtbW9kdWxlc1wiO1xuaW1wb3J0IHsgZ2V0SXNTZXJ2ZXJBY3Rpb24gfSBmcm9tIFwiLi4vLi4vLi4vbGliL3NlcnZlci1hY3Rpb24tcmVxdWVzdC1tZXRhXCI7XG4vKipcbiAqIEFwcFJvdXRlUm91dGVIYW5kbGVyIGlzIHRoZSBoYW5kbGVyIGZvciBhcHAgcm91dGVzLlxuICovIGV4cG9ydCBjbGFzcyBBcHBSb3V0ZVJvdXRlTW9kdWxlIGV4dGVuZHMgUm91dGVNb2R1bGUge1xuICAgIHN0YXRpYyAjXyA9IHRoaXMuc2hhcmVkTW9kdWxlcyA9IHNoYXJlZE1vZHVsZXM7XG4gICAgY29uc3RydWN0b3IoeyB1c2VybGFuZCwgZGVmaW5pdGlvbiwgcmVzb2x2ZWRQYWdlUGF0aCwgbmV4dENvbmZpZ091dHB1dCB9KXtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgdXNlcmxhbmQsXG4gICAgICAgICAgICBkZWZpbml0aW9uXG4gICAgICAgIH0pO1xuICAgICAgICAvKipcbiAgICogQSByZWZlcmVuY2UgdG8gdGhlIHJlcXVlc3QgYXN5bmMgc3RvcmFnZS5cbiAgICovIHRoaXMucmVxdWVzdEFzeW5jU3RvcmFnZSA9IHJlcXVlc3RBc3luY1N0b3JhZ2U7XG4gICAgICAgIC8qKlxuICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgc3RhdGljIGdlbmVyYXRpb24gYXN5bmMgc3RvcmFnZS5cbiAgICovIHRoaXMuc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSA9IHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2U7XG4gICAgICAgIC8qKlxuICAgKiBBbiBpbnRlcmZhY2UgdG8gY2FsbCBzZXJ2ZXIgaG9va3Mgd2hpY2ggaW50ZXJhY3Qgd2l0aCB0aGUgdW5kZXJseWluZ1xuICAgKiBzdG9yYWdlLlxuICAgKi8gdGhpcy5zZXJ2ZXJIb29rcyA9IHNlcnZlckhvb2tzO1xuICAgICAgICAvKipcbiAgICogQW4gaW50ZXJmYWNlIHRvIGNhbGwgaGVhZGVyIGhvb2tzIHdoaWNoIGludGVyYWN0IHdpdGggdGhlIHVuZGVybHlpbmdcbiAgICogcmVxdWVzdCBzdG9yYWdlLlxuICAgKi8gdGhpcy5oZWFkZXJIb29rcyA9IGhlYWRlckhvb2tzO1xuICAgICAgICAvKipcbiAgICogQW4gaW50ZXJmYWNlIHRvIGNhbGwgc3RhdGljIGdlbmVyYXRpb24gYmFpbG91dCBob29rcyB3aGljaCBpbnRlcmFjdCB3aXRoXG4gICAqIHRoZSB1bmRlcmx5aW5nIHN0YXRpYyBnZW5lcmF0aW9uIHN0b3JhZ2UuXG4gICAqLyB0aGlzLnN0YXRpY0dlbmVyYXRpb25CYWlsb3V0ID0gc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQ7XG4gICAgICAgIC8qKlxuICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgbXV0YXRpb24gcmVsYXRlZCBhc3luYyBzdG9yYWdlLCBzdWNoIGFzIG11dGF0aW9ucyBvZlxuICAgKiBjb29raWVzLlxuICAgKi8gdGhpcy5hY3Rpb25Bc3luY1N0b3JhZ2UgPSBhY3Rpb25Bc3luY1N0b3JhZ2U7XG4gICAgICAgIHRoaXMucmVzb2x2ZWRQYWdlUGF0aCA9IHJlc29sdmVkUGFnZVBhdGg7XG4gICAgICAgIHRoaXMubmV4dENvbmZpZ091dHB1dCA9IG5leHRDb25maWdPdXRwdXQ7XG4gICAgICAgIC8vIEF1dG9tYXRpY2FsbHkgaW1wbGVtZW50IHNvbWUgbWV0aG9kcyBpZiB0aGV5IGFyZW4ndCBpbXBsZW1lbnRlZCBieSB0aGVcbiAgICAgICAgLy8gdXNlcmxhbmQgbW9kdWxlLlxuICAgICAgICB0aGlzLm1ldGhvZHMgPSBhdXRvSW1wbGVtZW50TWV0aG9kcyh1c2VybGFuZCk7XG4gICAgICAgIC8vIEdldCB0aGUgbm9uLXN0YXRpYyBtZXRob2RzIGZvciB0aGlzIHJvdXRlLlxuICAgICAgICB0aGlzLm5vblN0YXRpY01ldGhvZHMgPSBnZXROb25TdGF0aWNNZXRob2RzKHVzZXJsYW5kKTtcbiAgICAgICAgLy8gR2V0IHRoZSBkeW5hbWljIHByb3BlcnR5IGZyb20gdGhlIHVzZXJsYW5kIG1vZHVsZS5cbiAgICAgICAgdGhpcy5keW5hbWljID0gdGhpcy51c2VybGFuZC5keW5hbWljO1xuICAgICAgICBpZiAodGhpcy5uZXh0Q29uZmlnT3V0cHV0ID09PSBcImV4cG9ydFwiKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZHluYW1pYyB8fCB0aGlzLmR5bmFtaWMgPT09IFwiYXV0b1wiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5keW5hbWljID0gXCJlcnJvclwiO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmR5bmFtaWMgPT09IFwiZm9yY2UtZHluYW1pY1wiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBleHBvcnQgY29uc3QgZHluYW1pYyA9IFwiZm9yY2UtZHluYW1pY1wiIG9uIHBhZ2UgXCIke2RlZmluaXRpb24ucGF0aG5hbWV9XCIgY2Fubm90IGJlIHVzZWQgd2l0aCBcIm91dHB1dDogZXhwb3J0XCIuIFNlZSBtb3JlIGluZm8gaGVyZTogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYWR2YW5jZWQtZmVhdHVyZXMvc3RhdGljLWh0bWwtZXhwb3J0YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2Ugb25seSB3YXJuIGluIGRldmVsb3BtZW50IGFmdGVyIGhlcmUsIHNvIHJldHVybiBpZiB3ZSdyZSBub3QgaW5cbiAgICAgICAgLy8gZGV2ZWxvcG1lbnQuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJkZXZlbG9wbWVudFwiKSB7XG4gICAgICAgICAgICAvLyBQcmludCBlcnJvciBpbiBkZXZlbG9wbWVudCBpZiB0aGUgZXhwb3J0ZWQgaGFuZGxlcnMgYXJlIGluIGxvd2VyY2FzZSwgb25seVxuICAgICAgICAgICAgLy8gdXBwZXJjYXNlIGhhbmRsZXJzIGFyZSBzdXBwb3J0ZWQuXG4gICAgICAgICAgICBjb25zdCBsb3dlcmNhc2VkID0gSFRUUF9NRVRIT0RTLm1hcCgobWV0aG9kKT0+bWV0aG9kLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBtZXRob2Qgb2YgbG93ZXJjYXNlZCl7XG4gICAgICAgICAgICAgICAgaWYgKG1ldGhvZCBpbiB0aGlzLnVzZXJsYW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihgRGV0ZWN0ZWQgbG93ZXJjYXNlIG1ldGhvZCAnJHttZXRob2R9JyBpbiAnJHt0aGlzLnJlc29sdmVkUGFnZVBhdGh9Jy4gRXhwb3J0IHRoZSB1cHBlcmNhc2UgJyR7bWV0aG9kLnRvVXBwZXJDYXNlKCl9JyBtZXRob2QgbmFtZSB0byBmaXggdGhpcyBlcnJvci5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBQcmludCBlcnJvciBpZiB0aGUgbW9kdWxlIGV4cG9ydHMgYSBkZWZhdWx0IGhhbmRsZXIsIHRoZXkgbXVzdCB1c2UgbmFtZWRcbiAgICAgICAgICAgIC8vIGV4cG9ydHMgZm9yIGVhY2ggSFRUUCBtZXRob2QuXG4gICAgICAgICAgICBpZiAoXCJkZWZhdWx0XCIgaW4gdGhpcy51c2VybGFuZCkge1xuICAgICAgICAgICAgICAgIExvZy5lcnJvcihgRGV0ZWN0ZWQgZGVmYXVsdCBleHBvcnQgaW4gJyR7dGhpcy5yZXNvbHZlZFBhZ2VQYXRofScuIEV4cG9ydCBhIG5hbWVkIGV4cG9ydCBmb3IgZWFjaCBIVFRQIG1ldGhvZCBpbnN0ZWFkLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gbWV0aG9kcyBleHBvcnRlZCBieSB0aGlzIG1vZHVsZSwgdGhlbiByZXR1cm4gYSBub3QgZm91bmRcbiAgICAgICAgICAgIC8vIHJlc3BvbnNlLlxuICAgICAgICAgICAgaWYgKCFIVFRQX01FVEhPRFMuc29tZSgobWV0aG9kKT0+bWV0aG9kIGluIHRoaXMudXNlcmxhbmQpKSB7XG4gICAgICAgICAgICAgICAgTG9nLmVycm9yKGBObyBIVFRQIG1ldGhvZHMgZXhwb3J0ZWQgaW4gJyR7dGhpcy5yZXNvbHZlZFBhZ2VQYXRofScuIEV4cG9ydCBhIG5hbWVkIGV4cG9ydCBmb3IgZWFjaCBIVFRQIG1ldGhvZC5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICogUmVzb2x2ZXMgdGhlIGhhbmRsZXIgZnVuY3Rpb24gZm9yIHRoZSBnaXZlbiBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSBtZXRob2QgdGhlIHJlcXVlc3RlZCBtZXRob2RcbiAgICogQHJldHVybnMgdGhlIGhhbmRsZXIgZnVuY3Rpb24gZm9yIHRoZSBnaXZlbiBtZXRob2RcbiAgICovIHJlc29sdmUobWV0aG9kKSB7XG4gICAgICAgIC8vIEVuc3VyZSB0aGF0IHRoZSByZXF1ZXN0ZWQgbWV0aG9kIGlzIGEgdmFsaWQgbWV0aG9kICh0byBwcmV2ZW50IFJDRSdzKS5cbiAgICAgICAgaWYgKCFpc0hUVFBNZXRob2QobWV0aG9kKSkgcmV0dXJuIGhhbmRsZUJhZFJlcXVlc3RSZXNwb25zZTtcbiAgICAgICAgLy8gUmV0dXJuIHRoZSBoYW5kbGVyLlxuICAgICAgICByZXR1cm4gdGhpcy5tZXRob2RzW21ldGhvZF07XG4gICAgfVxuICAgIC8qKlxuICAgKiBFeGVjdXRlcyB0aGUgcm91dGUgaGFuZGxlci5cbiAgICovIGFzeW5jIGV4ZWN1dGUocmVxdWVzdCwgY29udGV4dCkge1xuICAgICAgICAvLyBHZXQgdGhlIGhhbmRsZXIgZnVuY3Rpb24gZm9yIHRoZSBnaXZlbiBtZXRob2QuXG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLnJlc29sdmUocmVxdWVzdC5tZXRob2QpO1xuICAgICAgICAvLyBHZXQgdGhlIGNvbnRleHQgZm9yIHRoZSByZXF1ZXN0LlxuICAgICAgICBjb25zdCByZXF1ZXN0Q29udGV4dCA9IHtcbiAgICAgICAgICAgIHJlcTogcmVxdWVzdFxuICAgICAgICB9O1xuICAgICAgICByZXF1ZXN0Q29udGV4dC5yZW5kZXJPcHRzID0ge1xuICAgICAgICAgICAgcHJldmlld1Byb3BzOiBjb250ZXh0LnByZXJlbmRlck1hbmlmZXN0LnByZXZpZXdcbiAgICAgICAgfTtcbiAgICAgICAgLy8gR2V0IHRoZSBjb250ZXh0IGZvciB0aGUgc3RhdGljIGdlbmVyYXRpb24uXG4gICAgICAgIGNvbnN0IHN0YXRpY0dlbmVyYXRpb25Db250ZXh0ID0ge1xuICAgICAgICAgICAgdXJsUGF0aG5hbWU6IHJlcXVlc3QubmV4dFVybC5wYXRobmFtZSxcbiAgICAgICAgICAgIHJlbmRlck9wdHM6IGNvbnRleHQucmVuZGVyT3B0c1xuICAgICAgICB9O1xuICAgICAgICAvLyBBZGQgdGhlIGZldGNoQ2FjaGUgb3B0aW9uIHRvIHRoZSByZW5kZXJPcHRzLlxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQ29udGV4dC5yZW5kZXJPcHRzLmZldGNoQ2FjaGUgPSB0aGlzLnVzZXJsYW5kLmZldGNoQ2FjaGU7XG4gICAgICAgIC8vIFJ1biB0aGUgaGFuZGxlciB3aXRoIHRoZSByZXF1ZXN0IEFzeW5jTG9jYWxTdG9yYWdlIHRvIGluamVjdCB0aGUgaGVscGVyXG4gICAgICAgIC8vIHN1cHBvcnQuIFdlIHNldCB0aGlzIHRvIGB1bmtub3duYCBiZWNhdXNlIHRoZSB0eXBlIGlzIG5vdCBrbm93biB1bnRpbFxuICAgICAgICAvLyBydW50aW1lIHdoZW4gd2UgZG8gYSBpbnN0YW5jZW9mIGNoZWNrIGJlbG93LlxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYWN0aW9uQXN5bmNTdG9yYWdlLnJ1bih7XG4gICAgICAgICAgICBpc0FwcFJvdXRlOiB0cnVlLFxuICAgICAgICAgICAgaXNBY3Rpb246IGdldElzU2VydmVyQWN0aW9uKHJlcXVlc3QpXG4gICAgICAgIH0sICgpPT5SZXF1ZXN0QXN5bmNTdG9yYWdlV3JhcHBlci53cmFwKHRoaXMucmVxdWVzdEFzeW5jU3RvcmFnZSwgcmVxdWVzdENvbnRleHQsICgpPT5TdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlV3JhcHBlci53cmFwKHRoaXMuc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkNvbnRleHQsIChzdGF0aWNHZW5lcmF0aW9uU3RvcmUpPT57XG4gICAgICAgICAgICAgICAgICAgIHZhciBfZ2V0VHJhY2VyX2dldFJvb3RTcGFuQXR0cmlidXRlcztcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHdlIHNob3VsZCBiYWlsIG91dCBvZiBzdGF0aWMgZ2VuZXJhdGlvbiBiYXNlZCBvblxuICAgICAgICAgICAgICAgICAgICAvLyBoYXZpbmcgbm9uLXN0YXRpYyBtZXRob2RzLlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ub25TdGF0aWNNZXRob2RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRpY0dlbmVyYXRpb25CYWlsb3V0KGBub24tc3RhdGljIG1ldGhvZHMgdXNlZCAke3RoaXMubm9uU3RhdGljTWV0aG9kcy5qb2luKFwiLCBcIil9YCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBzdGF0aWMgZ2VuZXJhdGlvbiBzdG9yZSBiYXNlZCBvbiB0aGUgZHluYW1pYyBwcm9wZXJ0eS5cbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoKHRoaXMuZHluYW1pYyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZm9yY2UtZHluYW1pY1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBkeW5hbWljIHByb3BlcnR5IGlzIHNldCB0byBmb3JjZS1keW5hbWljLCBzbyB3ZSBzaG91bGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3JjZSB0aGUgcGFnZSB0byBiZSBkeW5hbWljLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0dlbmVyYXRpb25TdG9yZS5mb3JjZUR5bmFtaWMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQoYGZvcmNlLWR5bmFtaWNgLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR5bmFtaWM6IHRoaXMuZHluYW1pY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImZvcmNlLXN0YXRpY1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBkeW5hbWljIHByb3BlcnR5IGlzIHNldCB0byBmb3JjZS1zdGF0aWMsIHNvIHdlIHNob3VsZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvcmNlIHRoZSBwYWdlIHRvIGJlIHN0YXRpYy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNHZW5lcmF0aW9uU3RvcmUuZm9yY2VTdGF0aWMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVycm9yXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGR5bmFtaWMgcHJvcGVydHkgaXMgc2V0IHRvIGVycm9yLCBzbyB3ZSBzaG91bGQgdGhyb3cgYW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlcnJvciBpZiB0aGUgcGFnZSBpcyBiZWluZyBzdGF0aWNhbGx5IGdlbmVyYXRlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNHZW5lcmF0aW9uU3RvcmUuZHluYW1pY1Nob3VsZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIHN0YXRpYyBnZW5lcmF0aW9uIHN0b3JlIGRvZXMgbm90IGhhdmUgYSByZXZhbGlkYXRlIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIC8vIHNldCwgdGhlbiB3ZSBzaG91bGQgc2V0IGl0IHRoZSByZXZhbGlkYXRlIHZhbHVlIGZyb20gdGhlIHVzZXJsYW5kXG4gICAgICAgICAgICAgICAgICAgIC8vIG1vZHVsZSBvciBkZWZhdWx0IHRvIGZhbHNlLlxuICAgICAgICAgICAgICAgICAgICBzdGF0aWNHZW5lcmF0aW9uU3RvcmUucmV2YWxpZGF0ZSA/Pz0gdGhpcy51c2VybGFuZC5yZXZhbGlkYXRlID8/IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAvLyBXcmFwIHRoZSByZXF1ZXN0IHNvIHdlIGNhbiBhZGQgYWRkaXRpb25hbCBmdW5jdGlvbmFsaXR5IHRvIGNhc2VzXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoYXQgbWlnaHQgY2hhbmdlIGl0J3Mgb3V0cHV0IG9yIGFmZmVjdCB0aGUgcmVuZGVyaW5nLlxuICAgICAgICAgICAgICAgICAgICBjb25zdCB3cmFwcGVkUmVxdWVzdCA9IHByb3h5UmVxdWVzdChyZXF1ZXN0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkeW5hbWljOiB0aGlzLmR5bmFtaWNcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVySG9va3M6IHRoaXMuaGVhZGVySG9va3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJIb29rczogdGhpcy5zZXJ2ZXJIb29rcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0OiB0aGlzLnN0YXRpY0dlbmVyYXRpb25CYWlsb3V0XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBwcm9wYWdhdGUgdGhpcyBwYXRobmFtZSBmcm9tIHJvdXRlIG1hdGNoZXJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm91dGUgPSBnZXRQYXRobmFtZUZyb21BYnNvbHV0ZVBhdGgodGhpcy5yZXNvbHZlZFBhZ2VQYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgKF9nZXRUcmFjZXJfZ2V0Um9vdFNwYW5BdHRyaWJ1dGVzID0gZ2V0VHJhY2VyKCkuZ2V0Um9vdFNwYW5BdHRyaWJ1dGVzKCkpID09IG51bGwgPyB2b2lkIDAgOiBfZ2V0VHJhY2VyX2dldFJvb3RTcGFuQXR0cmlidXRlcy5zZXQoXCJuZXh0LnJvdXRlXCIsIHJvdXRlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldFRyYWNlcigpLnRyYWNlKEFwcFJvdXRlUm91dGVIYW5kbGVyc1NwYW4ucnVuSGFuZGxlciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Bhbk5hbWU6IGBleGVjdXRpbmcgYXBpIHJvdXRlIChhcHApICR7cm91dGV9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5leHQucm91dGVcIjogcm91dGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgYXN5bmMgKCk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfc3RhdGljR2VuZXJhdGlvblN0b3JlX3RhZ3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQYXRjaCB0aGUgZ2xvYmFsIGZldGNoLlxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0Y2hGZXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmVySG9va3M6IHRoaXMuc2VydmVySG9va3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZTogdGhpcy5zdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGhhbmRsZXIod3JhcHBlZFJlcXVlc3QsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IGNvbnRleHQucGFyYW1zID8gcGFyc2VkVXJsUXVlcnlUb1BhcmFtcyhjb250ZXh0LnBhcmFtcykgOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzIGluc3RhbmNlb2YgUmVzcG9uc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyByZXNwb25zZSBpcyByZXR1cm5lZCBmcm9tIHJvdXRlIGhhbmRsZXIgJyR7dGhpcy5yZXNvbHZlZFBhZ2VQYXRofScuIEVuc3VyZSB5b3UgcmV0dXJuIGEgXFxgUmVzcG9uc2VcXGAgb3IgYSBcXGBOZXh0UmVzcG9uc2VcXGAgaW4gYWxsIGJyYW5jaGVzIG9mIHlvdXIgaGFuZGxlci5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQucmVuZGVyT3B0cy5mZXRjaE1ldHJpY3MgPSBzdGF0aWNHZW5lcmF0aW9uU3RvcmUuZmV0Y2hNZXRyaWNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5yZW5kZXJPcHRzLndhaXRVbnRpbCA9IFByb21pc2UuYWxsKE9iamVjdC52YWx1ZXMoc3RhdGljR2VuZXJhdGlvblN0b3JlLnBlbmRpbmdSZXZhbGlkYXRlcyB8fCBbXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkSW1wbGljaXRUYWdzKHN0YXRpY0dlbmVyYXRpb25TdG9yZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnJlbmRlck9wdHMuZmV0Y2hUYWdzID0gKF9zdGF0aWNHZW5lcmF0aW9uU3RvcmVfdGFncyA9IHN0YXRpY0dlbmVyYXRpb25TdG9yZS50YWdzKSA9PSBudWxsID8gdm9pZCAwIDogX3N0YXRpY0dlbmVyYXRpb25TdG9yZV90YWdzLmpvaW4oXCIsXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSXQncyBwb3NzaWJsZSBjb29raWVzIHdlcmUgc2V0IGluIHRoZSBoYW5kbGVyLCBzbyB3ZSBuZWVkXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBtZXJnZSB0aGUgbW9kaWZpZWQgY29va2llcyBhbmQgdGhlIHJldHVybmVkIHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBoZXJlLlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdFN0b3JlID0gdGhpcy5yZXF1ZXN0QXN5bmNTdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdFN0b3JlICYmIHJlcXVlc3RTdG9yZS5tdXRhYmxlQ29va2llcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhyZXMuaGVhZGVycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFwcGVuZE11dGFibGVDb29raWVzKGhlYWRlcnMsIHJlcXVlc3RTdG9yZS5tdXRhYmxlQ29va2llcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShyZXMuYm9keSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiByZXMuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dDogcmVzLnN0YXR1c1RleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pKSk7XG4gICAgICAgIC8vIElmIHRoZSBoYW5kbGVyIGRpZCd0IHJldHVybiBhIHZhbGlkIHJlc3BvbnNlLCB0aGVuIHJldHVybiB0aGUgaW50ZXJuYWxcbiAgICAgICAgLy8gZXJyb3IgcmVzcG9uc2UuXG4gICAgICAgIGlmICghKHJlc3BvbnNlIGluc3RhbmNlb2YgUmVzcG9uc2UpKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiB2YWxpZGF0ZSB0aGUgY29ycmVjdCBoYW5kbGluZyBiZWhhdmlvciwgbWF5YmUgbG9nIHNvbWV0aGluZz9cbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVJbnRlcm5hbFNlcnZlckVycm9yUmVzcG9uc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzcG9uc2UuaGVhZGVycy5oYXMoXCJ4LW1pZGRsZXdhcmUtcmV3cml0ZVwiKSkge1xuICAgICAgICAgICAgLy8gVE9ETzogbW92ZSB0aGlzIGVycm9yIGludG8gdGhlIGBOZXh0UmVzcG9uc2UucmV3cml0ZSgpYCBmdW5jdGlvbi5cbiAgICAgICAgICAgIC8vIFRPRE8tQVBQOiByZS1lbmFibGUgc3VwcG9ydCBiZWxvdyB3aGVuIHdlIGNhbiBwcm94eSB0aGVzZSB0eXBlIG9mIHJlcXVlc3RzXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOZXh0UmVzcG9uc2UucmV3cml0ZSgpIHdhcyB1c2VkIGluIGEgYXBwIHJvdXRlIGhhbmRsZXIsIHRoaXMgaXMgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQuIFBsZWFzZSByZW1vdmUgdGhlIGludm9jYXRpb24gdG8gY29udGludWUuXCIpO1xuICAgICAgICAvLyAvLyBUaGlzIGlzIGEgcmV3cml0ZSBjcmVhdGVkIHZpYSBgTmV4dFJlc3BvbnNlLnJld3JpdGUoKWAuIFdlIG5lZWQgdG8gc2VuZFxuICAgICAgICAvLyAvLyB0aGUgcmVzcG9uc2UgdXAgc28gaXQgY2FuIGJlIGhhbmRsZWQgYnkgdGhlIGJhY2tpbmcgc2VydmVyLlxuICAgICAgICAvLyAvLyBJZiB0aGUgc2VydmVyIGlzIHJ1bm5pbmcgaW4gbWluaW1hbCBtb2RlLCB3ZSBqdXN0IHdhbnQgdG8gZm9yd2FyZCB0aGVcbiAgICAgICAgLy8gLy8gcmVzcG9uc2UgKGluY2x1ZGluZyB0aGUgcmV3cml0ZSBoZWFkZXJzKSB1cHN0cmVhbSBzbyBpdCBjYW4gcGVyZm9ybSB0aGVcbiAgICAgICAgLy8gLy8gcmVkaXJlY3QgZm9yIHVzLCBvdGhlcndpc2UgcmV0dXJuIHdpdGggdGhlIHNwZWNpYWwgY29uZGl0aW9uIHNvIHRoaXNcbiAgICAgICAgLy8gLy8gc2VydmVyIGNhbiBwZXJmb3JtIGEgcmV3cml0ZS5cbiAgICAgICAgLy8gaWYgKCFtaW5pbWFsTW9kZSkge1xuICAgICAgICAvLyAgIHJldHVybiB7IHJlc3BvbnNlLCBjb25kaXRpb246ICdyZXdyaXRlJyB9XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy8gLy8gUmVsYXRpdml6ZSB0aGUgdXJsIHNvIGl0J3MgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsLiBUaGlzIGlzIHNvIHRoZVxuICAgICAgICAvLyAvLyBvdXRnb2luZyBoZWFkZXJzIHVwc3RyZWFtIGNhbiBiZSByZWxhdGl2ZS5cbiAgICAgICAgLy8gY29uc3QgcmV3cml0ZVBhdGggPSByZXNwb25zZS5oZWFkZXJzLmdldCgneC1taWRkbGV3YXJlLXJld3JpdGUnKSFcbiAgICAgICAgLy8gY29uc3QgaW5pdFVybCA9IGdldFJlcXVlc3RNZXRhKHJlcSwgJ2luaXRVUkwnKSFcbiAgICAgICAgLy8gY29uc3QgeyBwYXRobmFtZSB9ID0gcGFyc2VVcmwocmVsYXRpdml6ZVVSTChyZXdyaXRlUGF0aCwgaW5pdFVybCkpXG4gICAgICAgIC8vIHJlc3BvbnNlLmhlYWRlcnMuc2V0KCd4LW1pZGRsZXdhcmUtcmV3cml0ZScsIHBhdGhuYW1lKVxuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNwb25zZS5oZWFkZXJzLmdldChcIngtbWlkZGxld2FyZS1uZXh0XCIpID09PSBcIjFcIikge1xuICAgICAgICAgICAgLy8gVE9ETzogbW92ZSB0aGlzIGVycm9yIGludG8gdGhlIGBOZXh0UmVzcG9uc2UubmV4dCgpYCBmdW5jdGlvbi5cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5leHRSZXNwb25zZS5uZXh0KCkgd2FzIHVzZWQgaW4gYSBhcHAgcm91dGUgaGFuZGxlciwgdGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBTZWUgaGVyZSBmb3IgbW9yZSBpbmZvOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy9uZXh0LXJlc3BvbnNlLW5leHQtaW4tYXBwLXJvdXRlLWhhbmRsZXJcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICBhc3luYyBoYW5kbGUocmVxdWVzdCwgY29udGV4dCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gRXhlY3V0ZSB0aGUgcm91dGUgdG8gZ2V0IHRoZSByZXNwb25zZS5cbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5leGVjdXRlKHJlcXVlc3QsIGNvbnRleHQpO1xuICAgICAgICAgICAgLy8gVGhlIHJlc3BvbnNlIHdhcyBoYW5kbGVkLCByZXR1cm4gaXQuXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgLy8gVHJ5IHRvIHJlc29sdmUgdGhlIGVycm9yIHRvIGEgcmVzcG9uc2UsIGVsc2UgdGhyb3cgaXQgYWdhaW4uXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHJlc29sdmVIYW5kbGVyRXJyb3IoZXJyKTtcbiAgICAgICAgICAgIGlmICghcmVzcG9uc2UpIHRocm93IGVycjtcbiAgICAgICAgICAgIC8vIFRoZSByZXNwb25zZSB3YXMgcmVzb2x2ZWQsIHJldHVybiBpdC5cbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IEFwcFJvdXRlUm91dGVNb2R1bGU7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZS5qcy5tYXAiXSwibmFtZXMiOlsiUm91dGVNb2R1bGUiLCJSZXF1ZXN0QXN5bmNTdG9yYWdlV3JhcHBlciIsIlN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VXcmFwcGVyIiwiaGFuZGxlQmFkUmVxdWVzdFJlc3BvbnNlIiwiaGFuZGxlSW50ZXJuYWxTZXJ2ZXJFcnJvclJlc3BvbnNlIiwiSFRUUF9NRVRIT0RTIiwiaXNIVFRQTWV0aG9kIiwiYWRkSW1wbGljaXRUYWdzIiwicGF0Y2hGZXRjaCIsImdldFRyYWNlciIsIkFwcFJvdXRlUm91dGVIYW5kbGVyc1NwYW4iLCJnZXRQYXRobmFtZUZyb21BYnNvbHV0ZVBhdGgiLCJwcm94eVJlcXVlc3QiLCJyZXNvbHZlSGFuZGxlckVycm9yIiwiTG9nIiwiYXV0b0ltcGxlbWVudE1ldGhvZHMiLCJnZXROb25TdGF0aWNNZXRob2RzIiwiYXBwZW5kTXV0YWJsZUNvb2tpZXMiLCJwYXJzZWRVcmxRdWVyeVRvUGFyYW1zIiwic2VydmVySG9va3MiLCJoZWFkZXJIb29rcyIsInN0YXRpY0dlbmVyYXRpb25CYWlsb3V0IiwicmVxdWVzdEFzeW5jU3RvcmFnZSIsInN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UiLCJhY3Rpb25Bc3luY1N0b3JhZ2UiLCJzaGFyZWRNb2R1bGVzIiwiZ2V0SXNTZXJ2ZXJBY3Rpb24iLCJBcHBSb3V0ZVJvdXRlTW9kdWxlIiwiXyIsImNvbnN0cnVjdG9yIiwidXNlcmxhbmQiLCJkZWZpbml0aW9uIiwicmVzb2x2ZWRQYWdlUGF0aCIsIm5leHRDb25maWdPdXRwdXQiLCJtZXRob2RzIiwibm9uU3RhdGljTWV0aG9kcyIsImR5bmFtaWMiLCJFcnJvciIsInBhdGhuYW1lIiwibG93ZXJjYXNlZCIsIm1hcCIsIm1ldGhvZCIsInRvTG93ZXJDYXNlIiwiZXJyb3IiLCJ0b1VwcGVyQ2FzZSIsInNvbWUiLCJyZXNvbHZlIiwiZXhlY3V0ZSIsInJlcXVlc3QiLCJjb250ZXh0IiwiaGFuZGxlciIsInJlcXVlc3RDb250ZXh0IiwicmVxIiwicmVuZGVyT3B0cyIsInByZXZpZXdQcm9wcyIsInByZXJlbmRlck1hbmlmZXN0IiwicHJldmlldyIsInN0YXRpY0dlbmVyYXRpb25Db250ZXh0IiwidXJsUGF0aG5hbWUiLCJuZXh0VXJsIiwiZmV0Y2hDYWNoZSIsInJlc3BvbnNlIiwicnVuIiwiaXNBcHBSb3V0ZSIsImlzQWN0aW9uIiwid3JhcCIsInN0YXRpY0dlbmVyYXRpb25TdG9yZSIsIl9nZXRUcmFjZXJfZ2V0Um9vdFNwYW5BdHRyaWJ1dGVzIiwiam9pbiIsImZvcmNlRHluYW1pYyIsImZvcmNlU3RhdGljIiwiZHluYW1pY1Nob3VsZEVycm9yIiwicmV2YWxpZGF0ZSIsIndyYXBwZWRSZXF1ZXN0Iiwicm91dGUiLCJnZXRSb290U3BhbkF0dHJpYnV0ZXMiLCJzZXQiLCJ0cmFjZSIsInJ1bkhhbmRsZXIiLCJzcGFuTmFtZSIsImF0dHJpYnV0ZXMiLCJfc3RhdGljR2VuZXJhdGlvblN0b3JlX3RhZ3MiLCJyZXMiLCJwYXJhbXMiLCJ1bmRlZmluZWQiLCJSZXNwb25zZSIsImZldGNoTWV0cmljcyIsIndhaXRVbnRpbCIsIlByb21pc2UiLCJhbGwiLCJPYmplY3QiLCJ2YWx1ZXMiLCJwZW5kaW5nUmV2YWxpZGF0ZXMiLCJmZXRjaFRhZ3MiLCJ0YWdzIiwicmVxdWVzdFN0b3JlIiwiZ2V0U3RvcmUiLCJtdXRhYmxlQ29va2llcyIsImhlYWRlcnMiLCJIZWFkZXJzIiwiYm9keSIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJoYXMiLCJnZXQiLCJoYW5kbGUiLCJlcnIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/module.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/shared-modules.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/future/route-modules/app-route/shared-modules.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appRouterContext: () => (/* reexport module object */ _shared_lib_app_router_context_shared_runtime__WEBPACK_IMPORTED_MODULE_0__)\n/* harmony export */ });\n/* harmony import */ var _shared_lib_app_router_context_shared_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../shared/lib/app-router-context.shared-runtime */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/app-router-context.shared-runtime.js\");\n// the name of the export has to be the camelCase version of the file name (without the extension)\n// TODO: remove this. We need it because using notFound from next/navigation imports this file :(\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL3NoYXJlZC1tb2R1bGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUM2RiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL3NoYXJlZC1tb2R1bGVzLmpzP2U1NzciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdGhlIG5hbWUgb2YgdGhlIGV4cG9ydCBoYXMgdG8gYmUgdGhlIGNhbWVsQ2FzZSB2ZXJzaW9uIG9mIHRoZSBmaWxlIG5hbWUgKHdpdGhvdXQgdGhlIGV4dGVuc2lvbilcbi8vIFRPRE86IHJlbW92ZSB0aGlzLiBXZSBuZWVkIGl0IGJlY2F1c2UgdXNpbmcgbm90Rm91bmQgZnJvbSBuZXh0L25hdmlnYXRpb24gaW1wb3J0cyB0aGlzIGZpbGUgOihcbmV4cG9ydCAqIGFzIGFwcFJvdXRlckNvbnRleHQgZnJvbSBcIi4uLy4uLy4uLy4uL3NoYXJlZC9saWIvYXBwLXJvdXRlci1jb250ZXh0LnNoYXJlZC1ydW50aW1lXCI7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYXJlZC1tb2R1bGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJfYXBwUm91dGVyQ29udGV4dCIsImFwcFJvdXRlckNvbnRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/future/route-modules/app-route/shared-modules.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/future/route-modules/helpers/response-handlers.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/future/route-modules/helpers/response-handlers.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleBadRequestResponse: () => (/* binding */ handleBadRequestResponse),\n/* harmony export */   handleInternalServerErrorResponse: () => (/* binding */ handleInternalServerErrorResponse),\n/* harmony export */   handleMethodNotAllowedResponse: () => (/* binding */ handleMethodNotAllowedResponse),\n/* harmony export */   handleNotFoundResponse: () => (/* binding */ handleNotFoundResponse),\n/* harmony export */   handleRedirectResponse: () => (/* binding */ handleRedirectResponse)\n/* harmony export */ });\n/* harmony import */ var _web_spec_extension_adapters_request_cookies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../web/spec-extension/adapters/request-cookies */ \"(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/adapters/request-cookies.js\");\n\nfunction handleRedirectResponse(url, mutableCookies, status) {\n  const headers = new Headers({\n    location: url\n  });\n  (0,_web_spec_extension_adapters_request_cookies__WEBPACK_IMPORTED_MODULE_0__.appendMutableCookies)(headers, mutableCookies);\n  return new Response(null, {\n    status,\n    headers\n  });\n}\nfunction handleBadRequestResponse() {\n  return new Response(null, {\n    status: 400\n  });\n}\nfunction handleNotFoundResponse() {\n  return new Response(null, {\n    status: 404\n  });\n}\nfunction handleMethodNotAllowedResponse() {\n  return new Response(null, {\n    status: 405\n  });\n}\nfunction handleInternalServerErrorResponse() {\n  return new Response(null, {\n    status: 500\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvaGVscGVycy9yZXNwb25zZS1oYW5kbGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBNEY7QUFDckYsU0FBU0Msc0JBQXNCQSxDQUFDQyxHQUFHLEVBQUVDLGNBQWMsRUFBRUMsTUFBTSxFQUFFO0VBQ2hFLE1BQU1DLE9BQU8sR0FBRyxJQUFJQyxPQUFPLENBQUM7SUFDeEJDLFFBQVEsRUFBRUw7RUFDZCxDQUFDLENBQUM7RUFDRkYsa0dBQW9CLENBQUNLLE9BQU8sRUFBRUYsY0FBYyxDQUFDO0VBQzdDLE9BQU8sSUFBSUssUUFBUSxDQUFDLElBQUksRUFBRTtJQUN0QkosTUFBTTtJQUNOQztFQUNKLENBQUMsQ0FBQztBQUNOO0FBQ08sU0FBU0ksd0JBQXdCQSxDQUFBLEVBQUc7RUFDdkMsT0FBTyxJQUFJRCxRQUFRLENBQUMsSUFBSSxFQUFFO0lBQ3RCSixNQUFNLEVBQUU7RUFDWixDQUFDLENBQUM7QUFDTjtBQUNPLFNBQVNNLHNCQUFzQkEsQ0FBQSxFQUFHO0VBQ3JDLE9BQU8sSUFBSUYsUUFBUSxDQUFDLElBQUksRUFBRTtJQUN0QkosTUFBTSxFQUFFO0VBQ1osQ0FBQyxDQUFDO0FBQ047QUFDTyxTQUFTTyw4QkFBOEJBLENBQUEsRUFBRztFQUM3QyxPQUFPLElBQUlILFFBQVEsQ0FBQyxJQUFJLEVBQUU7SUFDdEJKLE1BQU0sRUFBRTtFQUNaLENBQUMsQ0FBQztBQUNOO0FBQ08sU0FBU1EsaUNBQWlDQSxDQUFBLEVBQUc7RUFDaEQsT0FBTyxJQUFJSixRQUFRLENBQUMsSUFBSSxFQUFFO0lBQ3RCSixNQUFNLEVBQUU7RUFDWixDQUFDLENBQUM7QUFDTiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvaGVscGVycy9yZXNwb25zZS1oYW5kbGVycy5qcz9jMDA2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFwcGVuZE11dGFibGVDb29raWVzIH0gZnJvbSBcIi4uLy4uLy4uL3dlYi9zcGVjLWV4dGVuc2lvbi9hZGFwdGVycy9yZXF1ZXN0LWNvb2tpZXNcIjtcbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVSZWRpcmVjdFJlc3BvbnNlKHVybCwgbXV0YWJsZUNvb2tpZXMsIHN0YXR1cykge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyh7XG4gICAgICAgIGxvY2F0aW9uOiB1cmxcbiAgICB9KTtcbiAgICBhcHBlbmRNdXRhYmxlQ29va2llcyhoZWFkZXJzLCBtdXRhYmxlQ29va2llcyk7XG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7XG4gICAgICAgIHN0YXR1cyxcbiAgICAgICAgaGVhZGVyc1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUJhZFJlcXVlc3RSZXNwb25zZSgpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiA0MDBcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVOb3RGb3VuZFJlc3BvbnNlKCkge1xuICAgIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge1xuICAgICAgICBzdGF0dXM6IDQwNFxuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZU1ldGhvZE5vdEFsbG93ZWRSZXNwb25zZSgpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiA0MDVcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVJbnRlcm5hbFNlcnZlckVycm9yUmVzcG9uc2UoKSB7XG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7XG4gICAgICAgIHN0YXR1czogNTAwXG4gICAgfSk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc3BvbnNlLWhhbmRsZXJzLmpzLm1hcCJdLCJuYW1lcyI6WyJhcHBlbmRNdXRhYmxlQ29va2llcyIsImhhbmRsZVJlZGlyZWN0UmVzcG9uc2UiLCJ1cmwiLCJtdXRhYmxlQ29va2llcyIsInN0YXR1cyIsImhlYWRlcnMiLCJIZWFkZXJzIiwibG9jYXRpb24iLCJSZXNwb25zZSIsImhhbmRsZUJhZFJlcXVlc3RSZXNwb25zZSIsImhhbmRsZU5vdEZvdW5kUmVzcG9uc2UiLCJoYW5kbGVNZXRob2ROb3RBbGxvd2VkUmVzcG9uc2UiLCJoYW5kbGVJbnRlcm5hbFNlcnZlckVycm9yUmVzcG9uc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/future/route-modules/helpers/response-handlers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/future/route-modules/route-module.js":
/*!********************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/future/route-modules/route-module.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RouteModule: () => (/* binding */ RouteModule)\n/* harmony export */ });\n/**\n * RouteModule is the base class for all route modules. This class should be\n * extended by all route modules.\n */class RouteModule {\n  constructor({\n    userland,\n    definition\n  }) {\n    this.userland = userland;\n    this.definition = definition;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcm91dGUtbW9kdWxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQSxHQUFXLE1BQU1BLFdBQVcsQ0FBQztFQUN6QkMsV0FBV0EsQ0FBQztJQUFFQyxRQUFRO0lBQUVDO0VBQVcsQ0FBQyxFQUFDO0lBQ2pDLElBQUksQ0FBQ0QsUUFBUSxHQUFHQSxRQUFRO0lBQ3hCLElBQUksQ0FBQ0MsVUFBVSxHQUFHQSxVQUFVO0VBQ2hDO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3JvdXRlLW1vZHVsZS5qcz8xOGUwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUm91dGVNb2R1bGUgaXMgdGhlIGJhc2UgY2xhc3MgZm9yIGFsbCByb3V0ZSBtb2R1bGVzLiBUaGlzIGNsYXNzIHNob3VsZCBiZVxuICogZXh0ZW5kZWQgYnkgYWxsIHJvdXRlIG1vZHVsZXMuXG4gKi8gZXhwb3J0IGNsYXNzIFJvdXRlTW9kdWxlIHtcbiAgICBjb25zdHJ1Y3Rvcih7IHVzZXJsYW5kLCBkZWZpbml0aW9uIH0pe1xuICAgICAgICB0aGlzLnVzZXJsYW5kID0gdXNlcmxhbmQ7XG4gICAgICAgIHRoaXMuZGVmaW5pdGlvbiA9IGRlZmluaXRpb247XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3V0ZS1tb2R1bGUuanMubWFwIl0sIm5hbWVzIjpbIlJvdXRlTW9kdWxlIiwiY29uc3RydWN0b3IiLCJ1c2VybGFuZCIsImRlZmluaXRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/future/route-modules/route-module.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/internal-utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/internal-utils.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stripInternalHeaders: () => (/* binding */ stripInternalHeaders),\n/* harmony export */   stripInternalQueries: () => (/* binding */ stripInternalQueries),\n/* harmony export */   stripInternalSearchParams: () => (/* binding */ stripInternalSearchParams)\n/* harmony export */ });\n/* harmony import */ var _client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client/components/app-router-headers */ \"(rsc)/./node_modules/next/dist/esm/client/components/app-router-headers.js\");\n/* harmony import */ var _shared_lib_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/lib/constants */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/constants.js\");\n\n\nconst INTERNAL_QUERY_NAMES = [\"__nextFallback\", \"__nextLocale\", \"__nextInferredLocaleFromDefault\", \"__nextDefaultLocale\", \"__nextIsNotFound\", _client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_0__.NEXT_RSC_UNION_QUERY];\nconst EDGE_EXTENDED_INTERNAL_QUERY_NAMES = [\"__nextDataReq\"];\nfunction stripInternalQueries(query) {\n  for (const name of INTERNAL_QUERY_NAMES) {\n    delete query[name];\n  }\n}\nfunction stripInternalSearchParams(url, isEdge) {\n  const isStringUrl = typeof url === \"string\";\n  const instance = isStringUrl ? new URL(url) : url;\n  for (const name of INTERNAL_QUERY_NAMES) {\n    instance.searchParams.delete(name);\n  }\n  if (isEdge) {\n    for (const name of EDGE_EXTENDED_INTERNAL_QUERY_NAMES) {\n      instance.searchParams.delete(name);\n    }\n  }\n  return isStringUrl ? instance.toString() : instance;\n}\n/**\n * Strip internal headers from the request headers.\n *\n * @param headers the headers to strip of internal headers\n */\nfunction stripInternalHeaders(headers) {\n  for (const key of _shared_lib_constants__WEBPACK_IMPORTED_MODULE_1__.INTERNAL_HEADERS) {\n    delete headers[key];\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvaW50ZXJuYWwtdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBK0U7QUFDcEI7QUFDM0QsTUFBTUUsb0JBQW9CLEdBQUcsQ0FDekIsZ0JBQWdCLEVBQ2hCLGNBQWMsRUFDZCxpQ0FBaUMsRUFDakMscUJBQXFCLEVBQ3JCLGtCQUFrQixFQUNsQkYsdUZBQW9CLENBQ3ZCO0FBQ0QsTUFBTUcsa0NBQWtDLEdBQUcsQ0FDdkMsZUFBZSxDQUNsQjtBQUNNLFNBQVNDLG9CQUFvQkEsQ0FBQ0MsS0FBSyxFQUFFO0VBQ3hDLEtBQUssTUFBTUMsSUFBSSxJQUFJSixvQkFBb0IsRUFBQztJQUNwQyxPQUFPRyxLQUFLLENBQUNDLElBQUksQ0FBQztFQUN0QjtBQUNKO0FBQ08sU0FBU0MseUJBQXlCQSxDQUFDQyxHQUFHLEVBQUVDLE1BQU0sRUFBRTtFQUNuRCxNQUFNQyxXQUFXLEdBQUcsT0FBT0YsR0FBRyxLQUFLLFFBQVE7RUFDM0MsTUFBTUcsUUFBUSxHQUFHRCxXQUFXLEdBQUcsSUFBSUUsR0FBRyxDQUFDSixHQUFHLENBQUMsR0FBR0EsR0FBRztFQUNqRCxLQUFLLE1BQU1GLElBQUksSUFBSUosb0JBQW9CLEVBQUM7SUFDcENTLFFBQVEsQ0FBQ0UsWUFBWSxDQUFDQyxNQUFNLENBQUNSLElBQUksQ0FBQztFQUN0QztFQUNBLElBQUlHLE1BQU0sRUFBRTtJQUNSLEtBQUssTUFBTUgsSUFBSSxJQUFJSCxrQ0FBa0MsRUFBQztNQUNsRFEsUUFBUSxDQUFDRSxZQUFZLENBQUNDLE1BQU0sQ0FBQ1IsSUFBSSxDQUFDO0lBQ3RDO0VBQ0o7RUFDQSxPQUFPSSxXQUFXLEdBQUdDLFFBQVEsQ0FBQ0ksUUFBUSxDQUFDLENBQUMsR0FBR0osUUFBUTtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBVyxTQUFTSyxvQkFBb0JBLENBQUNDLE9BQU8sRUFBRTtFQUM5QyxLQUFLLE1BQU1DLEdBQUcsSUFBSWpCLG1FQUFnQixFQUFDO0lBQy9CLE9BQU9nQixPQUFPLENBQUNDLEdBQUcsQ0FBQztFQUN2QjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvZXNtL3NlcnZlci9pbnRlcm5hbC11dGlscy5qcz9iMzJiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5FWFRfUlNDX1VOSU9OX1FVRVJZIH0gZnJvbSBcIi4uL2NsaWVudC9jb21wb25lbnRzL2FwcC1yb3V0ZXItaGVhZGVyc1wiO1xuaW1wb3J0IHsgSU5URVJOQUxfSEVBREVSUyB9IGZyb20gXCIuLi9zaGFyZWQvbGliL2NvbnN0YW50c1wiO1xuY29uc3QgSU5URVJOQUxfUVVFUllfTkFNRVMgPSBbXG4gICAgXCJfX25leHRGYWxsYmFja1wiLFxuICAgIFwiX19uZXh0TG9jYWxlXCIsXG4gICAgXCJfX25leHRJbmZlcnJlZExvY2FsZUZyb21EZWZhdWx0XCIsXG4gICAgXCJfX25leHREZWZhdWx0TG9jYWxlXCIsXG4gICAgXCJfX25leHRJc05vdEZvdW5kXCIsXG4gICAgTkVYVF9SU0NfVU5JT05fUVVFUllcbl07XG5jb25zdCBFREdFX0VYVEVOREVEX0lOVEVSTkFMX1FVRVJZX05BTUVTID0gW1xuICAgIFwiX19uZXh0RGF0YVJlcVwiXG5dO1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwSW50ZXJuYWxRdWVyaWVzKHF1ZXJ5KSB7XG4gICAgZm9yIChjb25zdCBuYW1lIG9mIElOVEVSTkFMX1FVRVJZX05BTUVTKXtcbiAgICAgICAgZGVsZXRlIHF1ZXJ5W25hbWVdO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcEludGVybmFsU2VhcmNoUGFyYW1zKHVybCwgaXNFZGdlKSB7XG4gICAgY29uc3QgaXNTdHJpbmdVcmwgPSB0eXBlb2YgdXJsID09PSBcInN0cmluZ1wiO1xuICAgIGNvbnN0IGluc3RhbmNlID0gaXNTdHJpbmdVcmwgPyBuZXcgVVJMKHVybCkgOiB1cmw7XG4gICAgZm9yIChjb25zdCBuYW1lIG9mIElOVEVSTkFMX1FVRVJZX05BTUVTKXtcbiAgICAgICAgaW5zdGFuY2Uuc2VhcmNoUGFyYW1zLmRlbGV0ZShuYW1lKTtcbiAgICB9XG4gICAgaWYgKGlzRWRnZSkge1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgRURHRV9FWFRFTkRFRF9JTlRFUk5BTF9RVUVSWV9OQU1FUyl7XG4gICAgICAgICAgICBpbnN0YW5jZS5zZWFyY2hQYXJhbXMuZGVsZXRlKG5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpc1N0cmluZ1VybCA/IGluc3RhbmNlLnRvU3RyaW5nKCkgOiBpbnN0YW5jZTtcbn1cbi8qKlxuICogU3RyaXAgaW50ZXJuYWwgaGVhZGVycyBmcm9tIHRoZSByZXF1ZXN0IGhlYWRlcnMuXG4gKlxuICogQHBhcmFtIGhlYWRlcnMgdGhlIGhlYWRlcnMgdG8gc3RyaXAgb2YgaW50ZXJuYWwgaGVhZGVyc1xuICovIGV4cG9ydCBmdW5jdGlvbiBzdHJpcEludGVybmFsSGVhZGVycyhoZWFkZXJzKSB7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgSU5URVJOQUxfSEVBREVSUyl7XG4gICAgICAgIGRlbGV0ZSBoZWFkZXJzW2tleV07XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcm5hbC11dGlscy5qcy5tYXAiXSwibmFtZXMiOlsiTkVYVF9SU0NfVU5JT05fUVVFUlkiLCJJTlRFUk5BTF9IRUFERVJTIiwiSU5URVJOQUxfUVVFUllfTkFNRVMiLCJFREdFX0VYVEVOREVEX0lOVEVSTkFMX1FVRVJZX05BTUVTIiwic3RyaXBJbnRlcm5hbFF1ZXJpZXMiLCJxdWVyeSIsIm5hbWUiLCJzdHJpcEludGVybmFsU2VhcmNoUGFyYW1zIiwidXJsIiwiaXNFZGdlIiwiaXNTdHJpbmdVcmwiLCJpbnN0YW5jZSIsIlVSTCIsInNlYXJjaFBhcmFtcyIsImRlbGV0ZSIsInRvU3RyaW5nIiwic3RyaXBJbnRlcm5hbEhlYWRlcnMiLCJoZWFkZXJzIiwia2V5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/internal-utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/lib/incremental-cache/fetch-cache.js":
/*!********************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/lib/incremental-cache/fetch-cache.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FetchCache)\n/* harmony export */ });\n/* harmony import */ var next_dist_compiled_lru_cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/compiled/lru-cache */ \"(rsc)/./node_modules/next/dist/compiled/lru-cache/index.js\");\n/* harmony import */ var next_dist_compiled_lru_cache__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_compiled_lru_cache__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/constants */ \"(rsc)/./node_modules/next/dist/esm/lib/constants.js\");\n\n\nlet rateLimitedUntil = 0;\nlet memoryCache;\nconst CACHE_TAGS_HEADER = \"x-vercel-cache-tags\";\nconst CACHE_HEADERS_HEADER = \"x-vercel-sc-headers\";\nconst CACHE_STATE_HEADER = \"x-vercel-cache-state\";\nconst CACHE_REVALIDATE_HEADER = \"x-vercel-revalidate\";\nconst CACHE_FETCH_URL_HEADER = \"x-vercel-cache-item-name\";\nconst CACHE_CONTROL_VALUE_HEADER = \"x-vercel-cache-control\";\nclass FetchCache {\n  static isAvailable(ctx) {\n    return !!(ctx._requestHeaders[\"x-vercel-sc-host\"] || process.env.SUSPENSE_CACHE_URL);\n  }\n  constructor(ctx) {\n    this.debug = !!process.env.NEXT_PRIVATE_DEBUG_CACHE;\n    this.headers = {};\n    this.headers[\"Content-Type\"] = \"application/json\";\n    if (CACHE_HEADERS_HEADER in ctx._requestHeaders) {\n      const newHeaders = JSON.parse(ctx._requestHeaders[CACHE_HEADERS_HEADER]);\n      for (const k in newHeaders) {\n        this.headers[k] = newHeaders[k];\n      }\n      delete ctx._requestHeaders[CACHE_HEADERS_HEADER];\n    }\n    const scHost = ctx._requestHeaders[\"x-vercel-sc-host\"] || process.env.SUSPENSE_CACHE_URL;\n    const scBasePath = ctx._requestHeaders[\"x-vercel-sc-basepath\"] || process.env.SUSPENSE_CACHE_BASEPATH;\n    if (process.env.SUSPENSE_CACHE_AUTH_TOKEN) {\n      this.headers[\"Authorization\"] = `Bearer ${process.env.SUSPENSE_CACHE_AUTH_TOKEN}`;\n    }\n    if (scHost) {\n      this.cacheEndpoint = `https://${scHost}${scBasePath || \"\"}`;\n      if (this.debug) {\n        console.log(\"using cache endpoint\", this.cacheEndpoint);\n      }\n    } else if (this.debug) {\n      console.log(\"no cache endpoint available\");\n    }\n    if (ctx.maxMemoryCacheSize) {\n      if (!memoryCache) {\n        if (this.debug) {\n          console.log(\"using memory store for fetch cache\");\n        }\n        memoryCache = new (next_dist_compiled_lru_cache__WEBPACK_IMPORTED_MODULE_0___default())({\n          max: ctx.maxMemoryCacheSize,\n          length({\n            value\n          }) {\n            var _JSON_stringify;\n            if (!value) {\n              return 25;\n            } else if (value.kind === \"REDIRECT\") {\n              return JSON.stringify(value.props).length;\n            } else if (value.kind === \"IMAGE\") {\n              throw new Error(\"invariant image should not be incremental-cache\");\n            } else if (value.kind === \"FETCH\") {\n              return JSON.stringify(value.data || \"\").length;\n            } else if (value.kind === \"ROUTE\") {\n              return value.body.length;\n            }\n            // rough estimate of size of cache value\n            return value.html.length + (((_JSON_stringify = JSON.stringify(value.pageData)) == null ? void 0 : _JSON_stringify.length) || 0);\n          }\n        });\n      }\n    } else {\n      if (this.debug) {\n        console.log(\"not using memory store for fetch cache\");\n      }\n    }\n  }\n  resetRequestCache() {\n    memoryCache == null ? void 0 : memoryCache.reset();\n  }\n  async revalidateTag(tag) {\n    if (this.debug) {\n      console.log(\"revalidateTag\", tag);\n    }\n    if (Date.now() < rateLimitedUntil) {\n      if (this.debug) {\n        console.log(\"rate limited \", rateLimitedUntil);\n      }\n      return;\n    }\n    try {\n      const res = await fetch(`${this.cacheEndpoint}/v1/suspense-cache/revalidate?tags=${tag}`, {\n        method: \"POST\",\n        headers: this.headers,\n        // @ts-expect-error not on public type\n        next: {\n          internal: true\n        }\n      });\n      if (res.status === 429) {\n        const retryAfter = res.headers.get(\"retry-after\") || \"60000\";\n        rateLimitedUntil = Date.now() + parseInt(retryAfter);\n      }\n      if (!res.ok) {\n        throw new Error(`Request failed with status ${res.status}.`);\n      }\n    } catch (err) {\n      console.warn(`Failed to revalidate tag ${tag}`, err);\n    }\n  }\n  async get(...args) {\n    const [key, ctx = {}] = args;\n    const {\n      tags,\n      softTags,\n      kindHint,\n      fetchIdx,\n      fetchUrl\n    } = ctx;\n    if (kindHint !== \"fetch\") {\n      return null;\n    }\n    if (Date.now() < rateLimitedUntil) {\n      if (this.debug) {\n        console.log(\"rate limited\");\n      }\n      return null;\n    }\n    // memory cache is cleared at the end of each request\n    // so that revalidate events are pulled from upstream\n    // on successive requests\n    let data = memoryCache == null ? void 0 : memoryCache.get(key);\n    // get data from fetch cache\n    if (!data && this.cacheEndpoint) {\n      try {\n        const start = Date.now();\n        const fetchParams = {\n          internal: true,\n          fetchType: \"cache-get\",\n          fetchUrl: fetchUrl,\n          fetchIdx\n        };\n        const res = await fetch(`${this.cacheEndpoint}/v1/suspense-cache/${key}`, {\n          method: \"GET\",\n          headers: {\n            ...this.headers,\n            [CACHE_FETCH_URL_HEADER]: fetchUrl,\n            [CACHE_TAGS_HEADER]: (tags == null ? void 0 : tags.join(\",\")) || \"\",\n            [_lib_constants__WEBPACK_IMPORTED_MODULE_1__.NEXT_CACHE_SOFT_TAGS_HEADER]: (softTags == null ? void 0 : softTags.join(\",\")) || \"\"\n          },\n          next: fetchParams\n        });\n        if (res.status === 429) {\n          const retryAfter = res.headers.get(\"retry-after\") || \"60000\";\n          rateLimitedUntil = Date.now() + parseInt(retryAfter);\n        }\n        if (res.status === 404) {\n          if (this.debug) {\n            console.log(`no fetch cache entry for ${key}, duration: ${Date.now() - start}ms`);\n          }\n          return null;\n        }\n        if (!res.ok) {\n          console.error(await res.text());\n          throw new Error(`invalid response from cache ${res.status}`);\n        }\n        const cached = await res.json();\n        if (!cached || cached.kind !== \"FETCH\") {\n          this.debug && console.log({\n            cached\n          });\n          throw new Error(`invalid cache value`);\n        }\n        const cacheState = res.headers.get(CACHE_STATE_HEADER);\n        const age = res.headers.get(\"age\");\n        data = {\n          value: cached,\n          // if it's already stale set it to a time in the past\n          // if not derive last modified from age\n          lastModified: cacheState !== \"fresh\" ? Date.now() - _lib_constants__WEBPACK_IMPORTED_MODULE_1__.CACHE_ONE_YEAR : Date.now() - parseInt(age || \"0\", 10) * 1000\n        };\n        if (this.debug) {\n          console.log(`got fetch cache entry for ${key}, duration: ${Date.now() - start}ms, size: ${Object.keys(cached).length}, cache-state: ${cacheState} tags: ${tags == null ? void 0 : tags.join(\",\")} softTags: ${softTags == null ? void 0 : softTags.join(\",\")}`);\n        }\n        if (data) {\n          memoryCache == null ? void 0 : memoryCache.set(key, data);\n        }\n      } catch (err) {\n        // unable to get data from fetch-cache\n        if (this.debug) {\n          console.error(`Failed to get from fetch-cache`, err);\n        }\n      }\n    }\n    return data || null;\n  }\n  async set(...args) {\n    const [key, data, ctx] = args;\n    const {\n      fetchCache,\n      fetchIdx,\n      fetchUrl,\n      tags\n    } = ctx;\n    if (!fetchCache) return;\n    if (Date.now() < rateLimitedUntil) {\n      if (this.debug) {\n        console.log(\"rate limited\");\n      }\n      return;\n    }\n    memoryCache == null ? void 0 : memoryCache.set(key, {\n      value: data,\n      lastModified: Date.now()\n    });\n    if (this.cacheEndpoint) {\n      try {\n        const start = Date.now();\n        if (data !== null && \"revalidate\" in data) {\n          this.headers[CACHE_REVALIDATE_HEADER] = data.revalidate.toString();\n        }\n        if (!this.headers[CACHE_REVALIDATE_HEADER] && data !== null && \"data\" in data) {\n          this.headers[CACHE_CONTROL_VALUE_HEADER] = data.data.headers[\"cache-control\"];\n        }\n        const body = JSON.stringify({\n          ...data,\n          // we send the tags in the header instead\n          // of in the body here\n          tags: undefined\n        });\n        if (this.debug) {\n          console.log(\"set cache\", key);\n        }\n        const fetchParams = {\n          internal: true,\n          fetchType: \"cache-set\",\n          fetchUrl,\n          fetchIdx\n        };\n        const res = await fetch(`${this.cacheEndpoint}/v1/suspense-cache/${key}`, {\n          method: \"POST\",\n          headers: {\n            ...this.headers,\n            [CACHE_FETCH_URL_HEADER]: fetchUrl || \"\",\n            [CACHE_TAGS_HEADER]: (tags == null ? void 0 : tags.join(\",\")) || \"\"\n          },\n          body: body,\n          next: fetchParams\n        });\n        if (res.status === 429) {\n          const retryAfter = res.headers.get(\"retry-after\") || \"60000\";\n          rateLimitedUntil = Date.now() + parseInt(retryAfter);\n        }\n        if (!res.ok) {\n          this.debug && console.log(await res.text());\n          throw new Error(`invalid response ${res.status}`);\n        }\n        if (this.debug) {\n          console.log(`successfully set to fetch-cache for ${key}, duration: ${Date.now() - start}ms, size: ${body.length}`);\n        }\n      } catch (err) {\n        // unable to set to fetch-cache\n        if (this.debug) {\n          console.error(`Failed to update fetch cache`, err);\n        }\n      }\n    }\n    return;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvbGliL2luY3JlbWVudGFsLWNhY2hlL2ZldGNoLWNhY2hlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBb0Q7QUFDaUM7QUFDckYsSUFBSUcsZ0JBQWdCLEdBQUcsQ0FBQztBQUN4QixJQUFJQyxXQUFXO0FBQ2YsTUFBTUMsaUJBQWlCLEdBQUcscUJBQXFCO0FBQy9DLE1BQU1DLG9CQUFvQixHQUFHLHFCQUFxQjtBQUNsRCxNQUFNQyxrQkFBa0IsR0FBRyxzQkFBc0I7QUFDakQsTUFBTUMsdUJBQXVCLEdBQUcscUJBQXFCO0FBQ3JELE1BQU1DLHNCQUFzQixHQUFHLDBCQUEwQjtBQUN6RCxNQUFNQywwQkFBMEIsR0FBRyx3QkFBd0I7QUFDNUMsTUFBTUMsVUFBVSxDQUFDO0VBQzVCLE9BQU9DLFdBQVdBLENBQUNDLEdBQUcsRUFBRTtJQUNwQixPQUFPLENBQUMsRUFBRUEsR0FBRyxDQUFDQyxlQUFlLENBQUMsa0JBQWtCLENBQUMsSUFBSUMsT0FBTyxDQUFDQyxHQUFHLENBQUNDLGtCQUFrQixDQUFDO0VBQ3hGO0VBQ0FDLFdBQVdBLENBQUNMLEdBQUcsRUFBQztJQUNaLElBQUksQ0FBQ00sS0FBSyxHQUFHLENBQUMsQ0FBQ0osT0FBTyxDQUFDQyxHQUFHLENBQUNJLHdCQUF3QjtJQUNuRCxJQUFJLENBQUNDLE9BQU8sR0FBRyxDQUFDLENBQUM7SUFDakIsSUFBSSxDQUFDQSxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUcsa0JBQWtCO0lBQ2pELElBQUlmLG9CQUFvQixJQUFJTyxHQUFHLENBQUNDLGVBQWUsRUFBRTtNQUM3QyxNQUFNUSxVQUFVLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDWCxHQUFHLENBQUNDLGVBQWUsQ0FBQ1Isb0JBQW9CLENBQUMsQ0FBQztNQUN4RSxLQUFJLE1BQU1tQixDQUFDLElBQUlILFVBQVUsRUFBQztRQUN0QixJQUFJLENBQUNELE9BQU8sQ0FBQ0ksQ0FB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QUFLO1VBQ3JFLENBQUM7VUFDRC9CLElBQUksRUFBRUEsSUFBSTtVQUNWWSxJQUFJLEVBQUVpQjtRQUNWLENBQUMsQ0FBQztRQUNGLElBQUlwQixHQUFHLENBQUNLLE1BQU0sS0FBSyxHQUFHLEVBQUU7VUFDcEIsTUFBTUMsVUFBVSxHQUFHTixHQUFHLENBQUMvQixPQUFPLENBQUNzQyxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksT0FBTztVQUM1RHhELGdCQUFnQixHQUFHK0MsSUFBSSxDQUFDQyxHQUFHLENBQUMsQ0FBQyxHQUFHUyxRQUFRLENBQUNGLFVBQVUsQ0FBQztRQUN4RDtRQUNBLElBQUksQ0FBQ04sR0FBRyxDQUFDUyxFQUFFLEVBQUU7VUFDVCxJQUFJLENBQUMxQyxLQUFLLElBQUlZLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLE1BQU1vQixHQUFHLENBQUN3QixJQUFJLENBQUMsQ0FBQyxDQUFDO1VBQzNDLE1BQU0sSUFBSW5DLEtBQUssQ0FBRSxvQkFBbUJXLEdBQUcsQ0FBQ0ssTUFBTyxFQUFDLENBQUM7UUFDckQ7UUFDQSxJQUFJLElBQUksQ0FBQ3RDLEtBQUssRUFBRTtVQUNaWSxPQUFPLENBQUNDLEdBQUcsQ0FBRSx1Q0FBc0NpQyxHQUFJLGVBQWNmLElBQUksQ0FBQ0MsR0FBRyxDQUFDLENBQUMsR0FBR29CLEtBQU0sYUFBWTVCLElBQUksQ0FBQ1IsTUFBTyxFQUFDLENBQUM7UUFDdEg7TUFDSixDQUFDLENBQUMsT0FBTzJCLEdBQUcsRUFBRTtRQUNWO1FBQ0EsSUFBSSxJQUFJLENBQUMzQyxLQUFLLEVBQUU7VUFDWlksT0FBTyxDQUFDNEMsS0FBSyxDQUFFLDhCQUE2QixFQUFFYixHQUFHLENBQUM7UUFDdEQ7TUFDSjtJQUNKO0lBQ0E7RUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvZXNtL3NlcnZlci9saWIvaW5jcmVtZW50YWwtY2FjaGUvZmV0Y2gtY2FjaGUuanM/M2Q0MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTFJVQ2FjaGUgZnJvbSBcIm5leHQvZGlzdC9jb21waWxlZC9scnUtY2FjaGVcIjtcbmltcG9ydCB7IENBQ0hFX09ORV9ZRUFSLCBORVhUX0NBQ0hFX1NPRlRfVEFHU19IRUFERVIgfSBmcm9tIFwiLi4vLi4vLi4vbGliL2NvbnN0YW50c1wiO1xubGV0IHJhdGVMaW1pdGVkVW50aWwgPSAwO1xubGV0IG1lbW9yeUNhY2hlO1xuY29uc3QgQ0FDSEVfVEFHU19IRUFERVIgPSBcIngtdmVyY2VsLWNhY2hlLXRhZ3NcIjtcbmNvbnN0IENBQ0hFX0hFQURFUlNfSEVBREVSID0gXCJ4LXZlcmNlbC1zYy1oZWFkZXJzXCI7XG5jb25zdCBDQUNIRV9TVEFURV9IRUFERVIgPSBcIngtdmVyY2VsLWNhY2hlLXN0YXRlXCI7XG5jb25zdCBDQUNIRV9SRVZBTElEQVRFX0hFQURFUiA9IFwieC12ZXJjZWwtcmV2YWxpZGF0ZVwiO1xuY29uc3QgQ0FDSEVfRkVUQ0hfVVJMX0hFQURFUiA9IFwieC12ZXJjZWwtY2FjaGUtaXRlbS1uYW1lXCI7XG5jb25zdCBDQUNIRV9DT05UUk9MX1ZBTFVFX0hFQURFUiA9IFwieC12ZXJjZWwtY2FjaGUtY29udHJvbFwiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmV0Y2hDYWNoZSB7XG4gICAgc3RhdGljIGlzQXZhaWxhYmxlKGN0eCkge1xuICAgICAgICByZXR1cm4gISEoY3R4Ll9yZXF1ZXN0SGVhZGVyc1tcIngtdmVyY2VsLXNjLWhvc3RcIl0gfHwgcHJvY2Vzcy5lbnYuU1VTUEVOU0VfQ0FDSEVfVVJMKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoY3R4KXtcbiAgICAgICAgdGhpcy5kZWJ1ZyA9ICEhcHJvY2Vzcy5lbnYuTkVYVF9QUklWQVRFX0RFQlVHX0NBQ0hFO1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSB7fTtcbiAgICAgICAgdGhpcy5oZWFkZXJzW1wiQ29udGVudC1UeXBlXCJdID0gXCJhcHBsaWNhdGlvbi9qc29uXCI7XG4gICAgICAgIGlmIChDQUNIRV9IRUFERVJTX0hFQURFUiBpbiBjdHguX3JlcXVlc3RIZWFkZXJzKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdIZWFkZXJzID0gSlNPTi5wYXJzZShjdHguX3JlcXVlc3RIZWFkZXJzW0NBQ0hFX0hFQURFUlNfSEVBREVSXSk7XG4gICAgICAgICAgICBmb3IoY29uc3QgayBpbiBuZXdIZWFkZXJzKXtcbiAgICAgICAgICAgICAgICB0aGlzLmhlYWRlcnNba10gPSBuZXdIZWFkZXJzW2tdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsZXRlIGN0eC5fcmVxdWVzdEhlYWRlcnNbQ0FDSEVfSEVBREVSU19IRUFERVJdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNjSG9zdCA9IGN0eC5fcmVxdWVzdEhlYWRlcnNbXCJ4LXZlcmNlbC1zYy1ob3N0XCJdIHx8IHByb2Nlc3MuZW52LlNVU1BFTlNFX0NBQ0hFX1VSTDtcbiAgICAgICAgY29uc3Qgc2NCYXNlUGF0aCA9IGN0eC5fcmVxdWVzdEhlYWRlcnNbXCJ4LXZlcmNlbC1zYy1iYXNlcGF0aFwiXSB8fCBwcm9jZXNzLmVudi5TVVNQRU5TRV9DQUNIRV9CQVNFUEFUSDtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52LlNVU1BFTlNFX0NBQ0hFX0FVVEhfVE9LRU4pIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyc1tcIkF1dGhvcml6YXRpb25cIl0gPSBgQmVhcmVyICR7cHJvY2Vzcy5lbnYuU1VTUEVOU0VfQ0FDSEVfQVVUSF9UT0tFTn1gO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzY0hvc3QpIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVFbmRwb2ludCA9IGBodHRwczovLyR7c2NIb3N0fSR7c2NCYXNlUGF0aCB8fCBcIlwifWA7XG4gICAgICAgICAgICBpZiAodGhpcy5kZWJ1Zykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidXNpbmcgY2FjaGUgZW5kcG9pbnRcIiwgdGhpcy5jYWNoZUVuZHBvaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRlYnVnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIm5vIGNhY2hlIGVuZHBvaW50IGF2YWlsYWJsZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3R4Lm1heE1lbW9yeUNhY2hlU2l6ZSkge1xuICAgICAgICAgICAgaWYgKCFtZW1vcnlDYWNoZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlYnVnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidXNpbmcgbWVtb3J5IHN0b3JlIGZvciBmZXRjaCBjYWNoZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWVtb3J5Q2FjaGUgPSBuZXcgTFJVQ2FjaGUoe1xuICAgICAgICAgICAgICAgICAgICBtYXg6IGN0eC5tYXhNZW1vcnlDYWNoZVNpemUsXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aCAoeyB2YWx1ZSB9KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX0pTT05fc3RyaW5naWZ5O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAyNTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUua2luZCA9PT0gXCJSRURJUkVDVFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlLnByb3BzKS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLmtpbmQgPT09IFwiSU1BR0VcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFyaWFudCBpbWFnZSBzaG91bGQgbm90IGJlIGluY3JlbWVudGFsLWNhY2hlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS5raW5kID09PSBcIkZFVENIXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUuZGF0YSB8fCBcIlwiKS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLmtpbmQgPT09IFwiUk9VVEVcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5ib2R5Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJvdWdoIGVzdGltYXRlIG9mIHNpemUgb2YgY2FjaGUgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5odG1sLmxlbmd0aCArICgoKF9KU09OX3N0cmluZ2lmeSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlLnBhZ2VEYXRhKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9KU09OX3N0cmluZ2lmeS5sZW5ndGgpIHx8IDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kZWJ1Zykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibm90IHVzaW5nIG1lbW9yeSBzdG9yZSBmb3IgZmV0Y2ggY2FjaGVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVzZXRSZXF1ZXN0Q2FjaGUoKSB7XG4gICAgICAgIG1lbW9yeUNhY2hlID09IG51bGwgPyB2b2lkIDAgOiBtZW1vcnlDYWNoZS5yZXNldCgpO1xuICAgIH1cbiAgICBhc3luYyByZXZhbGlkYXRlVGFnKHRhZykge1xuICAgICAgICBpZiAodGhpcy5kZWJ1Zykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZXZhbGlkYXRlVGFnXCIsIHRhZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKERhdGUubm93KCkgPCByYXRlTGltaXRlZFVudGlsKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kZWJ1Zykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmF0ZSBsaW1pdGVkIFwiLCByYXRlTGltaXRlZFVudGlsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7dGhpcy5jYWNoZUVuZHBvaW50fS92MS9zdXNwZW5zZS1jYWNoZS9yZXZhbGlkYXRlP3RhZ3M9JHt0YWd9YCwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3Igbm90IG9uIHB1YmxpYyB0eXBlXG4gICAgICAgICAgICAgICAgbmV4dDoge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbDogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDQyOSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJldHJ5QWZ0ZXIgPSByZXMuaGVhZGVycy5nZXQoXCJyZXRyeS1hZnRlclwiKSB8fCBcIjYwMDAwXCI7XG4gICAgICAgICAgICAgICAgcmF0ZUxpbWl0ZWRVbnRpbCA9IERhdGUubm93KCkgKyBwYXJzZUludChyZXRyeUFmdGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcmVzLm9rKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyAke3Jlcy5zdGF0dXN9LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgRmFpbGVkIHRvIHJldmFsaWRhdGUgdGFnICR7dGFnfWAsIGVycik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZ2V0KC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgW2tleSwgY3R4ID0ge31dID0gYXJncztcbiAgICAgICAgY29uc3QgeyB0YWdzLCBzb2Z0VGFncywga2luZEhpbnQsIGZldGNoSWR4LCBmZXRjaFVybCB9ID0gY3R4O1xuICAgICAgICBpZiAoa2luZEhpbnQgIT09IFwiZmV0Y2hcIikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKERhdGUubm93KCkgPCByYXRlTGltaXRlZFVudGlsKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kZWJ1Zykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmF0ZSBsaW1pdGVkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbWVtb3J5IGNhY2hlIGlzIGNsZWFyZWQgYXQgdGhlIGVuZCBvZiBlYWNoIHJlcXVlc3RcbiAgICAgICAgLy8gc28gdGhhdCByZXZhbGlkYXRlIGV2ZW50cyBhcmUgcHVsbGVkIGZyb20gdXBzdHJlYW1cbiAgICAgICAgLy8gb24gc3VjY2Vzc2l2ZSByZXF1ZXN0c1xuICAgICAgICBsZXQgZGF0YSA9IG1lbW9yeUNhY2hlID09IG51bGwgPyB2b2lkIDAgOiBtZW1vcnlDYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgLy8gZ2V0IGRhdGEgZnJvbSBmZXRjaCBjYWNoZVxuICAgICAgICBpZiAoIWRhdGEgJiYgdGhpcy5jYWNoZUVuZHBvaW50KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICBjb25zdCBmZXRjaFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWw6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZldGNoVHlwZTogXCJjYWNoZS1nZXRcIixcbiAgICAgICAgICAgICAgICAgICAgZmV0Y2hVcmw6IGZldGNoVXJsLFxuICAgICAgICAgICAgICAgICAgICBmZXRjaElkeFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7dGhpcy5jYWNoZUVuZHBvaW50fS92MS9zdXNwZW5zZS1jYWNoZS8ke2tleX1gLCB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgW0NBQ0hFX0ZFVENIX1VSTF9IRUFERVJdOiBmZXRjaFVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtDQUNIRV9UQUdTX0hFQURFUl06ICh0YWdzID09IG51bGwgPyB2b2lkIDAgOiB0YWdzLmpvaW4oXCIsXCIpKSB8fCBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgW05FWFRfQ0FDSEVfU09GVF9UQUdTX0hFQURFUl06IChzb2Z0VGFncyA9PSBudWxsID8gdm9pZCAwIDogc29mdFRhZ3Muam9pbihcIixcIikpIHx8IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbmV4dDogZmV0Y2hQYXJhbXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gNDI5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJldHJ5QWZ0ZXIgPSByZXMuaGVhZGVycy5nZXQoXCJyZXRyeS1hZnRlclwiKSB8fCBcIjYwMDAwXCI7XG4gICAgICAgICAgICAgICAgICAgIHJhdGVMaW1pdGVkVW50aWwgPSBEYXRlLm5vdygpICsgcGFyc2VJbnQocmV0cnlBZnRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSA0MDQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVidWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBubyBmZXRjaCBjYWNoZSBlbnRyeSBmb3IgJHtrZXl9LCBkdXJhdGlvbjogJHtEYXRlLm5vdygpIC0gc3RhcnR9bXNgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFyZXMub2spIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihhd2FpdCByZXMudGV4dCgpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIHJlc3BvbnNlIGZyb20gY2FjaGUgJHtyZXMuc3RhdHVzfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjYWNoZWQgPSBhd2FpdCByZXMuanNvbigpO1xuICAgICAgICAgICAgICAgIGlmICghY2FjaGVkIHx8IGNhY2hlZC5raW5kICE9PSBcIkZFVENIXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWJ1ZyAmJiBjb25zb2xlLmxvZyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZWRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBjYWNoZSB2YWx1ZWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjYWNoZVN0YXRlID0gcmVzLmhlYWRlcnMuZ2V0KENBQ0hFX1NUQVRFX0hFQURFUik7XG4gICAgICAgICAgICAgICAgY29uc3QgYWdlID0gcmVzLmhlYWRlcnMuZ2V0KFwiYWdlXCIpO1xuICAgICAgICAgICAgICAgIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjYWNoZWQsXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIGl0J3MgYWxyZWFkeSBzdGFsZSBzZXQgaXQgdG8gYSB0aW1lIGluIHRoZSBwYXN0XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIG5vdCBkZXJpdmUgbGFzdCBtb2RpZmllZCBmcm9tIGFnZVxuICAgICAgICAgICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IGNhY2hlU3RhdGUgIT09IFwiZnJlc2hcIiA/IERhdGUubm93KCkgLSBDQUNIRV9PTkVfWUVBUiA6IERhdGUubm93KCkgLSBwYXJzZUludChhZ2UgfHwgXCIwXCIsIDEwKSAqIDEwMDBcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlYnVnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBnb3QgZmV0Y2ggY2FjaGUgZW50cnkgZm9yICR7a2V5fSwgZHVyYXRpb246ICR7RGF0ZS5ub3coKSAtIHN0YXJ0fW1zLCBzaXplOiAke09iamVjdC5rZXlzKGNhY2hlZCkubGVuZ3RofSwgY2FjaGUtc3RhdGU6ICR7Y2FjaGVTdGF0ZX0gdGFnczogJHt0YWdzID09IG51bGwgPyB2b2lkIDAgOiB0YWdzLmpvaW4oXCIsXCIpfSBzb2Z0VGFnczogJHtzb2Z0VGFncyA9PSBudWxsID8gdm9pZCAwIDogc29mdFRhZ3Muam9pbihcIixcIil9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lbW9yeUNhY2hlID09IG51bGwgPyB2b2lkIDAgOiBtZW1vcnlDYWNoZS5zZXQoa2V5LCBkYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAvLyB1bmFibGUgdG8gZ2V0IGRhdGEgZnJvbSBmZXRjaC1jYWNoZVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlYnVnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBnZXQgZnJvbSBmZXRjaC1jYWNoZWAsIGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhIHx8IG51bGw7XG4gICAgfVxuICAgIGFzeW5jIHNldCguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IFtrZXksIGRhdGEsIGN0eF0gPSBhcmdzO1xuICAgICAgICBjb25zdCB7IGZldGNoQ2FjaGUsIGZldGNoSWR4LCBmZXRjaFVybCwgdGFncyB9ID0gY3R4O1xuICAgICAgICBpZiAoIWZldGNoQ2FjaGUpIHJldHVybjtcbiAgICAgICAgaWYgKERhdGUubm93KCkgPCByYXRlTGltaXRlZFVudGlsKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kZWJ1Zykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmF0ZSBsaW1pdGVkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG1lbW9yeUNhY2hlID09IG51bGwgPyB2b2lkIDAgOiBtZW1vcnlDYWNoZS5zZXQoa2V5LCB7XG4gICAgICAgICAgICB2YWx1ZTogZGF0YSxcbiAgICAgICAgICAgIGxhc3RNb2RpZmllZDogRGF0ZS5ub3coKVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoaXMuY2FjaGVFbmRwb2ludCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgIT09IG51bGwgJiYgXCJyZXZhbGlkYXRlXCIgaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhlYWRlcnNbQ0FDSEVfUkVWQUxJREFURV9IRUFERVJdID0gZGF0YS5yZXZhbGlkYXRlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5oZWFkZXJzW0NBQ0hFX1JFVkFMSURBVEVfSEVBREVSXSAmJiBkYXRhICE9PSBudWxsICYmIFwiZGF0YVwiIGluIGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oZWFkZXJzW0NBQ0hFX0NPTlRST0xfVkFMVUVfSEVBREVSXSA9IGRhdGEuZGF0YS5oZWFkZXJzW1wiY2FjaGUtY29udHJvbFwiXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgLy8gd2Ugc2VuZCB0aGUgdGFncyBpbiB0aGUgaGVhZGVyIGluc3RlYWRcbiAgICAgICAgICAgICAgICAgICAgLy8gb2YgaW4gdGhlIGJvZHkgaGVyZVxuICAgICAgICAgICAgICAgICAgICB0YWdzOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kZWJ1Zykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInNldCBjYWNoZVwiLCBrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBmZXRjaFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWw6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZldGNoVHlwZTogXCJjYWNoZS1zZXRcIixcbiAgICAgICAgICAgICAgICAgICAgZmV0Y2hVcmwsXG4gICAgICAgICAgICAgICAgICAgIGZldGNoSWR4XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgJHt0aGlzLmNhY2hlRW5kcG9pbnR9L3YxL3N1c3BlbnNlLWNhY2hlLyR7a2V5fWAsIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgW0NBQ0hFX0ZFVENIX1VSTF9IRUFERVJdOiBmZXRjaFVybCB8fCBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgW0NBQ0hFX1RBR1NfSEVBREVSXTogKHRhZ3MgPT0gbnVsbCA/IHZvaWQgMCA6IHRhZ3Muam9pbihcIixcIikpIHx8IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgICAgICAgICAgbmV4dDogZmV0Y2hQYXJhbXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gNDI5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJldHJ5QWZ0ZXIgPSByZXMuaGVhZGVycy5nZXQoXCJyZXRyeS1hZnRlclwiKSB8fCBcIjYwMDAwXCI7XG4gICAgICAgICAgICAgICAgICAgIHJhdGVMaW1pdGVkVW50aWwgPSBEYXRlLm5vdygpICsgcGFyc2VJbnQocmV0cnlBZnRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcmVzLm9rKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVidWcgJiYgY29uc29sZS5sb2coYXdhaXQgcmVzLnRleHQoKSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCByZXNwb25zZSAke3Jlcy5zdGF0dXN9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlYnVnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBzdWNjZXNzZnVsbHkgc2V0IHRvIGZldGNoLWNhY2hlIGZvciAke2tleX0sIGR1cmF0aW9uOiAke0RhdGUubm93KCkgLSBzdGFydH1tcywgc2l6ZTogJHtib2R5Lmxlbmd0aH1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAvLyB1bmFibGUgdG8gc2V0IHRvIGZldGNoLWNhY2hlXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVidWcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIHVwZGF0ZSBmZXRjaCBjYWNoZWAsIGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZldGNoLWNhY2hlLmpzLm1hcCJdLCJuYW1lcyI6WyJMUlVDYWNoZSIsIkNBQ0hFX09ORV9ZRUFSIiwiTkVYVF9DQUNIRV9TT0ZUX1RBR1NfSEVBREVSIiwicmF0ZUxpbWl0ZWRVbnRpbCIsIm1lbW9yeUNhY2hlIiwiQ0FDSEVfVEFHU19IRUFERVIiLCJDQUNIRV9IRUFERVJTX0hFQURFUiIsIkNBQ0hFX1NUQVRFX0hFQURFUiIsIkNBQ0hFX1JFVkFMSURBVEVfSEVBREVSIiwiQ0FDSEVfRkVUQ0hfVVJMX0hFQURFUiIsIkNBQ0hFX0NPTlRST0xfVkFMVUVfSEVBREVSIiwiRmV0Y2hDYWNoZSIsImlzQXZhaWxhYmxlIiwiY3R4IiwiX3JlcXVlc3RIZWFkZXJzIiwicHJvY2VzcyIsImVudiIsIlNVU1BFTlNFX0NBQ0hFX1VSTCIsImNvbnN0cnVjdG9yIiwiZGVidWciLCJORVhUX1BSSVZBVEVfREVCVUdfQ0FDSEUiLCJoZWFkZXJzIiwibmV3SGVhZGVycyIsIkpTT04iLCJwYXJzZSIsImsiLCJzY0hvc3QiLCJzY0Jhc2VQYXRoIiwiU1VTUEVOU0VfQ0FDSEVfQkFTRVBBVEgiLCJTVVNQRU5TRV9DQUNIRV9BVVRIX1RPS0VOIiwiY2FjaGVFbmRwb2ludCIsImNvbnNvbGUiLCJsb2ciLCJtYXhNZW1vcnlDYWNoZVNpemUiLCJtYXgiLCJsZW5ndGgiLCJ2YWx1ZSIsIl9KU09OX3N0cmluZ2lmeSIsImtpbmQiLCJzdHJpbmdpZnkiLCJwcm9wcyIsIkVycm9yIiwiZGF0YSIsImJvZHkiLCJodG1sIiwicGFnZURhdGEiLCJyZXNldFJlcXVlc3RDYWNoZSIsInJlc2V0IiwicmV2YWxpZGF0ZVRhZyIsInRhZyIsIkRhdGUiLCJub3ciLCJyZXMiLCJmZXRjaCIsIm1ldGhvZCIsIm5leHQiLCJpbnRlcm5hbCIsInN0YXR1cyIsInJldHJ5QWZ0ZXIiLCJnZXQiLCJwYXJzZUludCIsIm9rIiwiZXJyIiwid2FybiIsImFyZ3MiLCJrZXkiLCJ0YWdzIiwic29mdFRhZ3MiLCJraW5kSGludCIsImZldGNoSWR4IiwiZmV0Y2hVcmwiLCJzdGFydCIsImZldGNoUGFyYW1zIiwiZmV0Y2hUeXBlIiwiam9pbiIsImVycm9yIiwidGV4dCIsImNhY2hlZCIsImpzb24iLCJjYWNoZVN0YXRlIiwiYWdlIiwibGFzdE1vZGlmaWVkIiwiT2JqZWN0Iiwia2V5cyIsInNldCIsImZldGNoQ2FjaGUiLCJyZXZhbGlkYXRlIiwidG9TdHJpbmciLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/lib/incremental-cache/fetch-cache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/lib/incremental-cache/file-system-cache.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/lib/incremental-cache/file-system-cache.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FileSystemCache)\n/* harmony export */ });\n/* harmony import */ var next_dist_compiled_lru_cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/compiled/lru-cache */ \"(rsc)/./node_modules/next/dist/compiled/lru-cache/index.js\");\n/* harmony import */ var next_dist_compiled_lru_cache__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_compiled_lru_cache__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _shared_lib_isomorphic_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../shared/lib/isomorphic/path */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/isomorphic/path.js\");\n/* harmony import */ var _shared_lib_isomorphic_path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_shared_lib_isomorphic_path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/constants */ \"(rsc)/./node_modules/next/dist/esm/lib/constants.js\");\n\n\n\nlet memoryCache;\nlet tagsManifest;\nclass FileSystemCache {\n  constructor(ctx) {\n    this.fs = ctx.fs;\n    this.flushToDisk = ctx.flushToDisk;\n    this.serverDistDir = ctx.serverDistDir;\n    this.appDir = !!ctx._appDir;\n    this.pagesDir = !!ctx._pagesDir;\n    this.revalidatedTags = ctx.revalidatedTags;\n    this.experimental = ctx.experimental;\n    this.debug = !!process.env.NEXT_PRIVATE_DEBUG_CACHE;\n    if (ctx.maxMemoryCacheSize && !memoryCache) {\n      if (this.debug) {\n        console.log(\"using memory store for fetch cache\");\n      }\n      memoryCache = new (next_dist_compiled_lru_cache__WEBPACK_IMPORTED_MODULE_0___default())({\n        max: ctx.maxMemoryCacheSize,\n        length({\n          value\n        }) {\n          var _JSON_stringify;\n          if (!value) {\n            return 25;\n          } else if (value.kind === \"REDIRECT\") {\n            return JSON.stringify(value.props).length;\n          } else if (value.kind === \"IMAGE\") {\n            throw new Error(\"invariant image should not be incremental-cache\");\n          } else if (value.kind === \"FETCH\") {\n            return JSON.stringify(value.data || \"\").length;\n          } else if (value.kind === \"ROUTE\") {\n            return value.body.length;\n          }\n          // rough estimate of size of cache value\n          return value.html.length + (((_JSON_stringify = JSON.stringify(value.pageData)) == null ? void 0 : _JSON_stringify.length) || 0);\n        }\n      });\n    } else if (this.debug) {\n      console.log(\"not using memory store for fetch cache\");\n    }\n    if (this.serverDistDir && this.fs) {\n      this.tagsManifestPath = _shared_lib_isomorphic_path__WEBPACK_IMPORTED_MODULE_1___default().join(this.serverDistDir, \"..\", \"cache\", \"fetch-cache\", \"tags-manifest.json\");\n      this.loadTagsManifest();\n    }\n  }\n  resetRequestCache() {}\n  loadTagsManifest() {\n    if (!this.tagsManifestPath || !this.fs || tagsManifest) return;\n    try {\n      tagsManifest = JSON.parse(this.fs.readFileSync(this.tagsManifestPath, \"utf8\"));\n    } catch (err) {\n      tagsManifest = {\n        version: 1,\n        items: {}\n      };\n    }\n    if (this.debug) console.log(\"loadTagsManifest\", tagsManifest);\n  }\n  async revalidateTag(tag) {\n    if (this.debug) {\n      console.log(\"revalidateTag\", tag);\n    }\n    // we need to ensure the tagsManifest is refreshed\n    // since separate workers can be updating it at the same\n    // time and we can't flush out of sync data\n    this.loadTagsManifest();\n    if (!tagsManifest || !this.tagsManifestPath) {\n      return;\n    }\n    const data = tagsManifest.items[tag] || {};\n    data.revalidatedAt = Date.now();\n    tagsManifest.items[tag] = data;\n    try {\n      await this.fs.mkdir(_shared_lib_isomorphic_path__WEBPACK_IMPORTED_MODULE_1___default().dirname(this.tagsManifestPath));\n      await this.fs.writeFile(this.tagsManifestPath, JSON.stringify(tagsManifest || {}));\n      if (this.debug) {\n        console.log(\"Updated tags manifest\", tagsManifest);\n      }\n    } catch (err) {\n      console.warn(\"Failed to update tags manifest.\", err);\n    }\n  }\n  async get(...args) {\n    var _data_value, _data_value1;\n    const [key, ctx = {}] = args;\n    const {\n      tags,\n      softTags,\n      kindHint\n    } = ctx;\n    let data = memoryCache == null ? void 0 : memoryCache.get(key);\n    if (this.debug) {\n      console.log(\"get\", key, tags, kindHint, !!data);\n    }\n    // let's check the disk for seed data\n    if (!data && \"edge\" !== \"edge\") { var _data_value3, _data_value2; }\n    if ((data == null ? void 0 : (_data_value = data.value) == null ? void 0 : _data_value.kind) === \"PAGE\") {\n      var _data_value_headers;\n      let cacheTags;\n      const tagsHeader = (_data_value_headers = data.value.headers) == null ? void 0 : _data_value_headers[_lib_constants__WEBPACK_IMPORTED_MODULE_2__.NEXT_CACHE_TAGS_HEADER];\n      if (typeof tagsHeader === \"string\") {\n        cacheTags = tagsHeader.split(\",\");\n      }\n      if (cacheTags == null ? void 0 : cacheTags.length) {\n        this.loadTagsManifest();\n        const isStale = cacheTags.some(tag => {\n          var _tagsManifest_items_tag;\n          return (tagsManifest == null ? void 0 : (_tagsManifest_items_tag = tagsManifest.items[tag]) == null ? void 0 : _tagsManifest_items_tag.revalidatedAt) && (tagsManifest == null ? void 0 : tagsManifest.items[tag].revalidatedAt) >= ((data == null ? void 0 : data.lastModified) || Date.now());\n        });\n        // we trigger a blocking validation if an ISR page\n        // had a tag revalidated, if we want to be a background\n        // revalidation instead we return data.lastModified = -1\n        if (isStale) {\n          data = undefined;\n        }\n      }\n    }\n    if (data && (data == null ? void 0 : (_data_value1 = data.value) == null ? void 0 : _data_value1.kind) === \"FETCH\") {\n      this.loadTagsManifest();\n      const combinedTags = [...(tags || []), ...(softTags || [])];\n      const wasRevalidated = combinedTags.some(tag => {\n        var _tagsManifest_items_tag;\n        if (this.revalidatedTags.includes(tag)) {\n          return true;\n        }\n        return (tagsManifest == null ? void 0 : (_tagsManifest_items_tag = tagsManifest.items[tag]) == null ? void 0 : _tagsManifest_items_tag.revalidatedAt) && (tagsManifest == null ? void 0 : tagsManifest.items[tag].revalidatedAt) >= ((data == null ? void 0 : data.lastModified) || Date.now());\n      });\n      // When revalidate tag is called we don't return\n      // stale data so it's updated right away\n      if (wasRevalidated) {\n        data = undefined;\n      }\n    }\n    return data ?? null;\n  }\n  async set(...args) {\n    const [key, data, ctx] = args;\n    memoryCache == null ? void 0 : memoryCache.set(key, {\n      value: data,\n      lastModified: Date.now()\n    });\n    if (this.debug) {\n      console.log(\"set\", key);\n    }\n    if (!this.flushToDisk) return;\n    if ((data == null ? void 0 : data.kind) === \"ROUTE\") {\n      const filePath = this.getFilePath(`${key}.body`, \"app\");\n      await this.fs.mkdir(_shared_lib_isomorphic_path__WEBPACK_IMPORTED_MODULE_1___default().dirname(filePath));\n      await this.fs.writeFile(filePath, data.body);\n      const meta = {\n        headers: data.headers,\n        status: data.status,\n        postponed: undefined\n      };\n      await this.fs.writeFile(filePath.replace(/\\.body$/, _lib_constants__WEBPACK_IMPORTED_MODULE_2__.NEXT_META_SUFFIX), JSON.stringify(meta, null, 2));\n      return;\n    }\n    if ((data == null ? void 0 : data.kind) === \"PAGE\") {\n      const isAppPath = typeof data.pageData === \"string\";\n      const htmlPath = this.getFilePath(`${key}.html`, isAppPath ? \"app\" : \"pages\");\n      await this.fs.mkdir(_shared_lib_isomorphic_path__WEBPACK_IMPORTED_MODULE_1___default().dirname(htmlPath));\n      await this.fs.writeFile(htmlPath, data.html);\n      await this.fs.writeFile(this.getFilePath(`${key}${isAppPath ? this.experimental.ppr ? _lib_constants__WEBPACK_IMPORTED_MODULE_2__.RSC_PREFETCH_SUFFIX : _lib_constants__WEBPACK_IMPORTED_MODULE_2__.RSC_SUFFIX : _lib_constants__WEBPACK_IMPORTED_MODULE_2__.NEXT_DATA_SUFFIX}`, isAppPath ? \"app\" : \"pages\"), isAppPath ? data.pageData : JSON.stringify(data.pageData));\n      if (data.headers || data.status) {\n        const meta = {\n          headers: data.headers,\n          status: data.status,\n          postponed: data.postponed\n        };\n        await this.fs.writeFile(htmlPath.replace(/\\.html$/, _lib_constants__WEBPACK_IMPORTED_MODULE_2__.NEXT_META_SUFFIX), JSON.stringify(meta));\n      }\n    } else if ((data == null ? void 0 : data.kind) === \"FETCH\") {\n      const filePath = this.getFilePath(key, \"fetch\");\n      await this.fs.mkdir(_shared_lib_isomorphic_path__WEBPACK_IMPORTED_MODULE_1___default().dirname(filePath));\n      await this.fs.writeFile(filePath, JSON.stringify({\n        ...data,\n        tags: ctx.tags\n      }));\n    }\n  }\n  detectFileKind(pathname) {\n    if (!this.appDir && !this.pagesDir) {\n      throw new Error(\"Invariant: Can't determine file path kind, no page directory enabled\");\n    }\n    // If app directory isn't enabled, then assume it's pages and avoid the fs\n    // hit.\n    if (!this.appDir && this.pagesDir) {\n      return \"pages\";\n    } else if (this.appDir && !this.pagesDir) {\n      return \"app\";\n    }\n    // If both are enabled, we need to test each in order, starting with\n    // `pages`.\n    let filePath = this.getFilePath(pathname, \"pages\");\n    if (this.fs.existsSync(filePath)) {\n      return \"pages\";\n    }\n    filePath = this.getFilePath(pathname, \"app\");\n    if (this.fs.existsSync(filePath)) {\n      return \"app\";\n    }\n    throw new Error(`Invariant: Unable to determine file path kind for ${pathname}`);\n  }\n  getFilePath(pathname, kind) {\n    switch (kind) {\n      case \"fetch\":\n        // we store in .next/cache/fetch-cache so it can be persisted\n        // across deploys\n        return _shared_lib_isomorphic_path__WEBPACK_IMPORTED_MODULE_1___default().join(this.serverDistDir, \"..\", \"cache\", \"fetch-cache\", pathname);\n      case \"pages\":\n        return _shared_lib_isomorphic_path__WEBPACK_IMPORTED_MODULE_1___default().join(this.serverDistDir, \"pages\", pathname);\n      case \"app\":\n        return _shared_lib_isomorphic_path__WEBPACK_IMPORTED_MODULE_1___default().join(this.serverDistDir, \"app\", pathname);\n      default:\n        throw new Error(\"Invariant: Can't determine file path kind\");\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/lib/incremental-cache/file-system-cache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/lib/incremental-cache/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/lib/incremental-cache/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheHandler: () => (/* binding */ CacheHandler),\n/* harmony export */   IncrementalCache: () => (/* binding */ IncrementalCache)\n/* harmony export */ });\n/* harmony import */ var _fetch_cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fetch-cache */ \"(rsc)/./node_modules/next/dist/esm/server/lib/incremental-cache/fetch-cache.js\");\n/* harmony import */ var _file_system_cache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./file-system-cache */ \"(rsc)/./node_modules/next/dist/esm/server/lib/incremental-cache/file-system-cache.js\");\n/* harmony import */ var _shared_lib_isomorphic_path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../shared/lib/isomorphic/path */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/isomorphic/path.js\");\n/* harmony import */ var _shared_lib_isomorphic_path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_shared_lib_isomorphic_path__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _shared_lib_page_path_normalize_page_path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../shared/lib/page-path/normalize-page-path */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/page-path/normalize-page-path.js\");\n/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../lib/constants */ \"(rsc)/./node_modules/next/dist/esm/lib/constants.js\");\n\n\n\n\n\nfunction toRoute(pathname) {\n  return pathname.replace(/\\/$/, \"\").replace(/\\/index$/, \"\") || \"/\";\n}\nclass CacheHandler {\n  // eslint-disable-next-line\n  constructor(_ctx) {}\n  async get(..._args) {\n    return {};\n  }\n  async set(..._args) {}\n  async revalidateTag(_tag) {}\n  resetRequestCache() {}\n}\nclass IncrementalCache {\n  constructor({\n    fs,\n    dev,\n    appDir,\n    pagesDir,\n    flushToDisk,\n    fetchCache,\n    minimalMode,\n    serverDistDir,\n    requestHeaders,\n    requestProtocol,\n    maxMemoryCacheSize,\n    getPrerenderManifest,\n    fetchCacheKeyPrefix,\n    CurCacheHandler,\n    allowedRevalidateHeaderKeys,\n    experimental\n  }) {\n    var _this_prerenderManifest_preview, _this_prerenderManifest, _this_prerenderManifest_preview1, _this_prerenderManifest1;\n    this.locks = new Map();\n    this.unlocks = new Map();\n    const debug = !!process.env.NEXT_PRIVATE_DEBUG_CACHE;\n    this.hasCustomCacheHandler = Boolean(CurCacheHandler);\n    if (!CurCacheHandler) {\n      if (fs && serverDistDir) {\n        if (debug) {\n          console.log(\"using filesystem cache handler\");\n        }\n        CurCacheHandler = _file_system_cache__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n      }\n      if (_fetch_cache__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isAvailable({\n        _requestHeaders: requestHeaders\n      }) && minimalMode && fetchCache) {\n        if (debug) {\n          console.log(\"using fetch cache handler\");\n        }\n        CurCacheHandler = _fetch_cache__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n      }\n    } else if (debug) {\n      console.log(\"using custom cache handler\", CurCacheHandler.name);\n    }\n    if (process.env.__NEXT_TEST_MAX_ISR_CACHE) {\n      // Allow cache size to be overridden for testing purposes\n      maxMemoryCacheSize = parseInt(process.env.__NEXT_TEST_MAX_ISR_CACHE, 10);\n    }\n    this.dev = dev;\n    // this is a hack to avoid Webpack knowing this is equal to this.minimalMode\n    // because we replace this.minimalMode to true in production bundles.\n    const minimalModeKey = \"minimalMode\";\n    this[minimalModeKey] = minimalMode;\n    this.requestHeaders = requestHeaders;\n    this.requestProtocol = requestProtocol;\n    this.allowedRevalidateHeaderKeys = allowedRevalidateHeaderKeys;\n    this.prerenderManifest = getPrerenderManifest();\n    this.fetchCacheKeyPrefix = fetchCacheKeyPrefix;\n    let revalidatedTags = [];\n    if (requestHeaders[_lib_constants__WEBPACK_IMPORTED_MODULE_4__.PRERENDER_REVALIDATE_HEADER] === ((_this_prerenderManifest = this.prerenderManifest) == null ? void 0 : (_this_prerenderManifest_preview = _this_prerenderManifest.preview) == null ? void 0 : _this_prerenderManifest_preview.previewModeId)) {\n      this.isOnDemandRevalidate = true;\n    }\n    if (minimalMode && typeof requestHeaders[_lib_constants__WEBPACK_IMPORTED_MODULE_4__.NEXT_CACHE_REVALIDATED_TAGS_HEADER] === \"string\" && requestHeaders[_lib_constants__WEBPACK_IMPORTED_MODULE_4__.NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER] === ((_this_prerenderManifest1 = this.prerenderManifest) == null ? void 0 : (_this_prerenderManifest_preview1 = _this_prerenderManifest1.preview) == null ? void 0 : _this_prerenderManifest_preview1.previewModeId)) {\n      revalidatedTags = requestHeaders[_lib_constants__WEBPACK_IMPORTED_MODULE_4__.NEXT_CACHE_REVALIDATED_TAGS_HEADER].split(\",\");\n    }\n    if (CurCacheHandler) {\n      this.cacheHandler = new CurCacheHandler({\n        dev,\n        fs,\n        flushToDisk,\n        serverDistDir,\n        revalidatedTags,\n        maxMemoryCacheSize,\n        _pagesDir: !!pagesDir,\n        _appDir: !!appDir,\n        _requestHeaders: requestHeaders,\n        fetchCacheKeyPrefix,\n        experimental\n      });\n    }\n  }\n  calculateRevalidate(pathname, fromTime, dev) {\n    // in development we don't have a prerender-manifest\n    // and default to always revalidating to allow easier debugging\n    if (dev) return new Date().getTime() - 1000;\n    // if an entry isn't present in routes we fallback to a default\n    // of revalidating after 1 second\n    const {\n      initialRevalidateSeconds\n    } = this.prerenderManifest.routes[toRoute(pathname)] || {\n      initialRevalidateSeconds: 1\n    };\n    const revalidateAfter = typeof initialRevalidateSeconds === \"number\" ? initialRevalidateSeconds * 1000 + fromTime : initialRevalidateSeconds;\n    return revalidateAfter;\n  }\n  _getPathname(pathname, fetchCache) {\n    return fetchCache ? pathname : (0,_shared_lib_page_path_normalize_page_path__WEBPACK_IMPORTED_MODULE_3__.normalizePagePath)(pathname);\n  }\n  resetRequestCache() {\n    var _this_cacheHandler_resetRequestCache, _this_cacheHandler;\n    (_this_cacheHandler = this.cacheHandler) == null ? void 0 : (_this_cacheHandler_resetRequestCache = _this_cacheHandler.resetRequestCache) == null ? void 0 : _this_cacheHandler_resetRequestCache.call(_this_cacheHandler);\n  }\n  async unlock(cacheKey) {\n    const unlock = this.unlocks.get(cacheKey);\n    if (unlock) {\n      unlock();\n      this.locks.delete(cacheKey);\n      this.unlocks.delete(cacheKey);\n    }\n  }\n  async lock(cacheKey) {\n    if (process.env.__NEXT_INCREMENTAL_CACHE_IPC_PORT && process.env.__NEXT_INCREMENTAL_CACHE_IPC_KEY && \"edge\" !== \"edge\") {}\n    let unlockNext = () => Promise.resolve();\n    const existingLock = this.locks.get(cacheKey);\n    if (existingLock) {\n      await existingLock;\n    } else {\n      const newLock = new Promise(resolve => {\n        unlockNext = async () => {\n          resolve();\n        };\n      });\n      this.locks.set(cacheKey, newLock);\n      this.unlocks.set(cacheKey, unlockNext);\n    }\n    return unlockNext;\n  }\n  async revalidateTag(tag) {\n    var _this_cacheHandler_revalidateTag, _this_cacheHandler;\n    if (process.env.__NEXT_INCREMENTAL_CACHE_IPC_PORT && process.env.__NEXT_INCREMENTAL_CACHE_IPC_KEY && \"edge\" !== \"edge\") {}\n    return (_this_cacheHandler = this.cacheHandler) == null ? void 0 : (_this_cacheHandler_revalidateTag = _this_cacheHandler.revalidateTag) == null ? void 0 : _this_cacheHandler_revalidateTag.call(_this_cacheHandler, tag);\n  }\n  // x-ref: https://github.com/facebook/react/blob/2655c9354d8e1c54ba888444220f63e836925caa/packages/react/src/ReactFetch.js#L23\n  async fetchCacheKey(url, init = {}) {\n    // this should be bumped anytime a fix is made to cache entries\n    // that should bust the cache\n    const MAIN_KEY_PREFIX = \"v3\";\n    const bodyChunks = [];\n    const encoder = new TextEncoder();\n    const decoder = new TextDecoder();\n    if (init.body) {\n      // handle ReadableStream body\n      if (typeof init.body.getReader === \"function\") {\n        const readableBody = init.body;\n        const chunks = [];\n        try {\n          await readableBody.pipeTo(new WritableStream({\n            write(chunk) {\n              if (typeof chunk === \"string\") {\n                chunks.push(encoder.encode(chunk));\n                bodyChunks.push(chunk);\n              } else {\n                chunks.push(chunk);\n                bodyChunks.push(decoder.decode(chunk, {\n                  stream: true\n                }));\n              }\n            }\n          }));\n          // Flush the decoder.\n          bodyChunks.push(decoder.decode());\n          // Create a new buffer with all the chunks.\n          const length = chunks.reduce((total, arr) => total + arr.length, 0);\n          const arrayBuffer = new Uint8Array(length);\n          // Push each of the chunks into the new array buffer.\n          let offset = 0;\n          for (const chunk of chunks) {\n            arrayBuffer.set(chunk, offset);\n            offset += chunk.length;\n          }\n          init._ogBody = arrayBuffer;\n        } catch (err) {\n          console.error(\"Problem reading body\", err);\n        }\n      } else if (typeof init.body.keys === \"function\") {\n        const formData = init.body;\n        init._ogBody = init.body;\n        for (const key of new Set([...formData.keys()])) {\n          const values = formData.getAll(key);\n          bodyChunks.push(`${key}=${(await Promise.all(values.map(async val => {\n            if (typeof val === \"string\") {\n              return val;\n            } else {\n              return await val.text();\n            }\n          }))).join(\",\")}`);\n        }\n        // handle blob body\n      } else if (typeof init.body.arrayBuffer === \"function\") {\n        const blob = init.body;\n        const arrayBuffer = await blob.arrayBuffer();\n        bodyChunks.push(await blob.text());\n        init._ogBody = new Blob([arrayBuffer], {\n          type: blob.type\n        });\n      } else if (typeof init.body === \"string\") {\n        bodyChunks.push(init.body);\n        init._ogBody = init.body;\n      }\n    }\n    const cacheString = JSON.stringify([MAIN_KEY_PREFIX, this.fetchCacheKeyPrefix || \"\", url, init.method, typeof (init.headers || {}).keys === \"function\" ? Object.fromEntries(init.headers) : init.headers, init.mode, init.redirect, init.credentials, init.referrer, init.referrerPolicy, init.integrity, init.cache, bodyChunks]);\n    if (true) {\n      function bufferToHex(buffer) {\n        return Array.prototype.map.call(new Uint8Array(buffer), b => b.toString(16).padStart(2, \"0\")).join(\"\");\n      }\n      const buffer = encoder.encode(cacheString);\n      return bufferToHex(await crypto.subtle.digest(\"SHA-256\", buffer));\n    } else {}\n  }\n  // get data from cache if available\n  async get(cacheKey, ctx = {}) {\n    var _this_cacheHandler, _cacheData_value, _this_prerenderManifest_routes_toRoute;\n    if (process.env.__NEXT_INCREMENTAL_CACHE_IPC_PORT && process.env.__NEXT_INCREMENTAL_CACHE_IPC_KEY && \"edge\" !== \"edge\") {}\n    // we don't leverage the prerender cache in dev mode\n    // so that getStaticProps is always called for easier debugging\n    if (this.dev && (ctx.kindHint !== \"fetch\" || this.requestHeaders[\"cache-control\"] === \"no-cache\")) {\n      return null;\n    }\n    cacheKey = this._getPathname(cacheKey, ctx.kindHint === \"fetch\");\n    let entry = null;\n    let revalidate = ctx.revalidate;\n    const cacheData = await ((_this_cacheHandler = this.cacheHandler) == null ? void 0 : _this_cacheHandler.get(cacheKey, ctx));\n    if ((cacheData == null ? void 0 : (_cacheData_value = cacheData.value) == null ? void 0 : _cacheData_value.kind) === \"FETCH\") {\n      const combinedTags = [...(ctx.tags || []), ...(ctx.softTags || [])];\n      // if a tag was revalidated we don't return stale data\n      if (combinedTags.some(tag => {\n        var _this_revalidatedTags;\n        return (_this_revalidatedTags = this.revalidatedTags) == null ? void 0 : _this_revalidatedTags.includes(tag);\n      })) {\n        return null;\n      }\n      revalidate = revalidate || cacheData.value.revalidate;\n      const age = (Date.now() - (cacheData.lastModified || 0)) / 1000;\n      const isStale = age > revalidate;\n      const data = cacheData.value.data;\n      return {\n        isStale: isStale,\n        value: {\n          kind: \"FETCH\",\n          data,\n          revalidate: revalidate\n        },\n        revalidateAfter: Date.now() + revalidate * 1000\n      };\n    }\n    const curRevalidate = (_this_prerenderManifest_routes_toRoute = this.prerenderManifest.routes[toRoute(cacheKey)]) == null ? void 0 : _this_prerenderManifest_routes_toRoute.initialRevalidateSeconds;\n    let isStale;\n    let revalidateAfter;\n    if ((cacheData == null ? void 0 : cacheData.lastModified) === -1) {\n      isStale = -1;\n      revalidateAfter = -1 * _lib_constants__WEBPACK_IMPORTED_MODULE_4__.CACHE_ONE_YEAR;\n    } else {\n      revalidateAfter = this.calculateRevalidate(cacheKey, (cacheData == null ? void 0 : cacheData.lastModified) || Date.now(), this.dev && ctx.kindHint !== \"fetch\");\n      isStale = revalidateAfter !== false && revalidateAfter < Date.now() ? true : undefined;\n    }\n    if (cacheData) {\n      entry = {\n        isStale,\n        curRevalidate,\n        revalidateAfter,\n        value: cacheData.value\n      };\n    }\n    if (!cacheData && this.prerenderManifest.notFoundRoutes.includes(cacheKey)) {\n      // for the first hit after starting the server the cache\n      // may not have a way to save notFound: true so if\n      // the prerender-manifest marks this as notFound then we\n      // return that entry and trigger a cache set to give it a\n      // chance to update in-memory entries\n      entry = {\n        isStale,\n        value: null,\n        curRevalidate,\n        revalidateAfter\n      };\n      this.set(cacheKey, entry.value, ctx);\n    }\n    return entry;\n  }\n  // populate the incremental cache with new data\n  async set(pathname, data, ctx) {\n    if (process.env.__NEXT_INCREMENTAL_CACHE_IPC_PORT && process.env.__NEXT_INCREMENTAL_CACHE_IPC_KEY && \"edge\" !== \"edge\") {}\n    if (this.dev && !ctx.fetchCache) return;\n    // FetchCache has upper limit of 2MB per-entry currently\n    if (ctx.fetchCache &&\n    // we don't show this error/warning when a custom cache handler is being used\n    // as it might not have this limit\n    !this.hasCustomCacheHandler && JSON.stringify(data).length > 2 * 1024 * 1024) {\n      if (this.dev) {\n        throw new Error(`fetch for over 2MB of data can not be cached`);\n      }\n      return;\n    }\n    pathname = this._getPathname(pathname, ctx.fetchCache);\n    try {\n      var _this_cacheHandler;\n      // we use the prerender manifest memory instance\n      // to store revalidate timings for calculating\n      // revalidateAfter values so we update this on set\n      if (typeof ctx.revalidate !== \"undefined\" && !ctx.fetchCache) {\n        this.prerenderManifest.routes[pathname] = {\n          experimentalPPR: undefined,\n          dataRoute: _shared_lib_isomorphic_path__WEBPACK_IMPORTED_MODULE_2___default().posix.join(\"/_next/data\", `${(0,_shared_lib_page_path_normalize_page_path__WEBPACK_IMPORTED_MODULE_3__.normalizePagePath)(pathname)}.json`),\n          srcRoute: null,\n          initialRevalidateSeconds: ctx.revalidate,\n          // Pages routes do not have a prefetch data route.\n          prefetchDataRoute: undefined\n        };\n      }\n      await ((_this_cacheHandler = this.cacheHandler) == null ? void 0 : _this_cacheHandler.set(pathname, data, ctx));\n    } catch (error) {\n      console.warn(\"Failed to update prerender cache for\", pathname, error);\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/lib/incremental-cache/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/lib/patch-fetch.js":
/*!**************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/lib/patch-fetch.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addImplicitTags: () => (/* binding */ addImplicitTags),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   validateRevalidate: () => (/* binding */ validateRevalidate),\n/* harmony export */   validateTags: () => (/* binding */ validateTags)\n/* harmony export */ });\n/* harmony import */ var _trace_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./trace/constants */ \"(rsc)/./node_modules/next/dist/esm/server/lib/trace/constants.js\");\n/* harmony import */ var _trace_tracer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./trace/tracer */ \"(rsc)/./node_modules/next/dist/esm/server/lib/trace/tracer.js\");\n/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/constants */ \"(rsc)/./node_modules/next/dist/esm/lib/constants.js\");\n/* harmony import */ var _build_output_log__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../build/output/log */ \"(rsc)/./node_modules/next/dist/esm/build/output/log.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"buffer\")[\"Buffer\"];\n\n\n\n\nconst isEdgeRuntime = \"edge\" === \"edge\";\nfunction validateRevalidate(revalidateVal, pathname) {\n  try {\n    let normalizedRevalidate = undefined;\n    if (revalidateVal === false) {\n      normalizedRevalidate = revalidateVal;\n    } else if (typeof revalidateVal === \"number\" && !isNaN(revalidateVal) && revalidateVal > -1) {\n      normalizedRevalidate = revalidateVal;\n    } else if (typeof revalidateVal !== \"undefined\") {\n      throw new Error(`Invalid revalidate value \"${revalidateVal}\" on \"${pathname}\", must be a non-negative number or \"false\"`);\n    }\n    return normalizedRevalidate;\n  } catch (err) {\n    // handle client component error from attempting to check revalidate value\n    if (err instanceof Error && err.message.includes(\"Invalid revalidate\")) {\n      throw err;\n    }\n    return undefined;\n  }\n}\nfunction validateTags(tags, description) {\n  const validTags = [];\n  const invalidTags = [];\n  for (const tag of tags) {\n    if (typeof tag !== \"string\") {\n      invalidTags.push({\n        tag,\n        reason: \"invalid type, must be a string\"\n      });\n    } else if (tag.length > _lib_constants__WEBPACK_IMPORTED_MODULE_2__.NEXT_CACHE_TAG_MAX_LENGTH) {\n      invalidTags.push({\n        tag,\n        reason: `exceeded max length of ${_lib_constants__WEBPACK_IMPORTED_MODULE_2__.NEXT_CACHE_TAG_MAX_LENGTH}`\n      });\n    } else {\n      validTags.push(tag);\n    }\n  }\n  if (invalidTags.length > 0) {\n    console.warn(`Warning: invalid tags passed to ${description}: `);\n    for (const {\n      tag,\n      reason\n    } of invalidTags) {\n      console.log(`tag: \"${tag}\" ${reason}`);\n    }\n  }\n  return validTags;\n}\nconst getDerivedTags = pathname => {\n  const derivedTags = [`/layout`];\n  // we automatically add the current path segments as tags\n  // for revalidatePath handling\n  if (pathname.startsWith(\"/\")) {\n    const pathnameParts = pathname.split(\"/\");\n    for (let i = 1; i < pathnameParts.length + 1; i++) {\n      let curPathname = pathnameParts.slice(0, i).join(\"/\");\n      if (curPathname) {\n        // all derived tags other than the page are layout tags\n        if (!curPathname.endsWith(\"/page\") && !curPathname.endsWith(\"/route\")) {\n          curPathname = `${curPathname}${!curPathname.endsWith(\"/\") ? \"/\" : \"\"}layout`;\n        }\n        derivedTags.push(curPathname);\n      }\n    }\n  }\n  return derivedTags;\n};\nfunction addImplicitTags(staticGenerationStore) {\n  const newTags = [];\n  const {\n    pagePath,\n    urlPathname\n  } = staticGenerationStore;\n  if (!Array.isArray(staticGenerationStore.tags)) {\n    staticGenerationStore.tags = [];\n  }\n  if (pagePath) {\n    const derivedTags = getDerivedTags(pagePath);\n    for (let tag of derivedTags) {\n      var _staticGenerationStore_tags;\n      tag = `${_lib_constants__WEBPACK_IMPORTED_MODULE_2__.NEXT_CACHE_IMPLICIT_TAG_ID}${tag}`;\n      if (!((_staticGenerationStore_tags = staticGenerationStore.tags) == null ? void 0 : _staticGenerationStore_tags.includes(tag))) {\n        staticGenerationStore.tags.push(tag);\n      }\n      newTags.push(tag);\n    }\n  }\n  if (urlPathname) {\n    var _staticGenerationStore_tags1;\n    const parsedPathname = new URL(urlPathname, \"http://n\").pathname;\n    const tag = `${_lib_constants__WEBPACK_IMPORTED_MODULE_2__.NEXT_CACHE_IMPLICIT_TAG_ID}${parsedPathname}`;\n    if (!((_staticGenerationStore_tags1 = staticGenerationStore.tags) == null ? void 0 : _staticGenerationStore_tags1.includes(tag))) {\n      staticGenerationStore.tags.push(tag);\n    }\n    newTags.push(tag);\n  }\n  return newTags;\n}\nfunction trackFetchMetric(staticGenerationStore, ctx) {\n  if (!staticGenerationStore) return;\n  if (!staticGenerationStore.fetchMetrics) {\n    staticGenerationStore.fetchMetrics = [];\n  }\n  const dedupeFields = [\"url\", \"status\", \"method\"];\n  // don't add metric if one already exists for the fetch\n  if (staticGenerationStore.fetchMetrics.some(metric => {\n    return dedupeFields.every(field => metric[field] === ctx[field]);\n  })) {\n    return;\n  }\n  staticGenerationStore.fetchMetrics.push({\n    url: ctx.url,\n    cacheStatus: ctx.cacheStatus,\n    cacheReason: ctx.cacheReason,\n    status: ctx.status,\n    method: ctx.method,\n    start: ctx.start,\n    end: Date.now(),\n    idx: staticGenerationStore.nextFetchId || 0\n  });\n}\n// we patch fetch to collect cache information used for\n// determining if a page is static or not\nfunction patchFetch({\n  serverHooks,\n  staticGenerationAsyncStorage\n}) {\n  if (!globalThis._nextOriginalFetch) {\n    globalThis._nextOriginalFetch = globalThis.fetch;\n  }\n  if (globalThis.fetch.__nextPatched) return;\n  const {\n    DynamicServerError\n  } = serverHooks;\n  const originFetch = globalThis._nextOriginalFetch;\n  globalThis.fetch = async (input, init) => {\n    var _init_method, _this;\n    let url;\n    try {\n      url = new URL(input instanceof Request ? input.url : input);\n      url.username = \"\";\n      url.password = \"\";\n    } catch {\n      // Error caused by malformed URL should be handled by native fetch\n      url = undefined;\n    }\n    const fetchUrl = (url == null ? void 0 : url.href) ?? \"\";\n    const fetchStart = Date.now();\n    const method = (init == null ? void 0 : (_init_method = init.method) == null ? void 0 : _init_method.toUpperCase()) || \"GET\";\n    // Do create a new span trace for internal fetches in the\n    // non-verbose mode.\n    const isInternal = ((_this = init == null ? void 0 : init.next) == null ? void 0 : _this.internal) === true;\n    const hideSpan = process.env.NEXT_OTEL_FETCH_DISABLED === \"1\";\n    return await (0,_trace_tracer__WEBPACK_IMPORTED_MODULE_1__.getTracer)().trace(isInternal ? _trace_constants__WEBPACK_IMPORTED_MODULE_0__.NextNodeServerSpan.internalFetch : _trace_constants__WEBPACK_IMPORTED_MODULE_0__.AppRenderSpan.fetch, {\n      hideSpan,\n      kind: _trace_tracer__WEBPACK_IMPORTED_MODULE_1__.SpanKind.CLIENT,\n      spanName: [\"fetch\", method, fetchUrl].filter(Boolean).join(\" \"),\n      attributes: {\n        \"http.url\": fetchUrl,\n        \"http.method\": method,\n        \"net.peer.name\": url == null ? void 0 : url.hostname,\n        \"net.peer.port\": (url == null ? void 0 : url.port) || undefined\n      }\n    }, async () => {\n      var _getRequestMeta;\n      const staticGenerationStore = staticGenerationAsyncStorage.getStore() || (fetch.__nextGetStaticStore == null ? void 0 : fetch.__nextGetStaticStore.call(fetch));\n      const isRequestInput = input && typeof input === \"object\" && typeof input.method === \"string\";\n      const getRequestMeta = field => {\n        // If request input is present but init is not, retrieve from input first.\n        const value = init == null ? void 0 : init[field];\n        return value || (isRequestInput ? input[field] : null);\n      };\n      // If the staticGenerationStore is not available, we can't do any\n      // special treatment of fetch, therefore fallback to the original\n      // fetch implementation.\n      if (!staticGenerationStore || isInternal || staticGenerationStore.isDraftMode) {\n        return originFetch(input, init);\n      }\n      let revalidate = undefined;\n      const getNextField = field => {\n        var _init_next, _init_next1, _input_next;\n        return typeof (init == null ? void 0 : (_init_next = init.next) == null ? void 0 : _init_next[field]) !== \"undefined\" ? init == null ? void 0 : (_init_next1 = init.next) == null ? void 0 : _init_next1[field] : isRequestInput ? (_input_next = input.next) == null ? void 0 : _input_next[field] : undefined;\n      };\n      // RequestInit doesn't keep extra fields e.g. next so it's\n      // only available if init is used separate\n      let curRevalidate = getNextField(\"revalidate\");\n      const tags = validateTags(getNextField(\"tags\") || [], `fetch ${input.toString()}`);\n      if (Array.isArray(tags)) {\n        if (!staticGenerationStore.tags) {\n          staticGenerationStore.tags = [];\n        }\n        for (const tag of tags) {\n          if (!staticGenerationStore.tags.includes(tag)) {\n            staticGenerationStore.tags.push(tag);\n          }\n        }\n      }\n      const implicitTags = addImplicitTags(staticGenerationStore);\n      const isOnlyCache = staticGenerationStore.fetchCache === \"only-cache\";\n      const isForceCache = staticGenerationStore.fetchCache === \"force-cache\";\n      const isDefaultCache = staticGenerationStore.fetchCache === \"default-cache\";\n      const isDefaultNoStore = staticGenerationStore.fetchCache === \"default-no-store\";\n      const isOnlyNoStore = staticGenerationStore.fetchCache === \"only-no-store\";\n      const isForceNoStore = staticGenerationStore.fetchCache === \"force-no-store\";\n      const isUsingNoStore = !!staticGenerationStore.isUnstableNoStore;\n      let _cache = getRequestMeta(\"cache\");\n      let cacheReason = \"\";\n      if (typeof _cache === \"string\" && typeof curRevalidate !== \"undefined\") {\n        // when providing fetch with a Request input, it'll automatically set a cache value of 'default'\n        // we only want to warn if the user is explicitly setting a cache value\n        if (!(isRequestInput && _cache === \"default\")) {\n          _build_output_log__WEBPACK_IMPORTED_MODULE_3__.warn(`fetch for ${fetchUrl} on ${staticGenerationStore.urlPathname} specified \"cache: ${_cache}\" and \"revalidate: ${curRevalidate}\", only one should be specified.`);\n        }\n        _cache = undefined;\n      }\n      if (_cache === \"force-cache\") {\n        curRevalidate = false;\n      } else if (_cache === \"no-cache\" || _cache === \"no-store\" || isForceNoStore || isOnlyNoStore) {\n        curRevalidate = 0;\n      }\n      if (_cache === \"no-cache\" || _cache === \"no-store\") {\n        cacheReason = `cache: ${_cache}`;\n      }\n      revalidate = validateRevalidate(curRevalidate, staticGenerationStore.urlPathname);\n      const _headers = getRequestMeta(\"headers\");\n      const initHeaders = typeof (_headers == null ? void 0 : _headers.get) === \"function\" ? _headers : new Headers(_headers || {});\n      const hasUnCacheableHeader = initHeaders.get(\"authorization\") || initHeaders.get(\"cookie\");\n      const isUnCacheableMethod = ![\"get\", \"head\"].includes(((_getRequestMeta = getRequestMeta(\"method\")) == null ? void 0 : _getRequestMeta.toLowerCase()) || \"get\");\n      // if there are authorized headers or a POST method and\n      // dynamic data usage was present above the tree we bail\n      // e.g. if cookies() is used before an authed/POST fetch\n      const autoNoCache = (hasUnCacheableHeader || isUnCacheableMethod) && staticGenerationStore.revalidate === 0;\n      if (isForceNoStore) {\n        cacheReason = \"fetchCache = force-no-store\";\n      }\n      if (isOnlyNoStore) {\n        if (_cache === \"force-cache\" || typeof revalidate !== \"undefined\" && (revalidate === false || revalidate > 0)) {\n          throw new Error(`cache: 'force-cache' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-no-store'`);\n        }\n        cacheReason = \"fetchCache = only-no-store\";\n      }\n      if (isOnlyCache && _cache === \"no-store\") {\n        throw new Error(`cache: 'no-store' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-cache'`);\n      }\n      if (isForceCache && (typeof curRevalidate === \"undefined\" || curRevalidate === 0)) {\n        cacheReason = \"fetchCache = force-cache\";\n        revalidate = false;\n      }\n      if (typeof revalidate === \"undefined\") {\n        if (isDefaultCache) {\n          revalidate = false;\n          cacheReason = \"fetchCache = default-cache\";\n        } else if (autoNoCache) {\n          revalidate = 0;\n          cacheReason = \"auto no cache\";\n        } else if (isDefaultNoStore) {\n          revalidate = 0;\n          cacheReason = \"fetchCache = default-no-store\";\n        } else if (isUsingNoStore) {\n          revalidate = 0;\n          cacheReason = \"noStore call\";\n        } else {\n          cacheReason = \"auto cache\";\n          revalidate = typeof staticGenerationStore.revalidate === \"boolean\" || typeof staticGenerationStore.revalidate === \"undefined\" ? false : staticGenerationStore.revalidate;\n        }\n      } else if (!cacheReason) {\n        cacheReason = `revalidate: ${revalidate}`;\n      }\n      if (\n      // when force static is configured we don't bail from\n      // `revalidate: 0` values\n      !(staticGenerationStore.forceStatic && revalidate === 0) &&\n      // we don't consider autoNoCache to switch to dynamic during\n      // revalidate although if it occurs during build we do\n      !autoNoCache && (\n      // If the revalidate value isn't currently set or the value is less\n      // than the current revalidate value, we should update the revalidate\n      // value.\n      typeof staticGenerationStore.revalidate === \"undefined\" || typeof revalidate === \"number\" && (staticGenerationStore.revalidate === false || typeof staticGenerationStore.revalidate === \"number\" && revalidate < staticGenerationStore.revalidate))) {\n        // If we were setting the revalidate value to 0, we should try to\n        // postpone instead first.\n        if (revalidate === 0) {\n          staticGenerationStore.postpone == null ? void 0 : staticGenerationStore.postpone.call(staticGenerationStore, \"revalidate: 0\");\n        }\n        staticGenerationStore.revalidate = revalidate;\n      }\n      const isCacheableRevalidate = typeof revalidate === \"number\" && revalidate > 0 || revalidate === false;\n      let cacheKey;\n      if (staticGenerationStore.incrementalCache && isCacheableRevalidate) {\n        try {\n          cacheKey = await staticGenerationStore.incrementalCache.fetchCacheKey(fetchUrl, isRequestInput ? input : init);\n        } catch (err) {\n          console.error(`Failed to generate cache key for`, input);\n        }\n      }\n      const fetchIdx = staticGenerationStore.nextFetchId ?? 1;\n      staticGenerationStore.nextFetchId = fetchIdx + 1;\n      const normalizedRevalidate = typeof revalidate !== \"number\" ? _lib_constants__WEBPACK_IMPORTED_MODULE_2__.CACHE_ONE_YEAR : revalidate;\n      const doOriginalFetch = async (isStale, cacheReasonOverride) => {\n        const requestInputFields = [\"cache\", \"credentials\", \"headers\", \"integrity\", \"keepalive\", \"method\", \"mode\", \"redirect\", \"referrer\", \"referrerPolicy\", \"window\", \"duplex\",\n        // don't pass through signal when revalidating\n        ...(isStale ? [] : [\"signal\"])];\n        if (isRequestInput) {\n          const reqInput = input;\n          const reqOptions = {\n            body: reqInput._ogBody || reqInput.body\n          };\n          for (const field of requestInputFields) {\n            // @ts-expect-error custom fields\n            reqOptions[field] = reqInput[field];\n          }\n          input = new Request(reqInput.url, reqOptions);\n        } else if (init) {\n          const initialInit = init;\n          init = {\n            body: init._ogBody || init.body\n          };\n          for (const field of requestInputFields) {\n            // @ts-expect-error custom fields\n            init[field] = initialInit[field];\n          }\n        }\n        // add metadata to init without editing the original\n        const clonedInit = {\n          ...init,\n          next: {\n            ...(init == null ? void 0 : init.next),\n            fetchType: \"origin\",\n            fetchIdx\n          }\n        };\n        return originFetch(input, clonedInit).then(async res => {\n          if (!isStale) {\n            trackFetchMetric(staticGenerationStore, {\n              start: fetchStart,\n              url: fetchUrl,\n              cacheReason: cacheReasonOverride || cacheReason,\n              cacheStatus: revalidate === 0 || cacheReasonOverride ? \"skip\" : \"miss\",\n              status: res.status,\n              method: clonedInit.method || \"GET\"\n            });\n          }\n          if (res.status === 200 && staticGenerationStore.incrementalCache && cacheKey && isCacheableRevalidate) {\n            const bodyBuffer = Buffer.from(await res.arrayBuffer());\n            try {\n              await staticGenerationStore.incrementalCache.set(cacheKey, {\n                kind: \"FETCH\",\n                data: {\n                  headers: Object.fromEntries(res.headers.entries()),\n                  body: bodyBuffer.toString(\"base64\"),\n                  status: res.status,\n                  url: res.url\n                },\n                revalidate: normalizedRevalidate\n              }, {\n                fetchCache: true,\n                revalidate,\n                fetchUrl,\n                fetchIdx,\n                tags\n              });\n            } catch (err) {\n              console.warn(`Failed to set fetch cache`, input, err);\n            }\n            const response = new Response(bodyBuffer, {\n              headers: new Headers(res.headers),\n              status: res.status\n            });\n            Object.defineProperty(response, \"url\", {\n              value: res.url\n            });\n            return response;\n          }\n          return res;\n        });\n      };\n      let handleUnlock = () => Promise.resolve();\n      let cacheReasonOverride;\n      if (cacheKey && staticGenerationStore.incrementalCache) {\n        handleUnlock = await staticGenerationStore.incrementalCache.lock(cacheKey);\n        const entry = staticGenerationStore.isOnDemandRevalidate ? null : await staticGenerationStore.incrementalCache.get(cacheKey, {\n          kindHint: \"fetch\",\n          revalidate,\n          fetchUrl,\n          fetchIdx,\n          tags,\n          softTags: implicitTags\n        });\n        if (entry) {\n          await handleUnlock();\n        } else {\n          // in dev, incremental cache response will be null in case the browser adds `cache-control: no-cache` in the request headers\n          cacheReasonOverride = \"cache-control: no-cache (hard refresh)\";\n        }\n        if ((entry == null ? void 0 : entry.value) && entry.value.kind === \"FETCH\") {\n          // when stale and is revalidating we wait for fresh data\n          // so the revalidated entry has the updated data\n          if (!(staticGenerationStore.isRevalidate && entry.isStale)) {\n            if (entry.isStale) {\n              staticGenerationStore.pendingRevalidates ??= {};\n              if (!staticGenerationStore.pendingRevalidates[cacheKey]) {\n                staticGenerationStore.pendingRevalidates[cacheKey] = doOriginalFetch(true).catch(console.error);\n              }\n            }\n            const resData = entry.value.data;\n            trackFetchMetric(staticGenerationStore, {\n              start: fetchStart,\n              url: fetchUrl,\n              cacheReason,\n              cacheStatus: \"hit\",\n              status: resData.status || 200,\n              method: (init == null ? void 0 : init.method) || \"GET\"\n            });\n            const response = new Response(Buffer.from(resData.body, \"base64\"), {\n              headers: resData.headers,\n              status: resData.status\n            });\n            Object.defineProperty(response, \"url\", {\n              value: entry.value.data.url\n            });\n            return response;\n          }\n        }\n      }\n      if (staticGenerationStore.isStaticGeneration && init && typeof init === \"object\") {\n        const {\n          cache\n        } = init;\n        // Delete `cache` property as Cloudflare Workers will throw an error\n        if (isEdgeRuntime) delete init.cache;\n        if (!staticGenerationStore.forceStatic && cache === \"no-store\") {\n          const dynamicUsageReason = `no-store fetch ${input}${staticGenerationStore.urlPathname ? ` ${staticGenerationStore.urlPathname}` : \"\"}`;\n          // If enabled, we should bail out of static generation.\n          staticGenerationStore.postpone == null ? void 0 : staticGenerationStore.postpone.call(staticGenerationStore, dynamicUsageReason);\n          // PPR is not enabled, or React postpone is not available, we\n          // should set the revalidate to 0.\n          staticGenerationStore.revalidate = 0;\n          const err = new DynamicServerError(dynamicUsageReason);\n          staticGenerationStore.dynamicUsageErr = err;\n          staticGenerationStore.dynamicUsageDescription = dynamicUsageReason;\n        }\n        const hasNextConfig = (\"next\" in init);\n        const {\n          next = {}\n        } = init;\n        if (typeof next.revalidate === \"number\" && (typeof staticGenerationStore.revalidate === \"undefined\" || typeof staticGenerationStore.revalidate === \"number\" && next.revalidate < staticGenerationStore.revalidate)) {\n          if (!staticGenerationStore.forceDynamic && !staticGenerationStore.forceStatic && next.revalidate === 0) {\n            const dynamicUsageReason = `revalidate: 0 fetch ${input}${staticGenerationStore.urlPathname ? ` ${staticGenerationStore.urlPathname}` : \"\"}`;\n            // If enabled, we should bail out of static generation.\n            staticGenerationStore.postpone == null ? void 0 : staticGenerationStore.postpone.call(staticGenerationStore, dynamicUsageReason);\n            const err = new DynamicServerError(dynamicUsageReason);\n            staticGenerationStore.dynamicUsageErr = err;\n            staticGenerationStore.dynamicUsageDescription = dynamicUsageReason;\n          }\n          if (!staticGenerationStore.forceStatic || next.revalidate !== 0) {\n            staticGenerationStore.revalidate = next.revalidate;\n          }\n        }\n        if (hasNextConfig) delete init.next;\n      }\n      return doOriginalFetch(false, cacheReasonOverride).finally(handleUnlock);\n    });\n  };\n  globalThis.fetch.__nextGetStaticStore = () => {\n    return staticGenerationAsyncStorage;\n  };\n  globalThis.fetch.__nextPatched = true;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/lib/patch-fetch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/lib/server-action-request-meta.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/lib/server-action-request-meta.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getIsServerAction: () => (/* binding */ getIsServerAction),\n/* harmony export */   getServerActionRequestMetadata: () => (/* binding */ getServerActionRequestMetadata)\n/* harmony export */ });\n/* harmony import */ var _client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../client/components/app-router-headers */ \"(rsc)/./node_modules/next/dist/esm/client/components/app-router-headers.js\");\n\nfunction getServerActionRequestMetadata(req) {\n  let actionId;\n  let contentType;\n  if (req.headers instanceof Headers) {\n    actionId = req.headers.get(_client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_0__.ACTION.toLowerCase()) ?? null;\n    contentType = req.headers.get(\"content-type\");\n  } else {\n    actionId = req.headers[_client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_0__.ACTION.toLowerCase()] ?? null;\n    contentType = req.headers[\"content-type\"] ?? null;\n  }\n  const isURLEncodedAction = Boolean(req.method === \"POST\" && contentType === \"application/x-www-form-urlencoded\");\n  const isMultipartAction = Boolean(req.method === \"POST\" && (contentType == null ? void 0 : contentType.startsWith(\"multipart/form-data\")));\n  const isFetchAction = Boolean(actionId !== undefined && typeof actionId === \"string\" && req.method === \"POST\");\n  return {\n    actionId,\n    isURLEncodedAction,\n    isMultipartAction,\n    isFetchAction\n  };\n}\nfunction getIsServerAction(req) {\n  const {\n    isFetchAction,\n    isURLEncodedAction,\n    isMultipartAction\n  } = getServerActionRequestMetadata(req);\n  return Boolean(isFetchAction || isURLEncodedAction || isMultipartAction);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvbGliL3NlcnZlci1hY3Rpb24tcmVxdWVzdC1tZXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvRTtBQUM3RCxTQUFTQyw4QkFBOEJBLENBQUNDLEdBQUcsRUFBRTtFQUNoRCxJQUFJQyxRQUFRO0VBQ1osSUFBSUMsV0FBVztFQUNmLElBQUlGLEdBQUcsQ0FBQ0csT0FBTyxZQUFZQyxPQUFPLEVBQUU7SUFDaENILFFBQVEsR0FBR0QsR0FBRyxDQUFDRyxPQUFPLENBQUNFLEdBQUcsQ0FBQ1AseUVBQU0sQ0FBQ1EsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUk7SUFDeERKLFdBQVcsR0FBR0YsR0FBRyxDQUFDRyxPQUFPLENBQUNFLEdBQUcsQ0FBQyxjQUFjLENBQUM7RUFDakQsQ0FBQyxNQUFNO0lBQ0hKLFFBQVEsR0FBR0QsR0FBRyxDQUFDRyxPQUFPLENBQUNMLHlFQUFNLENBQUNRLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJO0lBQ3BESixXQUFXLEdBQUdGLEdBQUcsQ0FBQ0csT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLElBQUk7RUFDckQ7RUFDQSxNQUFNSSxrQkFBa0IsR0FBR0MsT0FBTyxDQUFDUixHQUFHLENBQUNTLE1BQU0sS0FBSyxNQUFNLElBQUlQLFdBQVcsS0FBSyxtQ0FBbUMsQ0FBQztFQUNoSCxNQUFNUSxpQkFBaUIsR0FBR0YsT0FBTyxDQUFDUixHQUFHLENBQUNTLE1BQU0sS0FBSyxNQUFNLEtBQUtQLFdBQVcsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUdBLFdBQVcsQ0FBQ1MsVUFBVSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztFQUMxSSxNQUFNQyxhQUFhLEdBQUdKLE9BQU8sQ0FBQ1AsUUFBUSxLQUFLWSxTQUFTLElBQUksT0FBT1osUUFBUSxLQUFLLFFBQVEsSUFBSUQsR0FBRyxDQUFDUyxNQUFNLEtBQUssTUFBTSxDQUFDO0VBQzlHLE9BQU87SUFDSFIsUUFBUTtJQUNSTSxrQkFBa0I7SUFDbEJHLGlCQUFpQjtJQUNqQkU7RUFDSixDQUFDO0FBQ0w7QUFDTyxTQUFTRSxpQkFBaUJBLENBQUNkLEdBQUcsRUFBRTtFQUNuQyxNQUFNO0lBQUVZLGFBQWE7SUFBRUwsa0JBQWtCO0lBQUVHO0VBQWtCLENBQUMsR0FBR1gsOEJBQThCLENBQUNDLEdBQUcsQ0FBQztFQUNwRyxPQUFPUSxPQUFPLENBQUNJLGFBQWEsSUFBSUwsa0JBQWtCLElBQUlHLGlCQUFpQixDQUFDO0FBQzVFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvZXNtL3NlcnZlci9saWIvc2VydmVyLWFjdGlvbi1yZXF1ZXN0LW1ldGEuanM/OTEwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBQ1RJT04gfSBmcm9tIFwiLi4vLi4vY2xpZW50L2NvbXBvbmVudHMvYXBwLXJvdXRlci1oZWFkZXJzXCI7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VydmVyQWN0aW9uUmVxdWVzdE1ldGFkYXRhKHJlcSkge1xuICAgIGxldCBhY3Rpb25JZDtcbiAgICBsZXQgY29udGVudFR5cGU7XG4gICAgaWYgKHJlcS5oZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuICAgICAgICBhY3Rpb25JZCA9IHJlcS5oZWFkZXJzLmdldChBQ1RJT04udG9Mb3dlckNhc2UoKSkgPz8gbnVsbDtcbiAgICAgICAgY29udGVudFR5cGUgPSByZXEuaGVhZGVycy5nZXQoXCJjb250ZW50LXR5cGVcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aW9uSWQgPSByZXEuaGVhZGVyc1tBQ1RJT04udG9Mb3dlckNhc2UoKV0gPz8gbnVsbDtcbiAgICAgICAgY29udGVudFR5cGUgPSByZXEuaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSA/PyBudWxsO1xuICAgIH1cbiAgICBjb25zdCBpc1VSTEVuY29kZWRBY3Rpb24gPSBCb29sZWFuKHJlcS5tZXRob2QgPT09IFwiUE9TVFwiICYmIGNvbnRlbnRUeXBlID09PSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKTtcbiAgICBjb25zdCBpc011bHRpcGFydEFjdGlvbiA9IEJvb2xlYW4ocmVxLm1ldGhvZCA9PT0gXCJQT1NUXCIgJiYgKGNvbnRlbnRUeXBlID09IG51bGwgPyB2b2lkIDAgOiBjb250ZW50VHlwZS5zdGFydHNXaXRoKFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiKSkpO1xuICAgIGNvbnN0IGlzRmV0Y2hBY3Rpb24gPSBCb29sZWFuKGFjdGlvbklkICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGFjdGlvbklkID09PSBcInN0cmluZ1wiICYmIHJlcS5tZXRob2QgPT09IFwiUE9TVFwiKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhY3Rpb25JZCxcbiAgICAgICAgaXNVUkxFbmNvZGVkQWN0aW9uLFxuICAgICAgICBpc011bHRpcGFydEFjdGlvbixcbiAgICAgICAgaXNGZXRjaEFjdGlvblxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0SXNTZXJ2ZXJBY3Rpb24ocmVxKSB7XG4gICAgY29uc3QgeyBpc0ZldGNoQWN0aW9uLCBpc1VSTEVuY29kZWRBY3Rpb24sIGlzTXVsdGlwYXJ0QWN0aW9uIH0gPSBnZXRTZXJ2ZXJBY3Rpb25SZXF1ZXN0TWV0YWRhdGEocmVxKTtcbiAgICByZXR1cm4gQm9vbGVhbihpc0ZldGNoQWN0aW9uIHx8IGlzVVJMRW5jb2RlZEFjdGlvbiB8fCBpc011bHRpcGFydEFjdGlvbik7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcnZlci1hY3Rpb24tcmVxdWVzdC1tZXRhLmpzLm1hcCJdLCJuYW1lcyI6WyJBQ1RJT04iLCJnZXRTZXJ2ZXJBY3Rpb25SZXF1ZXN0TWV0YWRhdGEiLCJyZXEiLCJhY3Rpb25JZCIsImNvbnRlbnRUeXBlIiwiaGVhZGVycyIsIkhlYWRlcnMiLCJnZXQiLCJ0b0xvd2VyQ2FzZSIsImlzVVJMRW5jb2RlZEFjdGlvbiIsIkJvb2xlYW4iLCJtZXRob2QiLCJpc011bHRpcGFydEFjdGlvbiIsInN0YXJ0c1dpdGgiLCJpc0ZldGNoQWN0aW9uIiwidW5kZWZpbmVkIiwiZ2V0SXNTZXJ2ZXJBY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/lib/server-action-request-meta.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/lib/trace/constants.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/lib/trace/constants.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppRenderSpan: () => (/* binding */ AppRenderSpan),\n/* harmony export */   AppRouteRouteHandlersSpan: () => (/* binding */ AppRouteRouteHandlersSpan),\n/* harmony export */   BaseServerSpan: () => (/* binding */ BaseServerSpan),\n/* harmony export */   LoadComponentsSpan: () => (/* binding */ LoadComponentsSpan),\n/* harmony export */   NextNodeServerSpan: () => (/* binding */ NextNodeServerSpan),\n/* harmony export */   NextServerSpan: () => (/* binding */ NextServerSpan),\n/* harmony export */   NextVanillaSpanAllowlist: () => (/* binding */ NextVanillaSpanAllowlist),\n/* harmony export */   NodeSpan: () => (/* binding */ NodeSpan),\n/* harmony export */   RenderSpan: () => (/* binding */ RenderSpan),\n/* harmony export */   ResolveMetadataSpan: () => (/* binding */ ResolveMetadataSpan),\n/* harmony export */   RouterSpan: () => (/* binding */ RouterSpan),\n/* harmony export */   StartServerSpan: () => (/* binding */ StartServerSpan)\n/* harmony export */ });\n/**\n * Contains predefined constants for the trace span name in next/server.\n *\n * Currently, next/server/tracer is internal implementation only for tracking\n * next.js's implementation only with known span names defined here.\n **/ // eslint typescript has a bug with TS enums\n/* eslint-disable no-shadow */var BaseServerSpan;\n(function (BaseServerSpan) {\n  BaseServerSpan[\"handleRequest\"] = \"BaseServer.handleRequest\";\n  BaseServerSpan[\"run\"] = \"BaseServer.run\";\n  BaseServerSpan[\"pipe\"] = \"BaseServer.pipe\";\n  BaseServerSpan[\"getStaticHTML\"] = \"BaseServer.getStaticHTML\";\n  BaseServerSpan[\"render\"] = \"BaseServer.render\";\n  BaseServerSpan[\"renderToResponseWithComponents\"] = \"BaseServer.renderToResponseWithComponents\";\n  BaseServerSpan[\"renderToResponse\"] = \"BaseServer.renderToResponse\";\n  BaseServerSpan[\"renderToHTML\"] = \"BaseServer.renderToHTML\";\n  BaseServerSpan[\"renderError\"] = \"BaseServer.renderError\";\n  BaseServerSpan[\"renderErrorToResponse\"] = \"BaseServer.renderErrorToResponse\";\n  BaseServerSpan[\"renderErrorToHTML\"] = \"BaseServer.renderErrorToHTML\";\n  BaseServerSpan[\"render404\"] = \"BaseServer.render404\";\n})(BaseServerSpan || (BaseServerSpan = {}));\nvar LoadComponentsSpan;\n(function (LoadComponentsSpan) {\n  LoadComponentsSpan[\"loadDefaultErrorComponents\"] = \"LoadComponents.loadDefaultErrorComponents\";\n  LoadComponentsSpan[\"loadComponents\"] = \"LoadComponents.loadComponents\";\n})(LoadComponentsSpan || (LoadComponentsSpan = {}));\nvar NextServerSpan;\n(function (NextServerSpan) {\n  NextServerSpan[\"getRequestHandler\"] = \"NextServer.getRequestHandler\";\n  NextServerSpan[\"getServer\"] = \"NextServer.getServer\";\n  NextServerSpan[\"getServerRequestHandler\"] = \"NextServer.getServerRequestHandler\";\n  NextServerSpan[\"createServer\"] = \"createServer.createServer\";\n})(NextServerSpan || (NextServerSpan = {}));\nvar NextNodeServerSpan;\n(function (NextNodeServerSpan) {\n  NextNodeServerSpan[\"compression\"] = \"NextNodeServer.compression\";\n  NextNodeServerSpan[\"getBuildId\"] = \"NextNodeServer.getBuildId\";\n  NextNodeServerSpan[\"getLayoutOrPageModule\"] = \"NextNodeServer.getLayoutOrPageModule\";\n  NextNodeServerSpan[\"generateStaticRoutes\"] = \"NextNodeServer.generateStaticRoutes\";\n  NextNodeServerSpan[\"generateFsStaticRoutes\"] = \"NextNodeServer.generateFsStaticRoutes\";\n  NextNodeServerSpan[\"generatePublicRoutes\"] = \"NextNodeServer.generatePublicRoutes\";\n  NextNodeServerSpan[\"generateImageRoutes\"] = \"NextNodeServer.generateImageRoutes.route\";\n  NextNodeServerSpan[\"sendRenderResult\"] = \"NextNodeServer.sendRenderResult\";\n  NextNodeServerSpan[\"proxyRequest\"] = \"NextNodeServer.proxyRequest\";\n  NextNodeServerSpan[\"runApi\"] = \"NextNodeServer.runApi\";\n  NextNodeServerSpan[\"render\"] = \"NextNodeServer.render\";\n  NextNodeServerSpan[\"renderHTML\"] = \"NextNodeServer.renderHTML\";\n  NextNodeServerSpan[\"imageOptimizer\"] = \"NextNodeServer.imageOptimizer\";\n  NextNodeServerSpan[\"getPagePath\"] = \"NextNodeServer.getPagePath\";\n  NextNodeServerSpan[\"getRoutesManifest\"] = \"NextNodeServer.getRoutesManifest\";\n  NextNodeServerSpan[\"findPageComponents\"] = \"NextNodeServer.findPageComponents\";\n  NextNodeServerSpan[\"getFontManifest\"] = \"NextNodeServer.getFontManifest\";\n  NextNodeServerSpan[\"getServerComponentManifest\"] = \"NextNodeServer.getServerComponentManifest\";\n  NextNodeServerSpan[\"getRequestHandler\"] = \"NextNodeServer.getRequestHandler\";\n  NextNodeServerSpan[\"renderToHTML\"] = \"NextNodeServer.renderToHTML\";\n  NextNodeServerSpan[\"renderError\"] = \"NextNodeServer.renderError\";\n  NextNodeServerSpan[\"renderErrorToHTML\"] = \"NextNodeServer.renderErrorToHTML\";\n  NextNodeServerSpan[\"render404\"] = \"NextNodeServer.render404\";\n  NextNodeServerSpan[\n  // nested inner span, does not require parent scope name\n  \"route\"] = \"route\";\n  NextNodeServerSpan[\"onProxyReq\"] = \"onProxyReq\";\n  NextNodeServerSpan[\"apiResolver\"] = \"apiResolver\";\n  NextNodeServerSpan[\"internalFetch\"] = \"internalFetch\";\n})(NextNodeServerSpan || (NextNodeServerSpan = {}));\nvar StartServerSpan;\n(function (StartServerSpan) {\n  StartServerSpan[\"startServer\"] = \"startServer.startServer\";\n})(StartServerSpan || (StartServerSpan = {}));\nvar RenderSpan;\n(function (RenderSpan) {\n  RenderSpan[\"getServerSideProps\"] = \"Render.getServerSideProps\";\n  RenderSpan[\"getStaticProps\"] = \"Render.getStaticProps\";\n  RenderSpan[\"renderToString\"] = \"Render.renderToString\";\n  RenderSpan[\"renderDocument\"] = \"Render.renderDocument\";\n  RenderSpan[\"createBodyResult\"] = \"Render.createBodyResult\";\n})(RenderSpan || (RenderSpan = {}));\nvar AppRenderSpan;\n(function (AppRenderSpan) {\n  AppRenderSpan[\"renderToString\"] = \"AppRender.renderToString\";\n  AppRenderSpan[\"renderToReadableStream\"] = \"AppRender.renderToReadableStream\";\n  AppRenderSpan[\"getBodyResult\"] = \"AppRender.getBodyResult\";\n  AppRenderSpan[\"fetch\"] = \"AppRender.fetch\";\n})(AppRenderSpan || (AppRenderSpan = {}));\nvar RouterSpan;\n(function (RouterSpan) {\n  RouterSpan[\"executeRoute\"] = \"Router.executeRoute\";\n})(RouterSpan || (RouterSpan = {}));\nvar NodeSpan;\n(function (NodeSpan) {\n  NodeSpan[\"runHandler\"] = \"Node.runHandler\";\n})(NodeSpan || (NodeSpan = {}));\nvar AppRouteRouteHandlersSpan;\n(function (AppRouteRouteHandlersSpan) {\n  AppRouteRouteHandlersSpan[\"runHandler\"] = \"AppRouteRouteHandlers.runHandler\";\n})(AppRouteRouteHandlersSpan || (AppRouteRouteHandlersSpan = {}));\nvar ResolveMetadataSpan;\n(function (ResolveMetadataSpan) {\n  ResolveMetadataSpan[\"generateMetadata\"] = \"ResolveMetadata.generateMetadata\";\n  ResolveMetadataSpan[\"generateViewport\"] = \"ResolveMetadata.generateViewport\";\n})(ResolveMetadataSpan || (ResolveMetadataSpan = {}));\n// This list is used to filter out spans that are not relevant to the user\nconst NextVanillaSpanAllowlist = [\"BaseServer.handleRequest\", \"Render.getServerSideProps\", \"Render.getStaticProps\", \"AppRender.fetch\", \"AppRender.getBodyResult\", \"Render.renderDocument\", \"Node.runHandler\", \"AppRouteRouteHandlers.runHandler\", \"ResolveMetadata.generateMetadata\", \"ResolveMetadata.generateViewport\", \"NextNodeServer.findPageComponents\", \"NextNodeServer.getLayoutOrPageModule\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/lib/trace/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/lib/trace/tracer.js":
/*!***************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/lib/trace/tracer.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SpanKind: () => (/* binding */ SpanKind),\n/* harmony export */   SpanStatusCode: () => (/* binding */ SpanStatusCode),\n/* harmony export */   getTracer: () => (/* binding */ getTracer)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/next/dist/esm/server/lib/trace/constants.js\");\n\nlet api;\n// we want to allow users to use their own version of @opentelemetry/api if they\n// want to, so we try to require it first, and if it fails we fall back to the\n// version that is bundled with Next.js\n// this is because @opentelemetry/api has to be synced with the version of\n// @opentelemetry/tracing that is used, and we don't want to force users to use\n// the version that is bundled with Next.js.\n// the API is ~stable, so this should be fine\nif (true) {\n  api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/next/dist/compiled/@opentelemetry/api/index.js\");\n} else {}\nconst {\n  context,\n  propagation,\n  trace,\n  SpanStatusCode,\n  SpanKind,\n  ROOT_CONTEXT\n} = api;\nconst isPromise = p => {\n  return p !== null && typeof p === \"object\" && typeof p.then === \"function\";\n};\nconst closeSpanWithError = (span, error) => {\n  if ((error == null ? void 0 : error.bubble) === true) {\n    span.setAttribute(\"next.bubble\", true);\n  } else {\n    if (error) {\n      span.recordException(error);\n    }\n    span.setStatus({\n      code: SpanStatusCode.ERROR,\n      message: error == null ? void 0 : error.message\n    });\n  }\n  span.end();\n};\n/** we use this map to propagate attributes from nested spans to the top span */\nconst rootSpanAttributesStore = new Map();\nconst rootSpanIdKey = api.createContextKey(\"next.rootSpanId\");\nlet lastSpanId = 0;\nconst getSpanId = () => lastSpanId++;\nclass NextTracerImpl {\n  /**\n  * Returns an instance to the trace with configured name.\n  * Since wrap / trace can be defined in any place prior to actual trace subscriber initialization,\n  * This should be lazily evaluated.\n  */\n  getTracerInstance() {\n    return trace.getTracer(\"next.js\", \"0.0.1\");\n  }\n  getContext() {\n    return context;\n  }\n  getActiveScopeSpan() {\n    return trace.getSpan(context == null ? void 0 : context.active());\n  }\n  withPropagatedContext(carrier, fn, getter) {\n    const activeContext = context.active();\n    if (trace.getSpanContext(activeContext)) {\n      // Active span is already set, too late to propagate.\n      return fn();\n    }\n    const remoteContext = propagation.extract(activeContext, carrier, getter);\n    return context.with(remoteContext, fn);\n  }\n  trace(...args) {\n    var _trace_getSpanContext;\n    const [type, fnOrOptions, fnOrEmpty] = args;\n    // coerce options form overload\n    const {\n      fn,\n      options\n    } = typeof fnOrOptions === \"function\" ? {\n      fn: fnOrOptions,\n      options: {}\n    } : {\n      fn: fnOrEmpty,\n      options: {\n        ...fnOrOptions\n      }\n    };\n    if (!_constants__WEBPACK_IMPORTED_MODULE_0__.NextVanillaSpanAllowlist.includes(type) && process.env.NEXT_OTEL_VERBOSE !== \"1\" || options.hideSpan) {\n      return fn();\n    }\n    const spanName = options.spanName ?? type;\n    // Trying to get active scoped span to assign parent. If option specifies parent span manually, will try to use it.\n    let spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());\n    let isRootSpan = false;\n    if (!spanContext) {\n      spanContext = ROOT_CONTEXT;\n      isRootSpan = true;\n    } else if ((_trace_getSpanContext = trace.getSpanContext(spanContext)) == null ? void 0 : _trace_getSpanContext.isRemote) {\n      isRootSpan = true;\n    }\n    const spanId = getSpanId();\n    options.attributes = {\n      \"next.span_name\": spanName,\n      \"next.span_type\": type,\n      ...options.attributes\n    };\n    return context.with(spanContext.setValue(rootSpanIdKey, spanId), () => this.getTracerInstance().startActiveSpan(spanName, options, span => {\n      const onCleanup = () => {\n        rootSpanAttributesStore.delete(spanId);\n      };\n      if (isRootSpan) {\n        rootSpanAttributesStore.set(spanId, new Map(Object.entries(options.attributes ?? {})));\n      }\n      try {\n        if (fn.length > 1) {\n          return fn(span, err => closeSpanWithError(span, err));\n        }\n        const result = fn(span);\n        if (isPromise(result)) {\n          // If there's error make sure it throws\n          return result.then(res => {\n            span.end();\n            // Need to pass down the promise result,\n            // it could be react stream response with error { error, stream }\n            return res;\n          }).catch(err => {\n            closeSpanWithError(span, err);\n            throw err;\n          }).finally(onCleanup);\n        } else {\n          span.end();\n          onCleanup();\n        }\n        return result;\n      } catch (err) {\n        closeSpanWithError(span, err);\n        onCleanup();\n        throw err;\n      }\n    }));\n  }\n  wrap(...args) {\n    const tracer = this;\n    const [name, options, fn] = args.length === 3 ? args : [args[0], {}, args[1]];\n    if (!_constants__WEBPACK_IMPORTED_MODULE_0__.NextVanillaSpanAllowlist.includes(name) && process.env.NEXT_OTEL_VERBOSE !== \"1\") {\n      return fn;\n    }\n    return function () {\n      let optionsObj = options;\n      if (typeof optionsObj === \"function\" && typeof fn === \"function\") {\n        optionsObj = optionsObj.apply(this, arguments);\n      }\n      const lastArgId = arguments.length - 1;\n      const cb = arguments[lastArgId];\n      if (typeof cb === \"function\") {\n        const scopeBoundCb = tracer.getContext().bind(context.active(), cb);\n        return tracer.trace(name, optionsObj, (_span, done) => {\n          arguments[lastArgId] = function (err) {\n            done == null ? void 0 : done(err);\n            return scopeBoundCb.apply(this, arguments);\n          };\n          return fn.apply(this, arguments);\n        });\n      } else {\n        return tracer.trace(name, optionsObj, () => fn.apply(this, arguments));\n      }\n    };\n  }\n  startSpan(...args) {\n    const [type, options] = args;\n    const spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());\n    return this.getTracerInstance().startSpan(type, options, spanContext);\n  }\n  getSpanContext(parentSpan) {\n    const spanContext = parentSpan ? trace.setSpan(context.active(), parentSpan) : undefined;\n    return spanContext;\n  }\n  getRootSpanAttributes() {\n    const spanId = context.active().getValue(rootSpanIdKey);\n    return rootSpanAttributesStore.get(spanId);\n  }\n}\nconst getTracer = (() => {\n  const tracer = new NextTracerImpl();\n  return () => tracer;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/lib/trace/tracer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/server-utils.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/esm/server/server-utils.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getUtils: () => (/* binding */ getUtils),\n/* harmony export */   interpolateDynamicPath: () => (/* binding */ interpolateDynamicPath),\n/* harmony export */   normalizeDynamicRouteParams: () => (/* binding */ normalizeDynamicRouteParams),\n/* harmony export */   normalizeVercelUrl: () => (/* binding */ normalizeVercelUrl)\n/* harmony export */ });\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! url */ \"(rsc)/./node_modules/next/dist/compiled/native-url/index.js\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(url__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _shared_lib_i18n_normalize_locale_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/lib/i18n/normalize-locale-path */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/i18n/normalize-locale-path.js\");\n/* harmony import */ var _shared_lib_router_utils_path_match__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/lib/router/utils/path-match */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/path-match.js\");\n/* harmony import */ var _shared_lib_router_utils_route_regex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/lib/router/utils/route-regex */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/route-regex.js\");\n/* harmony import */ var _shared_lib_router_utils_route_matcher__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/lib/router/utils/route-matcher */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/route-matcher.js\");\n/* harmony import */ var _shared_lib_router_utils_prepare_destination__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shared/lib/router/utils/prepare-destination */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/prepare-destination.js\");\n/* harmony import */ var _shared_lib_router_utils_remove_trailing_slash__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shared/lib/router/utils/remove-trailing-slash */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/remove-trailing-slash.js\");\n/* harmony import */ var _shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../shared/lib/router/utils/app-paths */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/app-paths.js\");\n/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../lib/constants */ \"(rsc)/./node_modules/next/dist/esm/lib/constants.js\");\n\n\n\n\n\n\n\n\n\nfunction normalizeVercelUrl(req, trustQuery, paramKeys, pageIsDynamic, defaultRouteRegex) {\n  // make sure to normalize req.url on Vercel to strip dynamic params\n  // from the query which are added during routing\n  if (pageIsDynamic && trustQuery && defaultRouteRegex) {\n    const _parsedUrl = (0,url__WEBPACK_IMPORTED_MODULE_0__.parse)(req.url, true);\n    delete _parsedUrl.search;\n    for (const key of Object.keys(_parsedUrl.query)) {\n      if (key !== _lib_constants__WEBPACK_IMPORTED_MODULE_8__.NEXT_QUERY_PARAM_PREFIX && key.startsWith(_lib_constants__WEBPACK_IMPORTED_MODULE_8__.NEXT_QUERY_PARAM_PREFIX) || (paramKeys || Object.keys(defaultRouteRegex.groups)).includes(key)) {\n        delete _parsedUrl.query[key];\n      }\n    }\n    req.url = (0,url__WEBPACK_IMPORTED_MODULE_0__.format)(_parsedUrl);\n  }\n}\nfunction interpolateDynamicPath(pathname, params, defaultRouteRegex) {\n  if (!defaultRouteRegex) return pathname;\n  for (const param of Object.keys(defaultRouteRegex.groups)) {\n    const {\n      optional,\n      repeat\n    } = defaultRouteRegex.groups[param];\n    let builtParam = `[${repeat ? \"...\" : \"\"}${param}]`;\n    if (optional) {\n      builtParam = `[${builtParam}]`;\n    }\n    const paramIdx = pathname.indexOf(builtParam);\n    if (paramIdx > -1) {\n      let paramValue;\n      const value = params[param];\n      if (Array.isArray(value)) {\n        paramValue = value.map(v => v && encodeURIComponent(v)).join(\"/\");\n      } else if (value) {\n        paramValue = encodeURIComponent(value);\n      } else {\n        paramValue = \"\";\n      }\n      pathname = pathname.slice(0, paramIdx) + paramValue + pathname.slice(paramIdx + builtParam.length);\n    }\n  }\n  return pathname;\n}\nfunction normalizeDynamicRouteParams(params, ignoreOptional, defaultRouteRegex, defaultRouteMatches) {\n  let hasValidParams = true;\n  if (!defaultRouteRegex) return {\n    params,\n    hasValidParams: false\n  };\n  params = Object.keys(defaultRouteRegex.groups).reduce((prev, key) => {\n    let value = params[key];\n    if (typeof value === \"string\") {\n      value = (0,_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_7__.normalizeRscURL)(value);\n    }\n    if (Array.isArray(value)) {\n      value = value.map(val => {\n        if (typeof val === \"string\") {\n          val = (0,_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_7__.normalizeRscURL)(val);\n        }\n        return val;\n      });\n    }\n    // if the value matches the default value we can't rely\n    // on the parsed params, this is used to signal if we need\n    // to parse x-now-route-matches or not\n    const defaultValue = defaultRouteMatches[key];\n    const isOptional = defaultRouteRegex.groups[key].optional;\n    const isDefaultValue = Array.isArray(defaultValue) ? defaultValue.some(defaultVal => {\n      return Array.isArray(value) ? value.some(val => val.includes(defaultVal)) : value == null ? void 0 : value.includes(defaultVal);\n    }) : value == null ? void 0 : value.includes(defaultValue);\n    if (isDefaultValue || typeof value === \"undefined\" && !(isOptional && ignoreOptional)) {\n      hasValidParams = false;\n    }\n    // non-provided optional values should be undefined so normalize\n    // them to undefined\n    if (isOptional && (!value || Array.isArray(value) && value.length === 1 && (\n    // fallback optional catch-all SSG pages have\n    // [[...paramName]] for the root path on Vercel\n    value[0] === \"index\" || value[0] === `[[...${key}]]`))) {\n      value = undefined;\n      delete params[key];\n    }\n    // query values from the proxy aren't already split into arrays\n    // so make sure to normalize catch-all values\n    if (value && typeof value === \"string\" && defaultRouteRegex.groups[key].repeat) {\n      value = value.split(\"/\");\n    }\n    if (value) {\n      prev[key] = value;\n    }\n    return prev;\n  }, {});\n  return {\n    params,\n    hasValidParams\n  };\n}\nfunction getUtils({\n  page,\n  i18n,\n  basePath,\n  rewrites,\n  pageIsDynamic,\n  trailingSlash,\n  caseSensitive\n}) {\n  let defaultRouteRegex;\n  let dynamicRouteMatcher;\n  let defaultRouteMatches;\n  if (pageIsDynamic) {\n    defaultRouteRegex = (0,_shared_lib_router_utils_route_regex__WEBPACK_IMPORTED_MODULE_3__.getNamedRouteRegex)(page, false);\n    dynamicRouteMatcher = (0,_shared_lib_router_utils_route_matcher__WEBPACK_IMPORTED_MODULE_4__.getRouteMatcher)(defaultRouteRegex);\n    defaultRouteMatches = dynamicRouteMatcher(page);\n  }\n  function handleRewrites(req, parsedUrl) {\n    const rewriteParams = {};\n    let fsPathname = parsedUrl.pathname;\n    const matchesPage = () => {\n      const fsPathnameNoSlash = (0,_shared_lib_router_utils_remove_trailing_slash__WEBPACK_IMPORTED_MODULE_6__.removeTrailingSlash)(fsPathname || \"\");\n      return fsPathnameNoSlash === (0,_shared_lib_router_utils_remove_trailing_slash__WEBPACK_IMPORTED_MODULE_6__.removeTrailingSlash)(page) || (dynamicRouteMatcher == null ? void 0 : dynamicRouteMatcher(fsPathnameNoSlash));\n    };\n    const checkRewrite = rewrite => {\n      const matcher = (0,_shared_lib_router_utils_path_match__WEBPACK_IMPORTED_MODULE_2__.getPathMatch)(rewrite.source + (trailingSlash ? \"(/)?\" : \"\"), {\n        removeUnnamedParams: true,\n        strict: true,\n        sensitive: !!caseSensitive\n      });\n      let params = matcher(parsedUrl.pathname);\n      if ((rewrite.has || rewrite.missing) && params) {\n        const hasParams = (0,_shared_lib_router_utils_prepare_destination__WEBPACK_IMPORTED_MODULE_5__.matchHas)(req, parsedUrl.query, rewrite.has, rewrite.missing);\n        if (hasParams) {\n          Object.assign(params, hasParams);\n        } else {\n          params = false;\n        }\n      }\n      if (params) {\n        const {\n          parsedDestination,\n          destQuery\n        } = (0,_shared_lib_router_utils_prepare_destination__WEBPACK_IMPORTED_MODULE_5__.prepareDestination)({\n          appendParamsToQuery: true,\n          destination: rewrite.destination,\n          params: params,\n          query: parsedUrl.query\n        });\n        // if the rewrite destination is external break rewrite chain\n        if (parsedDestination.protocol) {\n          return true;\n        }\n        Object.assign(rewriteParams, destQuery, params);\n        Object.assign(parsedUrl.query, parsedDestination.query);\n        delete parsedDestination.query;\n        Object.assign(parsedUrl, parsedDestination);\n        fsPathname = parsedUrl.pathname;\n        if (basePath) {\n          fsPathname = fsPathname.replace(new RegExp(`^${basePath}`), \"\") || \"/\";\n        }\n        if (i18n) {\n          const destLocalePathResult = (0,_shared_lib_i18n_normalize_locale_path__WEBPACK_IMPORTED_MODULE_1__.normalizeLocalePath)(fsPathname, i18n.locales);\n          fsPathname = destLocalePathResult.pathname;\n          parsedUrl.query.nextInternalLocale = destLocalePathResult.detectedLocale || params.nextInternalLocale;\n        }\n        if (fsPathname === page) {\n          return true;\n        }\n        if (pageIsDynamic && dynamicRouteMatcher) {\n          const dynamicParams = dynamicRouteMatcher(fsPathname);\n          if (dynamicParams) {\n            parsedUrl.query = {\n              ...parsedUrl.query,\n              ...dynamicParams\n            };\n            return true;\n          }\n        }\n      }\n      return false;\n    };\n    for (const rewrite of rewrites.beforeFiles || []) {\n      checkRewrite(rewrite);\n    }\n    if (fsPathname !== page) {\n      let finished = false;\n      for (const rewrite of rewrites.afterFiles || []) {\n        finished = checkRewrite(rewrite);\n        if (finished) break;\n      }\n      if (!finished && !matchesPage()) {\n        for (const rewrite of rewrites.fallback || []) {\n          finished = checkRewrite(rewrite);\n          if (finished) break;\n        }\n      }\n    }\n    return rewriteParams;\n  }\n  function getParamsFromRouteMatches(req, renderOpts, detectedLocale) {\n    return (0,_shared_lib_router_utils_route_matcher__WEBPACK_IMPORTED_MODULE_4__.getRouteMatcher)(function () {\n      const {\n        groups,\n        routeKeys\n      } = defaultRouteRegex;\n      return {\n        re: {\n          // Simulate a RegExp match from the \\`req.url\\` input\n          exec: str => {\n            const obj = Object.fromEntries(new URLSearchParams(str));\n            const matchesHasLocale = i18n && detectedLocale && obj[\"1\"] === detectedLocale;\n            for (const key of Object.keys(obj)) {\n              const value = obj[key];\n              if (key !== _lib_constants__WEBPACK_IMPORTED_MODULE_8__.NEXT_QUERY_PARAM_PREFIX && key.startsWith(_lib_constants__WEBPACK_IMPORTED_MODULE_8__.NEXT_QUERY_PARAM_PREFIX)) {\n                const normalizedKey = key.substring(_lib_constants__WEBPACK_IMPORTED_MODULE_8__.NEXT_QUERY_PARAM_PREFIX.length);\n                obj[normalizedKey] = value;\n                delete obj[key];\n              }\n            }\n            // favor named matches if available\n            const routeKeyNames = Object.keys(routeKeys || {});\n            const filterLocaleItem = val => {\n              if (i18n) {\n                // locale items can be included in route-matches\n                // for fallback SSG pages so ensure they are\n                // filtered\n                const isCatchAll = Array.isArray(val);\n                const _val = isCatchAll ? val[0] : val;\n                if (typeof _val === \"string\" && i18n.locales.some(item => {\n                  if (item.toLowerCase() === _val.toLowerCase()) {\n                    detectedLocale = item;\n                    renderOpts.locale = detectedLocale;\n                    return true;\n                  }\n                  return false;\n                })) {\n                  // remove the locale item from the match\n                  if (isCatchAll) {\n                    val.splice(0, 1);\n                  }\n                  // the value is only a locale item and\n                  // shouldn't be added\n                  return isCatchAll ? val.length === 0 : true;\n                }\n              }\n              return false;\n            };\n            if (routeKeyNames.every(name => obj[name])) {\n              return routeKeyNames.reduce((prev, keyName) => {\n                const paramName = routeKeys == null ? void 0 : routeKeys[keyName];\n                if (paramName && !filterLocaleItem(obj[keyName])) {\n                  prev[groups[paramName].pos] = obj[keyName];\n                }\n                return prev;\n              }, {});\n            }\n            return Object.keys(obj).reduce((prev, key) => {\n              if (!filterLocaleItem(obj[key])) {\n                let normalizedKey = key;\n                if (matchesHasLocale) {\n                  normalizedKey = parseInt(key, 10) - 1 + \"\";\n                }\n                return Object.assign(prev, {\n                  [normalizedKey]: obj[key]\n                });\n              }\n              return prev;\n            }, {});\n          }\n        },\n        groups\n      };\n    }())(req.headers[\"x-now-route-matches\"]);\n  }\n  return {\n    handleRewrites,\n    defaultRouteRegex,\n    dynamicRouteMatcher,\n    defaultRouteMatches,\n    getParamsFromRouteMatches,\n    normalizeDynamicRouteParams: (params, ignoreOptional) => normalizeDynamicRouteParams(params, ignoreOptional, defaultRouteRegex, defaultRouteMatches),\n    normalizeVercelUrl: (req, trustQuery, paramKeys) => normalizeVercelUrl(req, trustQuery, paramKeys, pageIsDynamic, defaultRouteRegex),\n    interpolateDynamicPath: (pathname, params) => interpolateDynamicPath(pathname, params, defaultRouteRegex)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/server-utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/web/adapter.js":
/*!**********************************************************!*\
  !*** ./node_modules/next/dist/esm/server/web/adapter.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adapter: () => (/* binding */ adapter)\n/* harmony export */ });\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/next/dist/esm/server/web/error.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/next/dist/esm/server/web/utils.js\");\n/* harmony import */ var _spec_extension_fetch_event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./spec-extension/fetch-event */ \"(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/fetch-event.js\");\n/* harmony import */ var _spec_extension_request__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./spec-extension/request */ \"(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/request.js\");\n/* harmony import */ var _spec_extension_response__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./spec-extension/response */ \"(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/response.js\");\n/* harmony import */ var _shared_lib_router_utils_relativize_url__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../shared/lib/router/utils/relativize-url */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/relativize-url.js\");\n/* harmony import */ var _next_url__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./next-url */ \"(rsc)/./node_modules/next/dist/esm/server/web/next-url.js\");\n/* harmony import */ var _internal_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../internal-utils */ \"(rsc)/./node_modules/next/dist/esm/server/internal-utils.js\");\n/* harmony import */ var _shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../shared/lib/router/utils/app-paths */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/app-paths.js\");\n/* harmony import */ var _client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../client/components/app-router-headers */ \"(rsc)/./node_modules/next/dist/esm/client/components/app-router-headers.js\");\n/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../lib/constants */ \"(rsc)/./node_modules/next/dist/esm/lib/constants.js\");\n/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./globals */ \"(rsc)/./node_modules/next/dist/esm/server/web/globals.js\");\n/* harmony import */ var _async_storage_request_async_storage_wrapper__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../async-storage/request-async-storage-wrapper */ \"(rsc)/./node_modules/next/dist/esm/server/async-storage/request-async-storage-wrapper.js\");\n/* harmony import */ var _client_components_request_async_storage_external__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../client/components/request-async-storage.external */ \"(shared)/./node_modules/next/dist/esm/client/components/request-async-storage.external.js\");\n/* harmony import */ var _lib_trace_tracer__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/esm/server/lib/trace/tracer.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass NextRequestHint extends _spec_extension_request__WEBPACK_IMPORTED_MODULE_3__.NextRequest {\n  constructor(params) {\n    super(params.input, params.init);\n    this.sourcePage = params.page;\n  }\n  get request() {\n    throw new _error__WEBPACK_IMPORTED_MODULE_0__.PageSignatureError({\n      page: this.sourcePage\n    });\n  }\n  respondWith() {\n    throw new _error__WEBPACK_IMPORTED_MODULE_0__.PageSignatureError({\n      page: this.sourcePage\n    });\n  }\n  waitUntil() {\n    throw new _error__WEBPACK_IMPORTED_MODULE_0__.PageSignatureError({\n      page: this.sourcePage\n    });\n  }\n}\nconst headersGetter = {\n  keys: headers => Array.from(headers.keys()),\n  get: (headers, key) => headers.get(key) ?? undefined\n};\nlet propagator = (request, fn) => {\n  const tracer = (0,_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_14__.getTracer)();\n  return tracer.withPropagatedContext(request.headers, fn, headersGetter);\n};\nlet testApisIntercepted = false;\nfunction ensureTestApisIntercepted() {\n  if (!testApisIntercepted) {\n    testApisIntercepted = true;\n    if (process.env.NEXT_PRIVATE_TEST_PROXY === \"true\") {\n      const {\n        interceptTestApis,\n        wrapRequestHandler\n      } = __webpack_require__(/*! next/dist/experimental/testmode/server-edge */ \"(rsc)/./node_modules/next/dist/experimental/testmode/server-edge.js\");\n      interceptTestApis();\n      propagator = wrapRequestHandler(propagator);\n    }\n  }\n}\nasync function adapter(params) {\n  ensureTestApisIntercepted();\n  await (0,_globals__WEBPACK_IMPORTED_MODULE_11__.ensureInstrumentationRegistered)();\n  // TODO-APP: use explicit marker for this\n  const isEdgeRendering = typeof self.__BUILD_MANIFEST !== \"undefined\";\n  const prerenderManifest = typeof self.__PRERENDER_MANIFEST === \"string\" ? JSON.parse(self.__PRERENDER_MANIFEST) : undefined;\n  params.request.url = (0,_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_8__.normalizeRscURL)(params.request.url);\n  const requestUrl = new _next_url__WEBPACK_IMPORTED_MODULE_6__.NextURL(params.request.url, {\n    headers: params.request.headers,\n    nextConfig: params.request.nextConfig\n  });\n  // Iterator uses an index to keep track of the current iteration. Because of deleting and appending below we can't just use the iterator.\n  // Instead we use the keys before iteration.\n  const keys = [...requestUrl.searchParams.keys()];\n  for (const key of keys) {\n    const value = requestUrl.searchParams.getAll(key);\n    if (key !== _lib_constants__WEBPACK_IMPORTED_MODULE_10__.NEXT_QUERY_PARAM_PREFIX && key.startsWith(_lib_constants__WEBPACK_IMPORTED_MODULE_10__.NEXT_QUERY_PARAM_PREFIX)) {\n      const normalizedKey = key.substring(_lib_constants__WEBPACK_IMPORTED_MODULE_10__.NEXT_QUERY_PARAM_PREFIX.length);\n      requestUrl.searchParams.delete(normalizedKey);\n      for (const val of value) {\n        requestUrl.searchParams.append(normalizedKey, val);\n      }\n      requestUrl.searchParams.delete(key);\n    }\n  }\n  // Ensure users only see page requests, never data requests.\n  const buildId = requestUrl.buildId;\n  requestUrl.buildId = \"\";\n  const isDataReq = params.request.headers[\"x-nextjs-data\"];\n  if (isDataReq && requestUrl.pathname === \"/index\") {\n    requestUrl.pathname = \"/\";\n  }\n  const requestHeaders = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.fromNodeOutgoingHttpHeaders)(params.request.headers);\n  const flightHeaders = new Map();\n  // Parameters should only be stripped for middleware\n  if (!isEdgeRendering) {\n    for (const param of _client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_9__.FLIGHT_PARAMETERS) {\n      const key = param.toString().toLowerCase();\n      const value = requestHeaders.get(key);\n      if (value) {\n        flightHeaders.set(key, requestHeaders.get(key));\n        requestHeaders.delete(key);\n      }\n    }\n  }\n  const normalizeUrl =  false ? 0 : requestUrl;\n  const request = new NextRequestHint({\n    page: params.page,\n    // Strip internal query parameters off the request.\n    input: (0,_internal_utils__WEBPACK_IMPORTED_MODULE_7__.stripInternalSearchParams)(normalizeUrl, true).toString(),\n    init: {\n      body: params.request.body,\n      geo: params.request.geo,\n      headers: requestHeaders,\n      ip: params.request.ip,\n      method: params.request.method,\n      nextConfig: params.request.nextConfig,\n      signal: params.request.signal\n    }\n  });\n  /**\n  * This allows to identify the request as a data request. The user doesn't\n  * need to know about this property neither use it. We add it for testing\n  * purposes.\n  */\n  if (isDataReq) {\n    Object.defineProperty(request, \"__isData\", {\n      enumerable: false,\n      value: true\n    });\n  }\n  if (!globalThis.__incrementalCache && params.IncrementalCache) {\n    globalThis.__incrementalCache = new params.IncrementalCache({\n      appDir: true,\n      fetchCache: true,\n      minimalMode: false,\n      fetchCacheKeyPrefix: undefined,\n      dev: true,\n      requestHeaders: params.request.headers,\n      requestProtocol: \"https\",\n      getPrerenderManifest: () => {\n        return {\n          version: -1,\n          routes: {},\n          dynamicRoutes: {},\n          notFoundRoutes: [],\n          preview: {\n            previewModeId: \"development-id\"\n          }\n        };\n      }\n    });\n  }\n  const event = new _spec_extension_fetch_event__WEBPACK_IMPORTED_MODULE_2__.NextFetchEvent({\n    request,\n    page: params.page\n  });\n  let response;\n  let cookiesFromResponse;\n  response = await propagator(request, () => {\n    // we only care to make async storage available for middleware\n    const isMiddleware = params.page === \"/middleware\" || params.page === \"/src/middleware\";\n    if (isMiddleware) {\n      return _async_storage_request_async_storage_wrapper__WEBPACK_IMPORTED_MODULE_12__.RequestAsyncStorageWrapper.wrap(_client_components_request_async_storage_external__WEBPACK_IMPORTED_MODULE_13__.requestAsyncStorage, {\n        req: request,\n        renderOpts: {\n          onUpdateCookies: cookies => {\n            cookiesFromResponse = cookies;\n          },\n          // @ts-expect-error: TODO: investigate why previewProps isn't on RenderOpts\n          previewProps: (prerenderManifest == null ? void 0 : prerenderManifest.preview) || {\n            previewModeId: \"development-id\",\n            previewModeEncryptionKey: \"\",\n            previewModeSigningKey: \"\"\n          }\n        }\n      }, () => params.handler(request, event));\n    }\n    return params.handler(request, event);\n  });\n  // check if response is a Response object\n  if (response && !(response instanceof Response)) {\n    throw new TypeError(\"Expected an instance of Response to be returned\");\n  }\n  if (response && cookiesFromResponse) {\n    response.headers.set(\"set-cookie\", cookiesFromResponse);\n  }\n  /**\n  * For rewrites we must always include the locale in the final pathname\n  * so we re-create the NextURL forcing it to include it when the it is\n  * an internal rewrite. Also we make sure the outgoing rewrite URL is\n  * a data URL if the request was a data request.\n  */\n  const rewrite = response == null ? void 0 : response.headers.get(\"x-middleware-rewrite\");\n  if (response && rewrite) {\n    const rewriteUrl = new _next_url__WEBPACK_IMPORTED_MODULE_6__.NextURL(rewrite, {\n      forceLocale: true,\n      headers: params.request.headers,\n      nextConfig: params.request.nextConfig\n    });\n    if (true) {\n      if (rewriteUrl.host === request.nextUrl.host) {\n        rewriteUrl.buildId = buildId || rewriteUrl.buildId;\n        response.headers.set(\"x-middleware-rewrite\", String(rewriteUrl));\n      }\n    }\n    /**\n    * When the request is a data request we must show if there was a rewrite\n    * with an internal header so the client knows which component to load\n    * from the data request.\n    */\n    const relativizedRewrite = (0,_shared_lib_router_utils_relativize_url__WEBPACK_IMPORTED_MODULE_5__.relativizeURL)(String(rewriteUrl), String(requestUrl));\n    if (isDataReq &&\n    // if the rewrite is external and external rewrite\n    // resolving config is enabled don't add this header\n    // so the upstream app can set it instead\n    !(undefined && 0)) {\n      response.headers.set(\"x-nextjs-rewrite\", relativizedRewrite);\n    }\n  }\n  /**\n  * For redirects we will not include the locale in case when it is the\n  * default and we must also make sure the outgoing URL is a data one if\n  * the incoming request was a data request.\n  */\n  const redirect = response == null ? void 0 : response.headers.get(\"Location\");\n  if (response && redirect && !isEdgeRendering) {\n    const redirectURL = new _next_url__WEBPACK_IMPORTED_MODULE_6__.NextURL(redirect, {\n      forceLocale: false,\n      headers: params.request.headers,\n      nextConfig: params.request.nextConfig\n    });\n    /**\n    * Responses created from redirects have immutable headers so we have\n    * to clone the response to be able to modify it.\n    */\n    response = new Response(response.body, response);\n    if (true) {\n      if (redirectURL.host === request.nextUrl.host) {\n        redirectURL.buildId = buildId || redirectURL.buildId;\n        response.headers.set(\"Location\", String(redirectURL));\n      }\n    }\n    /**\n    * When the request is a data request we can't use the location header as\n    * it may end up with CORS error. Instead we map to an internal header so\n    * the client knows the destination.\n    */\n    if (isDataReq) {\n      response.headers.delete(\"Location\");\n      response.headers.set(\"x-nextjs-redirect\", (0,_shared_lib_router_utils_relativize_url__WEBPACK_IMPORTED_MODULE_5__.relativizeURL)(String(redirectURL), String(requestUrl)));\n    }\n  }\n  const finalResponse = response ? response : _spec_extension_response__WEBPACK_IMPORTED_MODULE_4__.NextResponse.next();\n  // Flight headers are not overridable / removable so they are applied at the end.\n  const middlewareOverrideHeaders = finalResponse.headers.get(\"x-middleware-override-headers\");\n  const overwrittenHeaders = [];\n  if (middlewareOverrideHeaders) {\n    for (const [key, value] of flightHeaders) {\n      finalResponse.headers.set(`x-middleware-request-${key}`, value);\n      overwrittenHeaders.push(key);\n    }\n    if (overwrittenHeaders.length > 0) {\n      finalResponse.headers.set(\"x-middleware-override-headers\", middlewareOverrideHeaders + \",\" + overwrittenHeaders.join(\",\"));\n    }\n  }\n  return {\n    response: finalResponse,\n    waitUntil: Promise.all(event[_spec_extension_fetch_event__WEBPACK_IMPORTED_MODULE_2__.waitUntilSymbol]),\n    fetchMetrics: request.fetchMetrics\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/web/adapter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/web/edge-route-module-wrapper.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/web/edge-route-module-wrapper.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EdgeRouteModuleWrapper: () => (/* binding */ EdgeRouteModuleWrapper)\n/* harmony export */ });\n/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./globals */ \"(rsc)/./node_modules/next/dist/esm/server/web/globals.js\");\n/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapter */ \"(rsc)/./node_modules/next/dist/esm/server/web/adapter.js\");\n/* harmony import */ var _lib_incremental_cache__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/incremental-cache */ \"(rsc)/./node_modules/next/dist/esm/server/lib/incremental-cache/index.js\");\n/* harmony import */ var _future_route_matchers_route_matcher__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../future/route-matchers/route-matcher */ \"(rsc)/./node_modules/next/dist/esm/server/future/route-matchers/route-matcher.js\");\n/* harmony import */ var _internal_edge_wait_until__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal-edge-wait-until */ \"(rsc)/./node_modules/next/dist/esm/server/web/internal-edge-wait-until.js\");\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../server-utils */ \"(rsc)/./node_modules/next/dist/esm/server/server-utils.js\");\n/* harmony import */ var _shared_lib_router_utils_querystring__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../shared/lib/router/utils/querystring */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/querystring.js\");\n\n\n\n\n\n\n\n/**\n * EdgeRouteModuleWrapper is a wrapper around a route module.\n *\n * Note that this class should only be used in the edge runtime.\n */\nclass EdgeRouteModuleWrapper {\n  /**\n  * The constructor is wrapped with private to ensure that it can only be\n  * constructed by the static wrap method.\n  *\n  * @param routeModule the route module to wrap\n  */\n  constructor(routeModule) {\n    this.routeModule = routeModule;\n    // TODO: (wyattjoh) possibly allow the module to define it's own matcher\n    this.matcher = new _future_route_matchers_route_matcher__WEBPACK_IMPORTED_MODULE_3__.RouteMatcher(routeModule.definition);\n  }\n  /**\n  * This will wrap a module with the EdgeModuleWrapper and return a function\n  * that can be used as a handler for the edge runtime.\n  *\n  * @param module the module to wrap\n  * @param options any options that should be passed to the adapter and\n  *                override the ones passed from the runtime\n  * @returns a function that can be used as a handler for the edge runtime\n  */\n  static wrap(routeModule, options = {}) {\n    // Create the module wrapper.\n    const wrapper = new EdgeRouteModuleWrapper(routeModule);\n    // Return the wrapping function.\n    return opts => {\n      return (0,_adapter__WEBPACK_IMPORTED_MODULE_1__.adapter)({\n        ...opts,\n        ...options,\n        IncrementalCache: _lib_incremental_cache__WEBPACK_IMPORTED_MODULE_2__.IncrementalCache,\n        // Bind the handler method to the wrapper so it still has context.\n        handler: wrapper.handler.bind(wrapper)\n      });\n    };\n  }\n  async handler(request, evt) {\n    const utils = (0,_server_utils__WEBPACK_IMPORTED_MODULE_5__.getUtils)({\n      pageIsDynamic: this.matcher.isDynamic,\n      page: this.matcher.definition.pathname,\n      basePath: request.nextUrl.basePath,\n      // We don't need the `handleRewrite` util, so can just pass an empty object\n      rewrites: {},\n      // only used for rewrites, so setting an arbitrary default value here\n      caseSensitive: false\n    });\n    const {\n      params\n    } = utils.normalizeDynamicRouteParams((0,_shared_lib_router_utils_querystring__WEBPACK_IMPORTED_MODULE_6__.searchParamsToUrlQuery)(request.nextUrl.searchParams));\n    const prerenderManifest = typeof self.__PRERENDER_MANIFEST === \"string\" ? JSON.parse(self.__PRERENDER_MANIFEST) : undefined;\n    // Create the context for the handler. This contains the params from the\n    // match (if any).\n    const context = {\n      params,\n      prerenderManifest: {\n        version: 4,\n        routes: {},\n        dynamicRoutes: {},\n        preview: (prerenderManifest == null ? void 0 : prerenderManifest.preview) || {\n          previewModeEncryptionKey: \"\",\n          previewModeId: \"development-id\",\n          previewModeSigningKey: \"\"\n        },\n        notFoundRoutes: []\n      },\n      renderOpts: {\n        supportsDynamicHTML: true,\n        // App Route's cannot be postponed.\n        experimental: {\n          ppr: false\n        }\n      }\n    };\n    // Get the response from the handler.\n    const res = await this.routeModule.handle(request, context);\n    const waitUntilPromises = [(0,_internal_edge_wait_until__WEBPACK_IMPORTED_MODULE_4__.internal_getCurrentFunctionWaitUntil)()];\n    if (context.renderOpts.waitUntil) {\n      waitUntilPromises.push(context.renderOpts.waitUntil);\n    }\n    evt.waitUntil(Promise.all(waitUntilPromises));\n    return res;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/web/edge-route-module-wrapper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/web/error.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/esm/server/web/error.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PageSignatureError: () => (/* binding */ PageSignatureError),\n/* harmony export */   RemovedPageError: () => (/* binding */ RemovedPageError),\n/* harmony export */   RemovedUAError: () => (/* binding */ RemovedUAError)\n/* harmony export */ });\nclass PageSignatureError extends Error {\n  constructor({\n    page\n  }) {\n    super(`The middleware \"${page}\" accepts an async API directly with the form:\n  \n  export function middleware(request, event) {\n    return NextResponse.redirect('/new-location')\n  }\n  \n  Read more: https://nextjs.org/docs/messages/middleware-new-signature\n  `);\n  }\n}\nclass RemovedPageError extends Error {\n  constructor() {\n    super(`The request.page has been deprecated in favour of \\`URLPattern\\`.\n  Read more: https://nextjs.org/docs/messages/middleware-request-page\n  `);\n  }\n}\nclass RemovedUAError extends Error {\n  constructor() {\n    super(`The request.ua has been removed in favour of \\`userAgent\\` function.\n  Read more: https://nextjs.org/docs/messages/middleware-parse-user-agent\n  `);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvd2ViL2Vycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFPLE1BQU1BLGtCQUFrQixTQUFTQyxLQUFLLENBQUM7RUFDMUNDLFdBQVdBLENBQUM7SUFBRUM7RUFBSyxDQUFDLEVBQUM7SUFDakIsS0FBSyxDQUFFLG1CQUFrQkEsSUFBSztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLENBQUM7RUFDQTtBQUNKO0FBQ08sTUFBTUMsZ0JBQWdCLFNBQVNILEtBQUssQ0FBQztFQUN4Q0MsV0FBV0EsQ0FBQSxFQUFFO0lBQ1QsS0FBSyxDQUFFO0FBQ2Y7QUFDQSxHQUFHLENBQUM7RUFDQTtBQUNKO0FBQ08sTUFBTUcsY0FBYyxTQUFTSixLQUFLLENBQUM7RUFDdENDLFdBQVdBLENBQUEsRUFBRTtJQUNULEtBQUssQ0FBRTtBQUNmO0FBQ0EsR0FBRyxDQUFDO0VBQ0E7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvd2ViL2Vycm9yLmpzP2VhZDMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFBhZ2VTaWduYXR1cmVFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcih7IHBhZ2UgfSl7XG4gICAgICAgIHN1cGVyKGBUaGUgbWlkZGxld2FyZSBcIiR7cGFnZX1cIiBhY2NlcHRzIGFuIGFzeW5jIEFQSSBkaXJlY3RseSB3aXRoIHRoZSBmb3JtOlxuICBcbiAgZXhwb3J0IGZ1bmN0aW9uIG1pZGRsZXdhcmUocmVxdWVzdCwgZXZlbnQpIHtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLnJlZGlyZWN0KCcvbmV3LWxvY2F0aW9uJylcbiAgfVxuICBcbiAgUmVhZCBtb3JlOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy9taWRkbGV3YXJlLW5ldy1zaWduYXR1cmVcbiAgYCk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJlbW92ZWRQYWdlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgc3VwZXIoYFRoZSByZXF1ZXN0LnBhZ2UgaGFzIGJlZW4gZGVwcmVjYXRlZCBpbiBmYXZvdXIgb2YgXFxgVVJMUGF0dGVyblxcYC5cbiAgUmVhZCBtb3JlOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy9taWRkbGV3YXJlLXJlcXVlc3QtcGFnZVxuICBgKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUmVtb3ZlZFVBRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgc3VwZXIoYFRoZSByZXF1ZXN0LnVhIGhhcyBiZWVuIHJlbW92ZWQgaW4gZmF2b3VyIG9mIFxcYHVzZXJBZ2VudFxcYCBmdW5jdGlvbi5cbiAgUmVhZCBtb3JlOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy9taWRkbGV3YXJlLXBhcnNlLXVzZXItYWdlbnRcbiAgYCk7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvci5qcy5tYXAiXSwibmFtZXMiOlsiUGFnZVNpZ25hdHVyZUVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsInBhZ2UiLCJSZW1vdmVkUGFnZUVycm9yIiwiUmVtb3ZlZFVBRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/web/error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/web/globals.js":
/*!**********************************************************!*\
  !*** ./node_modules/next/dist/esm/server/web/globals.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ensureInstrumentationRegistered: () => (/* binding */ ensureInstrumentationRegistered)\n/* harmony export */ });\nasync function registerInstrumentation() {\n  if (\"_ENTRIES\" in globalThis && _ENTRIES.middleware_instrumentation && _ENTRIES.middleware_instrumentation.register) {\n    try {\n      await _ENTRIES.middleware_instrumentation.register();\n    } catch (err) {\n      err.message = `An error occurred while loading instrumentation hook: ${err.message}`;\n      throw err;\n    }\n  }\n}\nlet registerInstrumentationPromise = null;\nfunction ensureInstrumentationRegistered() {\n  if (!registerInstrumentationPromise) {\n    registerInstrumentationPromise = registerInstrumentation();\n  }\n  return registerInstrumentationPromise;\n}\nfunction getUnsupportedModuleErrorMessage(module) {\n  // warning: if you change these messages, you must adjust how react-dev-overlay's middleware detects modules not found\n  return `The edge runtime does not support Node.js '${module}' module.\nLearn More: https://nextjs.org/docs/messages/node-module-in-edge-runtime`;\n}\nfunction __import_unsupported(moduleName) {\n  const proxy = new Proxy(function () {}, {\n    get(_obj, prop) {\n      if (prop === \"then\") {\n        return {};\n      }\n      throw new Error(getUnsupportedModuleErrorMessage(moduleName));\n    },\n    construct() {\n      throw new Error(getUnsupportedModuleErrorMessage(moduleName));\n    },\n    apply(_target, _this, args) {\n      if (typeof args[0] === \"function\") {\n        return args[0](proxy);\n      }\n      throw new Error(getUnsupportedModuleErrorMessage(moduleName));\n    }\n  });\n  return new Proxy({}, {\n    get: () => proxy\n  });\n}\nfunction enhanceGlobals() {\n  // The condition is true when the \"process\" module is provided\n  if (process !== __webpack_require__.g.process) {\n    // prefer local process but global.process has correct \"env\"\n    process.env = __webpack_require__.g.process.env;\n    __webpack_require__.g.process = process;\n  }\n  // to allow building code that import but does not use node.js modules,\n  // webpack will expect this function to exist in global scope\n  Object.defineProperty(globalThis, \"__import_unsupported\", {\n    value: __import_unsupported,\n    enumerable: false,\n    configurable: false\n  });\n  // Eagerly fire instrumentation hook to make the startup faster.\n  void ensureInstrumentationRegistered();\n}\nenhanceGlobals();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvd2ViL2dsb2JhbHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGVBQWVBLHVCQUF1QkEsQ0FBQSxFQUFHO0VBQ3JDLElBQUksVUFBVSxJQUFJQyxVQUFVLElBQUlDLFFBQVEsQ0FBQ0MsMEJBQTBCLElBQUlELFFBQVEsQ0FBQ0MsMEJBQTBCLENBQUNDLFFBQVEsRUFBRTtJQUNqSCxJQUFJO01BQ0EsTUFBTUYsUUFBUSxDQUFDQywwQkFBMEIsQ0FBQ0MsUUFBUSxDQUFDLENBQUM7SUFDeEQsQ0FBQyxDQUFDLE9BQU9DLEdBQUcsRUFBRTtNQUNWQSxHQUFHLENBQUNDLE9BQU8sR0FBSSx5REFBd0RELEdBQUcsQ0FBQ0MsT0FBUSxFQUFDO01BQ3BGLE1BQU1ELEdBQUc7SUFDYjtFQUNKO0FBQ0o7QUFDQSxJQUFJRSw4QkFBOEIsR0FBRyxJQUFJO0FBQ2xDLFNBQVNDLCtCQUErQkEsQ0FBQSxFQUFHO0VBQzlDLElBQUksQ0FBQ0QsOEJBQThCLEVBQUU7SUFDakNBLDhCQUE4QixHQUFHUCx1QkFBdUIsQ0FBQyxDQUFDO0VBQzlEO0VBQ0EsT0FBT08sOEJBQThCO0FBQ3pDO0FBQ0EsU0FBU0UsZ0NBQWdDQSxDQUFDQyxNQUFNLEVBQUU7RUFDOUM7RUFDQSxPQUFRLDhDQUE2Q0EsTUFBTztBQUNoRSx5RUFBeUU7QUFDekU7QUFDQSxTQUFTQyxvQkFBb0JBLENBQUNDLFVBQVUsRUFBRTtFQUN0QyxNQUFNQyxLQUFLLEdBQUcsSUFBSUMsS0FBSyxDQUFDLFlBQVcsQ0FBQyxDQUFDLEVBQUU7SUFDbkNDLEdBQUdBLENBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFO01BQ2IsSUFBSUEsSUFBSSxLQUFLLE1BQU0sRUFBRTtRQUNqQixPQUFPLENBQUMsQ0FBQztNQUNiO01BQ0EsTUFBTSxJQUFJQyxLQUFLLENBQUNULGdDQUFnQyxDQUFDRyxVQUFVLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBQ0RPLFNBQVNBLENBQUEsRUFBSTtNQUNULE1BQU0sSUFBSUQsS0FBSyxDQUFDVCxnQ0FBZ0MsQ0FBQ0csVUFBVSxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUNEUSxLQUFLQSxDQUFFQyxPQUFPLEVBQUVDLEtBQUssRUFBRUMsSUFBSSxFQUFFO01BQ3pCLElBQUksT0FBT0EsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFVBQVUsRUFBRTtRQUMvQixPQUFPQSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUNWLEtBQUssQ0FBQztNQUN6QjtNQUNBLE1BQU0sSUFBSUssS0FBSyxDQUFDVCxnQ0FBZ0MsQ0FBQ0csVUFBVSxDQUFDLENBQUM7SUFDakU7RUFDSixDQUFDLENBQUM7RUFDRixPQUFPLElBQUlFLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUNqQkMsR0FBRyxFQUFFQSxDQUFBLEtBQUlGO0VBQ2IsQ0FBQyxDQUFDO0FBQ047QUFDQSxTQUFTVyxjQUFjQSxDQUFBLEVBQUc7RUFDdEI7RUFDQSxJQUFJQyxPQUFPLEtBQUtDLHFCQUFNLENBQUNELE9BQU8sRUFBRTtJQUM1QjtJQUNBQSxPQUFPLENBQUNFLEdBQUcsR0FBR0QscUJBQU0sQ0FBQ0QsT0FBTyxDQUFDRSxHQUFHO0lBQ2hDRCxxQkFBTSxDQUFDRCxPQUFPLEdBQUdBLE9BQU87RUFDNUI7RUFDQTtFQUNBO0VBQ0FHLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDNUIsVUFBVSxFQUFFLHNCQUFzQixFQUFFO0lBQ3RENkIsS0FBSyxFQUFFbkIsb0JBQW9CO0lBQzNCb0IsVUFBVSxFQUFFLEtBQUs7SUFDakJDLFlBQVksRUFBRTtFQUNsQixDQUFDLENBQUM7RUFDRjtFQUNBLEtBQUt4QiwrQkFBK0IsQ0FBQyxDQUFDO0FBQzFDO0FBQ0FnQixjQUFjLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvd2ViL2dsb2JhbHMuanM/NWM2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJhc3luYyBmdW5jdGlvbiByZWdpc3Rlckluc3RydW1lbnRhdGlvbigpIHtcbiAgICBpZiAoXCJfRU5UUklFU1wiIGluIGdsb2JhbFRoaXMgJiYgX0VOVFJJRVMubWlkZGxld2FyZV9pbnN0cnVtZW50YXRpb24gJiYgX0VOVFJJRVMubWlkZGxld2FyZV9pbnN0cnVtZW50YXRpb24ucmVnaXN0ZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IF9FTlRSSUVTLm1pZGRsZXdhcmVfaW5zdHJ1bWVudGF0aW9uLnJlZ2lzdGVyKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgZXJyLm1lc3NhZ2UgPSBgQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgbG9hZGluZyBpbnN0cnVtZW50YXRpb24gaG9vazogJHtlcnIubWVzc2FnZX1gO1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgfVxufVxubGV0IHJlZ2lzdGVySW5zdHJ1bWVudGF0aW9uUHJvbWlzZSA9IG51bGw7XG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlSW5zdHJ1bWVudGF0aW9uUmVnaXN0ZXJlZCgpIHtcbiAgICBpZiAoIXJlZ2lzdGVySW5zdHJ1bWVudGF0aW9uUHJvbWlzZSkge1xuICAgICAgICByZWdpc3Rlckluc3RydW1lbnRhdGlvblByb21pc2UgPSByZWdpc3Rlckluc3RydW1lbnRhdGlvbigpO1xuICAgIH1cbiAgICByZXR1cm4gcmVnaXN0ZXJJbnN0cnVtZW50YXRpb25Qcm9taXNlO1xufVxuZnVuY3Rpb24gZ2V0VW5zdXBwb3J0ZWRNb2R1bGVFcnJvck1lc3NhZ2UobW9kdWxlKSB7XG4gICAgLy8gd2FybmluZzogaWYgeW91IGNoYW5nZSB0aGVzZSBtZXNzYWdlcywgeW91IG11c3QgYWRqdXN0IGhvdyByZWFjdC1kZXYtb3ZlcmxheSdzIG1pZGRsZXdhcmUgZGV0ZWN0cyBtb2R1bGVzIG5vdCBmb3VuZFxuICAgIHJldHVybiBgVGhlIGVkZ2UgcnVudGltZSBkb2VzIG5vdCBzdXBwb3J0IE5vZGUuanMgJyR7bW9kdWxlfScgbW9kdWxlLlxuTGVhcm4gTW9yZTogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvbm9kZS1tb2R1bGUtaW4tZWRnZS1ydW50aW1lYDtcbn1cbmZ1bmN0aW9uIF9faW1wb3J0X3Vuc3VwcG9ydGVkKG1vZHVsZU5hbWUpIHtcbiAgICBjb25zdCBwcm94eSA9IG5ldyBQcm94eShmdW5jdGlvbigpIHt9LCB7XG4gICAgICAgIGdldCAoX29iaiwgcHJvcCkge1xuICAgICAgICAgICAgaWYgKHByb3AgPT09IFwidGhlblwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGdldFVuc3VwcG9ydGVkTW9kdWxlRXJyb3JNZXNzYWdlKG1vZHVsZU5hbWUpKTtcbiAgICAgICAgfSxcbiAgICAgICAgY29uc3RydWN0ICgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihnZXRVbnN1cHBvcnRlZE1vZHVsZUVycm9yTWVzc2FnZShtb2R1bGVOYW1lKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGFwcGx5IChfdGFyZ2V0LCBfdGhpcywgYXJncykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJnc1swXShwcm94eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZ2V0VW5zdXBwb3J0ZWRNb2R1bGVFcnJvck1lc3NhZ2UobW9kdWxlTmFtZSkpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyBQcm94eSh7fSwge1xuICAgICAgICBnZXQ6ICgpPT5wcm94eVxuICAgIH0pO1xufVxuZnVuY3Rpb24gZW5oYW5jZUdsb2JhbHMoKSB7XG4gICAgLy8gVGhlIGNvbmRpdGlvbiBpcyB0cnVlIHdoZW4gdGhlIFwicHJvY2Vzc1wiIG1vZHVsZSBpcyBwcm92aWRlZFxuICAgIGlmIChwcm9jZXNzICE9PSBnbG9iYWwucHJvY2Vzcykge1xuICAgICAgICAvLyBwcmVmZXIgbG9jYWwgcHJvY2VzcyBidXQgZ2xvYmFsLnByb2Nlc3MgaGFzIGNvcnJlY3QgXCJlbnZcIlxuICAgICAgICBwcm9jZXNzLmVudiA9IGdsb2JhbC5wcm9jZXNzLmVudjtcbiAgICAgICAgZ2xvYmFsLnByb2Nlc3MgPSBwcm9jZXNzO1xuICAgIH1cbiAgICAvLyB0byBhbGxvdyBidWlsZGluZyBjb2RlIHRoYXQgaW1wb3J0IGJ1dCBkb2VzIG5vdCB1c2Ugbm9kZS5qcyBtb2R1bGVzLFxuICAgIC8vIHdlYnBhY2sgd2lsbCBleHBlY3QgdGhpcyBmdW5jdGlvbiB0byBleGlzdCBpbiBnbG9iYWwgc2NvcGVcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZ2xvYmFsVGhpcywgXCJfX2ltcG9ydF91bnN1cHBvcnRlZFwiLCB7XG4gICAgICAgIHZhbHVlOiBfX2ltcG9ydF91bnN1cHBvcnRlZCxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcbiAgICB9KTtcbiAgICAvLyBFYWdlcmx5IGZpcmUgaW5zdHJ1bWVudGF0aW9uIGhvb2sgdG8gbWFrZSB0aGUgc3RhcnR1cCBmYXN0ZXIuXG4gICAgdm9pZCBlbnN1cmVJbnN0cnVtZW50YXRpb25SZWdpc3RlcmVkKCk7XG59XG5lbmhhbmNlR2xvYmFscygpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbG9iYWxzLmpzLm1hcCJdLCJuYW1lcyI6WyJyZWdpc3Rlckluc3RydW1lbnRhdGlvbiIsImdsb2JhbFRoaXMiLCJfRU5UUklFUyIsIm1pZGRsZXdhcmVfaW5zdHJ1bWVudGF0aW9uIiwicmVnaXN0ZXIiLCJlcnIiLCJtZXNzYWdlIiwicmVnaXN0ZXJJbnN0cnVtZW50YXRpb25Qcm9taXNlIiwiZW5zdXJlSW5zdHJ1bWVudGF0aW9uUmVnaXN0ZXJlZCIsImdldFVuc3VwcG9ydGVkTW9kdWxlRXJyb3JNZXNzYWdlIiwibW9kdWxlIiwiX19pbXBvcnRfdW5zdXBwb3J0ZWQiLCJtb2R1bGVOYW1lIiwicHJveHkiLCJQcm94eSIsImdldCIsIl9vYmoiLCJwcm9wIiwiRXJyb3IiLCJjb25zdHJ1Y3QiLCJhcHBseSIsIl90YXJnZXQiLCJfdGhpcyIsImFyZ3MiLCJlbmhhbmNlR2xvYmFscyIsInByb2Nlc3MiLCJnbG9iYWwiLCJlbnYiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/web/globals.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/web/http.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/esm/server/web/http.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HTTP_METHODS: () => (/* binding */ HTTP_METHODS),\n/* harmony export */   isHTTPMethod: () => (/* binding */ isHTTPMethod)\n/* harmony export */ });\n/**\n * List of valid HTTP methods that can be implemented by Next.js's Custom App\n * Routes.\n */const HTTP_METHODS = [\"GET\", \"HEAD\", \"OPTIONS\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"];\n/**\n * Checks to see if the passed string is an HTTP method. Note that this is case\n * sensitive.\n *\n * @param maybeMethod the string that may be an HTTP method\n * @returns true if the string is an HTTP method\n */\nfunction isHTTPMethod(maybeMethod) {\n  return HTTP_METHODS.includes(maybeMethod);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvd2ViL2h0dHAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQSxHQUFXLE1BQU1BLFlBQVksR0FBRyxDQUM1QixLQUFLLEVBQ0wsTUFBTSxFQUNOLFNBQVMsRUFDVCxNQUFNLEVBQ04sS0FBSyxFQUNMLFFBQVEsRUFDUixPQUFPLENBQ1Y7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFXLFNBQVNDLFlBQVlBLENBQUNDLFdBQVcsRUFBRTtFQUMxQyxPQUFPRixZQUFZLENBQUNHLFFBQVEsQ0FBQ0QsV0FBVyxDQUFDO0FBQzdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvZXNtL3NlcnZlci93ZWIvaHR0cC5qcz9kYmQ3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGlzdCBvZiB2YWxpZCBIVFRQIG1ldGhvZHMgdGhhdCBjYW4gYmUgaW1wbGVtZW50ZWQgYnkgTmV4dC5qcydzIEN1c3RvbSBBcHBcbiAqIFJvdXRlcy5cbiAqLyBleHBvcnQgY29uc3QgSFRUUF9NRVRIT0RTID0gW1xuICAgIFwiR0VUXCIsXG4gICAgXCJIRUFEXCIsXG4gICAgXCJPUFRJT05TXCIsXG4gICAgXCJQT1NUXCIsXG4gICAgXCJQVVRcIixcbiAgICBcIkRFTEVURVwiLFxuICAgIFwiUEFUQ0hcIlxuXTtcbi8qKlxuICogQ2hlY2tzIHRvIHNlZSBpZiB0aGUgcGFzc2VkIHN0cmluZyBpcyBhbiBIVFRQIG1ldGhvZC4gTm90ZSB0aGF0IHRoaXMgaXMgY2FzZVxuICogc2Vuc2l0aXZlLlxuICpcbiAqIEBwYXJhbSBtYXliZU1ldGhvZCB0aGUgc3RyaW5nIHRoYXQgbWF5IGJlIGFuIEhUVFAgbWV0aG9kXG4gKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBzdHJpbmcgaXMgYW4gSFRUUCBtZXRob2RcbiAqLyBleHBvcnQgZnVuY3Rpb24gaXNIVFRQTWV0aG9kKG1heWJlTWV0aG9kKSB7XG4gICAgcmV0dXJuIEhUVFBfTUVUSE9EUy5pbmNsdWRlcyhtYXliZU1ldGhvZCk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0dHAuanMubWFwIl0sIm5hbWVzIjpbIkhUVFBfTUVUSE9EUyIsImlzSFRUUE1ldGhvZCIsIm1heWJlTWV0aG9kIiwiaW5jbHVkZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/web/http.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/web/internal-edge-wait-until.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/web/internal-edge-wait-until.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   internal_getCurrentFunctionWaitUntil: () => (/* binding */ internal_getCurrentFunctionWaitUntil),\n/* harmony export */   internal_runWithWaitUntil: () => (/* binding */ internal_runWithWaitUntil)\n/* harmony export */ });\n// An internal module to expose the \"waitUntil\" API to Edge SSR and Edge Route Handler functions.\n// This is highly experimental and subject to change.\n// We still need a global key to bypass Webpack's layering of modules.\nconst GLOBAL_KEY = Symbol.for(\"__next_internal_waitUntil__\");\nconst state =\n// @ts-ignore\nglobalThis[GLOBAL_KEY] || (\n// @ts-ignore\nglobalThis[GLOBAL_KEY] = {\n  waitUntilCounter: 0,\n  waitUntilResolve: undefined,\n  waitUntilPromise: null\n});\n// No matter how many concurrent requests are being handled, we want to make sure\n// that the final promise is only resolved once all of the waitUntil promises have\n// settled.\nfunction resolveOnePromise() {\n  state.waitUntilCounter--;\n  if (state.waitUntilCounter === 0) {\n    state.waitUntilResolve();\n    state.waitUntilPromise = null;\n  }\n}\nfunction internal_getCurrentFunctionWaitUntil() {\n  return state.waitUntilPromise;\n}\nfunction internal_runWithWaitUntil(fn) {\n  const result = fn();\n  if (result && typeof result === \"object\" && \"then\" in result && \"finally\" in result && typeof result.then === \"function\" && typeof result.finally === \"function\") {\n    if (!state.waitUntilCounter) {\n      // Create the promise for the next batch of waitUntil calls.\n      state.waitUntilPromise = new Promise(resolve => {\n        state.waitUntilResolve = resolve;\n      });\n    }\n    state.waitUntilCounter++;\n    return result.finally(() => {\n      resolveOnePromise();\n    });\n  }\n  return result;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvd2ViL2ludGVybmFsLWVkZ2Utd2FpdC11bnRpbC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBLE1BQU1BLFVBQVUsR0FBR0MsTUFBTSxDQUFDQyxHQUFHLENBQUMsNkJBQTZCLENBQUM7QUFDNUQsTUFBTUMsS0FBSztBQUFHO0FBQ2RDLFVBQVUsQ0FBQ0osVUFBVSxDQUFDO0FBQUk7QUFDekJJLFVBQVUsQ0FBQ0osVUFBVSxDQUFDLEdBQUc7RUFDdEJLLGdCQUFnQixFQUFFLENBQUM7RUFDbkJDLGdCQUFnQixFQUFFQyxTQUFTO0VBQzNCQyxnQkFBZ0IsRUFBRTtBQUN0QixDQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxpQkFBaUJBLENBQUEsRUFBRztFQUN6Qk4sS0FBSyxDQUFDRSxnQkFBZ0IsRUFBRTtFQUN4QixJQUFJRixLQUFLLENBQUNFLGdCQUFnQixLQUFLLENBQUMsRUFBRTtJQUM5QkYsS0FBSyxDQUFDRyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3hCSCxLQUFLLENBQUNLLGdCQUFnQixHQUFHLElBQUk7RUFDakM7QUFDSjtBQUNPLFNBQVNFLG9DQUFvQ0EsQ0FBQSxFQUFHO0VBQ25ELE9BQU9QLEtBQUssQ0FBQ0ssZ0JBQWdCO0FBQ2pDO0FBQ08sU0FBU0cseUJBQXlCQSxDQUFDQyxFQUFFLEVBQUU7RUFDMUMsTUFBTUMsTUFBTSxHQUFHRCxFQUFFLENBQUMsQ0FBQztFQUNuQixJQUFJQyxNQUFNLElBQUksT0FBT0EsTUFBTSxLQUFLLFFBQVEsSUFBSSxNQUFNLElBQUlBLE1BQU0sSUFBSSxTQUFTLElBQUlBLE1BQU0sSUFBSSxPQUFPQSxNQUFNLENBQUNDLElBQUksS0FBSyxVQUFVLElBQUksT0FBT0QsTUFBTSxDQUFDRSxPQUFPLEtBQUssVUFBVSxFQUFFO0lBQzlKLElBQUksQ0FBQ1osS0FBSyxDQUFDRSxnQkFBZ0IsRUFBRTtNQUN6QjtNQUNBRixLQUFLLENBQUNLLGdCQUFnQixHQUFHLElBQUlRLE9BQU8sQ0FBRUMsT0FBTyxJQUFHO1FBQzVDZCxLQUFLLENBQUNHLGdCQUFnQixHQUFHVyxPQUFPO01BQ3BDLENBQUMsQ0FBQztJQUNOO0lBQ0FkLEtBQUssQ0FBQ0UsZ0JBQWdCLEVBQUU7SUFDeEIsT0FBT1EsTUFBTSxDQUFDRSxPQUFPLENBQUMsTUFBSTtNQUN0Qk4saUJBQWlCLENBQUMsQ0FBQztJQUN2QixDQUFDLENBQUM7RUFDTjtFQUNBLE9BQU9JLE1BQU07QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2VydmVyL3dlYi9pbnRlcm5hbC1lZGdlLXdhaXQtdW50aWwuanM/MjE5OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBbiBpbnRlcm5hbCBtb2R1bGUgdG8gZXhwb3NlIHRoZSBcIndhaXRVbnRpbFwiIEFQSSB0byBFZGdlIFNTUiBhbmQgRWRnZSBSb3V0ZSBIYW5kbGVyIGZ1bmN0aW9ucy5cbi8vIFRoaXMgaXMgaGlnaGx5IGV4cGVyaW1lbnRhbCBhbmQgc3ViamVjdCB0byBjaGFuZ2UuXG4vLyBXZSBzdGlsbCBuZWVkIGEgZ2xvYmFsIGtleSB0byBieXBhc3MgV2VicGFjaydzIGxheWVyaW5nIG9mIG1vZHVsZXMuXG5jb25zdCBHTE9CQUxfS0VZID0gU3ltYm9sLmZvcihcIl9fbmV4dF9pbnRlcm5hbF93YWl0VW50aWxfX1wiKTtcbmNvbnN0IHN0YXRlID0gLy8gQHRzLWlnbm9yZVxuZ2xvYmFsVGhpc1tHTE9CQUxfS0VZXSB8fCAvLyBAdHMtaWdub3JlXG4oZ2xvYmFsVGhpc1tHTE9CQUxfS0VZXSA9IHtcbiAgICB3YWl0VW50aWxDb3VudGVyOiAwLFxuICAgIHdhaXRVbnRpbFJlc29sdmU6IHVuZGVmaW5lZCxcbiAgICB3YWl0VW50aWxQcm9taXNlOiBudWxsXG59KTtcbi8vIE5vIG1hdHRlciBob3cgbWFueSBjb25jdXJyZW50IHJlcXVlc3RzIGFyZSBiZWluZyBoYW5kbGVkLCB3ZSB3YW50IHRvIG1ha2Ugc3VyZVxuLy8gdGhhdCB0aGUgZmluYWwgcHJvbWlzZSBpcyBvbmx5IHJlc29sdmVkIG9uY2UgYWxsIG9mIHRoZSB3YWl0VW50aWwgcHJvbWlzZXMgaGF2ZVxuLy8gc2V0dGxlZC5cbmZ1bmN0aW9uIHJlc29sdmVPbmVQcm9taXNlKCkge1xuICAgIHN0YXRlLndhaXRVbnRpbENvdW50ZXItLTtcbiAgICBpZiAoc3RhdGUud2FpdFVudGlsQ291bnRlciA9PT0gMCkge1xuICAgICAgICBzdGF0ZS53YWl0VW50aWxSZXNvbHZlKCk7XG4gICAgICAgIHN0YXRlLndhaXRVbnRpbFByb21pc2UgPSBudWxsO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpbnRlcm5hbF9nZXRDdXJyZW50RnVuY3Rpb25XYWl0VW50aWwoKSB7XG4gICAgcmV0dXJuIHN0YXRlLndhaXRVbnRpbFByb21pc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gaW50ZXJuYWxfcnVuV2l0aFdhaXRVbnRpbChmbikge1xuICAgIGNvbnN0IHJlc3VsdCA9IGZuKCk7XG4gICAgaWYgKHJlc3VsdCAmJiB0eXBlb2YgcmVzdWx0ID09PSBcIm9iamVjdFwiICYmIFwidGhlblwiIGluIHJlc3VsdCAmJiBcImZpbmFsbHlcIiBpbiByZXN1bHQgJiYgdHlwZW9mIHJlc3VsdC50aGVuID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIHJlc3VsdC5maW5hbGx5ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgaWYgKCFzdGF0ZS53YWl0VW50aWxDb3VudGVyKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIHByb21pc2UgZm9yIHRoZSBuZXh0IGJhdGNoIG9mIHdhaXRVbnRpbCBjYWxscy5cbiAgICAgICAgICAgIHN0YXRlLndhaXRVbnRpbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSk9PntcbiAgICAgICAgICAgICAgICBzdGF0ZS53YWl0VW50aWxSZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLndhaXRVbnRpbENvdW50ZXIrKztcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5maW5hbGx5KCgpPT57XG4gICAgICAgICAgICByZXNvbHZlT25lUHJvbWlzZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJuYWwtZWRnZS13YWl0LXVudGlsLmpzLm1hcCJdLCJuYW1lcyI6WyJHTE9CQUxfS0VZIiwiU3ltYm9sIiwiZm9yIiwic3RhdGUiLCJnbG9iYWxUaGlzIiwid2FpdFVudGlsQ291bnRlciIsIndhaXRVbnRpbFJlc29sdmUiLCJ1bmRlZmluZWQiLCJ3YWl0VW50aWxQcm9taXNlIiwicmVzb2x2ZU9uZVByb21pc2UiLCJpbnRlcm5hbF9nZXRDdXJyZW50RnVuY3Rpb25XYWl0VW50aWwiLCJpbnRlcm5hbF9ydW5XaXRoV2FpdFVudGlsIiwiZm4iLCJyZXN1bHQiLCJ0aGVuIiwiZmluYWxseSIsIlByb21pc2UiLCJyZXNvbHZlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/web/internal-edge-wait-until.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/web/next-url.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/esm/server/web/next-url.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NextURL: () => (/* binding */ NextURL)\n/* harmony export */ });\n/* harmony import */ var _shared_lib_i18n_detect_domain_locale__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/lib/i18n/detect-domain-locale */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/i18n/detect-domain-locale.js\");\n/* harmony import */ var _shared_lib_router_utils_format_next_pathname_info__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/lib/router/utils/format-next-pathname-info */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/format-next-pathname-info.js\");\n/* harmony import */ var _shared_lib_get_hostname__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/lib/get-hostname */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/get-hostname.js\");\n/* harmony import */ var _shared_lib_router_utils_get_next_pathname_info__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shared/lib/router/utils/get-next-pathname-info */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/get-next-pathname-info.js\");\n\n\n\n\nconst REGEX_LOCALHOST_HOSTNAME = /(?!^https?:\\/\\/)(127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}|\\[::1\\]|localhost)/;\nfunction parseURL(url, base) {\n  return new URL(String(url).replace(REGEX_LOCALHOST_HOSTNAME, \"localhost\"), base && String(base).replace(REGEX_LOCALHOST_HOSTNAME, \"localhost\"));\n}\nconst Internal = Symbol(\"NextURLInternal\");\nclass NextURL {\n  constructor(input, baseOrOpts, opts) {\n    let base;\n    let options;\n    if (typeof baseOrOpts === \"object\" && \"pathname\" in baseOrOpts || typeof baseOrOpts === \"string\") {\n      base = baseOrOpts;\n      options = opts || {};\n    } else {\n      options = opts || baseOrOpts || {};\n    }\n    this[Internal] = {\n      url: parseURL(input, base ?? options.base),\n      options: options,\n      basePath: \"\"\n    };\n    this.analyze();\n  }\n  analyze() {\n    var _this_Internal_options_nextConfig_i18n, _this_Internal_options_nextConfig, _this_Internal_domainLocale, _this_Internal_options_nextConfig_i18n1, _this_Internal_options_nextConfig1;\n    const info = (0,_shared_lib_router_utils_get_next_pathname_info__WEBPACK_IMPORTED_MODULE_3__.getNextPathnameInfo)(this[Internal].url.pathname, {\n      nextConfig: this[Internal].options.nextConfig,\n      parseData: !undefined,\n      i18nProvider: this[Internal].options.i18nProvider\n    });\n    const hostname = (0,_shared_lib_get_hostname__WEBPACK_IMPORTED_MODULE_2__.getHostname)(this[Internal].url, this[Internal].options.headers);\n    this[Internal].domainLocale = this[Internal].options.i18nProvider ? this[Internal].options.i18nProvider.detectDomainLocale(hostname) : (0,_shared_lib_i18n_detect_domain_locale__WEBPACK_IMPORTED_MODULE_0__.detectDomainLocale)((_this_Internal_options_nextConfig = this[Internal].options.nextConfig) == null ? void 0 : (_this_Internal_options_nextConfig_i18n = _this_Internal_options_nextConfig.i18n) == null ? void 0 : _this_Internal_options_nextConfig_i18n.domains, hostname);\n    const defaultLocale = ((_this_Internal_domainLocale = this[Internal].domainLocale) == null ? void 0 : _this_Internal_domainLocale.defaultLocale) || ((_this_Internal_options_nextConfig1 = this[Internal].options.nextConfig) == null ? void 0 : (_this_Internal_options_nextConfig_i18n1 = _this_Internal_options_nextConfig1.i18n) == null ? void 0 : _this_Internal_options_nextConfig_i18n1.defaultLocale);\n    this[Internal].url.pathname = info.pathname;\n    this[Internal].defaultLocale = defaultLocale;\n    this[Internal].basePath = info.basePath ?? \"\";\n    this[Internal].buildId = info.buildId;\n    this[Internal].locale = info.locale ?? defaultLocale;\n    this[Internal].trailingSlash = info.trailingSlash;\n  }\n  formatPathname() {\n    return (0,_shared_lib_router_utils_format_next_pathname_info__WEBPACK_IMPORTED_MODULE_1__.formatNextPathnameInfo)({\n      basePath: this[Internal].basePath,\n      buildId: this[Internal].buildId,\n      defaultLocale: !this[Internal].options.forceLocale ? this[Internal].defaultLocale : undefined,\n      locale: this[Internal].locale,\n      pathname: this[Internal].url.pathname,\n      trailingSlash: this[Internal].trailingSlash\n    });\n  }\n  formatSearch() {\n    return this[Internal].url.search;\n  }\n  get buildId() {\n    return this[Internal].buildId;\n  }\n  set buildId(buildId) {\n    this[Internal].buildId = buildId;\n  }\n  get locale() {\n    return this[Internal].locale ?? \"\";\n  }\n  set locale(locale) {\n    var _this_Internal_options_nextConfig_i18n, _this_Internal_options_nextConfig;\n    if (!this[Internal].locale || !((_this_Internal_options_nextConfig = this[Internal].options.nextConfig) == null ? void 0 : (_this_Internal_options_nextConfig_i18n = _this_Internal_options_nextConfig.i18n) == null ? void 0 : _this_Internal_options_nextConfig_i18n.locales.includes(locale))) {\n      throw new TypeError(`The NextURL configuration includes no locale \"${locale}\"`);\n    }\n    this[Internal].locale = locale;\n  }\n  get defaultLocale() {\n    return this[Internal].defaultLocale;\n  }\n  get domainLocale() {\n    return this[Internal].domainLocale;\n  }\n  get searchParams() {\n    return this[Internal].url.searchParams;\n  }\n  get host() {\n    return this[Internal].url.host;\n  }\n  set host(value) {\n    this[Internal].url.host = value;\n  }\n  get hostname() {\n    return this[Internal].url.hostname;\n  }\n  set hostname(value) {\n    this[Internal].url.hostname = value;\n  }\n  get port() {\n    return this[Internal].url.port;\n  }\n  set port(value) {\n    this[Internal].url.port = value;\n  }\n  get protocol() {\n    return this[Internal].url.protocol;\n  }\n  set protocol(value) {\n    this[Internal].url.protocol = value;\n  }\n  get href() {\n    const pathname = this.formatPathname();\n    const search = this.formatSearch();\n    return `${this.protocol}//${this.host}${pathname}${search}${this.hash}`;\n  }\n  set href(url) {\n    this[Internal].url = parseURL(url);\n    this.analyze();\n  }\n  get origin() {\n    return this[Internal].url.origin;\n  }\n  get pathname() {\n    return this[Internal].url.pathname;\n  }\n  set pathname(value) {\n    this[Internal].url.pathname = value;\n  }\n  get hash() {\n    return this[Internal].url.hash;\n  }\n  set hash(value) {\n    this[Internal].url.hash = value;\n  }\n  get search() {\n    return this[Internal].url.search;\n  }\n  set search(value) {\n    this[Internal].url.search = value;\n  }\n  get password() {\n    return this[Internal].url.password;\n  }\n  set password(value) {\n    this[Internal].url.password = value;\n  }\n  get username() {\n    return this[Internal].url.username;\n  }\n  set username(value) {\n    this[Internal].url.username = value;\n  }\n  get basePath() {\n    return this[Internal].basePath;\n  }\n  set basePath(value) {\n    this[Internal].basePath = value.startsWith(\"/\") ? value : `/${value}`;\n  }\n  toString() {\n    return this.href;\n  }\n  toJSON() {\n    return this.href;\n  }\n  [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n    return {\n      href: this.href,\n      origin: this.origin,\n      protocol: this.protocol,\n      username: this.username,\n      password: this.password,\n      host: this.host,\n      hostname: this.hostname,\n      port: this.port,\n      pathname: this.pathname,\n      search: this.search,\n      searchParams: this.searchParams,\n      hash: this.hash\n    };\n  }\n  clone() {\n    return new NextURL(String(this), this[Internal].options);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/web/next-url.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/adapters/headers.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/web/spec-extension/adapters/headers.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HeadersAdapter: () => (/* binding */ HeadersAdapter),\n/* harmony export */   ReadonlyHeadersError: () => (/* binding */ ReadonlyHeadersError)\n/* harmony export */ });\n/* harmony import */ var _reflect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./reflect */ \"(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/adapters/reflect.js\");\n\n/**\n * @internal\n */\nclass ReadonlyHeadersError extends Error {\n  constructor() {\n    super(\"Headers cannot be modified. Read more: https://nextjs.org/docs/app/api-reference/functions/headers\");\n  }\n  static callable() {\n    throw new ReadonlyHeadersError();\n  }\n}\nclass HeadersAdapter extends Headers {\n  constructor(headers) {\n    // We've already overridden the methods that would be called, so we're just\n    // calling the super constructor to ensure that the instanceof check works.\n    super();\n    this.headers = new Proxy(headers, {\n      get(target, prop, receiver) {\n        // Because this is just an object, we expect that all \"get\" operations\n        // are for properties. If it's a \"get\" for a symbol, we'll just return\n        // the symbol.\n        if (typeof prop === \"symbol\") {\n          return _reflect__WEBPACK_IMPORTED_MODULE_0__.ReflectAdapter.get(target, prop, receiver);\n        }\n        const lowercased = prop.toLowerCase();\n        // Let's find the original casing of the key. This assumes that there is\n        // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n        // headers object.\n        const original = Object.keys(headers).find(o => o.toLowerCase() === lowercased);\n        // If the original casing doesn't exist, return undefined.\n        if (typeof original === \"undefined\") return;\n        // If the original casing exists, return the value.\n        return _reflect__WEBPACK_IMPORTED_MODULE_0__.ReflectAdapter.get(target, original, receiver);\n      },\n      set(target, prop, value, receiver) {\n        if (typeof prop === \"symbol\") {\n          return _reflect__WEBPACK_IMPORTED_MODULE_0__.ReflectAdapter.set(target, prop, value, receiver);\n        }\n        const lowercased = prop.toLowerCase();\n        // Let's find the original casing of the key. This assumes that there is\n        // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n        // headers object.\n        const original = Object.keys(headers).find(o => o.toLowerCase() === lowercased);\n        // If the original casing doesn't exist, use the prop as the key.\n        return _reflect__WEBPACK_IMPORTED_MODULE_0__.ReflectAdapter.set(target, original ?? prop, value, receiver);\n      },\n      has(target, prop) {\n        if (typeof prop === \"symbol\") return _reflect__WEBPACK_IMPORTED_MODULE_0__.ReflectAdapter.has(target, prop);\n        const lowercased = prop.toLowerCase();\n        // Let's find the original casing of the key. This assumes that there is\n        // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n        // headers object.\n        const original = Object.keys(headers).find(o => o.toLowerCase() === lowercased);\n        // If the original casing doesn't exist, return false.\n        if (typeof original === \"undefined\") return false;\n        // If the original casing exists, return true.\n        return _reflect__WEBPACK_IMPORTED_MODULE_0__.ReflectAdapter.has(target, original);\n      },\n      deleteProperty(target, prop) {\n        if (typeof prop === \"symbol\") return _reflect__WEBPACK_IMPORTED_MODULE_0__.ReflectAdapter.deleteProperty(target, prop);\n        const lowercased = prop.toLowerCase();\n        // Let's find the original casing of the key. This assumes that there is\n        // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n        // headers object.\n        const original = Object.keys(headers).find(o => o.toLowerCase() === lowercased);\n        // If the original casing doesn't exist, return true.\n        if (typeof original === \"undefined\") return true;\n        // If the original casing exists, delete the property.\n        return _reflect__WEBPACK_IMPORTED_MODULE_0__.ReflectAdapter.deleteProperty(target, original);\n      }\n    });\n  }\n  /**\n  * Seals a Headers instance to prevent modification by throwing an error when\n  * any mutating method is called.\n  */\n  static seal(headers) {\n    return new Proxy(headers, {\n      get(target, prop, receiver) {\n        switch (prop) {\n          case \"append\":\n          case \"delete\":\n          case \"set\":\n            return ReadonlyHeadersError.callable;\n          default:\n            return _reflect__WEBPACK_IMPORTED_MODULE_0__.ReflectAdapter.get(target, prop, receiver);\n        }\n      }\n    });\n  }\n  /**\n  * Merges a header value into a string. This stores multiple values as an\n  * array, so we need to merge them into a string.\n  *\n  * @param value a header value\n  * @returns a merged header value (a string)\n  */\n  merge(value) {\n    if (Array.isArray(value)) return value.join(\", \");\n    return value;\n  }\n  /**\n  * Creates a Headers instance from a plain object or a Headers instance.\n  *\n  * @param headers a plain object or a Headers instance\n  * @returns a headers instance\n  */\n  static from(headers) {\n    if (headers instanceof Headers) return headers;\n    return new HeadersAdapter(headers);\n  }\n  append(name, value) {\n    const existing = this.headers[name];\n    if (typeof existing === \"string\") {\n      this.headers[name] = [existing, value];\n    } else if (Array.isArray(existing)) {\n      existing.push(value);\n    } else {\n      this.headers[name] = value;\n    }\n  }\n  delete(name) {\n    delete this.headers[name];\n  }\n  get(name) {\n    const value = this.headers[name];\n    if (typeof value !== \"undefined\") return this.merge(value);\n    return null;\n  }\n  has(name) {\n    return typeof this.headers[name] !== \"undefined\";\n  }\n  set(name, value) {\n    this.headers[name] = value;\n  }\n  forEach(callbackfn, thisArg) {\n    for (const [name, value] of this.entries()) {\n      callbackfn.call(thisArg, value, name, this);\n    }\n  }\n  *entries() {\n    for (const key of Object.keys(this.headers)) {\n      const name = key.toLowerCase();\n      // We assert here that this is a string because we got it from the\n      // Object.keys() call above.\n      const value = this.get(name);\n      yield [name, value];\n    }\n  }\n  *keys() {\n    for (const key of Object.keys(this.headers)) {\n      const name = key.toLowerCase();\n      yield name;\n    }\n  }\n  *values() {\n    for (const key of Object.keys(this.headers)) {\n      // We assert here that this is a string because we got it from the\n      // Object.keys() call above.\n      const value = this.get(key);\n      yield value;\n    }\n  }\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvd2ViL3NwZWMtZXh0ZW5zaW9uL2FkYXB0ZXJzL2hlYWRlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUFXLE1BQU1DLG9CQUFvQixTQUFTQyxLQUFLLENBQUM7RUFDaERDLFdBQVdBLENBQUEsRUFBRTtJQUNULEtBQUssQ0FBQyxvR0FBb0csQ0FBQztFQUMvRztFQUNBLE9BQU9DLFFBQVFBLENBQUEsRUFBRztJQUNkLE1BQU0sSUFBSUgsb0JBQW9CLENBQUMsQ0FBQztFQUNwQztBQUNKO0FBQ08sTUFBTUksY0FBYyxTQUFTQyxPQUFPLENBQUM7RUFDeENILFdBQVdBLENBQUNJLE9BQU8sRUFBQztJQUNoQjtJQUNBO0lBQ0EsS0FBSyxDQUFDLENBQUM7SUFDUCxJQUFJLENBQUNBLE9BQU8sR0FBRyxJQUFJQyxLQUFLLENBQUNELE9BQU8sRUFBRTtNQUM5QkUsR0FBR0EsQ0FBRUMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLFFBQVEsRUFBRTtRQUN6QjtRQUNBO1FBQ0E7UUFDQSxJQUFJLE9BQU9ELElBQUksS0FBSyxRQUFRLEVBQUU7VUFDMUIsT0FBT1gsb0RBQWMsQ0FBQ1MsR0FBRyxDQUFDQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsUUFBUSxDQUFDO1FBQ3JEO1FBQ0EsTUFBTUMsVUFBVSxHQUFHRixJQUFJLENBQUNHLFdBQVcsQ0FBQyxDQUFDO1FBQ3JDO1FBQ0E7UUFDQTtRQUNBLE1BQU1DLFFBQVEsR0FBR0MsTUFBTSxDQUFDQyxJQUFJLENBQUNWLE9BQU8sQ0FBQyxDQUFDVyxJQUFJLENBQUVDLENBQUMsSUFBR0EsQ0FBQyxDQUFDTCxXQUFXLENBQUMsQ0FBQyxLQUFLRCxVQUFVLENBQUM7UUFDL0U7UUFDQSxJQUFJLE9BQU9FLFFBQVEsS0FBSyxXQUFXLEVBQUU7UUFDckM7UUFDQSxPQUFPZixvREFBYyxDQUFDUyxHQUFHLENBQUNDLE1BQU0s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QUFNLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUNWLE9BQU8sQ0FBQyxFQUFDO01BQ3hDO01BQ0E7TUFDQSxNQUFNYyxLQUFLLEdBQUcsSUFBSSxDQUFDWixHQUFHLENBQUMrQixHQUFHLENBQUM7TUFDM0IsTUFBTW5CLEtBQUs7SUFDZjtFQUNKO0VBQ0EsQ0FBQ3FCLE1BQU0sQ0FBQ0MsUUFBUSxJQUFJO0lBQ2hCLE9BQU8sSUFBSSxDQUFDTCxPQUFPLENBQUMsQ0FBQztFQUN6QjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvZXNtL3NlcnZlci93ZWIvc3BlYy1leHRlbnNpb24vYWRhcHRlcnMvaGVhZGVycy5qcz8xZGE4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlZmxlY3RBZGFwdGVyIH0gZnJvbSBcIi4vcmVmbGVjdFwiO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqLyBleHBvcnQgY2xhc3MgUmVhZG9ubHlIZWFkZXJzRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgc3VwZXIoXCJIZWFkZXJzIGNhbm5vdCBiZSBtb2RpZmllZC4gUmVhZCBtb3JlOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9hcHAvYXBpLXJlZmVyZW5jZS9mdW5jdGlvbnMvaGVhZGVyc1wiKTtcbiAgICB9XG4gICAgc3RhdGljIGNhbGxhYmxlKCkge1xuICAgICAgICB0aHJvdyBuZXcgUmVhZG9ubHlIZWFkZXJzRXJyb3IoKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSGVhZGVyc0FkYXB0ZXIgZXh0ZW5kcyBIZWFkZXJzIHtcbiAgICBjb25zdHJ1Y3RvcihoZWFkZXJzKXtcbiAgICAgICAgLy8gV2UndmUgYWxyZWFkeSBvdmVycmlkZGVuIHRoZSBtZXRob2RzIHRoYXQgd291bGQgYmUgY2FsbGVkLCBzbyB3ZSdyZSBqdXN0XG4gICAgICAgIC8vIGNhbGxpbmcgdGhlIHN1cGVyIGNvbnN0cnVjdG9yIHRvIGVuc3VyZSB0aGF0IHRoZSBpbnN0YW5jZW9mIGNoZWNrIHdvcmtzLlxuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgUHJveHkoaGVhZGVycywge1xuICAgICAgICAgICAgZ2V0ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICAgICAgICAgICAgLy8gQmVjYXVzZSB0aGlzIGlzIGp1c3QgYW4gb2JqZWN0LCB3ZSBleHBlY3QgdGhhdCBhbGwgXCJnZXRcIiBvcGVyYXRpb25zXG4gICAgICAgICAgICAgICAgLy8gYXJlIGZvciBwcm9wZXJ0aWVzLiBJZiBpdCdzIGEgXCJnZXRcIiBmb3IgYSBzeW1ib2wsIHdlJ2xsIGp1c3QgcmV0dXJuXG4gICAgICAgICAgICAgICAgLy8gdGhlIHN5bWJvbC5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHByb3AgPT09IFwic3ltYm9sXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3RBZGFwdGVyLmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgbG93ZXJjYXNlZCA9IHByb3AudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAvLyBMZXQncyBmaW5kIHRoZSBvcmlnaW5hbCBjYXNpbmcgb2YgdGhlIGtleS4gVGhpcyBhc3N1bWVzIHRoYXQgdGhlcmUgaXNcbiAgICAgICAgICAgICAgICAvLyBubyBtaXhlZCBjYXNlIGtleXMgKGUuZy4gXCJDb250ZW50LVR5cGVcIiBhbmQgXCJjb250ZW50LXR5cGVcIikgaW4gdGhlXG4gICAgICAgICAgICAgICAgLy8gaGVhZGVycyBvYmplY3QuXG4gICAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWwgPSBPYmplY3Qua2V5cyhoZWFkZXJzKS5maW5kKChvKT0+by50b0xvd2VyQ2FzZSgpID09PSBsb3dlcmNhc2VkKTtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgb3JpZ2luYWwgY2FzaW5nIGRvZXNuJ3QgZXhpc3QsIHJldHVybiB1bmRlZmluZWQuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcmlnaW5hbCA9PT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuO1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBvcmlnaW5hbCBjYXNpbmcgZXhpc3RzLCByZXR1cm4gdGhlIHZhbHVlLlxuICAgICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0QWRhcHRlci5nZXQodGFyZ2V0LCBvcmlnaW5hbCwgcmVjZWl2ZXIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldCAodGFyZ2V0LCBwcm9wLCB2YWx1ZSwgcmVjZWl2ZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHByb3AgPT09IFwic3ltYm9sXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3RBZGFwdGVyLnNldCh0YXJnZXQsIHByb3AsIHZhbHVlLCByZWNlaXZlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGxvd2VyY2FzZWQgPSBwcm9wLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgLy8gTGV0J3MgZmluZCB0aGUgb3JpZ2luYWwgY2FzaW5nIG9mIHRoZSBrZXkuIFRoaXMgYXNzdW1lcyB0aGF0IHRoZXJlIGlzXG4gICAgICAgICAgICAgICAgLy8gbm8gbWl4ZWQgY2FzZSBrZXlzIChlLmcuIFwiQ29udGVudC1UeXBlXCIgYW5kIFwiY29udGVudC10eXBlXCIpIGluIHRoZVxuICAgICAgICAgICAgICAgIC8vIGhlYWRlcnMgb2JqZWN0LlxuICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsID0gT2JqZWN0LmtleXMoaGVhZGVycykuZmluZCgobyk9Pm8udG9Mb3dlckNhc2UoKSA9PT0gbG93ZXJjYXNlZCk7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIG9yaWdpbmFsIGNhc2luZyBkb2Vzbid0IGV4aXN0LCB1c2UgdGhlIHByb3AgYXMgdGhlIGtleS5cbiAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdEFkYXB0ZXIuc2V0KHRhcmdldCwgb3JpZ2luYWwgPz8gcHJvcCwgdmFsdWUsIHJlY2VpdmVyKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXMgKHRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcCA9PT0gXCJzeW1ib2xcIikgcmV0dXJuIFJlZmxlY3RBZGFwdGVyLmhhcyh0YXJnZXQsIHByb3ApO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvd2VyY2FzZWQgPSBwcm9wLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgLy8gTGV0J3MgZmluZCB0aGUgb3JpZ2luYWwgY2FzaW5nIG9mIHRoZSBrZXkuIFRoaXMgYXNzdW1lcyB0aGF0IHRoZXJlIGlzXG4gICAgICAgICAgICAgICAgLy8gbm8gbWl4ZWQgY2FzZSBrZXlzIChlLmcuIFwiQ29udGVudC1UeXBlXCIgYW5kIFwiY29udGVudC10eXBlXCIpIGluIHRoZVxuICAgICAgICAgICAgICAgIC8vIGhlYWRlcnMgb2JqZWN0LlxuICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsID0gT2JqZWN0LmtleXMoaGVhZGVycykuZmluZCgobyk9Pm8udG9Mb3dlckNhc2UoKSA9PT0gbG93ZXJjYXNlZCk7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIG9yaWdpbmFsIGNhc2luZyBkb2Vzbid0IGV4aXN0LCByZXR1cm4gZmFsc2UuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcmlnaW5hbCA9PT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBvcmlnaW5hbCBjYXNpbmcgZXhpc3RzLCByZXR1cm4gdHJ1ZS5cbiAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdEFkYXB0ZXIuaGFzKHRhcmdldCwgb3JpZ2luYWwpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlbGV0ZVByb3BlcnR5ICh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHByb3AgPT09IFwic3ltYm9sXCIpIHJldHVybiBSZWZsZWN0QWRhcHRlci5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3ApO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvd2VyY2FzZWQgPSBwcm9wLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgLy8gTGV0J3MgZmluZCB0aGUgb3JpZ2luYWwgY2FzaW5nIG9mIHRoZSBrZXkuIFRoaXMgYXNzdW1lcyB0aGF0IHRoZXJlIGlzXG4gICAgICAgICAgICAgICAgLy8gbm8gbWl4ZWQgY2FzZSBrZXlzIChlLmcuIFwiQ29udGVudC1UeXBlXCIgYW5kIFwiY29udGVudC10eXBlXCIpIGluIHRoZVxuICAgICAgICAgICAgICAgIC8vIGhlYWRlcnMgb2JqZWN0LlxuICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsID0gT2JqZWN0LmtleXMoaGVhZGVycykuZmluZCgobyk9Pm8udG9Mb3dlckNhc2UoKSA9PT0gbG93ZXJjYXNlZCk7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIG9yaWdpbmFsIGNhc2luZyBkb2Vzbid0IGV4aXN0LCByZXR1cm4gdHJ1ZS5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9yaWdpbmFsID09PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgb3JpZ2luYWwgY2FzaW5nIGV4aXN0cywgZGVsZXRlIHRoZSBwcm9wZXJ0eS5cbiAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdEFkYXB0ZXIuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBvcmlnaW5hbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICogU2VhbHMgYSBIZWFkZXJzIGluc3RhbmNlIHRvIHByZXZlbnQgbW9kaWZpY2F0aW9uIGJ5IHRocm93aW5nIGFuIGVycm9yIHdoZW5cbiAgICogYW55IG11dGF0aW5nIG1ldGhvZCBpcyBjYWxsZWQuXG4gICAqLyBzdGF0aWMgc2VhbChoZWFkZXJzKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJveHkoaGVhZGVycywge1xuICAgICAgICAgICAgZ2V0ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoKHByb3Ape1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYXBwZW5kXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkZWxldGVcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNldFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlYWRvbmx5SGVhZGVyc0Vycm9yLmNhbGxhYmxlO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3RBZGFwdGVyLmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICogTWVyZ2VzIGEgaGVhZGVyIHZhbHVlIGludG8gYSBzdHJpbmcuIFRoaXMgc3RvcmVzIG11bHRpcGxlIHZhbHVlcyBhcyBhblxuICAgKiBhcnJheSwgc28gd2UgbmVlZCB0byBtZXJnZSB0aGVtIGludG8gYSBzdHJpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB2YWx1ZSBhIGhlYWRlciB2YWx1ZVxuICAgKiBAcmV0dXJucyBhIG1lcmdlZCBoZWFkZXIgdmFsdWUgKGEgc3RyaW5nKVxuICAgKi8gbWVyZ2UodmFsdWUpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSByZXR1cm4gdmFsdWUuam9pbihcIiwgXCIpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgKiBDcmVhdGVzIGEgSGVhZGVycyBpbnN0YW5jZSBmcm9tIGEgcGxhaW4gb2JqZWN0IG9yIGEgSGVhZGVycyBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIGhlYWRlcnMgYSBwbGFpbiBvYmplY3Qgb3IgYSBIZWFkZXJzIGluc3RhbmNlXG4gICAqIEByZXR1cm5zIGEgaGVhZGVycyBpbnN0YW5jZVxuICAgKi8gc3RhdGljIGZyb20oaGVhZGVycykge1xuICAgICAgICBpZiAoaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpIHJldHVybiBoZWFkZXJzO1xuICAgICAgICByZXR1cm4gbmV3IEhlYWRlcnNBZGFwdGVyKGhlYWRlcnMpO1xuICAgIH1cbiAgICBhcHBlbmQobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSB0aGlzLmhlYWRlcnNbbmFtZV07XG4gICAgICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyc1tuYW1lXSA9IFtcbiAgICAgICAgICAgICAgICBleGlzdGluZyxcbiAgICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGV4aXN0aW5nKSkge1xuICAgICAgICAgICAgZXhpc3RpbmcucHVzaCh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhlYWRlcnNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZWxldGUobmFtZSkge1xuICAgICAgICBkZWxldGUgdGhpcy5oZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgICBnZXQobmFtZSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuaGVhZGVyc1tuYW1lXTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIHRoaXMubWVyZ2UodmFsdWUpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaGFzKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLmhlYWRlcnNbbmFtZV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgfVxuICAgIHNldChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmhlYWRlcnNbbmFtZV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnKSB7XG4gICAgICAgIGZvciAoY29uc3QgW25hbWUsIHZhbHVlXSBvZiB0aGlzLmVudHJpZXMoKSl7XG4gICAgICAgICAgICBjYWxsYmFja2ZuLmNhbGwodGhpc0FyZywgdmFsdWUsIG5hbWUsIHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgICplbnRyaWVzKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyh0aGlzLmhlYWRlcnMpKXtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIC8vIFdlIGFzc2VydCBoZXJlIHRoYXQgdGhpcyBpcyBhIHN0cmluZyBiZWNhdXNlIHdlIGdvdCBpdCBmcm9tIHRoZVxuICAgICAgICAgICAgLy8gT2JqZWN0LmtleXMoKSBjYWxsIGFib3ZlLlxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldChuYW1lKTtcbiAgICAgICAgICAgIHlpZWxkIFtcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgfVxuICAgICprZXlzKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyh0aGlzLmhlYWRlcnMpKXtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHlpZWxkIG5hbWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgKnZhbHVlcygpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModGhpcy5oZWFkZXJzKSl7XG4gICAgICAgICAgICAvLyBXZSBhc3NlcnQgaGVyZSB0aGF0IHRoaXMgaXMgYSBzdHJpbmcgYmVjYXVzZSB3ZSBnb3QgaXQgZnJvbSB0aGVcbiAgICAgICAgICAgIC8vIE9iamVjdC5rZXlzKCkgY2FsbCBhYm92ZS5cbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXQoa2V5KTtcbiAgICAgICAgICAgIHlpZWxkIHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnRyaWVzKCk7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWFkZXJzLmpzLm1hcCJdLCJuYW1lcyI6WyJSZWZsZWN0QWRhcHRlciIsIlJlYWRvbmx5SGVhZGVyc0Vycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsImNhbGxhYmxlIiwiSGVhZGVyc0FkYXB0ZXIiLCJIZWFkZXJzIiwiaGVhZGVycyIsIlByb3h5IiwiZ2V0IiwidGFyZ2V0IiwicHJvcCIsInJlY2VpdmVyIiwibG93ZXJjYXNlZCIsInRvTG93ZXJDYXNlIiwib3JpZ2luYWwiLCJPYmplY3QiLCJrZXlzIiwiZmluZCIsIm8iLCJzZXQiLCJ2YWx1ZSIsImhhcyIsImRlbGV0ZVByb3BlcnR5Iiwic2VhbCIsIm1lcmdlIiwiQXJyYXkiLCJpc0FycmF5Iiwiam9pbiIsImZyb20iLCJhcHBlbmQiLCJuYW1lIiwiZXhpc3RpbmciLCJwdXNoIiwiZGVsZXRlIiwiZm9yRWFjaCIsImNhbGxiYWNrZm4iLCJ0aGlzQXJnIiwiZW50cmllcyIsImNhbGwiLCJrZXkiLCJ2YWx1ZXMiLCJTeW1ib2wiLCJpdGVyYXRvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/adapters/headers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/adapters/reflect.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/web/spec-extension/adapters/reflect.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReflectAdapter: () => (/* binding */ ReflectAdapter)\n/* harmony export */ });\nclass ReflectAdapter {\n  static get(target, prop, receiver) {\n    const value = Reflect.get(target, prop, receiver);\n    if (typeof value === \"function\") {\n      return value.bind(target);\n    }\n    return value;\n  }\n  static set(target, prop, value, receiver) {\n    return Reflect.set(target, prop, value, receiver);\n  }\n  static has(target, prop) {\n    return Reflect.has(target, prop);\n  }\n  static deleteProperty(target, prop) {\n    return Reflect.deleteProperty(target, prop);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvd2ViL3NwZWMtZXh0ZW5zaW9uL2FkYXB0ZXJzL3JlZmxlY3QuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLGNBQWMsQ0FBQztFQUN4QixPQUFPQyxHQUFHQSxDQUFDQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsUUFBUSxFQUFFO0lBQy9CLE1BQU1DLEtBQUssR0FBR0MsT0FBTyxDQUFDTCxHQUFHLENBQUNDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxRQUFRLENBQUM7SUFDakQsSUFBSSxPQUFPQyxLQUFLLEtBQUssVUFBVSxFQUFFO01BQzdCLE9BQU9BLEtBQUssQ0FBQ0UsSUFBSSxDQUFDTCxNQUFNLENBQUM7SUFDN0I7SUFDQSxPQUFPRyxLQUFLO0VBQ2hCO0VBQ0EsT0FBT0csR0FBR0EsQ0FBQ04sTUFBTSxFQUFFQyxJQUFJLEVBQUVFLEtBQUssRUFBRUQsUUFBUSxFQUFFO0lBQ3RDLE9BQU9FLE9BQU8sQ0FBQ0UsR0FBRyxDQUFDTixNQUFNLEVBQUVDLElBQUksRUFBRUUsS0FBSyxFQUFFRCxRQUFRLENBQUM7RUFDckQ7RUFDQSxPQUFPSyxHQUFHQSxDQUFDUCxNQUFNLEVBQUVDLElBQUksRUFBRTtJQUNyQixPQUFPRyxPQUFPLENBQUNHLEdBQUcsQ0FBQ1AsTUFBTSxFQUFFQyxJQUFJLENBQUM7RUFDcEM7RUFDQSxPQUFPTyxjQUFjQSxDQUFDUixNQUFNLEVBQUVDLElBQUksRUFBRTtJQUNoQyxPQUFPRyxPQUFPLENBQUNJLGNBQWMsQ0FBQ1IsTUFBTSxFQUFFQyxJQUFJLENBQUM7RUFDL0M7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvd2ViL3NwZWMtZXh0ZW5zaW9uL2FkYXB0ZXJzL3JlZmxlY3QuanM/MjA2NyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgUmVmbGVjdEFkYXB0ZXIge1xuICAgIHN0YXRpYyBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5iaW5kKHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBzdGF0aWMgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUsIHJlY2VpdmVyKSB7XG4gICAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3AsIHZhbHVlLCByZWNlaXZlcik7XG4gICAgfVxuICAgIHN0YXRpYyBoYXModGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgIHJldHVybiBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3ApO1xuICAgIH1cbiAgICBzdGF0aWMgZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgIHJldHVybiBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcCk7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWZsZWN0LmpzLm1hcCJdLCJuYW1lcyI6WyJSZWZsZWN0QWRhcHRlciIsImdldCIsInRhcmdldCIsInByb3AiLCJyZWNlaXZlciIsInZhbHVlIiwiUmVmbGVjdCIsImJpbmQiLCJzZXQiLCJoYXMiLCJkZWxldGVQcm9wZXJ0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/adapters/reflect.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/adapters/request-cookies.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/web/spec-extension/adapters/request-cookies.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MutableRequestCookiesAdapter: () => (/* binding */ MutableRequestCookiesAdapter),\n/* harmony export */   ReadonlyRequestCookiesError: () => (/* binding */ ReadonlyRequestCookiesError),\n/* harmony export */   RequestCookiesAdapter: () => (/* binding */ RequestCookiesAdapter),\n/* harmony export */   appendMutableCookies: () => (/* binding */ appendMutableCookies),\n/* harmony export */   getModifiedCookieValues: () => (/* binding */ getModifiedCookieValues)\n/* harmony export */ });\n/* harmony import */ var _cookies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../cookies */ \"(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/cookies.js\");\n/* harmony import */ var _reflect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reflect */ \"(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/adapters/reflect.js\");\n\n\n/**\n * @internal\n */\nclass ReadonlyRequestCookiesError extends Error {\n  constructor() {\n    super(\"Cookies can only be modified in a Server Action or Route Handler. Read more: https://nextjs.org/docs/app/api-reference/functions/cookies#cookiessetname-value-options\");\n  }\n  static callable() {\n    throw new ReadonlyRequestCookiesError();\n  }\n}\nclass RequestCookiesAdapter {\n  static seal(cookies) {\n    return new Proxy(cookies, {\n      get(target, prop, receiver) {\n        switch (prop) {\n          case \"clear\":\n          case \"delete\":\n          case \"set\":\n            return ReadonlyRequestCookiesError.callable;\n          default:\n            return _reflect__WEBPACK_IMPORTED_MODULE_1__.ReflectAdapter.get(target, prop, receiver);\n        }\n      }\n    });\n  }\n}\nconst SYMBOL_MODIFY_COOKIE_VALUES = Symbol.for(\"next.mutated.cookies\");\nfunction getModifiedCookieValues(cookies) {\n  const modified = cookies[SYMBOL_MODIFY_COOKIE_VALUES];\n  if (!modified || !Array.isArray(modified) || modified.length === 0) {\n    return [];\n  }\n  return modified;\n}\nfunction appendMutableCookies(headers, mutableCookies) {\n  const modifiedCookieValues = getModifiedCookieValues(mutableCookies);\n  if (modifiedCookieValues.length === 0) {\n    return false;\n  }\n  // Return a new response that extends the response with\n  // the modified cookies as fallbacks. `res` cookies\n  // will still take precedence.\n  const resCookies = new _cookies__WEBPACK_IMPORTED_MODULE_0__.ResponseCookies(headers);\n  const returnedCookies = resCookies.getAll();\n  // Set the modified cookies as fallbacks.\n  for (const cookie of modifiedCookieValues) {\n    resCookies.set(cookie);\n  }\n  // Set the original cookies as the final values.\n  for (const cookie of returnedCookies) {\n    resCookies.set(cookie);\n  }\n  return true;\n}\nclass MutableRequestCookiesAdapter {\n  static wrap(cookies, onUpdateCookies) {\n    const responseCookies = new _cookies__WEBPACK_IMPORTED_MODULE_0__.ResponseCookies(new Headers());\n    for (const cookie of cookies.getAll()) {\n      responseCookies.set(cookie);\n    }\n    let modifiedValues = [];\n    const modifiedCookies = new Set();\n    const updateResponseCookies = () => {\n      var _fetch___nextGetStaticStore;\n      // TODO-APP: change method of getting staticGenerationAsyncStore\n      const staticGenerationAsyncStore = fetch.__nextGetStaticStore == null ? void 0 : (_fetch___nextGetStaticStore = fetch.__nextGetStaticStore.call(fetch)) == null ? void 0 : _fetch___nextGetStaticStore.getStore();\n      if (staticGenerationAsyncStore) {\n        staticGenerationAsyncStore.pathWasRevalidated = true;\n      }\n      const allCookies = responseCookies.getAll();\n      modifiedValues = allCookies.filter(c => modifiedCookies.has(c.name));\n      if (onUpdateCookies) {\n        const serializedCookies = [];\n        for (const cookie of modifiedValues) {\n          const tempCookies = new _cookies__WEBPACK_IMPORTED_MODULE_0__.ResponseCookies(new Headers());\n          tempCookies.set(cookie);\n          serializedCookies.push(tempCookies.toString());\n        }\n        onUpdateCookies(serializedCookies);\n      }\n    };\n    return new Proxy(responseCookies, {\n      get(target, prop, receiver) {\n        switch (prop) {\n          // A special symbol to get the modified cookie values\n          case SYMBOL_MODIFY_COOKIE_VALUES:\n            return modifiedValues;\n          // TODO: Throw error if trying to set a cookie after the response\n          // headers have been set.\n          case \"delete\":\n            return function (...args) {\n              modifiedCookies.add(typeof args[0] === \"string\" ? args[0] : args[0].name);\n              try {\n                target.delete(...args);\n              } finally {\n                updateResponseCookies();\n              }\n            };\n          case \"set\":\n            return function (...args) {\n              modifiedCookies.add(typeof args[0] === \"string\" ? args[0] : args[0].name);\n              try {\n                return target.set(...args);\n              } finally {\n                updateResponseCookies();\n              }\n            };\n          default:\n            return _reflect__WEBPACK_IMPORTED_MODULE_1__.ReflectAdapter.get(target, prop, receiver);\n        }\n      }\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/adapters/request-cookies.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/cookies.js":
/*!*************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/web/spec-extension/cookies.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RequestCookies: () => (/* reexport safe */ next_dist_compiled_edge_runtime_cookies__WEBPACK_IMPORTED_MODULE_0__.RequestCookies),
/* harmony export */   ResponseCookies: () => (/* reexport safe */ next_dist_compiled_edge_runtime_cookies__WEBPACK_IMPORTED_MODULE_0__.ResponseCookies)
/* harmony export */ });
/* harmony import */ var next_dist_compiled_edge_runtime_cookies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/compiled/@edge-runtime/cookies */ "(rsc)/./node_modules/next/dist/compiled/@edge-runtime/cookies/index.js");
/* harmony import */ var next_dist_compiled_edge_runtime_cookies__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_compiled_edge_runtime_cookies__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/fetch-event.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/web/spec-extension/fetch-event.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NextFetchEvent: () => (/* binding */ NextFetchEvent),\n/* harmony export */   waitUntilSymbol: () => (/* binding */ waitUntilSymbol)\n/* harmony export */ });\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error */ \"(rsc)/./node_modules/next/dist/esm/server/web/error.js\");\n\nconst responseSymbol = Symbol(\"response\");\nconst passThroughSymbol = Symbol(\"passThrough\");\nconst waitUntilSymbol = Symbol(\"waitUntil\");\nclass FetchEvent {\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(_request) {\n    this[waitUntilSymbol] = [];\n    this[passThroughSymbol] = false;\n  }\n  respondWith(response) {\n    if (!this[responseSymbol]) {\n      this[responseSymbol] = Promise.resolve(response);\n    }\n  }\n  passThroughOnException() {\n    this[passThroughSymbol] = true;\n  }\n  waitUntil(promise) {\n    this[waitUntilSymbol].push(promise);\n  }\n}\nclass NextFetchEvent extends FetchEvent {\n  constructor(params) {\n    super(params.request);\n    this.sourcePage = params.page;\n  }\n  /**\n  * @deprecated The `request` is now the first parameter and the API is now async.\n  *\n  * Read more: https://nextjs.org/docs/messages/middleware-new-signature\n  */\n  get request() {\n    throw new _error__WEBPACK_IMPORTED_MODULE_0__.PageSignatureError({\n      page: this.sourcePage\n    });\n  }\n  /**\n  * @deprecated Using `respondWith` is no longer needed.\n  *\n  * Read more: https://nextjs.org/docs/messages/middleware-new-signature\n  */\n  respondWith() {\n    throw new _error__WEBPACK_IMPORTED_MODULE_0__.PageSignatureError({\n      page: this.sourcePage\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvd2ViL3NwZWMtZXh0ZW5zaW9uL2ZldGNoLWV2ZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE4QztBQUM5QyxNQUFNQyxjQUFjLEdBQUdDLE1BQU0sQ0FBQyxVQUFVLENBQUM7QUFDekMsTUFBTUMsaUJBQWlCLEdBQUdELE1BQU0sQ0FBQyxhQUFhLENBQUM7QUFDeEMsTUFBTUUsZUFBZSxHQUFHRixNQUFNLENBQUMsV0FBVyxDQUFDO0FBQ2xELE1BQU1HLFVBQVUsQ0FBQztFQUNiO0VBQ0FDLFdBQVdBLENBQUNDLFFBQVEsRUFBQztJQUNqQixJQUFJLENBQUNILGVBQWUsQ0FBQyxHQUFHLEVBQUU7SUFDMUIsSUFBSSxDQUFDRCxpQkFBaUIsQ0FBQyxHQUFHLEtBQUs7RUFDbkM7RUFDQUssV0FBV0EsQ0FBQ0MsUUFBUSxFQUFFO0lBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUNSLGNBQWMsQ0FBQyxFQUFFO01BQ3ZCLElBQUksQ0FBQ0EsY0FBYyxDQUFDLEdBQUdTLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDRixRQUFRLENBQUM7SUFDcEQ7RUFDSjtFQUNBRyxzQkFBc0JBLENBQUEsRUFBRztJQUNyQixJQUFJLENBQUNULGlCQUFpQixDQUFDLEdBQUcsSUFBSTtFQUNsQztFQUNBVSxTQUFTQSxDQUFDQyxPQUFPLEVBQUU7SUFDZixJQUFJLENBQUNWLGVBQWUsQ0FBQyxDQUFDVyxJQUFJLENBQUNELE9BQU8sQ0FBQztFQUN2QztBQUNKO0FBQ08sTUFBTUUsY0FBYyxTQUFTWCxVQUFVLENBQUM7RUFDM0NDLFdBQVdBLENBQUNXLE1BQU0sRUFBQztJQUNmLEtBQUssQ0FBQ0EsTUFBTSxDQUFDQyxPQUFPLENBQUM7SUFDckIsSUFBSSxDQUFDQyxVQUFVLEdBQUdGLE1BQU0sQ0FBQ0csSUFBSTtFQUNqQztFQUNBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7RUFBTSxJQUFJRixPQUFPQSxDQUFBLEVBQUc7SUFDWixNQUFNLElBQUlsQixzREFBa0IsQ0FBQztNQUN6Qm9CLElBQUksRUFBRSxJQUFJLENBQUNEO0lBQ2YsQ0FBQyxDQUFDO0VBQ047RUFDQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0VBQU1YLFdBQVdBLENBQUEsRUFBRztJQUNaLE1BQU0sSUFBSVIsc0RBQWtCLENBQUM7TUFDekJvQixJQUFJLEVBQUUsSUFBSSxDQUFDRDtJQUNmLENBQUMsQ0FBQztFQUNOO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2VydmVyL3dlYi9zcGVjLWV4dGVuc2lvbi9mZXRjaC1ldmVudC5qcz85MmJiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VTaWduYXR1cmVFcnJvciB9IGZyb20gXCIuLi9lcnJvclwiO1xuY29uc3QgcmVzcG9uc2VTeW1ib2wgPSBTeW1ib2woXCJyZXNwb25zZVwiKTtcbmNvbnN0IHBhc3NUaHJvdWdoU3ltYm9sID0gU3ltYm9sKFwicGFzc1Rocm91Z2hcIik7XG5leHBvcnQgY29uc3Qgd2FpdFVudGlsU3ltYm9sID0gU3ltYm9sKFwid2FpdFVudGlsXCIpO1xuY2xhc3MgRmV0Y2hFdmVudCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2VsZXNzLWNvbnN0cnVjdG9yXG4gICAgY29uc3RydWN0b3IoX3JlcXVlc3Qpe1xuICAgICAgICB0aGlzW3dhaXRVbnRpbFN5bWJvbF0gPSBbXTtcbiAgICAgICAgdGhpc1twYXNzVGhyb3VnaFN5bWJvbF0gPSBmYWxzZTtcbiAgICB9XG4gICAgcmVzcG9uZFdpdGgocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKCF0aGlzW3Jlc3BvbnNlU3ltYm9sXSkge1xuICAgICAgICAgICAgdGhpc1tyZXNwb25zZVN5bWJvbF0gPSBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHBhc3NUaHJvdWdoT25FeGNlcHRpb24oKSB7XG4gICAgICAgIHRoaXNbcGFzc1Rocm91Z2hTeW1ib2xdID0gdHJ1ZTtcbiAgICB9XG4gICAgd2FpdFVudGlsKHByb21pc2UpIHtcbiAgICAgICAgdGhpc1t3YWl0VW50aWxTeW1ib2xdLnB1c2gocHJvbWlzZSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE5leHRGZXRjaEV2ZW50IGV4dGVuZHMgRmV0Y2hFdmVudCB7XG4gICAgY29uc3RydWN0b3IocGFyYW1zKXtcbiAgICAgICAgc3VwZXIocGFyYW1zLnJlcXVlc3QpO1xuICAgICAgICB0aGlzLnNvdXJjZVBhZ2UgPSBwYXJhbXMucGFnZTtcbiAgICB9XG4gICAgLyoqXG4gICAqIEBkZXByZWNhdGVkIFRoZSBgcmVxdWVzdGAgaXMgbm93IHRoZSBmaXJzdCBwYXJhbWV0ZXIgYW5kIHRoZSBBUEkgaXMgbm93IGFzeW5jLlxuICAgKlxuICAgKiBSZWFkIG1vcmU6IGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzL21pZGRsZXdhcmUtbmV3LXNpZ25hdHVyZVxuICAgKi8gZ2V0IHJlcXVlc3QoKSB7XG4gICAgICAgIHRocm93IG5ldyBQYWdlU2lnbmF0dXJlRXJyb3Ioe1xuICAgICAgICAgICAgcGFnZTogdGhpcy5zb3VyY2VQYWdlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICogQGRlcHJlY2F0ZWQgVXNpbmcgYHJlc3BvbmRXaXRoYCBpcyBubyBsb25nZXIgbmVlZGVkLlxuICAgKlxuICAgKiBSZWFkIG1vcmU6IGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzL21pZGRsZXdhcmUtbmV3LXNpZ25hdHVyZVxuICAgKi8gcmVzcG9uZFdpdGgoKSB7XG4gICAgICAgIHRocm93IG5ldyBQYWdlU2lnbmF0dXJlRXJyb3Ioe1xuICAgICAgICAgICAgcGFnZTogdGhpcy5zb3VyY2VQYWdlXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmV0Y2gtZXZlbnQuanMubWFwIl0sIm5hbWVzIjpbIlBhZ2VTaWduYXR1cmVFcnJvciIsInJlc3BvbnNlU3ltYm9sIiwiU3ltYm9sIiwicGFzc1Rocm91Z2hTeW1ib2wiLCJ3YWl0VW50aWxTeW1ib2wiLCJGZXRjaEV2ZW50IiwiY29uc3RydWN0b3IiLCJfcmVxdWVzdCIsInJlc3BvbmRXaXRoIiwicmVzcG9uc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInBhc3NUaHJvdWdoT25FeGNlcHRpb24iLCJ3YWl0VW50aWwiLCJwcm9taXNlIiwicHVzaCIsIk5leHRGZXRjaEV2ZW50IiwicGFyYW1zIiwicmVxdWVzdCIsInNvdXJjZVBhZ2UiLCJwYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/fetch-event.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/request.js":
/*!*************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/web/spec-extension/request.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INTERNALS: () => (/* binding */ INTERNALS),\n/* harmony export */   NextRequest: () => (/* binding */ NextRequest)\n/* harmony export */ });\n/* harmony import */ var _next_url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../next-url */ \"(rsc)/./node_modules/next/dist/esm/server/web/next-url.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/next/dist/esm/server/web/utils.js\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error */ \"(rsc)/./node_modules/next/dist/esm/server/web/error.js\");\n/* harmony import */ var _cookies__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cookies */ \"(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/cookies.js\");\n\n\n\n\nconst INTERNALS = Symbol(\"internal request\");\nclass NextRequest extends Request {\n  constructor(input, init = {}) {\n    const url = typeof input !== \"string\" && \"url\" in input ? input.url : String(input);\n    (0,_utils__WEBPACK_IMPORTED_MODULE_1__.validateURL)(url);\n    if (input instanceof Request) super(input, init);else super(url, init);\n    const nextUrl = new _next_url__WEBPACK_IMPORTED_MODULE_0__.NextURL(url, {\n      headers: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.toNodeOutgoingHttpHeaders)(this.headers),\n      nextConfig: init.nextConfig\n    });\n    this[INTERNALS] = {\n      cookies: new _cookies__WEBPACK_IMPORTED_MODULE_3__.RequestCookies(this.headers),\n      geo: init.geo || {},\n      ip: init.ip,\n      nextUrl,\n      url:  false ? 0 : nextUrl.toString()\n    };\n  }\n  [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n    return {\n      cookies: this.cookies,\n      geo: this.geo,\n      ip: this.ip,\n      nextUrl: this.nextUrl,\n      url: this.url,\n      // rest of props come from Request\n      bodyUsed: this.bodyUsed,\n      cache: this.cache,\n      credentials: this.credentials,\n      destination: this.destination,\n      headers: Object.fromEntries(this.headers),\n      integrity: this.integrity,\n      keepalive: this.keepalive,\n      method: this.method,\n      mode: this.mode,\n      redirect: this.redirect,\n      referrer: this.referrer,\n      referrerPolicy: this.referrerPolicy,\n      signal: this.signal\n    };\n  }\n  get cookies() {\n    return this[INTERNALS].cookies;\n  }\n  get geo() {\n    return this[INTERNALS].geo;\n  }\n  get ip() {\n    return this[INTERNALS].ip;\n  }\n  get nextUrl() {\n    return this[INTERNALS].nextUrl;\n  }\n  /**\n  * @deprecated\n  * `page` has been deprecated in favour of `URLPattern`.\n  * Read more: https://nextjs.org/docs/messages/middleware-request-page\n  */\n  get page() {\n    throw new _error__WEBPACK_IMPORTED_MODULE_2__.RemovedPageError();\n  }\n  /**\n  * @deprecated\n  * `ua` has been removed in favour of \\`userAgent\\` function.\n  * Read more: https://nextjs.org/docs/messages/middleware-parse-user-agent\n  */\n  get ua() {\n    throw new _error__WEBPACK_IMPORTED_MODULE_2__.RemovedUAError();\n  }\n  get url() {\n    return this[INTERNALS].url;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zZXJ2ZXIvd2ViL3NwZWMtZXh0ZW5zaW9uL3JlcXVlc3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXNDO0FBQzRCO0FBQ047QUFDakI7QUFDcEMsTUFBTU0sU0FBUyxHQUFHQyxNQUFNLENBQUMsa0JBQWtCLENBQUM7QUFDNUMsTUFBTUMsV0FBVyxTQUFTQyxPQUFPLENBQUM7RUFDckNDLFdBQVdBLENBQUNDLEtBQUssRUFBRUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFDO0lBQ3pCLE1BQU1DLEdBQUcsR0FBRyxPQUFPRixLQUFLLEtBQUssUUFBUSxJQUFJLEtBQUssSUFBSUEsS0FBSyxHQUFHQSxLQUFLLENBQUNFLEdBQUcsR0FBR0MsTUFBTSxDQUFDSCxLQUFLLENBQUM7SUFDbkZULG1EQUFXLENBQUNXLEdBQUcsQ0FBQztJQUNoQixJQUFJRixLQUFLLFlBQVlGLE9BQU8sRUFBRSxLQUFLLENBQUNFLEtBQUssRUFBRUMsSUFBSSxDQUFDLENBQUMsS0FDNUMsS0FBSyxDQUFDQyxHQUFHLEVBQUVELElBQUksQ0FBQztJQUNyQixNQUFNRyxPQUFPLEdBQUcsSUFBSWYsOENBQU8sQ0FBQ2EsR0FBRyxFQUFFO01BQzdCRyxPQUFPLEVBQUVmLGlFQUF5QixDQUFDLElBQUksQ0FBQ2UsT0FBTyxDQUFDO01BQ2hEQyxVQUFVLEVBQUVMLElBQUksQ0FBQ0s7SUFDckIsQ0FBQyxDQUFDO0lBQ0YsSUFBSSxDQUFDWCxTQUFTLENBQUMsR0FBRztNQUNkWSxPQUFPLEVBQUUsSUFBSWIsb0RBQWMsQ0FBQyxJQUFJLENBQUNXLE9BQU8sQ0FBQztNQUN6Q0csR0FBRyxFQUFFUCxJQUFJLENBQUNPLEdBQUcsSUFBSSxDQUFDLENBQUM7TUFDbkJDLEVBQUUsRUFBRVIsSUFBSSxDQUFDUSxFQUFFO01BQ1hMLE9BQU87TUFDUEYsR0FBRyxFQUFFUSxNQUE4QyxHQUFHUixDQUFHLEdBQUdFLE9BQU8sQ0FBQ1MsUUFBUSxDQUFDO0lBQ2pGLENBQUM7RUFDTDtFQUNBLENBQUNqQixNQUFNLENBQUNrQixHQUFHLENBQUMsNkJBQTZCLENBQUMsSUFBSTtJQUMxQyxPQUFPO01BQ0hQLE9BQU8sRUFBRSxJQUFJLENBQUNBLE9BQU87TUFDckJDLEdBQUcsRUFBRSxJQUFJLENBQUNBLEdBQUc7TUFDYkMsRUFBRSxFQUFFLElBQUksQ0FBQ0EsRUFBRTtNQUNYTCxPQUFPLEVBQUUsSUFBSSxDQUFDQSxPQUFPO01BQ3JCRixHQUFHLEVBQUUsSUFBSSxDQUFDQSxHQUFHO01BQ2I7TUFDQWEsUUFBUSxFQUFFLElBQUksQ0FBQ0EsUUFBUTtNQUN2QkMsS0FBSyxFQUFFLElBQUksQ0FBQ0EsS0FBSztNQUNqQkMsV0FBVyxFQUFFLElBQUksQ0FBQ0EsV0FBVztNQUM3QkMsV0FBVyxFQUFFLElBQUksQ0FBQ0EsV0FBVztNQUM3QmIsT0FBTyxFQUFFYyxNQUFNLENBQUNDLFdBQVcsQ0FBQyxJQUFJLENBQUNmLE9BQU8sQ0FBQztNQUN6Q2dCLFNBQVMsRUFBRSxJQUFJLENBQUNBLFNBQVM7TUFDekJDLFNBQVMsRUFBRSxJQUFJLENBQUNBLFNBQVM7TUFDekJDLE1BQU0sRUFBRSxJQUFJLENBQUNBLE1BQU07TUFDbkJDLElBQUksRUFBRSxJQUFJLENBQUNBLElBQUk7TUFDZkMsUUFBUSxFQUFFLElBQUksQ0FBQ0EsUUFBUTtNQUN2QkMsUUFBUSxFQUFFLElBQUksQ0FBQ0EsUUFBUTtNQUN2QkMsY0FBYyxFQUFFLElBQUksQ0FBQ0EsY0FBYztNQUNuQ0MsTUFBTSxFQUFFLElBQUksQ0FBQ0E7SUFDakIsQ0FBQztFQUNMO0VBQ0EsSUFBSXJCLE9BQU9BLENBQUEsRUFBRztJQUNWLE9BQU8sSUFBSSxDQUFDWixTQUFTLENBQUMsQ0FBQ1ksT0FBTztFQUNsQztFQUNBLElBQUlDLEdBQUdBLENBQUEsRUFBRztJQUNOLE9BQU8sSUFBSSxDQUFDYixTQUFTLENBQUMsQ0FBQ2EsR0FBRztFQUM5QjtFQUNBLElBQUlDLEVBQUVBLENBQUEsRUFBRztJQUNMLE9BQU8sSUFBSSxDQUFDZCxTQUFTLENBQUMsQ0FBQ2MsRUFBRTtFQUM3QjtFQUNBLElBQUlMLE9BQU9BLENBQUEsRUFBRztJQUNWLE9BQU8sSUFBSSxDQUFDVCxTQUFTLENBQUMsQ0FBQ1MsT0FBTztFQUNsQztFQUNBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7RUFBTSxJQUFJeUIsSUFBSUEsQ0FBQSxFQUFHO0lBQ1QsTUFBTSxJQUFJcEMsb0RBQWdCLENBQUMsQ0FBQztFQUNoQztFQUNBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7RUFBTSxJQUFJcUMsRUFBRUEsQ0FBQSxFQUFHO0lBQ1AsTUFBTSxJQUFJdEMsa0RBQWMsQ0FBQyxDQUFDO0VBQzlCO0VBQ0EsSUFBSVUsR0FBR0EsQ0FBQSxFQUFHO0lBQ04sT0FBTyxJQUFJLENBQUNQLFNBQVMsQ0FBQyxDQUFDTyxHQUFHO0VBQzlCO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2VydmVyL3dlYi9zcGVjLWV4dGVuc2lvbi9yZXF1ZXN0LmpzPzE1ZDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFVSTCB9IGZyb20gXCIuLi9uZXh0LXVybFwiO1xuaW1wb3J0IHsgdG9Ob2RlT3V0Z29pbmdIdHRwSGVhZGVycywgdmFsaWRhdGVVUkwgfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7IFJlbW92ZWRVQUVycm9yLCBSZW1vdmVkUGFnZUVycm9yIH0gZnJvbSBcIi4uL2Vycm9yXCI7XG5pbXBvcnQgeyBSZXF1ZXN0Q29va2llcyB9IGZyb20gXCIuL2Nvb2tpZXNcIjtcbmV4cG9ydCBjb25zdCBJTlRFUk5BTFMgPSBTeW1ib2woXCJpbnRlcm5hbCByZXF1ZXN0XCIpO1xuZXhwb3J0IGNsYXNzIE5leHRSZXF1ZXN0IGV4dGVuZHMgUmVxdWVzdCB7XG4gICAgY29uc3RydWN0b3IoaW5wdXQsIGluaXQgPSB7fSl7XG4gICAgICAgIGNvbnN0IHVybCA9IHR5cGVvZiBpbnB1dCAhPT0gXCJzdHJpbmdcIiAmJiBcInVybFwiIGluIGlucHV0ID8gaW5wdXQudXJsIDogU3RyaW5nKGlucHV0KTtcbiAgICAgICAgdmFsaWRhdGVVUkwodXJsKTtcbiAgICAgICAgaWYgKGlucHV0IGluc3RhbmNlb2YgUmVxdWVzdCkgc3VwZXIoaW5wdXQsIGluaXQpO1xuICAgICAgICBlbHNlIHN1cGVyKHVybCwgaW5pdCk7XG4gICAgICAgIGNvbnN0IG5leHRVcmwgPSBuZXcgTmV4dFVSTCh1cmwsIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHRvTm9kZU91dGdvaW5nSHR0cEhlYWRlcnModGhpcy5oZWFkZXJzKSxcbiAgICAgICAgICAgIG5leHRDb25maWc6IGluaXQubmV4dENvbmZpZ1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpc1tJTlRFUk5BTFNdID0ge1xuICAgICAgICAgICAgY29va2llczogbmV3IFJlcXVlc3RDb29raWVzKHRoaXMuaGVhZGVycyksXG4gICAgICAgICAgICBnZW86IGluaXQuZ2VvIHx8IHt9LFxuICAgICAgICAgICAgaXA6IGluaXQuaXAsXG4gICAgICAgICAgICBuZXh0VXJsLFxuICAgICAgICAgICAgdXJsOiBwcm9jZXNzLmVudi5fX05FWFRfTk9fTUlERExFV0FSRV9VUkxfTk9STUFMSVpFID8gdXJsIDogbmV4dFVybC50b1N0cmluZygpXG4gICAgICAgIH07XG4gICAgfVxuICAgIFtTeW1ib2wuZm9yKFwiZWRnZS1ydW50aW1lLmluc3BlY3QuY3VzdG9tXCIpXSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvb2tpZXM6IHRoaXMuY29va2llcyxcbiAgICAgICAgICAgIGdlbzogdGhpcy5nZW8sXG4gICAgICAgICAgICBpcDogdGhpcy5pcCxcbiAgICAgICAgICAgIG5leHRVcmw6IHRoaXMubmV4dFVybCxcbiAgICAgICAgICAgIHVybDogdGhpcy51cmwsXG4gICAgICAgICAgICAvLyByZXN0IG9mIHByb3BzIGNvbWUgZnJvbSBSZXF1ZXN0XG4gICAgICAgICAgICBib2R5VXNlZDogdGhpcy5ib2R5VXNlZCxcbiAgICAgICAgICAgIGNhY2hlOiB0aGlzLmNhY2hlLFxuICAgICAgICAgICAgY3JlZGVudGlhbHM6IHRoaXMuY3JlZGVudGlhbHMsXG4gICAgICAgICAgICBkZXN0aW5hdGlvbjogdGhpcy5kZXN0aW5hdGlvbixcbiAgICAgICAgICAgIGhlYWRlcnM6IE9iamVjdC5mcm9tRW50cmllcyh0aGlzLmhlYWRlcnMpLFxuICAgICAgICAgICAgaW50ZWdyaXR5OiB0aGlzLmludGVncml0eSxcbiAgICAgICAgICAgIGtlZXBhbGl2ZTogdGhpcy5rZWVwYWxpdmUsXG4gICAgICAgICAgICBtZXRob2Q6IHRoaXMubWV0aG9kLFxuICAgICAgICAgICAgbW9kZTogdGhpcy5tb2RlLFxuICAgICAgICAgICAgcmVkaXJlY3Q6IHRoaXMucmVkaXJlY3QsXG4gICAgICAgICAgICByZWZlcnJlcjogdGhpcy5yZWZlcnJlcixcbiAgICAgICAgICAgIHJlZmVycmVyUG9saWN5OiB0aGlzLnJlZmVycmVyUG9saWN5LFxuICAgICAgICAgICAgc2lnbmFsOiB0aGlzLnNpZ25hbFxuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXQgY29va2llcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbSU5URVJOQUxTXS5jb29raWVzO1xuICAgIH1cbiAgICBnZXQgZ2VvKCkge1xuICAgICAgICByZXR1cm4gdGhpc1tJTlRFUk5BTFNdLmdlbztcbiAgICB9XG4gICAgZ2V0IGlwKCkge1xuICAgICAgICByZXR1cm4gdGhpc1tJTlRFUk5BTFNdLmlwO1xuICAgIH1cbiAgICBnZXQgbmV4dFVybCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbSU5URVJOQUxTXS5uZXh0VXJsO1xuICAgIH1cbiAgICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogYHBhZ2VgIGhhcyBiZWVuIGRlcHJlY2F0ZWQgaW4gZmF2b3VyIG9mIGBVUkxQYXR0ZXJuYC5cbiAgICogUmVhZCBtb3JlOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy9taWRkbGV3YXJlLXJlcXVlc3QtcGFnZVxuICAgKi8gZ2V0IHBhZ2UoKSB7XG4gICAgICAgIHRocm93IG5ldyBSZW1vdmVkUGFnZUVycm9yKCk7XG4gICAgfVxuICAgIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBgdWFgIGhhcyBiZWVuIHJlbW92ZWQgaW4gZmF2b3VyIG9mIFxcYHVzZXJBZ2VudFxcYCBmdW5jdGlvbi5cbiAgICogUmVhZCBtb3JlOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy9taWRkbGV3YXJlLXBhcnNlLXVzZXItYWdlbnRcbiAgICovIGdldCB1YSgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJlbW92ZWRVQUVycm9yKCk7XG4gICAgfVxuICAgIGdldCB1cmwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzW0lOVEVSTkFMU10udXJsO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVxdWVzdC5qcy5tYXAiXSwibmFtZXMiOlsiTmV4dFVSTCIsInRvTm9kZU91dGdvaW5nSHR0cEhlYWRlcnMiLCJ2YWxpZGF0ZVVSTCIsIlJlbW92ZWRVQUVycm9yIiwiUmVtb3ZlZFBhZ2VFcnJvciIsIlJlcXVlc3RDb29raWVzIiwiSU5URVJOQUxTIiwiU3ltYm9sIiwiTmV4dFJlcXVlc3QiLCJSZXF1ZXN0IiwiY29uc3RydWN0b3IiLCJpbnB1dCIsImluaXQiLCJ1cmwiLCJTdHJpbmciLCJuZXh0VXJsIiwiaGVhZGVycyIsIm5leHRDb25maWciLCJjb29raWVzIiwiZ2VvIiwiaXAiLCJwcm9jZXNzIiwiZW52IiwiX19ORVhUX05PX01JRERMRVdBUkVfVVJMX05PUk1BTElaRSIsInRvU3RyaW5nIiwiZm9yIiwiYm9keVVzZWQiLCJjYWNoZSIsImNyZWRlbnRpYWxzIiwiZGVzdGluYXRpb24iLCJPYmplY3QiLCJmcm9tRW50cmllcyIsImludGVncml0eSIsImtlZXBhbGl2ZSIsIm1ldGhvZCIsIm1vZGUiLCJyZWRpcmVjdCIsInJlZmVycmVyIiwicmVmZXJyZXJQb2xpY3kiLCJzaWduYWwiLCJwYWdlIiwidWEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/response.js":
/*!**************************************************************************!*\
  !*** ./node_modules/next/dist/esm/server/web/spec-extension/response.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NextResponse: () => (/* binding */ NextResponse)\n/* harmony export */ });\n/* harmony import */ var _next_url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../next-url */ \"(rsc)/./node_modules/next/dist/esm/server/web/next-url.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/next/dist/esm/server/web/utils.js\");\n/* harmony import */ var _cookies__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cookies */ \"(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/cookies.js\");\n\n\n\nconst INTERNALS = Symbol(\"internal response\");\nconst REDIRECTS = new Set([301, 302, 303, 307, 308]);\nfunction handleMiddlewareField(init, headers) {\n  var _init_request;\n  if (init == null ? void 0 : (_init_request = init.request) == null ? void 0 : _init_request.headers) {\n    if (!(init.request.headers instanceof Headers)) {\n      throw new Error(\"request.headers must be an instance of Headers\");\n    }\n    const keys = [];\n    for (const [key, value] of init.request.headers) {\n      headers.set(\"x-middleware-request-\" + key, value);\n      keys.push(key);\n    }\n    headers.set(\"x-middleware-override-headers\", keys.join(\",\"));\n  }\n}\nclass NextResponse extends Response {\n  constructor(body, init = {}) {\n    super(body, init);\n    this[INTERNALS] = {\n      cookies: new _cookies__WEBPACK_IMPORTED_MODULE_2__.ResponseCookies(this.headers),\n      url: init.url ? new _next_url__WEBPACK_IMPORTED_MODULE_0__.NextURL(init.url, {\n        headers: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.toNodeOutgoingHttpHeaders)(this.headers),\n        nextConfig: init.nextConfig\n      }) : undefined\n    };\n  }\n  [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n    return {\n      cookies: this.cookies,\n      url: this.url,\n      // rest of props come from Response\n      body: this.body,\n      bodyUsed: this.bodyUsed,\n      headers: Object.fromEntries(this.headers),\n      ok: this.ok,\n      redirected: this.redirected,\n      status: this.status,\n      statusText: this.statusText,\n      type: this.type\n    };\n  }\n  get cookies() {\n    return this[INTERNALS].cookies;\n  }\n  static json(body, init) {\n    const response = Response.json(body, init);\n    return new NextResponse(response.body, response);\n  }\n  static redirect(url, init) {\n    const status = typeof init === \"number\" ? init : (init == null ? void 0 : init.status) ?? 307;\n    if (!REDIRECTS.has(status)) {\n      throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n    }\n    const initObj = typeof init === \"object\" ? init : {};\n    const headers = new Headers(initObj == null ? void 0 : initObj.headers);\n    headers.set(\"Location\", (0,_utils__WEBPACK_IMPORTED_MODULE_1__.validateURL)(url));\n    return new NextResponse(null, {\n      ...initObj,\n      headers,\n      status\n    });\n  }\n  static rewrite(destination, init) {\n    const headers = new Headers(init == null ? void 0 : init.headers);\n    headers.set(\"x-middleware-rewrite\", (0,_utils__WEBPACK_IMPORTED_MODULE_1__.validateURL)(destination));\n    handleMiddlewareField(init, headers);\n    return new NextResponse(null, {\n      ...init,\n      headers\n    });\n  }\n  static next(init) {\n    const headers = new Headers(init == null ? void 0 : init.headers);\n    headers.set(\"x-middleware-next\", \"1\");\n    handleMiddlewareField(init, headers);\n    return new NextResponse(null, {\n      ...init,\n      headers\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/web/spec-extension/response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/server/web/utils.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/esm/server/web/utils.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromNodeOutgoingHttpHeaders: () => (/* binding */ fromNodeOutgoingHttpHeaders),\n/* harmony export */   splitCookiesString: () => (/* binding */ splitCookiesString),\n/* harmony export */   toNodeOutgoingHttpHeaders: () => (/* binding */ toNodeOutgoingHttpHeaders),\n/* harmony export */   validateURL: () => (/* binding */ validateURL)\n/* harmony export */ });\n/**\n * Converts a Node.js IncomingHttpHeaders object to a Headers object. Any\n * headers with multiple values will be joined with a comma and space. Any\n * headers that have an undefined value will be ignored and others will be\n * coerced to strings.\n *\n * @param nodeHeaders the headers object to convert\n * @returns the converted headers object\n */function fromNodeOutgoingHttpHeaders(nodeHeaders) {\n  const headers = new Headers();\n  for (let [key, value] of Object.entries(nodeHeaders)) {\n    const values = Array.isArray(value) ? value : [value];\n    for (let v of values) {\n      if (typeof v === \"undefined\") continue;\n      if (typeof v === \"number\") {\n        v = v.toString();\n      }\n      headers.append(key, v);\n    }\n  }\n  return headers;\n}\n/*\n  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas\n  that are within a single set-cookie field-value, such as in the Expires portion.\n  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2\n  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128\n  React Native's fetch does this for *every* header, including set-cookie.\n  \n  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25\n  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation\n*/\nfunction splitCookiesString(cookiesString) {\n  var cookiesStrings = [];\n  var pos = 0;\n  var start;\n  var ch;\n  var lastComma;\n  var nextStart;\n  var cookiesSeparatorFound;\n  function skipWhitespace() {\n    while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\n      pos += 1;\n    }\n    return pos < cookiesString.length;\n  }\n  function notSpecialChar() {\n    ch = cookiesString.charAt(pos);\n    return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n  }\n  while (pos < cookiesString.length) {\n    start = pos;\n    cookiesSeparatorFound = false;\n    while (skipWhitespace()) {\n      ch = cookiesString.charAt(pos);\n      if (ch === \",\") {\n        // ',' is a cookie separator if we have later first '=', not ';' or ','\n        lastComma = pos;\n        pos += 1;\n        skipWhitespace();\n        nextStart = pos;\n        while (pos < cookiesString.length && notSpecialChar()) {\n          pos += 1;\n        }\n        // currently special character\n        if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n          // we found cookies separator\n          cookiesSeparatorFound = true;\n          // pos is inside the next cookie, so back up and return it.\n          pos = nextStart;\n          cookiesStrings.push(cookiesString.substring(start, lastComma));\n          start = pos;\n        } else {\n          // in param ',' or param separator ';',\n          // we continue from that comma\n          pos = lastComma + 1;\n        }\n      } else {\n        pos += 1;\n      }\n    }\n    if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n      cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n    }\n  }\n  return cookiesStrings;\n}\n/**\n * Converts a Headers object to a Node.js OutgoingHttpHeaders object. This is\n * required to support the set-cookie header, which may have multiple values.\n *\n * @param headers the headers object to convert\n * @returns the converted headers object\n */\nfunction toNodeOutgoingHttpHeaders(headers) {\n  const nodeHeaders = {};\n  const cookies = [];\n  if (headers) {\n    for (const [key, value] of headers.entries()) {\n      if (key.toLowerCase() === \"set-cookie\") {\n        // We may have gotten a comma joined string of cookies, or multiple\n        // set-cookie headers. We need to merge them into one header array\n        // to represent all the cookies.\n        cookies.push(...splitCookiesString(value));\n        nodeHeaders[key] = cookies.length === 1 ? cookies[0] : cookies;\n      } else {\n        nodeHeaders[key] = value;\n      }\n    }\n  }\n  return nodeHeaders;\n}\n/**\n * Validate the correctness of a user-provided URL.\n */\nfunction validateURL(url) {\n  try {\n    return String(new URL(String(url)));\n  } catch (error) {\n    throw new Error(`URL is malformed \"${String(url)}\". Please use only absolute URLs - https://nextjs.org/docs/messages/middleware-relative-urls`, {\n      cause: error\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/server/web/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/app-router-context.shared-runtime.js":
/*!************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/app-router-context.shared-runtime.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AppRouterContext: () => (/* binding */ e0),
/* harmony export */   GlobalLayoutRouterContext: () => (/* binding */ e2),
/* harmony export */   LayoutRouterContext: () => (/* binding */ e1),
/* harmony export */   MissingSlotContext: () => (/* binding */ e4),
/* harmony export */   TemplateContext: () => (/* binding */ e3)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/./node_modules/next/dist/esm/build/webpack/loaders/next-flight-loader/module-proxy.js");

const proxy = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/jimmullen/CascadeProjects/pinelands-wildfire-app/node_modules/next/dist/esm/shared/lib/app-router-context.shared-runtime.js`)

// Accessing the __esModule property and exporting $$typeof are required here.
// The __esModule getter forces the proxy target to create the default export
// and the $$typeof value is for rendering logic to determine if the module
// is a client boundary.
const { __esModule, $$typeof } = proxy;
const __default__ = proxy.default;

const e0 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/jimmullen/CascadeProjects/pinelands-wildfire-app/node_modules/next/dist/esm/shared/lib/app-router-context.shared-runtime.js#AppRouterContext`);

const e1 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/jimmullen/CascadeProjects/pinelands-wildfire-app/node_modules/next/dist/esm/shared/lib/app-router-context.shared-runtime.js#LayoutRouterContext`);

const e2 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/jimmullen/CascadeProjects/pinelands-wildfire-app/node_modules/next/dist/esm/shared/lib/app-router-context.shared-runtime.js#GlobalLayoutRouterContext`);

const e3 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/jimmullen/CascadeProjects/pinelands-wildfire-app/node_modules/next/dist/esm/shared/lib/app-router-context.shared-runtime.js#TemplateContext`);

const e4 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/jimmullen/CascadeProjects/pinelands-wildfire-app/node_modules/next/dist/esm/shared/lib/app-router-context.shared-runtime.js#MissingSlotContext`);


/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/constants.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/constants.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APP_BUILD_MANIFEST: () => (/* binding */ APP_BUILD_MANIFEST),\n/* harmony export */   APP_CLIENT_INTERNALS: () => (/* binding */ APP_CLIENT_INTERNALS),\n/* harmony export */   APP_PATHS_MANIFEST: () => (/* binding */ APP_PATHS_MANIFEST),\n/* harmony export */   APP_PATH_ROUTES_MANIFEST: () => (/* binding */ APP_PATH_ROUTES_MANIFEST),\n/* harmony export */   BARREL_OPTIMIZATION_PREFIX: () => (/* binding */ BARREL_OPTIMIZATION_PREFIX),\n/* harmony export */   BLOCKED_PAGES: () => (/* binding */ BLOCKED_PAGES),\n/* harmony export */   BUILD_ID_FILE: () => (/* binding */ BUILD_ID_FILE),\n/* harmony export */   BUILD_MANIFEST: () => (/* binding */ BUILD_MANIFEST),\n/* harmony export */   CLIENT_PUBLIC_FILES_PATH: () => (/* binding */ CLIENT_PUBLIC_FILES_PATH),\n/* harmony export */   CLIENT_REFERENCE_MANIFEST: () => (/* binding */ CLIENT_REFERENCE_MANIFEST),\n/* harmony export */   CLIENT_STATIC_FILES_PATH: () => (/* binding */ CLIENT_STATIC_FILES_PATH),\n/* harmony export */   CLIENT_STATIC_FILES_RUNTIME_AMP: () => (/* binding */ CLIENT_STATIC_FILES_RUNTIME_AMP),\n/* harmony export */   CLIENT_STATIC_FILES_RUNTIME_MAIN: () => (/* binding */ CLIENT_STATIC_FILES_RUNTIME_MAIN),\n/* harmony export */   CLIENT_STATIC_FILES_RUNTIME_MAIN_APP: () => (/* binding */ CLIENT_STATIC_FILES_RUNTIME_MAIN_APP),\n/* harmony export */   CLIENT_STATIC_FILES_RUNTIME_POLYFILLS: () => (/* binding */ CLIENT_STATIC_FILES_RUNTIME_POLYFILLS),\n/* harmony export */   CLIENT_STATIC_FILES_RUNTIME_POLYFILLS_SYMBOL: () => (/* binding */ CLIENT_STATIC_FILES_RUNTIME_POLYFILLS_SYMBOL),\n/* harmony export */   CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH: () => (/* binding */ CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH),\n/* harmony export */   CLIENT_STATIC_FILES_RUNTIME_WEBPACK: () => (/* binding */ CLIENT_STATIC_FILES_RUNTIME_WEBPACK),\n/* harmony export */   COMPILER_INDEXES: () => (/* binding */ COMPILER_INDEXES),\n/* harmony export */   COMPILER_NAMES: () => (/* binding */ COMPILER_NAMES),\n/* harmony export */   CONFIG_FILES: () => (/* binding */ CONFIG_FILES),\n/* harmony export */   DEFAULT_SANS_SERIF_FONT: () => (/* binding */ DEFAULT_SANS_SERIF_FONT),\n/* harmony export */   DEFAULT_SERIF_FONT: () => (/* binding */ DEFAULT_SERIF_FONT),\n/* harmony export */   DEV_CLIENT_PAGES_MANIFEST: () => (/* binding */ DEV_CLIENT_PAGES_MANIFEST),\n/* harmony export */   DEV_MIDDLEWARE_MANIFEST: () => (/* binding */ DEV_MIDDLEWARE_MANIFEST),\n/* harmony export */   EDGE_RUNTIME_WEBPACK: () => (/* binding */ EDGE_RUNTIME_WEBPACK),\n/* harmony export */   EDGE_UNSUPPORTED_NODE_APIS: () => (/* binding */ EDGE_UNSUPPORTED_NODE_APIS),\n/* harmony export */   EXPORT_DETAIL: () => (/* binding */ EXPORT_DETAIL),\n/* harmony export */   EXPORT_MARKER: () => (/* binding */ EXPORT_MARKER),\n/* harmony export */   FONT_MANIFEST: () => (/* binding */ FONT_MANIFEST),\n/* harmony export */   FUNCTIONS_CONFIG_MANIFEST: () => (/* binding */ FUNCTIONS_CONFIG_MANIFEST),\n/* harmony export */   GOOGLE_FONT_PROVIDER: () => (/* binding */ GOOGLE_FONT_PROVIDER),\n/* harmony export */   IMAGES_MANIFEST: () => (/* binding */ IMAGES_MANIFEST),\n/* harmony export */   INTERNAL_HEADERS: () => (/* binding */ INTERNAL_HEADERS),\n/* harmony export */   MIDDLEWARE_BUILD_MANIFEST: () => (/* binding */ MIDDLEWARE_BUILD_MANIFEST),\n/* harmony export */   MIDDLEWARE_MANIFEST: () => (/* binding */ MIDDLEWARE_MANIFEST),\n/* harmony export */   MIDDLEWARE_REACT_LOADABLE_MANIFEST: () => (/* binding */ MIDDLEWARE_REACT_LOADABLE_MANIFEST),\n/* harmony export */   MODERN_BROWSERSLIST_TARGET: () => (/* reexport default from dynamic */ _modern_browserslist_target__WEBPACK_IMPORTED_MODULE_0___default.a),\n/* harmony export */   NEXT_BUILTIN_DOCUMENT: () => (/* binding */ NEXT_BUILTIN_DOCUMENT),\n/* harmony export */   NEXT_FONT_MANIFEST: () => (/* binding */ NEXT_FONT_MANIFEST),\n/* harmony export */   OPTIMIZED_FONT_PROVIDERS: () => (/* binding */ OPTIMIZED_FONT_PROVIDERS),\n/* harmony export */   PAGES_MANIFEST: () => (/* binding */ PAGES_MANIFEST),\n/* harmony export */   PHASE_DEVELOPMENT_SERVER: () => (/* binding */ PHASE_DEVELOPMENT_SERVER),\n/* harmony export */   PHASE_EXPORT: () => (/* binding */ PHASE_EXPORT),\n/* harmony export */   PHASE_INFO: () => (/* binding */ PHASE_INFO),\n/* harmony export */   PHASE_PRODUCTION_BUILD: () => (/* binding */ PHASE_PRODUCTION_BUILD),\n/* harmony export */   PHASE_PRODUCTION_SERVER: () => (/* binding */ PHASE_PRODUCTION_SERVER),\n/* harmony export */   PHASE_TEST: () => (/* binding */ PHASE_TEST),\n/* harmony export */   PRERENDER_MANIFEST: () => (/* binding */ PRERENDER_MANIFEST),\n/* harmony export */   REACT_LOADABLE_MANIFEST: () => (/* binding */ REACT_LOADABLE_MANIFEST),\n/* harmony export */   ROUTES_MANIFEST: () => (/* binding */ ROUTES_MANIFEST),\n/* harmony export */   RSC_MODULE_TYPES: () => (/* binding */ RSC_MODULE_TYPES),\n/* harmony export */   SERVER_DIRECTORY: () => (/* binding */ SERVER_DIRECTORY),\n/* harmony export */   SERVER_FILES_MANIFEST: () => (/* binding */ SERVER_FILES_MANIFEST),\n/* harmony export */   SERVER_PROPS_ID: () => (/* binding */ SERVER_PROPS_ID),\n/* harmony export */   SERVER_REFERENCE_MANIFEST: () => (/* binding */ SERVER_REFERENCE_MANIFEST),\n/* harmony export */   STATIC_PROPS_ID: () => (/* binding */ STATIC_PROPS_ID),\n/* harmony export */   STATIC_STATUS_PAGES: () => (/* binding */ STATIC_STATUS_PAGES),\n/* harmony export */   STRING_LITERAL_DROP_BUNDLE: () => (/* binding */ STRING_LITERAL_DROP_BUNDLE),\n/* harmony export */   SUBRESOURCE_INTEGRITY_MANIFEST: () => (/* binding */ SUBRESOURCE_INTEGRITY_MANIFEST),\n/* harmony export */   SYSTEM_ENTRYPOINTS: () => (/* binding */ SYSTEM_ENTRYPOINTS),\n/* harmony export */   TRACE_OUTPUT_VERSION: () => (/* binding */ TRACE_OUTPUT_VERSION),\n/* harmony export */   TURBO_TRACE_DEFAULT_MEMORY_LIMIT: () => (/* binding */ TURBO_TRACE_DEFAULT_MEMORY_LIMIT)\n/* harmony export */ });\n/* harmony import */ var _modern_browserslist_target__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modern-browserslist-target */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/modern-browserslist-target.js\");\n/* harmony import */ var _modern_browserslist_target__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modern_browserslist_target__WEBPACK_IMPORTED_MODULE_0__);\n\n\nconst COMPILER_NAMES = {\n    client: \"client\",\n    server: \"server\",\n    edgeServer: \"edge-server\"\n};\n/**\n * Headers that are set by the Next.js server and should be stripped from the\n * request headers going to the user's application.\n */ const INTERNAL_HEADERS = [\n    \"x-invoke-error\",\n    \"x-invoke-output\",\n    \"x-invoke-path\",\n    \"x-invoke-query\",\n    \"x-invoke-status\",\n    \"x-middleware-invoke\"\n];\nconst COMPILER_INDEXES = {\n    [COMPILER_NAMES.client]: 0,\n    [COMPILER_NAMES.server]: 1,\n    [COMPILER_NAMES.edgeServer]: 2\n};\nconst PHASE_EXPORT = \"phase-export\";\nconst PHASE_PRODUCTION_BUILD = \"phase-production-build\";\nconst PHASE_PRODUCTION_SERVER = \"phase-production-server\";\nconst PHASE_DEVELOPMENT_SERVER = \"phase-development-server\";\nconst PHASE_TEST = \"phase-test\";\nconst PHASE_INFO = \"phase-info\";\nconst PAGES_MANIFEST = \"pages-manifest.json\";\nconst APP_PATHS_MANIFEST = \"app-paths-manifest.json\";\nconst APP_PATH_ROUTES_MANIFEST = \"app-path-routes-manifest.json\";\nconst BUILD_MANIFEST = \"build-manifest.json\";\nconst APP_BUILD_MANIFEST = \"app-build-manifest.json\";\nconst FUNCTIONS_CONFIG_MANIFEST = \"functions-config-manifest.json\";\nconst SUBRESOURCE_INTEGRITY_MANIFEST = \"subresource-integrity-manifest\";\nconst NEXT_FONT_MANIFEST = \"next-font-manifest\";\nconst EXPORT_MARKER = \"export-marker.json\";\nconst EXPORT_DETAIL = \"export-detail.json\";\nconst PRERENDER_MANIFEST = \"prerender-manifest.json\";\nconst ROUTES_MANIFEST = \"routes-manifest.json\";\nconst IMAGES_MANIFEST = \"images-manifest.json\";\nconst SERVER_FILES_MANIFEST = \"required-server-files.json\";\nconst DEV_CLIENT_PAGES_MANIFEST = \"_devPagesManifest.json\";\nconst MIDDLEWARE_MANIFEST = \"middleware-manifest.json\";\nconst DEV_MIDDLEWARE_MANIFEST = \"_devMiddlewareManifest.json\";\nconst REACT_LOADABLE_MANIFEST = \"react-loadable-manifest.json\";\nconst FONT_MANIFEST = \"font-manifest.json\";\nconst SERVER_DIRECTORY = \"server\";\nconst CONFIG_FILES = [\n    \"next.config.js\",\n    \"next.config.mjs\"\n];\nconst BUILD_ID_FILE = \"BUILD_ID\";\nconst BLOCKED_PAGES = [\n    \"/_document\",\n    \"/_app\",\n    \"/_error\"\n];\nconst CLIENT_PUBLIC_FILES_PATH = \"public\";\nconst CLIENT_STATIC_FILES_PATH = \"static\";\nconst STRING_LITERAL_DROP_BUNDLE = \"__NEXT_DROP_CLIENT_FILE__\";\nconst NEXT_BUILTIN_DOCUMENT = \"__NEXT_BUILTIN_DOCUMENT__\";\nconst BARREL_OPTIMIZATION_PREFIX = \"__barrel_optimize__\";\n// server/[entry]/page_client-reference-manifest.js\nconst CLIENT_REFERENCE_MANIFEST = \"client-reference-manifest\";\n// server/server-reference-manifest\nconst SERVER_REFERENCE_MANIFEST = \"server-reference-manifest\";\n// server/middleware-build-manifest.js\nconst MIDDLEWARE_BUILD_MANIFEST = \"middleware-build-manifest\";\n// server/middleware-react-loadable-manifest.js\nconst MIDDLEWARE_REACT_LOADABLE_MANIFEST = \"middleware-react-loadable-manifest\";\n// static/runtime/main.js\nconst CLIENT_STATIC_FILES_RUNTIME_MAIN = \"main\";\nconst CLIENT_STATIC_FILES_RUNTIME_MAIN_APP = \"\" + CLIENT_STATIC_FILES_RUNTIME_MAIN + \"-app\";\n// next internal client components chunk for layouts\nconst APP_CLIENT_INTERNALS = \"app-pages-internals\";\n// static/runtime/react-refresh.js\nconst CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH = \"react-refresh\";\n// static/runtime/amp.js\nconst CLIENT_STATIC_FILES_RUNTIME_AMP = \"amp\";\n// static/runtime/webpack.js\nconst CLIENT_STATIC_FILES_RUNTIME_WEBPACK = \"webpack\";\n// static/runtime/polyfills.js\nconst CLIENT_STATIC_FILES_RUNTIME_POLYFILLS = \"polyfills\";\nconst CLIENT_STATIC_FILES_RUNTIME_POLYFILLS_SYMBOL = Symbol(CLIENT_STATIC_FILES_RUNTIME_POLYFILLS);\nconst EDGE_RUNTIME_WEBPACK = \"edge-runtime-webpack\";\nconst STATIC_PROPS_ID = \"__N_SSG\";\nconst SERVER_PROPS_ID = \"__N_SSP\";\nconst GOOGLE_FONT_PROVIDER = \"https://fonts.googleapis.com/\";\nconst OPTIMIZED_FONT_PROVIDERS = [\n    {\n        url: GOOGLE_FONT_PROVIDER,\n        preconnect: \"https://fonts.gstatic.com\"\n    },\n    {\n        url: \"https://use.typekit.net\",\n        preconnect: \"https://use.typekit.net\"\n    }\n];\nconst DEFAULT_SERIF_FONT = {\n    name: \"Times New Roman\",\n    xAvgCharWidth: 821,\n    azAvgWidth: 854.3953488372093,\n    unitsPerEm: 2048\n};\nconst DEFAULT_SANS_SERIF_FONT = {\n    name: \"Arial\",\n    xAvgCharWidth: 904,\n    azAvgWidth: 934.5116279069767,\n    unitsPerEm: 2048\n};\nconst STATIC_STATUS_PAGES = [\n    \"/500\"\n];\nconst TRACE_OUTPUT_VERSION = 1;\n// in `MB`\nconst TURBO_TRACE_DEFAULT_MEMORY_LIMIT = 6000;\nconst RSC_MODULE_TYPES = {\n    client: \"client\",\n    server: \"server\"\n};\n// comparing\n// https://nextjs.org/docs/api-reference/edge-runtime\n// with\n// https://nodejs.org/docs/latest/api/globals.html\nconst EDGE_UNSUPPORTED_NODE_APIS = [\n    \"clearImmediate\",\n    \"setImmediate\",\n    \"BroadcastChannel\",\n    \"ByteLengthQueuingStrategy\",\n    \"CompressionStream\",\n    \"CountQueuingStrategy\",\n    \"DecompressionStream\",\n    \"DomException\",\n    \"MessageChannel\",\n    \"MessageEvent\",\n    \"MessagePort\",\n    \"ReadableByteStreamController\",\n    \"ReadableStreamBYOBRequest\",\n    \"ReadableStreamDefaultController\",\n    \"TransformStreamDefaultController\",\n    \"WritableStreamDefaultController\"\n];\nconst SYSTEM_ENTRYPOINTS = new Set([\n    CLIENT_STATIC_FILES_RUNTIME_MAIN,\n    CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH,\n    CLIENT_STATIC_FILES_RUNTIME_AMP,\n    CLIENT_STATIC_FILES_RUNTIME_MAIN_APP\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/escape-regexp.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/escape-regexp.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   escapeStringRegexp: () => (/* binding */ escapeStringRegexp)\n/* harmony export */ });\n// regexp is based on https://github.com/sindresorhus/escape-string-regexp\nconst reHasRegExp = /[|\\\\{}()[\\]^$+*?.-]/;\nconst reReplaceRegExp = /[|\\\\{}()[\\]^$+*?.-]/g;\nfunction escapeStringRegexp(str) {\n    // see also: https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/escapeRegExp.js#L23\n    if (reHasRegExp.test(str)) {\n        return str.replace(reReplaceRegExp, \"\\\\$&\");\n    }\n    return str;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL2VzY2FwZS1yZWdleHAuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0EsTUFBTUEsY0FBYztBQUNwQixNQUFNQyxrQkFBa0I7QUFDakIsU0FBU0MsbUJBQW1CQyxHQUFHO0lBQ2xDO0lBQ0EsSUFBSUgsWUFBWUksSUFBSSxDQUFDRCxNQUFNO1FBQ3ZCLE9BQU9BLElBQUlFLE9BQU8sQ0FBQ0osaUJBQWlCO0lBQ3hDO0lBQ0EsT0FBT0U7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL2VzY2FwZS1yZWdleHAuanM/NTMzNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZWdleHAgaXMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9lc2NhcGUtc3RyaW5nLXJlZ2V4cFxuY29uc3QgcmVIYXNSZWdFeHAgPSAvW3xcXFxce30oKVtcXF1eJCsqPy4tXS87XG5jb25zdCByZVJlcGxhY2VSZWdFeHAgPSAvW3xcXFxce30oKVtcXF1eJCsqPy4tXS9nO1xuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZVN0cmluZ1JlZ2V4cChzdHIpIHtcbiAgICAvLyBzZWUgYWxzbzogaHR0cHM6Ly9naXRodWIuY29tL2xvZGFzaC9sb2Rhc2gvYmxvYi8yZGEwMjRjM2I0Zjk5NDdhNDg1MTc2MzlkZTc1NjA0NTdjZDRlYzZjL2VzY2FwZVJlZ0V4cC5qcyNMMjNcbiAgICBpZiAocmVIYXNSZWdFeHAudGVzdChzdHIpKSB7XG4gICAgICAgIHJldHVybiBzdHIucmVwbGFjZShyZVJlcGxhY2VSZWdFeHAsIFwiXFxcXCQmXCIpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1lc2NhcGUtcmVnZXhwLmpzLm1hcCJdLCJuYW1lcyI6WyJyZUhhc1JlZ0V4cCIsInJlUmVwbGFjZVJlZ0V4cCIsImVzY2FwZVN0cmluZ1JlZ2V4cCIsInN0ciIsInRlc3QiLCJyZXBsYWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/escape-regexp.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/get-hostname.js":
/*!***************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/get-hostname.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getHostname: () => (/* binding */ getHostname)\n/* harmony export */ });\n/**\n * Takes an object with a hostname property (like a parsed URL) and some\n * headers that may contain Host and returns the preferred hostname.\n * @param parsed An object containing a hostname property.\n * @param headers A dictionary with headers containing a `host`.\n */ function getHostname(parsed, headers) {\n    // Get the hostname from the headers if it exists, otherwise use the parsed\n    // hostname.\n    let hostname;\n    if ((headers == null ? void 0 : headers.host) && !Array.isArray(headers.host)) {\n        hostname = headers.host.toString().split(\":\", 1)[0];\n    } else if (parsed.hostname) {\n        hostname = parsed.hostname;\n    } else return;\n    return hostname.toLowerCase();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL2dldC1ob3N0bmFtZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7O0NBS0EsR0FBVyxTQUFTQSxZQUFZQyxNQUFNLEVBQUVDLE9BQU87SUFDM0M7SUFDQTtJQUNBLElBQUlDO0lBQ0osSUFBSSxDQUFDRCxXQUFXLE9BQU8sS0FBSyxJQUFJQSxRQUFRRSxJQUFJLEtBQUssQ0FBQ0MsTUFBTUMsT0FBTyxDQUFDSixRQUFRRSxJQUFJLEdBQUc7UUFDM0VELFdBQVdELFFBQVFFLElBQUksQ0FBQ0csUUFBUSxHQUFHQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRTtJQUN2RCxPQUFPLElBQUlQLE9BQU9FLFFBQVEsRUFBRTtRQUN4QkEsV0FBV0YsT0FBT0UsUUFBUTtJQUM5QixPQUFPO0lBQ1AsT0FBT0EsU0FBU00sV0FBVztBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL2dldC1ob3N0bmFtZS5qcz83NjMxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGFrZXMgYW4gb2JqZWN0IHdpdGggYSBob3N0bmFtZSBwcm9wZXJ0eSAobGlrZSBhIHBhcnNlZCBVUkwpIGFuZCBzb21lXG4gKiBoZWFkZXJzIHRoYXQgbWF5IGNvbnRhaW4gSG9zdCBhbmQgcmV0dXJucyB0aGUgcHJlZmVycmVkIGhvc3RuYW1lLlxuICogQHBhcmFtIHBhcnNlZCBBbiBvYmplY3QgY29udGFpbmluZyBhIGhvc3RuYW1lIHByb3BlcnR5LlxuICogQHBhcmFtIGhlYWRlcnMgQSBkaWN0aW9uYXJ5IHdpdGggaGVhZGVycyBjb250YWluaW5nIGEgYGhvc3RgLlxuICovIGV4cG9ydCBmdW5jdGlvbiBnZXRIb3N0bmFtZShwYXJzZWQsIGhlYWRlcnMpIHtcbiAgICAvLyBHZXQgdGhlIGhvc3RuYW1lIGZyb20gdGhlIGhlYWRlcnMgaWYgaXQgZXhpc3RzLCBvdGhlcndpc2UgdXNlIHRoZSBwYXJzZWRcbiAgICAvLyBob3N0bmFtZS5cbiAgICBsZXQgaG9zdG5hbWU7XG4gICAgaWYgKChoZWFkZXJzID09IG51bGwgPyB2b2lkIDAgOiBoZWFkZXJzLmhvc3QpICYmICFBcnJheS5pc0FycmF5KGhlYWRlcnMuaG9zdCkpIHtcbiAgICAgICAgaG9zdG5hbWUgPSBoZWFkZXJzLmhvc3QudG9TdHJpbmcoKS5zcGxpdChcIjpcIiwgMSlbMF07XG4gICAgfSBlbHNlIGlmIChwYXJzZWQuaG9zdG5hbWUpIHtcbiAgICAgICAgaG9zdG5hbWUgPSBwYXJzZWQuaG9zdG5hbWU7XG4gICAgfSBlbHNlIHJldHVybjtcbiAgICByZXR1cm4gaG9zdG5hbWUudG9Mb3dlckNhc2UoKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0LWhvc3RuYW1lLmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRIb3N0bmFtZSIsInBhcnNlZCIsImhlYWRlcnMiLCJob3N0bmFtZSIsImhvc3QiLCJBcnJheSIsImlzQXJyYXkiLCJ0b1N0cmluZyIsInNwbGl0IiwidG9Mb3dlckNhc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/get-hostname.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/i18n/detect-domain-locale.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/i18n/detect-domain-locale.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   detectDomainLocale: () => (/* binding */ detectDomainLocale)\n/* harmony export */ });\nfunction detectDomainLocale(domainItems, hostname, detectedLocale) {\n    if (!domainItems) return;\n    if (detectedLocale) {\n        detectedLocale = detectedLocale.toLowerCase();\n    }\n    for (const item of domainItems){\n        var _item_domain, _item_locales;\n        // remove port if present\n        const domainHostname = (_item_domain = item.domain) == null ? void 0 : _item_domain.split(\":\", 1)[0].toLowerCase();\n        if (hostname === domainHostname || detectedLocale === item.defaultLocale.toLowerCase() || ((_item_locales = item.locales) == null ? void 0 : _item_locales.some((locale)=>locale.toLowerCase() === detectedLocale))) {\n            return item;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL2kxOG4vZGV0ZWN0LWRvbWFpbi1sb2NhbGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLG1CQUFtQkMsV0FBVyxFQUFFQyxRQUFRLEVBQUVDLGNBQWM7SUFDcEUsSUFBSSxDQUFDRixhQUFhO0lBQ2xCLElBQUlFLGdCQUFnQjtRQUNoQkEsaUJBQWlCQSxlQUFlQyxXQUFXO0lBQy9DO0lBQ0EsS0FBSyxNQUFNQyxRQUFRSixZQUFZO1FBQzNCLElBQUlLLGNBQWNDO1FBQ2xCO1FBQ0EsTUFBTUMsaUJBQWlCLENBQUNGLGVBQWVELEtBQUtJLE1BQU0sS0FBSyxPQUFPLEtBQUssSUFBSUgsYUFBYUksS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQ04sV0FBVztRQUNoSCxJQUFJRixhQUFhTSxrQkFBa0JMLG1CQUFtQkUsS0FBS00sYUFBYSxDQUFDUCxXQUFXLE1BQU8sRUFBQ0csZ0JBQWdCRixLQUFLTyxPQUFPLEtBQUssT0FBTyxLQUFLLElBQUlMLGNBQWNNLElBQUksQ0FBRUMsQ0FBQUEsU0FBU0EsT0FBT1YsV0FBVyxPQUFPRCxlQUFjLEdBQUk7WUFDak4sT0FBT0U7UUFDWDtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2hhcmVkL2xpYi9pMThuL2RldGVjdC1kb21haW4tbG9jYWxlLmpzP2JjYTciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGRldGVjdERvbWFpbkxvY2FsZShkb21haW5JdGVtcywgaG9zdG5hbWUsIGRldGVjdGVkTG9jYWxlKSB7XG4gICAgaWYgKCFkb21haW5JdGVtcykgcmV0dXJuO1xuICAgIGlmIChkZXRlY3RlZExvY2FsZSkge1xuICAgICAgICBkZXRlY3RlZExvY2FsZSA9IGRldGVjdGVkTG9jYWxlLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBkb21haW5JdGVtcyl7XG4gICAgICAgIHZhciBfaXRlbV9kb21haW4sIF9pdGVtX2xvY2FsZXM7XG4gICAgICAgIC8vIHJlbW92ZSBwb3J0IGlmIHByZXNlbnRcbiAgICAgICAgY29uc3QgZG9tYWluSG9zdG5hbWUgPSAoX2l0ZW1fZG9tYWluID0gaXRlbS5kb21haW4pID09IG51bGwgPyB2b2lkIDAgOiBfaXRlbV9kb21haW4uc3BsaXQoXCI6XCIsIDEpWzBdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChob3N0bmFtZSA9PT0gZG9tYWluSG9zdG5hbWUgfHwgZGV0ZWN0ZWRMb2NhbGUgPT09IGl0ZW0uZGVmYXVsdExvY2FsZS50b0xvd2VyQ2FzZSgpIHx8ICgoX2l0ZW1fbG9jYWxlcyA9IGl0ZW0ubG9jYWxlcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9pdGVtX2xvY2FsZXMuc29tZSgobG9jYWxlKT0+bG9jYWxlLnRvTG93ZXJDYXNlKCkgPT09IGRldGVjdGVkTG9jYWxlKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZXRlY3QtZG9tYWluLWxvY2FsZS5qcy5tYXAiXSwibmFtZXMiOlsiZGV0ZWN0RG9tYWluTG9jYWxlIiwiZG9tYWluSXRlbXMiLCJob3N0bmFtZSIsImRldGVjdGVkTG9jYWxlIiwidG9Mb3dlckNhc2UiLCJpdGVtIiwiX2l0ZW1fZG9tYWluIiwiX2l0ZW1fbG9jYWxlcyIsImRvbWFpbkhvc3RuYW1lIiwiZG9tYWluIiwic3BsaXQiLCJkZWZhdWx0TG9jYWxlIiwibG9jYWxlcyIsInNvbWUiLCJsb2NhbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/i18n/detect-domain-locale.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/i18n/normalize-locale-path.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/i18n/normalize-locale-path.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalizeLocalePath: () => (/* binding */ normalizeLocalePath)\n/* harmony export */ });\n/**\n * For a pathname that may include a locale from a list of locales, it\n * removes the locale from the pathname returning it alongside with the\n * detected locale.\n *\n * @param pathname A pathname that may include a locale.\n * @param locales A list of locales.\n * @returns The detected locale and pathname without locale\n */ function normalizeLocalePath(pathname, locales) {\n    let detectedLocale;\n    // first item will be empty string from splitting at first char\n    const pathnameParts = pathname.split(\"/\");\n    (locales || []).some((locale)=>{\n        if (pathnameParts[1] && pathnameParts[1].toLowerCase() === locale.toLowerCase()) {\n            detectedLocale = locale;\n            pathnameParts.splice(1, 1);\n            pathname = pathnameParts.join(\"/\") || \"/\";\n            return true;\n        }\n        return false;\n    });\n    return {\n        pathname,\n        detectedLocale\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL2kxOG4vbm9ybWFsaXplLWxvY2FsZS1wYXRoLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Ozs7Q0FRQSxHQUFXLFNBQVNBLG9CQUFvQkMsUUFBUSxFQUFFQyxPQUFPO0lBQ3JELElBQUlDO0lBQ0o7SUFDQSxNQUFNQyxnQkFBZ0JILFNBQVNJLEtBQUssQ0FBQztJQUNwQ0gsQ0FBQUEsV0FBVyxFQUFFLEVBQUVJLElBQUksQ0FBRUMsQ0FBQUE7UUFDbEIsSUFBSUgsYUFBYSxDQUFDLEVBQUUsSUFBSUEsYUFBYSxDQUFDLEVBQUUsQ0FBQ0ksV0FBVyxPQUFPRCxPQUFPQyxXQUFXLElBQUk7WUFDN0VMLGlCQUFpQkk7WUFDakJILGNBQWNLLE1BQU0sQ0FBQyxHQUFHO1lBQ3hCUixXQUFXRyxjQUFjTSxJQUFJLENBQUMsUUFBUTtZQUN0QyxPQUFPO1FBQ1g7UUFDQSxPQUFPO0lBQ1g7SUFDQSxPQUFPO1FBQ0hUO1FBQ0FFO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL2kxOG4vbm9ybWFsaXplLWxvY2FsZS1wYXRoLmpzPzZmODYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBGb3IgYSBwYXRobmFtZSB0aGF0IG1heSBpbmNsdWRlIGEgbG9jYWxlIGZyb20gYSBsaXN0IG9mIGxvY2FsZXMsIGl0XG4gKiByZW1vdmVzIHRoZSBsb2NhbGUgZnJvbSB0aGUgcGF0aG5hbWUgcmV0dXJuaW5nIGl0IGFsb25nc2lkZSB3aXRoIHRoZVxuICogZGV0ZWN0ZWQgbG9jYWxlLlxuICpcbiAqIEBwYXJhbSBwYXRobmFtZSBBIHBhdGhuYW1lIHRoYXQgbWF5IGluY2x1ZGUgYSBsb2NhbGUuXG4gKiBAcGFyYW0gbG9jYWxlcyBBIGxpc3Qgb2YgbG9jYWxlcy5cbiAqIEByZXR1cm5zIFRoZSBkZXRlY3RlZCBsb2NhbGUgYW5kIHBhdGhuYW1lIHdpdGhvdXQgbG9jYWxlXG4gKi8gZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUxvY2FsZVBhdGgocGF0aG5hbWUsIGxvY2FsZXMpIHtcbiAgICBsZXQgZGV0ZWN0ZWRMb2NhbGU7XG4gICAgLy8gZmlyc3QgaXRlbSB3aWxsIGJlIGVtcHR5IHN0cmluZyBmcm9tIHNwbGl0dGluZyBhdCBmaXJzdCBjaGFyXG4gICAgY29uc3QgcGF0aG5hbWVQYXJ0cyA9IHBhdGhuYW1lLnNwbGl0KFwiL1wiKTtcbiAgICAobG9jYWxlcyB8fCBbXSkuc29tZSgobG9jYWxlKT0+e1xuICAgICAgICBpZiAocGF0aG5hbWVQYXJ0c1sxXSAmJiBwYXRobmFtZVBhcnRzWzFdLnRvTG93ZXJDYXNlKCkgPT09IGxvY2FsZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICBkZXRlY3RlZExvY2FsZSA9IGxvY2FsZTtcbiAgICAgICAgICAgIHBhdGhuYW1lUGFydHMuc3BsaWNlKDEsIDEpO1xuICAgICAgICAgICAgcGF0aG5hbWUgPSBwYXRobmFtZVBhcnRzLmpvaW4oXCIvXCIpIHx8IFwiL1wiO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHBhdGhuYW1lLFxuICAgICAgICBkZXRlY3RlZExvY2FsZVxuICAgIH07XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vcm1hbGl6ZS1sb2NhbGUtcGF0aC5qcy5tYXAiXSwibmFtZXMiOlsibm9ybWFsaXplTG9jYWxlUGF0aCIsInBhdGhuYW1lIiwibG9jYWxlcyIsImRldGVjdGVkTG9jYWxlIiwicGF0aG5hbWVQYXJ0cyIsInNwbGl0Iiwic29tZSIsImxvY2FsZSIsInRvTG93ZXJDYXNlIiwic3BsaWNlIiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/i18n/normalize-locale-path.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/isomorphic/path.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/isomorphic/path.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * This module is for next.js server internal usage of path module.\n * It will use native path module for nodejs runtime.\n * It will use path-browserify polyfill for edge runtime.\n */ let path;\nif (true) {\n    path = __webpack_require__(/*! next/dist/compiled/path-browserify */ \"(rsc)/./node_modules/next/dist/compiled/path-browserify/index.js\");\n} else {}\nmodule.exports = path;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL2lzb21vcnBoaWMvcGF0aC5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Q0FJQSxHQUFJLElBQUlBO0FBQ1IsSUFBSUMsSUFBbUMsRUFBRTtJQUNyQ0QsT0FBT0ksbUJBQU9BLENBQUMsNEdBQW9DO0FBQ3ZELE9BQU8sRUFFTjtBQUNEQyxPQUFPQyxPQUFPLEdBQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvZXNtL3NoYXJlZC9saWIvaXNvbW9ycGhpYy9wYXRoLmpzPzQ0MjYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIG1vZHVsZSBpcyBmb3IgbmV4dC5qcyBzZXJ2ZXIgaW50ZXJuYWwgdXNhZ2Ugb2YgcGF0aCBtb2R1bGUuXG4gKiBJdCB3aWxsIHVzZSBuYXRpdmUgcGF0aCBtb2R1bGUgZm9yIG5vZGVqcyBydW50aW1lLlxuICogSXQgd2lsbCB1c2UgcGF0aC1icm93c2VyaWZ5IHBvbHlmaWxsIGZvciBlZGdlIHJ1bnRpbWUuXG4gKi8gbGV0IHBhdGg7XG5pZiAocHJvY2Vzcy5lbnYuTkVYVF9SVU5USU1FID09PSBcImVkZ2VcIikge1xuICAgIHBhdGggPSByZXF1aXJlKFwibmV4dC9kaXN0L2NvbXBpbGVkL3BhdGgtYnJvd3NlcmlmeVwiKTtcbn0gZWxzZSB7XG4gICAgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBwYXRoO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXRoLmpzLm1hcCJdLCJuYW1lcyI6WyJwYXRoIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUlVOVElNRSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/isomorphic/path.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/modern-browserslist-target.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/modern-browserslist-target.js ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n// Note: This file is JS because it's used by the taskfile-swc.js file, which is JS.\n// Keep file changes in sync with the corresponding `.d.ts` files.\n/**\n * These are the browser versions that support all of the following:\n * static import: https://caniuse.com/es6-module\n * dynamic import: https://caniuse.com/es6-module-dynamic-import\n * import.meta: https://caniuse.com/mdn-javascript_operators_import_meta\n */ const MODERN_BROWSERSLIST_TARGET = [\n    \"chrome 64\",\n    \"edge 79\",\n    \"firefox 67\",\n    \"opera 51\",\n    \"safari 12\"\n];\nmodule.exports = MODERN_BROWSERSLIST_TARGET;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL21vZGVybi1icm93c2Vyc2xpc3QtdGFyZ2V0LmpzIiwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7Ozs7O0NBS0EsR0FBSSxNQUFNQSw2QkFBNkI7SUFDbkM7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBQ0RDLE9BQU9DLE9BQU8sR0FBR0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2hhcmVkL2xpYi9tb2Rlcm4tYnJvd3NlcnNsaXN0LXRhcmdldC5qcz8xMTAzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIE5vdGU6IFRoaXMgZmlsZSBpcyBKUyBiZWNhdXNlIGl0J3MgdXNlZCBieSB0aGUgdGFza2ZpbGUtc3djLmpzIGZpbGUsIHdoaWNoIGlzIEpTLlxuLy8gS2VlcCBmaWxlIGNoYW5nZXMgaW4gc3luYyB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIGAuZC50c2AgZmlsZXMuXG4vKipcbiAqIFRoZXNlIGFyZSB0aGUgYnJvd3NlciB2ZXJzaW9ucyB0aGF0IHN1cHBvcnQgYWxsIG9mIHRoZSBmb2xsb3dpbmc6XG4gKiBzdGF0aWMgaW1wb3J0OiBodHRwczovL2Nhbml1c2UuY29tL2VzNi1tb2R1bGVcbiAqIGR5bmFtaWMgaW1wb3J0OiBodHRwczovL2Nhbml1c2UuY29tL2VzNi1tb2R1bGUtZHluYW1pYy1pbXBvcnRcbiAqIGltcG9ydC5tZXRhOiBodHRwczovL2Nhbml1c2UuY29tL21kbi1qYXZhc2NyaXB0X29wZXJhdG9yc19pbXBvcnRfbWV0YVxuICovIGNvbnN0IE1PREVSTl9CUk9XU0VSU0xJU1RfVEFSR0VUID0gW1xuICAgIFwiY2hyb21lIDY0XCIsXG4gICAgXCJlZGdlIDc5XCIsXG4gICAgXCJmaXJlZm94IDY3XCIsXG4gICAgXCJvcGVyYSA1MVwiLFxuICAgIFwic2FmYXJpIDEyXCJcbl07XG5tb2R1bGUuZXhwb3J0cyA9IE1PREVSTl9CUk9XU0VSU0xJU1RfVEFSR0VUO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2Rlcm4tYnJvd3NlcnNsaXN0LXRhcmdldC5qcy5tYXAiXSwibmFtZXMiOlsiTU9ERVJOX0JST1dTRVJTTElTVF9UQVJHRVQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/modern-browserslist-target.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/page-path/ensure-leading-slash.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/page-path/ensure-leading-slash.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ensureLeadingSlash: () => (/* binding */ ensureLeadingSlash)\n/* harmony export */ });\n/**\n * For a given page path, this function ensures that there is a leading slash.\n * If there is not a leading slash, one is added, otherwise it is noop.\n */ function ensureLeadingSlash(path) {\n    return path.startsWith(\"/\") ? path : \"/\" + path;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3BhZ2UtcGF0aC9lbnN1cmUtbGVhZGluZy1zbGFzaC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7OztDQUdBLEdBQVcsU0FBU0EsbUJBQW1CQyxJQUFJO0lBQ3ZDLE9BQU9BLEtBQUtDLFVBQVUsQ0FBQyxPQUFPRCxPQUFPLE1BQU1BO0FBQy9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvZXNtL3NoYXJlZC9saWIvcGFnZS1wYXRoL2Vuc3VyZS1sZWFkaW5nLXNsYXNoLmpzPzA0NjQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBGb3IgYSBnaXZlbiBwYWdlIHBhdGgsIHRoaXMgZnVuY3Rpb24gZW5zdXJlcyB0aGF0IHRoZXJlIGlzIGEgbGVhZGluZyBzbGFzaC5cbiAqIElmIHRoZXJlIGlzIG5vdCBhIGxlYWRpbmcgc2xhc2gsIG9uZSBpcyBhZGRlZCwgb3RoZXJ3aXNlIGl0IGlzIG5vb3AuXG4gKi8gZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZUxlYWRpbmdTbGFzaChwYXRoKSB7XG4gICAgcmV0dXJuIHBhdGguc3RhcnRzV2l0aChcIi9cIikgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnN1cmUtbGVhZGluZy1zbGFzaC5qcy5tYXAiXSwibmFtZXMiOlsiZW5zdXJlTGVhZGluZ1NsYXNoIiwicGF0aCIsInN0YXJ0c1dpdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/page-path/ensure-leading-slash.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/page-path/normalize-page-path.js":
/*!********************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/page-path/normalize-page-path.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalizePagePath: () => (/* binding */ normalizePagePath)\n/* harmony export */ });\n/* harmony import */ var _ensure_leading_slash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ensure-leading-slash */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/page-path/ensure-leading-slash.js\");\n/* harmony import */ var _router_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../router/utils */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/index.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/utils.js\");\n\n\n\n/**\n * Takes a page and transforms it into its file counterpart ensuring that the\n * output is normalized. Note this function is not idempotent because a page\n * `/index` can be referencing `/index/index.js` and `/index/index` could be\n * referencing `/index/index/index.js`. Examples:\n *  - `/` -> `/index`\n *  - `/index/foo` -> `/index/index/foo`\n *  - `/index` -> `/index/index`\n */ function normalizePagePath(page) {\n    const normalized = /^\\/index(\\/|$)/.test(page) && !(0,_router_utils__WEBPACK_IMPORTED_MODULE_1__.isDynamicRoute)(page) ? \"/index\" + page : page === \"/\" ? \"/index\" : (0,_ensure_leading_slash__WEBPACK_IMPORTED_MODULE_0__.ensureLeadingSlash)(page);\n    if (false) {}\n    return normalized;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3BhZ2UtcGF0aC9ub3JtYWxpemUtcGFnZS1wYXRoLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBMkQ7QUFDWDtBQUNQO0FBQ3pDOzs7Ozs7OztDQVFBLEdBQVcsU0FBU0csa0JBQWtCQyxJQUFJO0lBQ3RDLE1BQU1DLGFBQWEsaUJBQWlCQyxJQUFJLENBQUNGLFNBQVMsQ0FBQ0gsNkRBQWNBLENBQUNHLFFBQVEsV0FBV0EsT0FBT0EsU0FBUyxNQUFNLFdBQVdKLHlFQUFrQkEsQ0FBQ0k7SUFDekksSUFBSUcsS0FBbUMsRUFBRSxFQU14QztJQUNELE9BQU9GO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2hhcmVkL2xpYi9wYWdlLXBhdGgvbm9ybWFsaXplLXBhZ2UtcGF0aC5qcz8zYjhjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVuc3VyZUxlYWRpbmdTbGFzaCB9IGZyb20gXCIuL2Vuc3VyZS1sZWFkaW5nLXNsYXNoXCI7XG5pbXBvcnQgeyBpc0R5bmFtaWNSb3V0ZSB9IGZyb20gXCIuLi9yb3V0ZXIvdXRpbHNcIjtcbmltcG9ydCB7IE5vcm1hbGl6ZUVycm9yIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG4vKipcbiAqIFRha2VzIGEgcGFnZSBhbmQgdHJhbnNmb3JtcyBpdCBpbnRvIGl0cyBmaWxlIGNvdW50ZXJwYXJ0IGVuc3VyaW5nIHRoYXQgdGhlXG4gKiBvdXRwdXQgaXMgbm9ybWFsaXplZC4gTm90ZSB0aGlzIGZ1bmN0aW9uIGlzIG5vdCBpZGVtcG90ZW50IGJlY2F1c2UgYSBwYWdlXG4gKiBgL2luZGV4YCBjYW4gYmUgcmVmZXJlbmNpbmcgYC9pbmRleC9pbmRleC5qc2AgYW5kIGAvaW5kZXgvaW5kZXhgIGNvdWxkIGJlXG4gKiByZWZlcmVuY2luZyBgL2luZGV4L2luZGV4L2luZGV4LmpzYC4gRXhhbXBsZXM6XG4gKiAgLSBgL2AgLT4gYC9pbmRleGBcbiAqICAtIGAvaW5kZXgvZm9vYCAtPiBgL2luZGV4L2luZGV4L2Zvb2BcbiAqICAtIGAvaW5kZXhgIC0+IGAvaW5kZXgvaW5kZXhgXG4gKi8gZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZVBhZ2VQYXRoKHBhZ2UpIHtcbiAgICBjb25zdCBub3JtYWxpemVkID0gL15cXC9pbmRleChcXC98JCkvLnRlc3QocGFnZSkgJiYgIWlzRHluYW1pY1JvdXRlKHBhZ2UpID8gXCIvaW5kZXhcIiArIHBhZ2UgOiBwYWdlID09PSBcIi9cIiA/IFwiL2luZGV4XCIgOiBlbnN1cmVMZWFkaW5nU2xhc2gocGFnZSk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5FWFRfUlVOVElNRSAhPT0gXCJlZGdlXCIpIHtcbiAgICAgICAgY29uc3QgeyBwb3NpeCB9ID0gcmVxdWlyZShcInBhdGhcIik7XG4gICAgICAgIGNvbnN0IHJlc29sdmVkUGFnZSA9IHBvc2l4Lm5vcm1hbGl6ZShub3JtYWxpemVkKTtcbiAgICAgICAgaWYgKHJlc29sdmVkUGFnZSAhPT0gbm9ybWFsaXplZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE5vcm1hbGl6ZUVycm9yKFwiUmVxdWVzdGVkIGFuZCByZXNvbHZlZCBwYWdlIG1pc21hdGNoOiBcIiArIG5vcm1hbGl6ZWQgKyBcIiBcIiArIHJlc29sdmVkUGFnZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vcm1hbGl6ZWQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vcm1hbGl6ZS1wYWdlLXBhdGguanMubWFwIl0sIm5hbWVzIjpbImVuc3VyZUxlYWRpbmdTbGFzaCIsImlzRHluYW1pY1JvdXRlIiwiTm9ybWFsaXplRXJyb3IiLCJub3JtYWxpemVQYWdlUGF0aCIsInBhZ2UiLCJub3JtYWxpemVkIiwidGVzdCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1JVTlRJTUUiLCJwb3NpeCIsInJlcXVpcmUiLCJyZXNvbHZlZFBhZ2UiLCJub3JtYWxpemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/page-path/normalize-page-path.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/add-locale.js":
/*!**************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/router/utils/add-locale.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addLocale: () => (/* binding */ addLocale)\n/* harmony export */ });\n/* harmony import */ var _add_path_prefix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./add-path-prefix */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/add-path-prefix.js\");\n/* harmony import */ var _path_has_prefix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./path-has-prefix */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/path-has-prefix.js\");\n\n\n/**\n * For a given path and a locale, if the locale is given, it will prefix the\n * locale. The path shouldn't be an API path. If a default locale is given the\n * prefix will be omitted if the locale is already the default locale.\n */ function addLocale(path, locale, defaultLocale, ignorePrefix) {\n    // If no locale was given or the locale is the default locale, we don't need\n    // to prefix the path.\n    if (!locale || locale === defaultLocale) return path;\n    const lower = path.toLowerCase();\n    // If the path is an API path or the path already has the locale prefix, we\n    // don't need to prefix the path.\n    if (!ignorePrefix) {\n        if ((0,_path_has_prefix__WEBPACK_IMPORTED_MODULE_1__.pathHasPrefix)(lower, \"/api\")) return path;\n        if ((0,_path_has_prefix__WEBPACK_IMPORTED_MODULE_1__.pathHasPrefix)(lower, \"/\" + locale.toLowerCase())) return path;\n    }\n    // Add the locale prefix to the path.\n    return (0,_add_path_prefix__WEBPACK_IMPORTED_MODULE_0__.addPathPrefix)(path, \"/\" + locale);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3JvdXRlci91dGlscy9hZGQtbG9jYWxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpRDtBQUNBO0FBQ2pEOzs7O0NBSUEsR0FBVyxTQUFTRSxVQUFVQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsYUFBYSxFQUFFQyxZQUFZO0lBQ25FO0lBQ0E7SUFDQSxJQUFJLENBQUNGLFVBQVVBLFdBQVdDLGVBQWUsT0FBT0Y7SUFDaEQsTUFBTUksUUFBUUosS0FBS0ssV0FBVztJQUM5QjtJQUNBO0lBQ0EsSUFBSSxDQUFDRixjQUFjO1FBQ2YsSUFBSUwsK0RBQWFBLENBQUNNLE9BQU8sU0FBUyxPQUFPSjtRQUN6QyxJQUFJRiwrREFBYUEsQ0FBQ00sT0FBTyxNQUFNSCxPQUFPSSxXQUFXLEtBQUssT0FBT0w7SUFDakU7SUFDQTtJQUNBLE9BQU9ILCtEQUFhQSxDQUFDRyxNQUFNLE1BQU1DO0FBQ3JDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvZXNtL3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2FkZC1sb2NhbGUuanM/ZjgzMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhZGRQYXRoUHJlZml4IH0gZnJvbSBcIi4vYWRkLXBhdGgtcHJlZml4XCI7XG5pbXBvcnQgeyBwYXRoSGFzUHJlZml4IH0gZnJvbSBcIi4vcGF0aC1oYXMtcHJlZml4XCI7XG4vKipcbiAqIEZvciBhIGdpdmVuIHBhdGggYW5kIGEgbG9jYWxlLCBpZiB0aGUgbG9jYWxlIGlzIGdpdmVuLCBpdCB3aWxsIHByZWZpeCB0aGVcbiAqIGxvY2FsZS4gVGhlIHBhdGggc2hvdWxkbid0IGJlIGFuIEFQSSBwYXRoLiBJZiBhIGRlZmF1bHQgbG9jYWxlIGlzIGdpdmVuIHRoZVxuICogcHJlZml4IHdpbGwgYmUgb21pdHRlZCBpZiB0aGUgbG9jYWxlIGlzIGFscmVhZHkgdGhlIGRlZmF1bHQgbG9jYWxlLlxuICovIGV4cG9ydCBmdW5jdGlvbiBhZGRMb2NhbGUocGF0aCwgbG9jYWxlLCBkZWZhdWx0TG9jYWxlLCBpZ25vcmVQcmVmaXgpIHtcbiAgICAvLyBJZiBubyBsb2NhbGUgd2FzIGdpdmVuIG9yIHRoZSBsb2NhbGUgaXMgdGhlIGRlZmF1bHQgbG9jYWxlLCB3ZSBkb24ndCBuZWVkXG4gICAgLy8gdG8gcHJlZml4IHRoZSBwYXRoLlxuICAgIGlmICghbG9jYWxlIHx8IGxvY2FsZSA9PT0gZGVmYXVsdExvY2FsZSkgcmV0dXJuIHBhdGg7XG4gICAgY29uc3QgbG93ZXIgPSBwYXRoLnRvTG93ZXJDYXNlKCk7XG4gICAgLy8gSWYgdGhlIHBhdGggaXMgYW4gQVBJIHBhdGggb3IgdGhlIHBhdGggYWxyZWFkeSBoYXMgdGhlIGxvY2FsZSBwcmVmaXgsIHdlXG4gICAgLy8gZG9uJ3QgbmVlZCB0byBwcmVmaXggdGhlIHBhdGguXG4gICAgaWYgKCFpZ25vcmVQcmVmaXgpIHtcbiAgICAgICAgaWYgKHBhdGhIYXNQcmVmaXgobG93ZXIsIFwiL2FwaVwiKSkgcmV0dXJuIHBhdGg7XG4gICAgICAgIGlmIChwYXRoSGFzUHJlZml4KGxvd2VyLCBcIi9cIiArIGxvY2FsZS50b0xvd2VyQ2FzZSgpKSkgcmV0dXJuIHBhdGg7XG4gICAgfVxuICAgIC8vIEFkZCB0aGUgbG9jYWxlIHByZWZpeCB0byB0aGUgcGF0aC5cbiAgICByZXR1cm4gYWRkUGF0aFByZWZpeChwYXRoLCBcIi9cIiArIGxvY2FsZSk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZC1sb2NhbGUuanMubWFwIl0sIm5hbWVzIjpbImFkZFBhdGhQcmVmaXgiLCJwYXRoSGFzUHJlZml4IiwiYWRkTG9jYWxlIiwicGF0aCIsImxvY2FsZSIsImRlZmF1bHRMb2NhbGUiLCJpZ25vcmVQcmVmaXgiLCJsb3dlciIsInRvTG93ZXJDYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/add-locale.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/add-path-prefix.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/router/utils/add-path-prefix.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addPathPrefix: () => (/* binding */ addPathPrefix)\n/* harmony export */ });\n/* harmony import */ var _parse_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse-path */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/parse-path.js\");\n\n/**\n * Adds the provided prefix to the given path. It first ensures that the path\n * is indeed starting with a slash.\n */ function addPathPrefix(path, prefix) {\n    if (!path.startsWith(\"/\") || !prefix) {\n        return path;\n    }\n    const { pathname, query, hash } = (0,_parse_path__WEBPACK_IMPORTED_MODULE_0__.parsePath)(path);\n    return \"\" + prefix + pathname + query + hash;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3JvdXRlci91dGlscy9hZGQtcGF0aC1wcmVmaXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0M7QUFDeEM7OztDQUdBLEdBQVcsU0FBU0MsY0FBY0MsSUFBSSxFQUFFQyxNQUFNO0lBQzFDLElBQUksQ0FBQ0QsS0FBS0UsVUFBVSxDQUFDLFFBQVEsQ0FBQ0QsUUFBUTtRQUNsQyxPQUFPRDtJQUNYO0lBQ0EsTUFBTSxFQUFFRyxRQUFRLEVBQUVDLEtBQUssRUFBRUMsSUFBQUEsRUFBTSxHQUFHUCxzREFBU0EsQ0FBQ0U7SUFDNUMsT0FBTyxLQUFLQyxTQUFTRSxXQUFXQyxRQUFRQztBQUM1QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3JvdXRlci91dGlscy9hZGQtcGF0aC1wcmVmaXguanM/MTA3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZVBhdGggfSBmcm9tIFwiLi9wYXJzZS1wYXRoXCI7XG4vKipcbiAqIEFkZHMgdGhlIHByb3ZpZGVkIHByZWZpeCB0byB0aGUgZ2l2ZW4gcGF0aC4gSXQgZmlyc3QgZW5zdXJlcyB0aGF0IHRoZSBwYXRoXG4gKiBpcyBpbmRlZWQgc3RhcnRpbmcgd2l0aCBhIHNsYXNoLlxuICovIGV4cG9ydCBmdW5jdGlvbiBhZGRQYXRoUHJlZml4KHBhdGgsIHByZWZpeCkge1xuICAgIGlmICghcGF0aC5zdGFydHNXaXRoKFwiL1wiKSB8fCAhcHJlZml4KSB7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICBjb25zdCB7IHBhdGhuYW1lLCBxdWVyeSwgaGFzaCB9ID0gcGFyc2VQYXRoKHBhdGgpO1xuICAgIHJldHVybiBcIlwiICsgcHJlZml4ICsgcGF0aG5hbWUgKyBxdWVyeSArIGhhc2g7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZC1wYXRoLXByZWZpeC5qcy5tYXAiXSwibmFtZXMiOlsicGFyc2VQYXRoIiwiYWRkUGF0aFByZWZpeCIsInBhdGgiLCJwcmVmaXgiLCJzdGFydHNXaXRoIiwicGF0aG5hbWUiLCJxdWVyeSIsImhhc2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/add-path-prefix.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/add-path-suffix.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/router/utils/add-path-suffix.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addPathSuffix: () => (/* binding */ addPathSuffix)\n/* harmony export */ });\n/* harmony import */ var _parse_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse-path */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/parse-path.js\");\n\n/**\n * Similarly to `addPathPrefix`, this function adds a suffix at the end on the\n * provided path. It also works only for paths ensuring the argument starts\n * with a slash.\n */ function addPathSuffix(path, suffix) {\n    if (!path.startsWith(\"/\") || !suffix) {\n        return path;\n    }\n    const { pathname, query, hash } = (0,_parse_path__WEBPACK_IMPORTED_MODULE_0__.parsePath)(path);\n    return \"\" + pathname + suffix + query + hash;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3JvdXRlci91dGlscy9hZGQtcGF0aC1zdWZmaXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0M7QUFDeEM7Ozs7Q0FJQSxHQUFXLFNBQVNDLGNBQWNDLElBQUksRUFBRUMsTUFBTTtJQUMxQyxJQUFJLENBQUNELEtBQUtFLFVBQVUsQ0FBQyxRQUFRLENBQUNELFFBQVE7UUFDbEMsT0FBT0Q7SUFDWDtJQUNBLE1BQU0sRUFBRUcsUUFBUSxFQUFFQyxLQUFLLEVBQUVDLElBQUFBLEVBQU0sR0FBR1Asc0RBQVNBLENBQUNFO0lBQzVDLE9BQU8sS0FBS0csV0FBV0YsU0FBU0csUUFBUUM7QUFDNUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvYWRkLXBhdGgtc3VmZml4LmpzP2RmY2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VQYXRoIH0gZnJvbSBcIi4vcGFyc2UtcGF0aFwiO1xuLyoqXG4gKiBTaW1pbGFybHkgdG8gYGFkZFBhdGhQcmVmaXhgLCB0aGlzIGZ1bmN0aW9uIGFkZHMgYSBzdWZmaXggYXQgdGhlIGVuZCBvbiB0aGVcbiAqIHByb3ZpZGVkIHBhdGguIEl0IGFsc28gd29ya3Mgb25seSBmb3IgcGF0aHMgZW5zdXJpbmcgdGhlIGFyZ3VtZW50IHN0YXJ0c1xuICogd2l0aCBhIHNsYXNoLlxuICovIGV4cG9ydCBmdW5jdGlvbiBhZGRQYXRoU3VmZml4KHBhdGgsIHN1ZmZpeCkge1xuICAgIGlmICghcGF0aC5zdGFydHNXaXRoKFwiL1wiKSB8fCAhc3VmZml4KSB7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICBjb25zdCB7IHBhdGhuYW1lLCBxdWVyeSwgaGFzaCB9ID0gcGFyc2VQYXRoKHBhdGgpO1xuICAgIHJldHVybiBcIlwiICsgcGF0aG5hbWUgKyBzdWZmaXggKyBxdWVyeSArIGhhc2g7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZC1wYXRoLXN1ZmZpeC5qcy5tYXAiXSwibmFtZXMiOlsicGFyc2VQYXRoIiwiYWRkUGF0aFN1ZmZpeCIsInBhdGgiLCJzdWZmaXgiLCJzdGFydHNXaXRoIiwicGF0aG5hbWUiLCJxdWVyeSIsImhhc2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/add-path-suffix.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/app-paths.js":
/*!*************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/router/utils/app-paths.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalizeAppPath: () => (/* binding */ normalizeAppPath),\n/* harmony export */   normalizeRscURL: () => (/* binding */ normalizeRscURL)\n/* harmony export */ });\n/* harmony import */ var _page_path_ensure_leading_slash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../page-path/ensure-leading-slash */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/page-path/ensure-leading-slash.js\");\n/* harmony import */ var _segment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../segment */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/segment.js\");\n\n\n/**\n * Normalizes an app route so it represents the actual request path. Essentially\n * performing the following transformations:\n *\n * - `/(dashboard)/user/[id]/page` to `/user/[id]`\n * - `/(dashboard)/account/page` to `/account`\n * - `/user/[id]/page` to `/user/[id]`\n * - `/account/page` to `/account`\n * - `/page` to `/`\n * - `/(dashboard)/user/[id]/route` to `/user/[id]`\n * - `/(dashboard)/account/route` to `/account`\n * - `/user/[id]/route` to `/user/[id]`\n * - `/account/route` to `/account`\n * - `/route` to `/`\n * - `/` to `/`\n *\n * @param route the app route to normalize\n * @returns the normalized pathname\n */ function normalizeAppPath(route) {\n    return (0,_page_path_ensure_leading_slash__WEBPACK_IMPORTED_MODULE_0__.ensureLeadingSlash)(route.split(\"/\").reduce((pathname, segment, index, segments)=>{\n        // Empty segments are ignored.\n        if (!segment) {\n            return pathname;\n        }\n        // Groups are ignored.\n        if ((0,_segment__WEBPACK_IMPORTED_MODULE_1__.isGroupSegment)(segment)) {\n            return pathname;\n        }\n        // Parallel segments are ignored.\n        if (segment[0] === \"@\") {\n            return pathname;\n        }\n        // The last segment (if it's a leaf) should be ignored.\n        if ((segment === \"page\" || segment === \"route\") && index === segments.length - 1) {\n            return pathname;\n        }\n        return pathname + \"/\" + segment;\n    }, \"\"));\n}\n/**\n * Strips the `.rsc` extension if it's in the pathname.\n * Since this function is used on full urls it checks `?` for searchParams handling.\n */ function normalizeRscURL(url) {\n    return url.replace(/\\.rsc($|\\?)/, // $1 ensures `?` is preserved\n    \"$1\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3JvdXRlci91dGlscy9hcHAtcGF0aHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF5RTtBQUMzQjtBQUM5Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBa0JBLEdBQVcsU0FBU0UsaUJBQWlCQyxLQUFLO0lBQ3RDLE9BQU9ILG1GQUFrQkEsQ0FBQ0csTUFBTUMsS0FBSyxDQUFDLEtBQUtDLE1BQU0sQ0FBQyxDQUFDQyxVQUFVQyxTQUFTQyxPQUFPQztRQUN6RTtRQUNBLElBQUksQ0FBQ0YsU0FBUztZQUNWLE9BQU9EO1FBQ1g7UUFDQTtRQUNBLElBQUlMLHdEQUFjQSxDQUFDTSxVQUFVO1lBQ3pCLE9BQU9EO1FBQ1g7UUFDQTtRQUNBLElBQUlDLE9BQU8sQ0FBQyxFQUFFLEtBQUssS0FBSztZQUNwQixPQUFPRDtRQUNYO1FBQ0E7UUFDQSxJQUFJLENBQUNDLFlBQVksVUFBVUEsWUFBWSxZQUFZQyxVQUFVQyxTQUFTQyxNQUFNLEdBQUcsR0FBRztZQUM5RSxPQUFPSjtRQUNYO1FBQ0EsT0FBT0EsV0FBVyxNQUFNQztJQUM1QixHQUFHO0FBQ1A7QUFDQTs7O0NBR0EsR0FBVyxTQUFTSSxnQkFBZ0JDLEdBQUc7SUFDbkMsT0FBT0EsSUFBSUMsT0FBTyxDQUFDLGVBQWU7SUFDbEM7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3JvdXRlci91dGlscy9hcHAtcGF0aHMuanM/YjY4OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlbnN1cmVMZWFkaW5nU2xhc2ggfSBmcm9tIFwiLi4vLi4vcGFnZS1wYXRoL2Vuc3VyZS1sZWFkaW5nLXNsYXNoXCI7XG5pbXBvcnQgeyBpc0dyb3VwU2VnbWVudCB9IGZyb20gXCIuLi8uLi9zZWdtZW50XCI7XG4vKipcbiAqIE5vcm1hbGl6ZXMgYW4gYXBwIHJvdXRlIHNvIGl0IHJlcHJlc2VudHMgdGhlIGFjdHVhbCByZXF1ZXN0IHBhdGguIEVzc2VudGlhbGx5XG4gKiBwZXJmb3JtaW5nIHRoZSBmb2xsb3dpbmcgdHJhbnNmb3JtYXRpb25zOlxuICpcbiAqIC0gYC8oZGFzaGJvYXJkKS91c2VyL1tpZF0vcGFnZWAgdG8gYC91c2VyL1tpZF1gXG4gKiAtIGAvKGRhc2hib2FyZCkvYWNjb3VudC9wYWdlYCB0byBgL2FjY291bnRgXG4gKiAtIGAvdXNlci9baWRdL3BhZ2VgIHRvIGAvdXNlci9baWRdYFxuICogLSBgL2FjY291bnQvcGFnZWAgdG8gYC9hY2NvdW50YFxuICogLSBgL3BhZ2VgIHRvIGAvYFxuICogLSBgLyhkYXNoYm9hcmQpL3VzZXIvW2lkXS9yb3V0ZWAgdG8gYC91c2VyL1tpZF1gXG4gKiAtIGAvKGRhc2hib2FyZCkvYWNjb3VudC9yb3V0ZWAgdG8gYC9hY2NvdW50YFxuICogLSBgL3VzZXIvW2lkXS9yb3V0ZWAgdG8gYC91c2VyL1tpZF1gXG4gKiAtIGAvYWNjb3VudC9yb3V0ZWAgdG8gYC9hY2NvdW50YFxuICogLSBgL3JvdXRlYCB0byBgL2BcbiAqIC0gYC9gIHRvIGAvYFxuICpcbiAqIEBwYXJhbSByb3V0ZSB0aGUgYXBwIHJvdXRlIHRvIG5vcm1hbGl6ZVxuICogQHJldHVybnMgdGhlIG5vcm1hbGl6ZWQgcGF0aG5hbWVcbiAqLyBleHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplQXBwUGF0aChyb3V0ZSkge1xuICAgIHJldHVybiBlbnN1cmVMZWFkaW5nU2xhc2gocm91dGUuc3BsaXQoXCIvXCIpLnJlZHVjZSgocGF0aG5hbWUsIHNlZ21lbnQsIGluZGV4LCBzZWdtZW50cyk9PntcbiAgICAgICAgLy8gRW1wdHkgc2VnbWVudHMgYXJlIGlnbm9yZWQuXG4gICAgICAgIGlmICghc2VnbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhdGhuYW1lO1xuICAgICAgICB9XG4gICAgICAgIC8vIEdyb3VwcyBhcmUgaWdub3JlZC5cbiAgICAgICAgaWYgKGlzR3JvdXBTZWdtZW50KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGF0aG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUGFyYWxsZWwgc2VnbWVudHMgYXJlIGlnbm9yZWQuXG4gICAgICAgIGlmIChzZWdtZW50WzBdID09PSBcIkBcIikge1xuICAgICAgICAgICAgcmV0dXJuIHBhdGhuYW1lO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoZSBsYXN0IHNlZ21lbnQgKGlmIGl0J3MgYSBsZWFmKSBzaG91bGQgYmUgaWdub3JlZC5cbiAgICAgICAgaWYgKChzZWdtZW50ID09PSBcInBhZ2VcIiB8fCBzZWdtZW50ID09PSBcInJvdXRlXCIpICYmIGluZGV4ID09PSBzZWdtZW50cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gcGF0aG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhdGhuYW1lICsgXCIvXCIgKyBzZWdtZW50O1xuICAgIH0sIFwiXCIpKTtcbn1cbi8qKlxuICogU3RyaXBzIHRoZSBgLnJzY2AgZXh0ZW5zaW9uIGlmIGl0J3MgaW4gdGhlIHBhdGhuYW1lLlxuICogU2luY2UgdGhpcyBmdW5jdGlvbiBpcyB1c2VkIG9uIGZ1bGwgdXJscyBpdCBjaGVja3MgYD9gIGZvciBzZWFyY2hQYXJhbXMgaGFuZGxpbmcuXG4gKi8gZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZVJzY1VSTCh1cmwpIHtcbiAgICByZXR1cm4gdXJsLnJlcGxhY2UoL1xcLnJzYygkfFxcPykvLCAvLyAkMSBlbnN1cmVzIGA/YCBpcyBwcmVzZXJ2ZWRcbiAgICBcIiQxXCIpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcGF0aHMuanMubWFwIl0sIm5hbWVzIjpbImVuc3VyZUxlYWRpbmdTbGFzaCIsImlzR3JvdXBTZWdtZW50Iiwibm9ybWFsaXplQXBwUGF0aCIsInJvdXRlIiwic3BsaXQiLCJyZWR1Y2UiLCJwYXRobmFtZSIsInNlZ21lbnQiLCJpbmRleCIsInNlZ21lbnRzIiwibGVuZ3RoIiwibm9ybWFsaXplUnNjVVJMIiwidXJsIiwicmVwbGFjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/app-paths.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/format-next-pathname-info.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/router/utils/format-next-pathname-info.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatNextPathnameInfo: () => (/* binding */ formatNextPathnameInfo)\n/* harmony export */ });\n/* harmony import */ var _remove_trailing_slash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./remove-trailing-slash */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/remove-trailing-slash.js\");\n/* harmony import */ var _add_path_prefix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add-path-prefix */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/add-path-prefix.js\");\n/* harmony import */ var _add_path_suffix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./add-path-suffix */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/add-path-suffix.js\");\n/* harmony import */ var _add_locale__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./add-locale */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/add-locale.js\");\n\n\n\n\nfunction formatNextPathnameInfo(info) {\n    let pathname = (0,_add_locale__WEBPACK_IMPORTED_MODULE_3__.addLocale)(info.pathname, info.locale, info.buildId ? undefined : info.defaultLocale, info.ignorePrefix);\n    if (info.buildId || !info.trailingSlash) {\n        pathname = (0,_remove_trailing_slash__WEBPACK_IMPORTED_MODULE_0__.removeTrailingSlash)(pathname);\n    }\n    if (info.buildId) {\n        pathname = (0,_add_path_suffix__WEBPACK_IMPORTED_MODULE_2__.addPathSuffix)((0,_add_path_prefix__WEBPACK_IMPORTED_MODULE_1__.addPathPrefix)(pathname, \"/_next/data/\" + info.buildId), info.pathname === \"/\" ? \"index.json\" : \".json\");\n    }\n    pathname = (0,_add_path_prefix__WEBPACK_IMPORTED_MODULE_1__.addPathPrefix)(pathname, info.basePath);\n    return !info.buildId && info.trailingSlash ? !pathname.endsWith(\"/\") ? (0,_add_path_suffix__WEBPACK_IMPORTED_MODULE_2__.addPathSuffix)(pathname, \"/\") : pathname : (0,_remove_trailing_slash__WEBPACK_IMPORTED_MODULE_0__.removeTrailingSlash)(pathname);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3JvdXRlci91dGlscy9mb3JtYXQtbmV4dC1wYXRobmFtZS1pbmZvLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTZEO0FBQ1o7QUFDQTtBQUNUO0FBQ2pDLFNBQVNJLHVCQUF1QkMsSUFBSTtJQUN2QyxJQUFJQyxXQUFXSCxzREFBU0EsQ0FBQ0UsS0FBS0MsUUFBUSxFQUFFRCxLQUFLRSxNQUFNLEVBQUVGLEtBQUtHLE9BQU8sR0FBR0MsWUFBWUosS0FBS0ssYUFBYSxFQUFFTCxLQUFLTSxZQUFZO0lBQ3JILElBQUlOLEtBQUtHLE9BQU8sSUFBSSxDQUFDSCxLQUFLTyxhQUFhLEVBQUU7UUFDckNOLFdBQVdOLDJFQUFtQkEsQ0FBQ007SUFDbkM7SUFDQSxJQUFJRCxLQUFLRyxPQUFPLEVBQUU7UUFDZEYsV0FBV0osK0RBQWFBLENBQUNELCtEQUFhQSxDQUFDSyxVQUFVLGlCQUFpQkQsS0FBS0csT0FBTyxHQUFHSCxLQUFLQyxRQUFRLEtBQUssTUFBTSxlQUFlO0lBQzVIO0lBQ0FBLFdBQVdMLCtEQUFhQSxDQUFDSyxVQUFVRCxLQUFLUSxRQUFRO0lBQ2hELE9BQU8sQ0FBQ1IsS0FBS0csT0FBTyxJQUFJSCxLQUFLTyxhQUFhLEdBQUcsQ0FBQ04sU0FBU1EsUUFBUSxDQUFDLE9BQU9aLCtEQUFhQSxDQUFDSSxVQUFVLE9BQU9BLFdBQVdOLDJFQUFtQkEsQ0FBQ007QUFDekkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvZm9ybWF0LW5leHQtcGF0aG5hbWUtaW5mby5qcz81NDdiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbW92ZVRyYWlsaW5nU2xhc2ggfSBmcm9tIFwiLi9yZW1vdmUtdHJhaWxpbmctc2xhc2hcIjtcbmltcG9ydCB7IGFkZFBhdGhQcmVmaXggfSBmcm9tIFwiLi9hZGQtcGF0aC1wcmVmaXhcIjtcbmltcG9ydCB7IGFkZFBhdGhTdWZmaXggfSBmcm9tIFwiLi9hZGQtcGF0aC1zdWZmaXhcIjtcbmltcG9ydCB7IGFkZExvY2FsZSB9IGZyb20gXCIuL2FkZC1sb2NhbGVcIjtcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXROZXh0UGF0aG5hbWVJbmZvKGluZm8pIHtcbiAgICBsZXQgcGF0aG5hbWUgPSBhZGRMb2NhbGUoaW5mby5wYXRobmFtZSwgaW5mby5sb2NhbGUsIGluZm8uYnVpbGRJZCA/IHVuZGVmaW5lZCA6IGluZm8uZGVmYXVsdExvY2FsZSwgaW5mby5pZ25vcmVQcmVmaXgpO1xuICAgIGlmIChpbmZvLmJ1aWxkSWQgfHwgIWluZm8udHJhaWxpbmdTbGFzaCkge1xuICAgICAgICBwYXRobmFtZSA9IHJlbW92ZVRyYWlsaW5nU2xhc2gocGF0aG5hbWUpO1xuICAgIH1cbiAgICBpZiAoaW5mby5idWlsZElkKSB7XG4gICAgICAgIHBhdGhuYW1lID0gYWRkUGF0aFN1ZmZpeChhZGRQYXRoUHJlZml4KHBhdGhuYW1lLCBcIi9fbmV4dC9kYXRhL1wiICsgaW5mby5idWlsZElkKSwgaW5mby5wYXRobmFtZSA9PT0gXCIvXCIgPyBcImluZGV4Lmpzb25cIiA6IFwiLmpzb25cIik7XG4gICAgfVxuICAgIHBhdGhuYW1lID0gYWRkUGF0aFByZWZpeChwYXRobmFtZSwgaW5mby5iYXNlUGF0aCk7XG4gICAgcmV0dXJuICFpbmZvLmJ1aWxkSWQgJiYgaW5mby50cmFpbGluZ1NsYXNoID8gIXBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSA/IGFkZFBhdGhTdWZmaXgocGF0aG5hbWUsIFwiL1wiKSA6IHBhdGhuYW1lIDogcmVtb3ZlVHJhaWxpbmdTbGFzaChwYXRobmFtZSk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcm1hdC1uZXh0LXBhdGhuYW1lLWluZm8uanMubWFwIl0sIm5hbWVzIjpbInJlbW92ZVRyYWlsaW5nU2xhc2giLCJhZGRQYXRoUHJlZml4IiwiYWRkUGF0aFN1ZmZpeCIsImFkZExvY2FsZSIsImZvcm1hdE5leHRQYXRobmFtZUluZm8iLCJpbmZvIiwicGF0aG5hbWUiLCJsb2NhbGUiLCJidWlsZElkIiwidW5kZWZpbmVkIiwiZGVmYXVsdExvY2FsZSIsImlnbm9yZVByZWZpeCIsInRyYWlsaW5nU2xhc2giLCJiYXNlUGF0aCIsImVuZHNXaXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/format-next-pathname-info.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/get-next-pathname-info.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/router/utils/get-next-pathname-info.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getNextPathnameInfo: () => (/* binding */ getNextPathnameInfo)\n/* harmony export */ });\n/* harmony import */ var _i18n_normalize_locale_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../i18n/normalize-locale-path */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/i18n/normalize-locale-path.js\");\n/* harmony import */ var _remove_path_prefix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./remove-path-prefix */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/remove-path-prefix.js\");\n/* harmony import */ var _path_has_prefix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./path-has-prefix */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/path-has-prefix.js\");\n\n\n\nfunction getNextPathnameInfo(pathname, options) {\n    var _options_nextConfig;\n    const { basePath, i18n, trailingSlash } = (_options_nextConfig = options.nextConfig) != null ? _options_nextConfig : {};\n    const info = {\n        pathname,\n        trailingSlash: pathname !== \"/\" ? pathname.endsWith(\"/\") : trailingSlash\n    };\n    if (basePath && (0,_path_has_prefix__WEBPACK_IMPORTED_MODULE_2__.pathHasPrefix)(info.pathname, basePath)) {\n        info.pathname = (0,_remove_path_prefix__WEBPACK_IMPORTED_MODULE_1__.removePathPrefix)(info.pathname, basePath);\n        info.basePath = basePath;\n    }\n    let pathnameNoDataPrefix = info.pathname;\n    if (info.pathname.startsWith(\"/_next/data/\") && info.pathname.endsWith(\".json\")) {\n        const paths = info.pathname.replace(/^\\/_next\\/data\\//, \"\").replace(/\\.json$/, \"\").split(\"/\");\n        const buildId = paths[0];\n        info.buildId = buildId;\n        pathnameNoDataPrefix = paths[1] !== \"index\" ? \"/\" + paths.slice(1).join(\"/\") : \"/\";\n        // update pathname with normalized if enabled although\n        // we use normalized to populate locale info still\n        if (options.parseData === true) {\n            info.pathname = pathnameNoDataPrefix;\n        }\n    }\n    // If provided, use the locale route normalizer to detect the locale instead\n    // of the function below.\n    if (i18n) {\n        let result = options.i18nProvider ? options.i18nProvider.analyze(info.pathname) : (0,_i18n_normalize_locale_path__WEBPACK_IMPORTED_MODULE_0__.normalizeLocalePath)(info.pathname, i18n.locales);\n        info.locale = result.detectedLocale;\n        var _result_pathname;\n        info.pathname = (_result_pathname = result.pathname) != null ? _result_pathname : info.pathname;\n        if (!result.detectedLocale && info.buildId) {\n            result = options.i18nProvider ? options.i18nProvider.analyze(pathnameNoDataPrefix) : (0,_i18n_normalize_locale_path__WEBPACK_IMPORTED_MODULE_0__.normalizeLocalePath)(pathnameNoDataPrefix, i18n.locales);\n            if (result.detectedLocale) {\n                info.locale = result.detectedLocale;\n            }\n        }\n    }\n    return info;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3JvdXRlci91dGlscy9nZXQtbmV4dC1wYXRobmFtZS1pbmZvLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBc0U7QUFDZjtBQUNOO0FBQzFDLFNBQVNHLG9CQUFvQkMsUUFBUSxFQUFFQyxPQUFPO0lBQ2pELElBQUlDO0lBQ0osTUFBTSxFQUFFQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsYUFBQUEsRUFBZSxHQUFHLENBQUNILHNCQUFzQkQsUUFBUUssVUFBVSxLQUFLLE9BQU9KLHNCQUFzQixDQUFDO0lBQ3RILE1BQU1LLE9BQU87UUFDVFA7UUFDQUssZUFBZUwsYUFBYSxNQUFNQSxTQUFTUSxRQUFRLENBQUMsT0FBT0g7SUFDL0Q7SUFDQSxJQUFJRixZQUFZTCwrREFBYUEsQ0FBQ1MsS0FBS1AsUUFBUSxFQUFFRyxXQUFXO1FBQ3BESSxLQUFLUCxRQUFRLEdBQUdILHFFQUFnQkEsQ0FBQ1UsS0FBS1AsUUFBUSxFQUFFRztRQUNoREksS0FBS0osUUFBUSxHQUFHQTtJQUNwQjtJQUNBLElBQUlNLHVCQUF1QkYsS0FBS1AsUUFBUTtJQUN4QyxJQUFJTyxLQUFLUCxRQUFRLENBQUNVLFVBQVUsQ0FBQyxtQkFBbUJILEtBQUtQLFFBQVEsQ0FBQ1EsUUFBUSxDQUFDLFVBQVU7UUFDN0UsTUFBTUcsUUFBUUosS0FBS1AsUUFBUSxDQUFDWSxPQUFPLENBQUMsb0JBQW9CLElBQUlBLE9BQU8sQ0FBQyxXQUFXLElBQUlDLEtBQUssQ0FBQztRQUN6RixNQUFNQyxVQUFVSCxLQUFLLENBQUMsRUFBRTtRQUN4QkosS0FBS08sT0FBTyxHQUFHQTtRQUNmTCx1QkFBdUJFLEtBQUssQ0FBQyxFQUFFLEtBQUssVUFBVSxNQUFNQSxNQUFNSSxLQUFLLENBQUMsR0FBR0MsSUFBSSxDQUFDLE9BQU87UUFDL0U7UUFDQTtRQUNBLElBQUlmLFFBQVFnQixTQUFTLEtBQUssTUFBTTtZQUM1QlYsS0FBS1AsUUFBUSxHQUFHUztRQUNwQjtJQUNKO0lBQ0E7SUFDQTtJQUNBLElBQUlMLE1BQU07UUFDTixJQUFJYyxTQUFTakIsUUFBUWtCLFlBQVksR0FBR2xCLFFBQVFrQixZQUFZLENBQUNDLE9BQU8sQ0FBQ2IsS0FBS1AsUUFBUSxJQUFJSixnRkFBbUJBLENBQUNXLEtBQUtQLFFBQVEsRUFBRUksS0FBS2lCLE9BQU87UUFDaklkLEtBQUtlLE1BQU0sR0FBR0osT0FBT0ssY0FBYztRQUNuQyxJQUFJQztRQUNKakIsS0FBS1AsUUFBUSxHQUFHLENBQUN3QixtQkFBbUJOLE9BQU9sQixRQUFRLEtBQUssT0FBT3dCLG1CQUFtQmpCLEtBQUtQLFFBQVE7UUFDL0YsSUFBSSxDQUFDa0IsT0FBT0ssY0FBYyxJQUFJaEIsS0FBS08sT0FBTyxFQUFFO1lBQ3hDSSxTQUFTakIsUUFBUWtCLFlBQVksR0FBR2xCLFFBQVFrQixZQUFZLENBQUNDLE9BQU8sQ0FBQ1gsd0JBQXdCYixnRkFBbUJBLENBQUNhLHNCQUFzQkwsS0FBS2lCLE9BQU87WUFDM0ksSUFBSUgsT0FBT0ssY0FBYyxFQUFFO2dCQUN2QmhCLEtBQUtlLE1BQU0sR0FBR0osT0FBT0ssY0FBYztZQUN2QztRQUNKO0lBQ0o7SUFDQSxPQUFPaEI7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3JvdXRlci91dGlscy9nZXQtbmV4dC1wYXRobmFtZS1pbmZvLmpzPzE0NTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbm9ybWFsaXplTG9jYWxlUGF0aCB9IGZyb20gXCIuLi8uLi9pMThuL25vcm1hbGl6ZS1sb2NhbGUtcGF0aFwiO1xuaW1wb3J0IHsgcmVtb3ZlUGF0aFByZWZpeCB9IGZyb20gXCIuL3JlbW92ZS1wYXRoLXByZWZpeFwiO1xuaW1wb3J0IHsgcGF0aEhhc1ByZWZpeCB9IGZyb20gXCIuL3BhdGgtaGFzLXByZWZpeFwiO1xuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHRQYXRobmFtZUluZm8ocGF0aG5hbWUsIG9wdGlvbnMpIHtcbiAgICB2YXIgX29wdGlvbnNfbmV4dENvbmZpZztcbiAgICBjb25zdCB7IGJhc2VQYXRoLCBpMThuLCB0cmFpbGluZ1NsYXNoIH0gPSAoX29wdGlvbnNfbmV4dENvbmZpZyA9IG9wdGlvbnMubmV4dENvbmZpZykgIT0gbnVsbCA/IF9vcHRpb25zX25leHRDb25maWcgOiB7fTtcbiAgICBjb25zdCBpbmZvID0ge1xuICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgdHJhaWxpbmdTbGFzaDogcGF0aG5hbWUgIT09IFwiL1wiID8gcGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpIDogdHJhaWxpbmdTbGFzaFxuICAgIH07XG4gICAgaWYgKGJhc2VQYXRoICYmIHBhdGhIYXNQcmVmaXgoaW5mby5wYXRobmFtZSwgYmFzZVBhdGgpKSB7XG4gICAgICAgIGluZm8ucGF0aG5hbWUgPSByZW1vdmVQYXRoUHJlZml4KGluZm8ucGF0aG5hbWUsIGJhc2VQYXRoKTtcbiAgICAgICAgaW5mby5iYXNlUGF0aCA9IGJhc2VQYXRoO1xuICAgIH1cbiAgICBsZXQgcGF0aG5hbWVOb0RhdGFQcmVmaXggPSBpbmZvLnBhdGhuYW1lO1xuICAgIGlmIChpbmZvLnBhdGhuYW1lLnN0YXJ0c1dpdGgoXCIvX25leHQvZGF0YS9cIikgJiYgaW5mby5wYXRobmFtZS5lbmRzV2l0aChcIi5qc29uXCIpKSB7XG4gICAgICAgIGNvbnN0IHBhdGhzID0gaW5mby5wYXRobmFtZS5yZXBsYWNlKC9eXFwvX25leHRcXC9kYXRhXFwvLywgXCJcIikucmVwbGFjZSgvXFwuanNvbiQvLCBcIlwiKS5zcGxpdChcIi9cIik7XG4gICAgICAgIGNvbnN0IGJ1aWxkSWQgPSBwYXRoc1swXTtcbiAgICAgICAgaW5mby5idWlsZElkID0gYnVpbGRJZDtcbiAgICAgICAgcGF0aG5hbWVOb0RhdGFQcmVmaXggPSBwYXRoc1sxXSAhPT0gXCJpbmRleFwiID8gXCIvXCIgKyBwYXRocy5zbGljZSgxKS5qb2luKFwiL1wiKSA6IFwiL1wiO1xuICAgICAgICAvLyB1cGRhdGUgcGF0aG5hbWUgd2l0aCBub3JtYWxpemVkIGlmIGVuYWJsZWQgYWx0aG91Z2hcbiAgICAgICAgLy8gd2UgdXNlIG5vcm1hbGl6ZWQgdG8gcG9wdWxhdGUgbG9jYWxlIGluZm8gc3RpbGxcbiAgICAgICAgaWYgKG9wdGlvbnMucGFyc2VEYXRhID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpbmZvLnBhdGhuYW1lID0gcGF0aG5hbWVOb0RhdGFQcmVmaXg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gSWYgcHJvdmlkZWQsIHVzZSB0aGUgbG9jYWxlIHJvdXRlIG5vcm1hbGl6ZXIgdG8gZGV0ZWN0IHRoZSBsb2NhbGUgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBmdW5jdGlvbiBiZWxvdy5cbiAgICBpZiAoaTE4bikge1xuICAgICAgICBsZXQgcmVzdWx0ID0gb3B0aW9ucy5pMThuUHJvdmlkZXIgPyBvcHRpb25zLmkxOG5Qcm92aWRlci5hbmFseXplKGluZm8ucGF0aG5hbWUpIDogbm9ybWFsaXplTG9jYWxlUGF0aChpbmZvLnBhdGhuYW1lLCBpMThuLmxvY2FsZXMpO1xuICAgICAgICBpbmZvLmxvY2FsZSA9IHJlc3VsdC5kZXRlY3RlZExvY2FsZTtcbiAgICAgICAgdmFyIF9yZXN1bHRfcGF0aG5hbWU7XG4gICAgICAgIGluZm8ucGF0aG5hbWUgPSAoX3Jlc3VsdF9wYXRobmFtZSA9IHJlc3VsdC5wYXRobmFtZSkgIT0gbnVsbCA/IF9yZXN1bHRfcGF0aG5hbWUgOiBpbmZvLnBhdGhuYW1lO1xuICAgICAgICBpZiAoIXJlc3VsdC5kZXRlY3RlZExvY2FsZSAmJiBpbmZvLmJ1aWxkSWQpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG9wdGlvbnMuaTE4blByb3ZpZGVyID8gb3B0aW9ucy5pMThuUHJvdmlkZXIuYW5hbHl6ZShwYXRobmFtZU5vRGF0YVByZWZpeCkgOiBub3JtYWxpemVMb2NhbGVQYXRoKHBhdGhuYW1lTm9EYXRhUHJlZml4LCBpMThuLmxvY2FsZXMpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5kZXRlY3RlZExvY2FsZSkge1xuICAgICAgICAgICAgICAgIGluZm8ubG9jYWxlID0gcmVzdWx0LmRldGVjdGVkTG9jYWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmZvO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXQtbmV4dC1wYXRobmFtZS1pbmZvLmpzLm1hcCJdLCJuYW1lcyI6WyJub3JtYWxpemVMb2NhbGVQYXRoIiwicmVtb3ZlUGF0aFByZWZpeCIsInBhdGhIYXNQcmVmaXgiLCJnZXROZXh0UGF0aG5hbWVJbmZvIiwicGF0aG5hbWUiLCJvcHRpb25zIiwiX29wdGlvbnNfbmV4dENvbmZpZyIsImJhc2VQYXRoIiwiaTE4biIsInRyYWlsaW5nU2xhc2giLCJuZXh0Q29uZmlnIiwiaW5mbyIsImVuZHNXaXRoIiwicGF0aG5hbWVOb0RhdGFQcmVmaXgiLCJzdGFydHNXaXRoIiwicGF0aHMiLCJyZXBsYWNlIiwic3BsaXQiLCJidWlsZElkIiwic2xpY2UiLCJqb2luIiwicGFyc2VEYXRhIiwicmVzdWx0IiwiaTE4blByb3ZpZGVyIiwiYW5hbHl6ZSIsImxvY2FsZXMiLCJsb2NhbGUiLCJkZXRlY3RlZExvY2FsZSIsIl9yZXN1bHRfcGF0aG5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/get-next-pathname-info.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/router/utils/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSortedRoutes: () => (/* reexport safe */ _sorted_routes__WEBPACK_IMPORTED_MODULE_0__.getSortedRoutes),\n/* harmony export */   isDynamicRoute: () => (/* reexport safe */ _is_dynamic__WEBPACK_IMPORTED_MODULE_1__.isDynamicRoute)\n/* harmony export */ });\n/* harmony import */ var _sorted_routes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sorted-routes */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/sorted-routes.js\");\n/* harmony import */ var _is_dynamic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is-dynamic */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/is-dynamic.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3JvdXRlci91dGlscy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWlEO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvaW5kZXguanM/ZTM5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBnZXRTb3J0ZWRSb3V0ZXMgfSBmcm9tIFwiLi9zb3J0ZWQtcm91dGVzXCI7XG5leHBvcnQgeyBpc0R5bmFtaWNSb3V0ZSB9IGZyb20gXCIuL2lzLWR5bmFtaWNcIjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbImdldFNvcnRlZFJvdXRlcyIsImlzRHluYW1pY1JvdXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/is-dynamic.js":
/*!**************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/router/utils/is-dynamic.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDynamicRoute: () => (/* binding */ isDynamicRoute)\n/* harmony export */ });\n/* harmony import */ var _server_future_helpers_interception_routes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../server/future/helpers/interception-routes */ \"(rsc)/./node_modules/next/dist/esm/server/future/helpers/interception-routes.js\");\n\n// Identify /[param]/ in route string\nconst TEST_ROUTE = /\\/\\[[^/]+?\\](?=\\/|$)/;\nfunction isDynamicRoute(route) {\n    if ((0,_server_future_helpers_interception_routes__WEBPACK_IMPORTED_MODULE_0__.isInterceptionRouteAppPath)(route)) {\n        route = (0,_server_future_helpers_interception_routes__WEBPACK_IMPORTED_MODULE_0__.extractInterceptionRouteInformation)(route).interceptedRoute;\n    }\n    return TEST_ROUTE.test(route);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3JvdXRlci91dGlscy9pcy1keW5hbWljLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVJO0FBQ3ZJO0FBQ0EsTUFBTUUsYUFBYTtBQUNaLFNBQVNDLGVBQWVDLEtBQUs7SUFDaEMsSUFBSUgsc0dBQTBCQSxDQUFDRyxRQUFRO1FBQ25DQSxRQUFRSiwrR0FBbUNBLENBQUNJLE9BQU9DLGdCQUFnQjtJQUN2RTtJQUNBLE9BQU9ILFdBQVdJLElBQUksQ0FBQ0Y7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvaXMtZHluYW1pYy5qcz9kNTY2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4dHJhY3RJbnRlcmNlcHRpb25Sb3V0ZUluZm9ybWF0aW9uLCBpc0ludGVyY2VwdGlvblJvdXRlQXBwUGF0aCB9IGZyb20gXCIuLi8uLi8uLi8uLi9zZXJ2ZXIvZnV0dXJlL2hlbHBlcnMvaW50ZXJjZXB0aW9uLXJvdXRlc1wiO1xuLy8gSWRlbnRpZnkgL1twYXJhbV0vIGluIHJvdXRlIHN0cmluZ1xuY29uc3QgVEVTVF9ST1VURSA9IC9cXC9cXFtbXi9dKz9cXF0oPz1cXC98JCkvO1xuZXhwb3J0IGZ1bmN0aW9uIGlzRHluYW1pY1JvdXRlKHJvdXRlKSB7XG4gICAgaWYgKGlzSW50ZXJjZXB0aW9uUm91dGVBcHBQYXRoKHJvdXRlKSkge1xuICAgICAgICByb3V0ZSA9IGV4dHJhY3RJbnRlcmNlcHRpb25Sb3V0ZUluZm9ybWF0aW9uKHJvdXRlKS5pbnRlcmNlcHRlZFJvdXRlO1xuICAgIH1cbiAgICByZXR1cm4gVEVTVF9ST1VURS50ZXN0KHJvdXRlKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXMtZHluYW1pYy5qcy5tYXAiXSwibmFtZXMiOlsiZXh0cmFjdEludGVyY2VwdGlvblJvdXRlSW5mb3JtYXRpb24iLCJpc0ludGVyY2VwdGlvblJvdXRlQXBwUGF0aCIsIlRFU1RfUk9VVEUiLCJpc0R5bmFtaWNSb3V0ZSIsInJvdXRlIiwiaW50ZXJjZXB0ZWRSb3V0ZSIsInRlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/is-dynamic.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/parse-path.js":
/*!**************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/router/utils/parse-path.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parsePath: () => (/* binding */ parsePath)\n/* harmony export */ });\n/**\n * Given a path this function will find the pathname, query and hash and return\n * them. This is useful to parse full paths on the client side.\n * @param path A path to parse e.g. /foo/bar?id=1#hash\n */ function parsePath(path) {\n    const hashIndex = path.indexOf(\"#\");\n    const queryIndex = path.indexOf(\"?\");\n    const hasQuery = queryIndex > -1 && (hashIndex < 0 || queryIndex < hashIndex);\n    if (hasQuery || hashIndex > -1) {\n        return {\n            pathname: path.substring(0, hasQuery ? queryIndex : hashIndex),\n            query: hasQuery ? path.substring(queryIndex, hashIndex > -1 ? hashIndex : undefined) : \"\",\n            hash: hashIndex > -1 ? path.slice(hashIndex) : \"\"\n        };\n    }\n    return {\n        pathname: path,\n        query: \"\",\n        hash: \"\"\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3JvdXRlci91dGlscy9wYXJzZS1wYXRoLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7OztDQUlBLEdBQVcsU0FBU0EsVUFBVUMsSUFBSTtJQUM5QixNQUFNQyxZQUFZRCxLQUFLRSxPQUFPLENBQUM7SUFDL0IsTUFBTUMsYUFBYUgsS0FBS0UsT0FBTyxDQUFDO0lBQ2hDLE1BQU1FLFdBQVdELGFBQWEsQ0FBQyxLQUFNRixDQUFBQSxZQUFZLEtBQUtFLGFBQWFGLFNBQUFBO0lBQ25FLElBQUlHLFlBQVlILFlBQVksQ0FBQyxHQUFHO1FBQzVCLE9BQU87WUFDSEksVUFBVUwsS0FBS00sU0FBUyxDQUFDLEdBQUdGLFdBQVdELGFBQWFGO1lBQ3BETSxPQUFPSCxXQUFXSixLQUFLTSxTQUFTLENBQUNILFlBQVlGLFlBQVksQ0FBQyxJQUFJQSxZQUFZTyxhQUFhO1lBQ3ZGQyxNQUFNUixZQUFZLENBQUMsSUFBSUQsS0FBS1UsS0FBSyxDQUFDVCxhQUFhO1FBQ25EO0lBQ0o7SUFDQSxPQUFPO1FBQ0hJLFVBQVVMO1FBQ1ZPLE9BQU87UUFDUEUsTUFBTTtJQUNWO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcGFyc2UtcGF0aC5qcz9iM2M0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR2l2ZW4gYSBwYXRoIHRoaXMgZnVuY3Rpb24gd2lsbCBmaW5kIHRoZSBwYXRobmFtZSwgcXVlcnkgYW5kIGhhc2ggYW5kIHJldHVyblxuICogdGhlbS4gVGhpcyBpcyB1c2VmdWwgdG8gcGFyc2UgZnVsbCBwYXRocyBvbiB0aGUgY2xpZW50IHNpZGUuXG4gKiBAcGFyYW0gcGF0aCBBIHBhdGggdG8gcGFyc2UgZS5nLiAvZm9vL2Jhcj9pZD0xI2hhc2hcbiAqLyBleHBvcnQgZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgICBjb25zdCBoYXNoSW5kZXggPSBwYXRoLmluZGV4T2YoXCIjXCIpO1xuICAgIGNvbnN0IHF1ZXJ5SW5kZXggPSBwYXRoLmluZGV4T2YoXCI/XCIpO1xuICAgIGNvbnN0IGhhc1F1ZXJ5ID0gcXVlcnlJbmRleCA+IC0xICYmIChoYXNoSW5kZXggPCAwIHx8IHF1ZXJ5SW5kZXggPCBoYXNoSW5kZXgpO1xuICAgIGlmIChoYXNRdWVyeSB8fCBoYXNoSW5kZXggPiAtMSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGF0aG5hbWU6IHBhdGguc3Vic3RyaW5nKDAsIGhhc1F1ZXJ5ID8gcXVlcnlJbmRleCA6IGhhc2hJbmRleCksXG4gICAgICAgICAgICBxdWVyeTogaGFzUXVlcnkgPyBwYXRoLnN1YnN0cmluZyhxdWVyeUluZGV4LCBoYXNoSW5kZXggPiAtMSA/IGhhc2hJbmRleCA6IHVuZGVmaW5lZCkgOiBcIlwiLFxuICAgICAgICAgICAgaGFzaDogaGFzaEluZGV4ID4gLTEgPyBwYXRoLnNsaWNlKGhhc2hJbmRleCkgOiBcIlwiXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHBhdGhuYW1lOiBwYXRoLFxuICAgICAgICBxdWVyeTogXCJcIixcbiAgICAgICAgaGFzaDogXCJcIlxuICAgIH07XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlLXBhdGguanMubWFwIl0sIm5hbWVzIjpbInBhcnNlUGF0aCIsInBhdGgiLCJoYXNoSW5kZXgiLCJpbmRleE9mIiwicXVlcnlJbmRleCIsImhhc1F1ZXJ5IiwicGF0aG5hbWUiLCJzdWJzdHJpbmciLCJxdWVyeSIsInVuZGVmaW5lZCIsImhhc2giLCJzbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/parse-path.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/parse-relative-url.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/router/utils/parse-relative-url.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseRelativeUrl: () => (/* binding */ parseRelativeUrl)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/utils.js\");\n/* harmony import */ var _querystring__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./querystring */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/querystring.js\");\n\n\n/**\n * Parses path-relative urls (e.g. `/hello/world?foo=bar`). If url isn't path-relative\n * (e.g. `./hello`) then at least base must be.\n * Absolute urls are rejected with one exception, in the browser, absolute urls that are on\n * the current origin will be parsed as relative\n */ function parseRelativeUrl(url, base) {\n    const globalBase = new URL( true ? \"http://n\" : 0);\n    const resolvedBase = base ? new URL(base, globalBase) : url.startsWith(\".\") ? new URL( true ? \"http://n\" : 0) : globalBase;\n    const { pathname, searchParams, search, hash, href, origin } = new URL(url, resolvedBase);\n    if (origin !== globalBase.origin) {\n        throw new Error(\"invariant: invalid relative URL, router received \" + url);\n    }\n    return {\n        pathname,\n        query: (0,_querystring__WEBPACK_IMPORTED_MODULE_1__.searchParamsToUrlQuery)(searchParams),\n        search,\n        hash,\n        href: href.slice(globalBase.origin.length)\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3JvdXRlci91dGlscy9wYXJzZS1yZWxhdGl2ZS11cmwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQStDO0FBQ087QUFDdEQ7Ozs7O0NBS0EsR0FBVyxTQUFTRSxpQkFBaUJDLEdBQUcsRUFBRUMsSUFBSTtJQUMxQyxNQUFNQyxhQUFhLElBQUlDLElBQUksUUFBZ0MsYUFBYU4sQ0FBbUJBO0lBQzNGLE1BQU1PLGVBQWVILE9BQU8sSUFBSUUsSUFBSUYsTUFBTUMsY0FBY0YsSUFBSUssVUFBVSxDQUFDLE9BQU8sSUFBSUYsSUFBSSxRQUFnQyxhQUFhRyxDQUFvQixJQUFJSjtJQUMzSixNQUFNLEVBQUVPLFFBQVEsRUFBRUMsWUFBWSxFQUFFQyxNQUFNLEVBQUVDLElBQUksRUFBRUosSUFBSSxFQUFFSyxNQUFBQSxFQUFRLEdBQUcsSUFBSVYsSUFBSUgsS0FBS0k7SUFDNUUsSUFBSVMsV0FBV1gsV0FBV1csTUFBTSxFQUFFO1FBQzlCLE1BQU0sSUFBSUMsTUFBTSxzREFBc0RkO0lBQzFFO0lBQ0EsT0FBTztRQUNIUztRQUNBTSxPQUFPakIsb0VBQXNCQSxDQUFDWTtRQUM5QkM7UUFDQUM7UUFDQUosTUFBTUEsS0FBS1EsS0FBSyxDQUFDZCxXQUFXVyxNQUFNLENBQUNJLE1BQU07SUFDN0M7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3JvdXRlci91dGlscy9wYXJzZS1yZWxhdGl2ZS11cmwuanM/MWM4NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRMb2NhdGlvbk9yaWdpbiB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuaW1wb3J0IHsgc2VhcmNoUGFyYW1zVG9VcmxRdWVyeSB9IGZyb20gXCIuL3F1ZXJ5c3RyaW5nXCI7XG4vKipcbiAqIFBhcnNlcyBwYXRoLXJlbGF0aXZlIHVybHMgKGUuZy4gYC9oZWxsby93b3JsZD9mb289YmFyYCkuIElmIHVybCBpc24ndCBwYXRoLXJlbGF0aXZlXG4gKiAoZS5nLiBgLi9oZWxsb2ApIHRoZW4gYXQgbGVhc3QgYmFzZSBtdXN0IGJlLlxuICogQWJzb2x1dGUgdXJscyBhcmUgcmVqZWN0ZWQgd2l0aCBvbmUgZXhjZXB0aW9uLCBpbiB0aGUgYnJvd3NlciwgYWJzb2x1dGUgdXJscyB0aGF0IGFyZSBvblxuICogdGhlIGN1cnJlbnQgb3JpZ2luIHdpbGwgYmUgcGFyc2VkIGFzIHJlbGF0aXZlXG4gKi8gZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUmVsYXRpdmVVcmwodXJsLCBiYXNlKSB7XG4gICAgY29uc3QgZ2xvYmFsQmFzZSA9IG5ldyBVUkwodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwiaHR0cDovL25cIiA6IGdldExvY2F0aW9uT3JpZ2luKCkpO1xuICAgIGNvbnN0IHJlc29sdmVkQmFzZSA9IGJhc2UgPyBuZXcgVVJMKGJhc2UsIGdsb2JhbEJhc2UpIDogdXJsLnN0YXJ0c1dpdGgoXCIuXCIpID8gbmV3IFVSTCh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiID8gXCJodHRwOi8vblwiIDogd2luZG93LmxvY2F0aW9uLmhyZWYpIDogZ2xvYmFsQmFzZTtcbiAgICBjb25zdCB7IHBhdGhuYW1lLCBzZWFyY2hQYXJhbXMsIHNlYXJjaCwgaGFzaCwgaHJlZiwgb3JpZ2luIH0gPSBuZXcgVVJMKHVybCwgcmVzb2x2ZWRCYXNlKTtcbiAgICBpZiAob3JpZ2luICE9PSBnbG9iYWxCYXNlLm9yaWdpbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhcmlhbnQ6IGludmFsaWQgcmVsYXRpdmUgVVJMLCByb3V0ZXIgcmVjZWl2ZWQgXCIgKyB1cmwpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgcXVlcnk6IHNlYXJjaFBhcmFtc1RvVXJsUXVlcnkoc2VhcmNoUGFyYW1zKSxcbiAgICAgICAgc2VhcmNoLFxuICAgICAgICBoYXNoLFxuICAgICAgICBocmVmOiBocmVmLnNsaWNlKGdsb2JhbEJhc2Uub3JpZ2luLmxlbmd0aClcbiAgICB9O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZS1yZWxhdGl2ZS11cmwuanMubWFwIl0sIm5hbWVzIjpbImdldExvY2F0aW9uT3JpZ2luIiwic2VhcmNoUGFyYW1zVG9VcmxRdWVyeSIsInBhcnNlUmVsYXRpdmVVcmwiLCJ1cmwiLCJiYXNlIiwiZ2xvYmFsQmFzZSIsIlVSTCIsInJlc29sdmVkQmFzZSIsInN0YXJ0c1dpdGgiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJwYXRobmFtZSIsInNlYXJjaFBhcmFtcyIsInNlYXJjaCIsImhhc2giLCJvcmlnaW4iLCJFcnJvciIsInF1ZXJ5Iiwic2xpY2UiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/parse-relative-url.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/parse-url.js":
/*!*************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/router/utils/parse-url.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseUrl: () => (/* binding */ parseUrl)\n/* harmony export */ });\n/* harmony import */ var _querystring__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./querystring */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/querystring.js\");\n/* harmony import */ var _parse_relative_url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse-relative-url */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/parse-relative-url.js\");\n\n\nfunction parseUrl(url) {\n    if (url.startsWith(\"/\")) {\n        return (0,_parse_relative_url__WEBPACK_IMPORTED_MODULE_1__.parseRelativeUrl)(url);\n    }\n    const parsedURL = new URL(url);\n    return {\n        hash: parsedURL.hash,\n        hostname: parsedURL.hostname,\n        href: parsedURL.href,\n        pathname: parsedURL.pathname,\n        port: parsedURL.port,\n        protocol: parsedURL.protocol,\n        query: (0,_querystring__WEBPACK_IMPORTED_MODULE_0__.searchParamsToUrlQuery)(parsedURL.searchParams),\n        search: parsedURL.search\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3JvdXRlci91dGlscy9wYXJzZS11cmwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXNEO0FBQ0M7QUFDaEQsU0FBU0UsU0FBU0MsR0FBRztJQUN4QixJQUFJQSxJQUFJQyxVQUFVLENBQUMsTUFBTTtRQUNyQixPQUFPSCxxRUFBZ0JBLENBQUNFO0lBQzVCO0lBQ0EsTUFBTUUsWUFBWSxJQUFJQyxJQUFJSDtJQUMxQixPQUFPO1FBQ0hJLE1BQU1GLFVBQVVFLElBQUk7UUFDcEJDLFVBQVVILFVBQVVHLFFBQVE7UUFDNUJDLE1BQU1KLFVBQVVJLElBQUk7UUFDcEJDLFVBQVVMLFVBQVVLLFFBQVE7UUFDNUJDLE1BQU1OLFVBQVVNLElBQUk7UUFDcEJDLFVBQVVQLFVBQVVPLFFBQVE7UUFDNUJDLE9BQU9iLG9FQUFzQkEsQ0FBQ0ssVUFBVVMsWUFBWTtRQUNwREMsUUFBUVYsVUFBVVUsTUFBQUE7SUFDdEI7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3JvdXRlci91dGlscy9wYXJzZS11cmwuanM/ODMwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZWFyY2hQYXJhbXNUb1VybFF1ZXJ5IH0gZnJvbSBcIi4vcXVlcnlzdHJpbmdcIjtcbmltcG9ydCB7IHBhcnNlUmVsYXRpdmVVcmwgfSBmcm9tIFwiLi9wYXJzZS1yZWxhdGl2ZS11cmxcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVVybCh1cmwpIHtcbiAgICBpZiAodXJsLnN0YXJ0c1dpdGgoXCIvXCIpKSB7XG4gICAgICAgIHJldHVybiBwYXJzZVJlbGF0aXZlVXJsKHVybCk7XG4gICAgfVxuICAgIGNvbnN0IHBhcnNlZFVSTCA9IG5ldyBVUkwodXJsKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBoYXNoOiBwYXJzZWRVUkwuaGFzaCxcbiAgICAgICAgaG9zdG5hbWU6IHBhcnNlZFVSTC5ob3N0bmFtZSxcbiAgICAgICAgaHJlZjogcGFyc2VkVVJMLmhyZWYsXG4gICAgICAgIHBhdGhuYW1lOiBwYXJzZWRVUkwucGF0aG5hbWUsXG4gICAgICAgIHBvcnQ6IHBhcnNlZFVSTC5wb3J0LFxuICAgICAgICBwcm90b2NvbDogcGFyc2VkVVJMLnByb3RvY29sLFxuICAgICAgICBxdWVyeTogc2VhcmNoUGFyYW1zVG9VcmxRdWVyeShwYXJzZWRVUkwuc2VhcmNoUGFyYW1zKSxcbiAgICAgICAgc2VhcmNoOiBwYXJzZWRVUkwuc2VhcmNoXG4gICAgfTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFyc2UtdXJsLmpzLm1hcCJdLCJuYW1lcyI6WyJzZWFyY2hQYXJhbXNUb1VybFF1ZXJ5IiwicGFyc2VSZWxhdGl2ZVVybCIsInBhcnNlVXJsIiwidXJsIiwic3RhcnRzV2l0aCIsInBhcnNlZFVSTCIsIlVSTCIsImhhc2giLCJob3N0bmFtZSIsImhyZWYiLCJwYXRobmFtZSIsInBvcnQiLCJwcm90b2NvbCIsInF1ZXJ5Iiwic2VhcmNoUGFyYW1zIiwic2VhcmNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/parse-url.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/path-has-prefix.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/router/utils/path-has-prefix.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pathHasPrefix: () => (/* binding */ pathHasPrefix)\n/* harmony export */ });\n/* harmony import */ var _parse_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse-path */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/parse-path.js\");\n\n/**\n * Checks if a given path starts with a given prefix. It ensures it matches\n * exactly without containing extra chars. e.g. prefix /docs should replace\n * for /docs, /docs/, /docs/a but not /docsss\n * @param path The path to check.\n * @param prefix The prefix to check against.\n */ function pathHasPrefix(path, prefix) {\n    if (typeof path !== \"string\") {\n        return false;\n    }\n    const { pathname } = (0,_parse_path__WEBPACK_IMPORTED_MODULE_0__.parsePath)(path);\n    return pathname === prefix || pathname.startsWith(prefix + \"/\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3JvdXRlci91dGlscy9wYXRoLWhhcy1wcmVmaXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0M7QUFDeEM7Ozs7OztDQU1BLEdBQVcsU0FBU0MsY0FBY0MsSUFBSSxFQUFFQyxNQUFNO0lBQzFDLElBQUksT0FBT0QsU0FBUyxVQUFVO1FBQzFCLE9BQU87SUFDWDtJQUNBLE1BQU0sRUFBRUUsUUFBQUEsRUFBVSxHQUFHSixzREFBU0EsQ0FBQ0U7SUFDL0IsT0FBT0UsYUFBYUQsVUFBVUMsU0FBU0MsVUFBVSxDQUFDRixTQUFTO0FBQy9EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvZXNtL3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3BhdGgtaGFzLXByZWZpeC5qcz82NGJlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhcnNlUGF0aCB9IGZyb20gXCIuL3BhcnNlLXBhdGhcIjtcbi8qKlxuICogQ2hlY2tzIGlmIGEgZ2l2ZW4gcGF0aCBzdGFydHMgd2l0aCBhIGdpdmVuIHByZWZpeC4gSXQgZW5zdXJlcyBpdCBtYXRjaGVzXG4gKiBleGFjdGx5IHdpdGhvdXQgY29udGFpbmluZyBleHRyYSBjaGFycy4gZS5nLiBwcmVmaXggL2RvY3Mgc2hvdWxkIHJlcGxhY2VcbiAqIGZvciAvZG9jcywgL2RvY3MvLCAvZG9jcy9hIGJ1dCBub3QgL2RvY3Nzc1xuICogQHBhcmFtIHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gKiBAcGFyYW0gcHJlZml4IFRoZSBwcmVmaXggdG8gY2hlY2sgYWdhaW5zdC5cbiAqLyBleHBvcnQgZnVuY3Rpb24gcGF0aEhhc1ByZWZpeChwYXRoLCBwcmVmaXgpIHtcbiAgICBpZiAodHlwZW9mIHBhdGggIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB7IHBhdGhuYW1lIH0gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgcmV0dXJuIHBhdGhuYW1lID09PSBwcmVmaXggfHwgcGF0aG5hbWUuc3RhcnRzV2l0aChwcmVmaXggKyBcIi9cIik7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhdGgtaGFzLXByZWZpeC5qcy5tYXAiXSwibmFtZXMiOlsicGFyc2VQYXRoIiwicGF0aEhhc1ByZWZpeCIsInBhdGgiLCJwcmVmaXgiLCJwYXRobmFtZSIsInN0YXJ0c1dpdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/path-has-prefix.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/path-match.js":
/*!**************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/router/utils/path-match.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPathMatch: () => (/* binding */ getPathMatch)\n/* harmony export */ });\n/* harmony import */ var next_dist_compiled_path_to_regexp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/compiled/path-to-regexp */ \"(rsc)/./node_modules/next/dist/compiled/path-to-regexp/index.js\");\n\n\n/**\n * Generates a path matcher function for a given path and options based on\n * path-to-regexp. By default the match will be case insensitive, non strict\n * and delimited by `/`.\n */ function getPathMatch(path, options) {\n    const keys = [];\n    const regexp = (0,next_dist_compiled_path_to_regexp__WEBPACK_IMPORTED_MODULE_0__.pathToRegexp)(path, keys, {\n        delimiter: \"/\",\n        sensitive: typeof (options == null ? void 0 : options.sensitive) === \"boolean\" ? options.sensitive : false,\n        strict: options == null ? void 0 : options.strict\n    });\n    const matcher = (0,next_dist_compiled_path_to_regexp__WEBPACK_IMPORTED_MODULE_0__.regexpToFunction)((options == null ? void 0 : options.regexModifier) ? new RegExp(options.regexModifier(regexp.source), regexp.flags) : regexp, keys);\n    /**\n  * A matcher function that will check if a given pathname matches the path\n  * given in the builder function. When the path does not match it will return\n  * `false` but if it does it will return an object with the matched params\n  * merged with the params provided in the second argument.\n  */ return (pathname, params)=>{\n        // If no pathname is provided it's not a match.\n        if (typeof pathname !== \"string\") return false;\n        const match = matcher(pathname);\n        // If the path did not match `false` will be returned.\n        if (!match) return false;\n        /**\n    * If unnamed params are not allowed they must be removed from\n    * the matched parameters. path-to-regexp uses \"string\" for named and\n    * \"number\" for unnamed parameters.\n    */ if (options == null ? void 0 : options.removeUnnamedParams) {\n            for (const key of keys){\n                if (typeof key.name === \"number\") {\n                    delete match.params[key.name];\n                }\n            }\n        }\n        return {\n            ...params,\n            ...match.params\n        };\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3JvdXRlci91dGlscy9wYXRoLW1hdGNoLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWdFO0FBQ0k7QUFDcEU7Ozs7Q0FJQSxHQUFXLFNBQVNFLGFBQWFDLElBQUksRUFBRUMsT0FBTztJQUMxQyxNQUFNQyxPQUFPLEVBQUU7SUFDZixNQUFNQyxTQUFTTiwrRUFBWUEsQ0FBQ0csTUFBTUUsTUFBTTtRQUNwQ0UsV0FBVztRQUNYQyxXQUFXLE9BQVFKLENBQUFBLFdBQVcsT0FBTyxLQUFLLElBQUlBLFFBQVFJLFNBQVMsTUFBTSxZQUFZSixRQUFRSSxTQUFTLEdBQUc7UUFDckdDLFFBQVFMLFdBQVcsT0FBTyxLQUFLLElBQUlBLFFBQVFLLE1BQUFBO0lBQy9DO0lBQ0EsTUFBTUMsVUFBVVQsbUZBQWdCQSxDQUFDLENBQUNHLFdBQVcsT0FBTyxLQUFLLElBQUlBLFFBQVFPLGFBQWEsSUFBSSxJQUFJQyxPQUFPUixRQUFRTyxhQUFhLENBQUNMLE9BQU9PLE1BQU0sR0FBR1AsT0FBT1EsS0FBSyxJQUFJUixRQUFRRDtJQUMvSjs7Ozs7RUFLSixHQUFNLE9BQU8sQ0FBQ1UsVUFBVUM7UUFDaEI7UUFDQSxJQUFJLE9BQU9ELGFBQWEsVUFBVSxPQUFPO1FBQ3pDLE1BQU1FLFFBQVFQLFFBQVFLO1FBQ3RCO1FBQ0EsSUFBSSxDQUFDRSxPQUFPLE9BQU87UUFDbkI7Ozs7SUFJUixHQUFRLElBQUliLFdBQVcsT0FBTyxLQUFLLElBQUlBLFFBQVFjLG1CQUFtQixFQUFFO1lBQ3hELEtBQUssTUFBTUMsT0FBT2QsS0FBSztnQkFDbkIsSUFBSSxPQUFPYyxJQUFJQyxJQUFJLEtBQUssVUFBVTtvQkFDOUIsT0FBT0gsTUFBTUQsTUFBTSxDQUFDRyxJQUFJQyxJQUFJLENBQUM7Z0JBQ2pDO1lBQ0o7UUFDSjtRQUNBLE9BQU87WUFDSCxHQUFHSixNQUFNO1lBQ1QsR0FBR0MsTUFBTUQsTUFBQUE7UUFDYjtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcGF0aC1tYXRjaC5qcz82ZTExIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhdGhUb1JlZ2V4cCB9IGZyb20gXCJuZXh0L2Rpc3QvY29tcGlsZWQvcGF0aC10by1yZWdleHBcIjtcbmltcG9ydCB7IHJlZ2V4cFRvRnVuY3Rpb24gfSBmcm9tIFwibmV4dC9kaXN0L2NvbXBpbGVkL3BhdGgtdG8tcmVnZXhwXCI7XG4vKipcbiAqIEdlbmVyYXRlcyBhIHBhdGggbWF0Y2hlciBmdW5jdGlvbiBmb3IgYSBnaXZlbiBwYXRoIGFuZCBvcHRpb25zIGJhc2VkIG9uXG4gKiBwYXRoLXRvLXJlZ2V4cC4gQnkgZGVmYXVsdCB0aGUgbWF0Y2ggd2lsbCBiZSBjYXNlIGluc2Vuc2l0aXZlLCBub24gc3RyaWN0XG4gKiBhbmQgZGVsaW1pdGVkIGJ5IGAvYC5cbiAqLyBleHBvcnQgZnVuY3Rpb24gZ2V0UGF0aE1hdGNoKHBhdGgsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBrZXlzID0gW107XG4gICAgY29uc3QgcmVnZXhwID0gcGF0aFRvUmVnZXhwKHBhdGgsIGtleXMsIHtcbiAgICAgICAgZGVsaW1pdGVyOiBcIi9cIixcbiAgICAgICAgc2Vuc2l0aXZlOiB0eXBlb2YgKG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuc2Vuc2l0aXZlKSA9PT0gXCJib29sZWFuXCIgPyBvcHRpb25zLnNlbnNpdGl2ZSA6IGZhbHNlLFxuICAgICAgICBzdHJpY3Q6IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuc3RyaWN0XG4gICAgfSk7XG4gICAgY29uc3QgbWF0Y2hlciA9IHJlZ2V4cFRvRnVuY3Rpb24oKG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMucmVnZXhNb2RpZmllcikgPyBuZXcgUmVnRXhwKG9wdGlvbnMucmVnZXhNb2RpZmllcihyZWdleHAuc291cmNlKSwgcmVnZXhwLmZsYWdzKSA6IHJlZ2V4cCwga2V5cyk7XG4gICAgLyoqXG4gICAqIEEgbWF0Y2hlciBmdW5jdGlvbiB0aGF0IHdpbGwgY2hlY2sgaWYgYSBnaXZlbiBwYXRobmFtZSBtYXRjaGVzIHRoZSBwYXRoXG4gICAqIGdpdmVuIGluIHRoZSBidWlsZGVyIGZ1bmN0aW9uLiBXaGVuIHRoZSBwYXRoIGRvZXMgbm90IG1hdGNoIGl0IHdpbGwgcmV0dXJuXG4gICAqIGBmYWxzZWAgYnV0IGlmIGl0IGRvZXMgaXQgd2lsbCByZXR1cm4gYW4gb2JqZWN0IHdpdGggdGhlIG1hdGNoZWQgcGFyYW1zXG4gICAqIG1lcmdlZCB3aXRoIHRoZSBwYXJhbXMgcHJvdmlkZWQgaW4gdGhlIHNlY29uZCBhcmd1bWVudC5cbiAgICovIHJldHVybiAocGF0aG5hbWUsIHBhcmFtcyk9PntcbiAgICAgICAgLy8gSWYgbm8gcGF0aG5hbWUgaXMgcHJvdmlkZWQgaXQncyBub3QgYSBtYXRjaC5cbiAgICAgICAgaWYgKHR5cGVvZiBwYXRobmFtZSAhPT0gXCJzdHJpbmdcIikgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zdCBtYXRjaCA9IG1hdGNoZXIocGF0aG5hbWUpO1xuICAgICAgICAvLyBJZiB0aGUgcGF0aCBkaWQgbm90IG1hdGNoIGBmYWxzZWAgd2lsbCBiZSByZXR1cm5lZC5cbiAgICAgICAgaWYgKCFtYXRjaCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgKiBJZiB1bm5hbWVkIHBhcmFtcyBhcmUgbm90IGFsbG93ZWQgdGhleSBtdXN0IGJlIHJlbW92ZWQgZnJvbVxuICAgICAqIHRoZSBtYXRjaGVkIHBhcmFtZXRlcnMuIHBhdGgtdG8tcmVnZXhwIHVzZXMgXCJzdHJpbmdcIiBmb3IgbmFtZWQgYW5kXG4gICAgICogXCJudW1iZXJcIiBmb3IgdW5uYW1lZCBwYXJhbWV0ZXJzLlxuICAgICAqLyBpZiAob3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5yZW1vdmVVbm5hbWVkUGFyYW1zKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKXtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGtleS5uYW1lID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBtYXRjaC5wYXJhbXNba2V5Lm5hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4ucGFyYW1zLFxuICAgICAgICAgICAgLi4ubWF0Y2gucGFyYW1zXG4gICAgICAgIH07XG4gICAgfTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGF0aC1tYXRjaC5qcy5tYXAiXSwibmFtZXMiOlsicGF0aFRvUmVnZXhwIiwicmVnZXhwVG9GdW5jdGlvbiIsImdldFBhdGhNYXRjaCIsInBhdGgiLCJvcHRpb25zIiwia2V5cyIsInJlZ2V4cCIsImRlbGltaXRlciIsInNlbnNpdGl2ZSIsInN0cmljdCIsIm1hdGNoZXIiLCJyZWdleE1vZGlmaWVyIiwiUmVnRXhwIiwic291cmNlIiwiZmxhZ3MiLCJwYXRobmFtZSIsInBhcmFtcyIsIm1hdGNoIiwicmVtb3ZlVW5uYW1lZFBhcmFtcyIsImtleSIsIm5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/path-match.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/prepare-destination.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/router/utils/prepare-destination.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compileNonPath: () => (/* binding */ compileNonPath),\n/* harmony export */   matchHas: () => (/* binding */ matchHas),\n/* harmony export */   prepareDestination: () => (/* binding */ prepareDestination)\n/* harmony export */ });\n/* harmony import */ var next_dist_compiled_path_to_regexp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/compiled/path-to-regexp */ \"(rsc)/./node_modules/next/dist/compiled/path-to-regexp/index.js\");\n/* harmony import */ var _escape_regexp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../escape-regexp */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/escape-regexp.js\");\n/* harmony import */ var _parse_url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parse-url */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/parse-url.js\");\n/* harmony import */ var _server_future_helpers_interception_routes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../server/future/helpers/interception-routes */ \"(rsc)/./node_modules/next/dist/esm/server/future/helpers/interception-routes.js\");\n/* harmony import */ var _client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../client/components/app-router-headers */ \"(rsc)/./node_modules/next/dist/esm/client/components/app-router-headers.js\");\n/* harmony import */ var _server_api_utils_get_cookie_parser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../server/api-utils/get-cookie-parser */ \"(rsc)/./node_modules/next/dist/esm/server/api-utils/get-cookie-parser.js\");\n\n\n\n\n\n\n/**\n * Ensure only a-zA-Z are used for param names for proper interpolating\n * with path-to-regexp\n */ function getSafeParamName(paramName) {\n    let newParamName = \"\";\n    for(let i = 0; i < paramName.length; i++){\n        const charCode = paramName.charCodeAt(i);\n        if (charCode > 64 && charCode < 91 || // A-Z\n        charCode > 96 && charCode < 123 // a-z\n        ) {\n            newParamName += paramName[i];\n        }\n    }\n    return newParamName;\n}\nfunction escapeSegment(str, segmentName) {\n    return str.replace(new RegExp(\":\" + (0,_escape_regexp__WEBPACK_IMPORTED_MODULE_1__.escapeStringRegexp)(segmentName), \"g\"), \"__ESC_COLON_\" + segmentName);\n}\nfunction unescapeSegments(str) {\n    return str.replace(/__ESC_COLON_/gi, \":\");\n}\nfunction matchHas(req, query, has, missing) {\n    if (has === void 0) has = [];\n    if (missing === void 0) missing = [];\n    const params = {};\n    const hasMatch = (hasItem)=>{\n        let value;\n        let key = hasItem.key;\n        switch(hasItem.type){\n            case \"header\":\n                {\n                    key = key.toLowerCase();\n                    value = req.headers[key];\n                    break;\n                }\n            case \"cookie\":\n                {\n                    if (\"cookies\" in req) {\n                        value = req.cookies[hasItem.key];\n                    } else {\n                        const cookies = (0,_server_api_utils_get_cookie_parser__WEBPACK_IMPORTED_MODULE_5__.getCookieParser)(req.headers)();\n                        value = cookies[hasItem.key];\n                    }\n                    break;\n                }\n            case \"query\":\n                {\n                    value = query[key];\n                    break;\n                }\n            case \"host\":\n                {\n                    const { host } = (req == null ? void 0 : req.headers) || {};\n                    // remove port from host if present\n                    const hostname = host == null ? void 0 : host.split(\":\", 1)[0].toLowerCase();\n                    value = hostname;\n                    break;\n                }\n            default:\n                {\n                    break;\n                }\n        }\n        if (!hasItem.value && value) {\n            params[getSafeParamName(key)] = value;\n            return true;\n        } else if (value) {\n            const matcher = new RegExp(\"^\" + hasItem.value + \"$\");\n            const matches = Array.isArray(value) ? value.slice(-1)[0].match(matcher) : value.match(matcher);\n            if (matches) {\n                if (Array.isArray(matches)) {\n                    if (matches.groups) {\n                        Object.keys(matches.groups).forEach((groupKey)=>{\n                            params[groupKey] = matches.groups[groupKey];\n                        });\n                    } else if (hasItem.type === \"host\" && matches[0]) {\n                        params.host = matches[0];\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    const allMatch = has.every((item)=>hasMatch(item)) && !missing.some((item)=>hasMatch(item));\n    if (allMatch) {\n        return params;\n    }\n    return false;\n}\nfunction compileNonPath(value, params) {\n    if (!value.includes(\":\")) {\n        return value;\n    }\n    for (const key of Object.keys(params)){\n        if (value.includes(\":\" + key)) {\n            value = value.replace(new RegExp(\":\" + key + \"\\\\*\", \"g\"), \":\" + key + \"--ESCAPED_PARAM_ASTERISKS\").replace(new RegExp(\":\" + key + \"\\\\?\", \"g\"), \":\" + key + \"--ESCAPED_PARAM_QUESTION\").replace(new RegExp(\":\" + key + \"\\\\+\", \"g\"), \":\" + key + \"--ESCAPED_PARAM_PLUS\").replace(new RegExp(\":\" + key + \"(?!\\\\w)\", \"g\"), \"--ESCAPED_PARAM_COLON\" + key);\n        }\n    }\n    value = value.replace(/(:|\\*|\\?|\\+|\\(|\\)|\\{|\\})/g, \"\\\\$1\").replace(/--ESCAPED_PARAM_PLUS/g, \"+\").replace(/--ESCAPED_PARAM_COLON/g, \":\").replace(/--ESCAPED_PARAM_QUESTION/g, \"?\").replace(/--ESCAPED_PARAM_ASTERISKS/g, \"*\");\n    // the value needs to start with a forward-slash to be compiled\n    // correctly\n    return (0,next_dist_compiled_path_to_regexp__WEBPACK_IMPORTED_MODULE_0__.compile)(\"/\" + value, {\n        validate: false\n    })(params).slice(1);\n}\nfunction prepareDestination(args) {\n    const query = Object.assign({}, args.query);\n    delete query.__nextLocale;\n    delete query.__nextDefaultLocale;\n    delete query.__nextDataReq;\n    delete query.__nextInferredLocaleFromDefault;\n    delete query[_client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_4__.NEXT_RSC_UNION_QUERY];\n    let escapedDestination = args.destination;\n    for (const param of Object.keys({\n        ...args.params,\n        ...query\n    })){\n        escapedDestination = escapeSegment(escapedDestination, param);\n    }\n    const parsedDestination = (0,_parse_url__WEBPACK_IMPORTED_MODULE_2__.parseUrl)(escapedDestination);\n    const destQuery = parsedDestination.query;\n    const destPath = unescapeSegments(\"\" + parsedDestination.pathname + (parsedDestination.hash || \"\"));\n    const destHostname = unescapeSegments(parsedDestination.hostname || \"\");\n    const destPathParamKeys = [];\n    const destHostnameParamKeys = [];\n    (0,next_dist_compiled_path_to_regexp__WEBPACK_IMPORTED_MODULE_0__.pathToRegexp)(destPath, destPathParamKeys);\n    (0,next_dist_compiled_path_to_regexp__WEBPACK_IMPORTED_MODULE_0__.pathToRegexp)(destHostname, destHostnameParamKeys);\n    const destParams = [];\n    destPathParamKeys.forEach((key)=>destParams.push(key.name));\n    destHostnameParamKeys.forEach((key)=>destParams.push(key.name));\n    const destPathCompiler = (0,next_dist_compiled_path_to_regexp__WEBPACK_IMPORTED_MODULE_0__.compile)(destPath, // we don't validate while compiling the destination since we should\n    // have already validated before we got to this point and validating\n    // breaks compiling destinations with named pattern params from the source\n    // e.g. /something:hello(.*) -> /another/:hello is broken with validation\n    // since compile validation is meant for reversing and not for inserting\n    // params from a separate path-regex into another\n    {\n        validate: false\n    });\n    const destHostnameCompiler = (0,next_dist_compiled_path_to_regexp__WEBPACK_IMPORTED_MODULE_0__.compile)(destHostname, {\n        validate: false\n    });\n    // update any params in query values\n    for (const [key, strOrArray] of Object.entries(destQuery)){\n        // the value needs to start with a forward-slash to be compiled\n        // correctly\n        if (Array.isArray(strOrArray)) {\n            destQuery[key] = strOrArray.map((value)=>compileNonPath(unescapeSegments(value), args.params));\n        } else if (typeof strOrArray === \"string\") {\n            destQuery[key] = compileNonPath(unescapeSegments(strOrArray), args.params);\n        }\n    }\n    // add path params to query if it's not a redirect and not\n    // already defined in destination query or path\n    let paramKeys = Object.keys(args.params).filter((name)=>name !== \"nextInternalLocale\");\n    if (args.appendParamsToQuery && !paramKeys.some((key)=>destParams.includes(key))) {\n        for (const key of paramKeys){\n            if (!(key in destQuery)) {\n                destQuery[key] = args.params[key];\n            }\n        }\n    }\n    let newUrl;\n    // The compiler also that the interception route marker is an unnamed param, hence '0',\n    // so we need to add it to the params object.\n    if ((0,_server_future_helpers_interception_routes__WEBPACK_IMPORTED_MODULE_3__.isInterceptionRouteAppPath)(destPath)) {\n        for (const segment of destPath.split(\"/\")){\n            const marker = _server_future_helpers_interception_routes__WEBPACK_IMPORTED_MODULE_3__.INTERCEPTION_ROUTE_MARKERS.find((m)=>segment.startsWith(m));\n            if (marker) {\n                args.params[\"0\"] = marker;\n                break;\n            }\n        }\n    }\n    try {\n        newUrl = destPathCompiler(args.params);\n        const [pathname, hash] = newUrl.split(\"#\", 2);\n        parsedDestination.hostname = destHostnameCompiler(args.params);\n        parsedDestination.pathname = pathname;\n        parsedDestination.hash = \"\" + (hash ? \"#\" : \"\") + (hash || \"\");\n        delete parsedDestination.search;\n    } catch (err) {\n        if (err.message.match(/Expected .*? to not repeat, but got an array/)) {\n            throw new Error(\"To use a multi-match in the destination you must add `*` at the end of the param name to signify it should repeat. https://nextjs.org/docs/messages/invalid-multi-match\");\n        }\n        throw err;\n    }\n    // Query merge order lowest priority to highest\n    // 1. initial URL query values\n    // 2. path segment values\n    // 3. destination specified query values\n    parsedDestination.query = {\n        ...query,\n        ...parsedDestination.query\n    };\n    return {\n        newUrl,\n        destQuery,\n        parsedDestination\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/prepare-destination.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/querystring.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/router/utils/querystring.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assign: () => (/* binding */ assign),\n/* harmony export */   searchParamsToUrlQuery: () => (/* binding */ searchParamsToUrlQuery),\n/* harmony export */   urlQueryToSearchParams: () => (/* binding */ urlQueryToSearchParams)\n/* harmony export */ });\nfunction searchParamsToUrlQuery(searchParams) {\n    const query = {};\n    searchParams.forEach((value, key)=>{\n        if (typeof query[key] === \"undefined\") {\n            query[key] = value;\n        } else if (Array.isArray(query[key])) {\n            query[key].push(value);\n        } else {\n            query[key] = [\n                query[key],\n                value\n            ];\n        }\n    });\n    return query;\n}\nfunction stringifyUrlQueryParam(param) {\n    if (typeof param === \"string\" || typeof param === \"number\" && !isNaN(param) || typeof param === \"boolean\") {\n        return String(param);\n    } else {\n        return \"\";\n    }\n}\nfunction urlQueryToSearchParams(urlQuery) {\n    const result = new URLSearchParams();\n    Object.entries(urlQuery).forEach((param)=>{\n        let [key, value] = param;\n        if (Array.isArray(value)) {\n            value.forEach((item)=>result.append(key, stringifyUrlQueryParam(item)));\n        } else {\n            result.set(key, stringifyUrlQueryParam(value));\n        }\n    });\n    return result;\n}\nfunction assign(target) {\n    for(var _len = arguments.length, searchParamsList = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        searchParamsList[_key - 1] = arguments[_key];\n    }\n    searchParamsList.forEach((searchParams)=>{\n        Array.from(searchParams.keys()).forEach((key)=>target.delete(key));\n        searchParams.forEach((value, key)=>target.append(key, value));\n    });\n    return target;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3JvdXRlci91dGlscy9xdWVyeXN0cmluZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTyxTQUFTQSx1QkFBdUJDLFlBQVk7SUFDL0MsTUFBTUMsUUFBUSxDQUFDO0lBQ2ZELGFBQWFFLE9BQU8sQ0FBQyxDQUFDQyxPQUFPQztRQUN6QixJQUFJLE9BQU9ILEtBQUssQ0FBQ0csSUFBSSxLQUFLLGFBQWE7WUFDbkNILEtBQUssQ0FBQ0csSUFBSSxHQUFHRDtRQUNqQixPQUFPLElBQUlFLE1BQU1DLE9BQU8sQ0FBQ0wsS0FBSyxDQUFDRyxJQUFJLEdBQUc7WUFDbENILEtBQUssQ0FBQ0csSUFBSSxDQUFDRyxJQUFJLENBQUNKO1FBQ3BCLE9BQU87WUFDSEYsS0FBSyxDQUFDRyxJQUFJLEdBQUc7Z0JBQ1RILEtBQUssQ0FBQ0csSUFBSTtnQkFDVkQ7YUFDSDtRQUNMO0lBQ0o7SUFDQSxPQUFPRjtBQUNYO0FBQ0EsU0FBU08sdUJBQXVCQyxLQUFLO0lBQ2pDLElBQUksT0FBT0EsVUFBVSxZQUFZLE9BQU9BLFVBQVUsWUFBWSxDQUFDQyxNQUFNRCxVQUFVLE9BQU9BLFVBQVUsV0FBVztRQUN2RyxPQUFPRSxPQUFPRjtJQUNsQixPQUFPO1FBQ0gsT0FBTztJQUNYO0FBQ0o7QUFDTyxTQUFTRyx1QkFBdUJDLFFBQVE7SUFDM0MsTUFBTUMsU0FBUyxJQUFJQztJQUNuQkMsT0FBT0MsT0FBTyxDQUFDSixVQUFVWCxPQUFPLENBQUVPLENBQUFBO1FBQzlCLElBQUksQ0FBQ0wsS0FBS0QsTUFBTSxHQUFHTTtRQUNuQixJQUFJSixNQUFNQyxPQUFPLENBQUNILFFBQVE7WUFDdEJBLE1BQU1ELE9BQU8sQ0FBRWdCLENBQUFBLE9BQU9KLE9BQU9LLE1BQU0sQ0FBQ2YsS0FBS0ksdUJBQXVCVTtRQUNwRSxPQUFPO1lBQ0hKLE9BQU9NLEdBQUcsQ0FBQ2hCLEtBQUtJLHVCQUF1Qkw7UUFDM0M7SUFDSjtJQUNBLE9BQU9XO0FBQ1g7QUFDTyxTQUFTTyxPQUFPQyxNQUFNO0lBQ3pCLElBQUksSUFBSUMsT0FBT0MsVUFBVUMsTUFBTSxFQUFFQyxtQkFBbUIsSUFBSXJCLE1BQU1rQixPQUFPLElBQUlBLE9BQU8sSUFBSSxJQUFJSSxPQUFPLEdBQUdBLE9BQU9KLE1BQU1JLE9BQU87UUFDbEhELGdCQUFnQixDQUFDQyxPQUFPLEVBQUUsR0FBR0gsU0FBUyxDQUFDRyxLQUFLO0lBQ2hEO0lBQ0FELGlCQUFpQnhCLE9BQU8sQ0FBRUYsQ0FBQUE7UUFDdEJLLE1BQU11QixJQUFJLENBQUM1QixhQUFhNkIsSUFBSSxJQUFJM0IsT0FBTyxDQUFFRSxDQUFBQSxNQUFNa0IsT0FBT1EsTUFBTSxDQUFDMUI7UUFDN0RKLGFBQWFFLE9BQU8sQ0FBQyxDQUFDQyxPQUFPQyxNQUFNa0IsT0FBT0gsTUFBTSxDQUFDZixLQUFLRDtJQUMxRDtJQUNBLE9BQU9tQjtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvZXNtL3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3F1ZXJ5c3RyaW5nLmpzPzZiYTgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHNlYXJjaFBhcmFtc1RvVXJsUXVlcnkoc2VhcmNoUGFyYW1zKSB7XG4gICAgY29uc3QgcXVlcnkgPSB7fTtcbiAgICBzZWFyY2hQYXJhbXMuZm9yRWFjaCgodmFsdWUsIGtleSk9PntcbiAgICAgICAgaWYgKHR5cGVvZiBxdWVyeVtrZXldID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBxdWVyeVtrZXldID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShxdWVyeVtrZXldKSkge1xuICAgICAgICAgICAgcXVlcnlba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHF1ZXJ5W2tleV0gPSBbXG4gICAgICAgICAgICAgICAgcXVlcnlba2V5XSxcbiAgICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBxdWVyeTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeVVybFF1ZXJ5UGFyYW0ocGFyYW0pIHtcbiAgICBpZiAodHlwZW9mIHBhcmFtID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBwYXJhbSA9PT0gXCJudW1iZXJcIiAmJiAhaXNOYU4ocGFyYW0pIHx8IHR5cGVvZiBwYXJhbSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhwYXJhbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHVybFF1ZXJ5VG9TZWFyY2hQYXJhbXModXJsUXVlcnkpIHtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgT2JqZWN0LmVudHJpZXModXJsUXVlcnkpLmZvckVhY2goKHBhcmFtKT0+e1xuICAgICAgICBsZXQgW2tleSwgdmFsdWVdID0gcGFyYW07XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgdmFsdWUuZm9yRWFjaCgoaXRlbSk9PnJlc3VsdC5hcHBlbmQoa2V5LCBzdHJpbmdpZnlVcmxRdWVyeVBhcmFtKGl0ZW0pKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQuc2V0KGtleSwgc3RyaW5naWZ5VXJsUXVlcnlQYXJhbSh2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0KSB7XG4gICAgZm9yKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgc2VhcmNoUGFyYW1zTGlzdCA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKXtcbiAgICAgICAgc2VhcmNoUGFyYW1zTGlzdFtfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIHNlYXJjaFBhcmFtc0xpc3QuZm9yRWFjaCgoc2VhcmNoUGFyYW1zKT0+e1xuICAgICAgICBBcnJheS5mcm9tKHNlYXJjaFBhcmFtcy5rZXlzKCkpLmZvckVhY2goKGtleSk9PnRhcmdldC5kZWxldGUoa2V5KSk7XG4gICAgICAgIHNlYXJjaFBhcmFtcy5mb3JFYWNoKCh2YWx1ZSwga2V5KT0+dGFyZ2V0LmFwcGVuZChrZXksIHZhbHVlKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVlcnlzdHJpbmcuanMubWFwIl0sIm5hbWVzIjpbInNlYXJjaFBhcmFtc1RvVXJsUXVlcnkiLCJzZWFyY2hQYXJhbXMiLCJxdWVyeSIsImZvckVhY2giLCJ2YWx1ZSIsImtleSIsIkFycmF5IiwiaXNBcnJheSIsInB1c2giLCJzdHJpbmdpZnlVcmxRdWVyeVBhcmFtIiwicGFyYW0iLCJpc05hTiIsIlN0cmluZyIsInVybFF1ZXJ5VG9TZWFyY2hQYXJhbXMiLCJ1cmxRdWVyeSIsInJlc3VsdCIsIlVSTFNlYXJjaFBhcmFtcyIsIk9iamVjdCIsImVudHJpZXMiLCJpdGVtIiwiYXBwZW5kIiwic2V0IiwiYXNzaWduIiwidGFyZ2V0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNlYXJjaFBhcmFtc0xpc3QiLCJfa2V5IiwiZnJvbSIsImtleXMiLCJkZWxldGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/querystring.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/relativize-url.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/router/utils/relativize-url.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   relativizeURL: () => (/* binding */ relativizeURL)\n/* harmony export */ });\n/**\n * Given a URL as a string and a base URL it will make the URL relative\n * if the parsed protocol and host is the same as the one in the base\n * URL. Otherwise it returns the same URL string.\n */ function relativizeURL(url, base) {\n    const baseURL = typeof base === \"string\" ? new URL(base) : base;\n    const relative = new URL(url, base);\n    const origin = baseURL.protocol + \"//\" + baseURL.host;\n    return relative.protocol + \"//\" + relative.host === origin ? relative.toString().replace(origin, \"\") : relative.toString();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3JvdXRlci91dGlscy9yZWxhdGl2aXplLXVybC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Q0FJQSxHQUFXLFNBQVNBLGNBQWNDLEdBQUcsRUFBRUMsSUFBSTtJQUN2QyxNQUFNQyxVQUFVLE9BQU9ELFNBQVMsV0FBVyxJQUFJRSxJQUFJRixRQUFRQTtJQUMzRCxNQUFNRyxXQUFXLElBQUlELElBQUlILEtBQUtDO0lBQzlCLE1BQU1JLFNBQVNILFFBQVFJLFFBQVEsR0FBRyxPQUFPSixRQUFRSyxJQUFJO0lBQ3JELE9BQU9ILFNBQVNFLFFBQVEsR0FBRyxPQUFPRixTQUFTRyxJQUFJLEtBQUtGLFNBQVNELFNBQVNJLFFBQVEsR0FBR0MsT0FBTyxDQUFDSixRQUFRLE1BQU1ELFNBQVNJLFFBQVE7QUFDNUgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcmVsYXRpdml6ZS11cmwuanM/NzNkMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdpdmVuIGEgVVJMIGFzIGEgc3RyaW5nIGFuZCBhIGJhc2UgVVJMIGl0IHdpbGwgbWFrZSB0aGUgVVJMIHJlbGF0aXZlXG4gKiBpZiB0aGUgcGFyc2VkIHByb3RvY29sIGFuZCBob3N0IGlzIHRoZSBzYW1lIGFzIHRoZSBvbmUgaW4gdGhlIGJhc2VcbiAqIFVSTC4gT3RoZXJ3aXNlIGl0IHJldHVybnMgdGhlIHNhbWUgVVJMIHN0cmluZy5cbiAqLyBleHBvcnQgZnVuY3Rpb24gcmVsYXRpdml6ZVVSTCh1cmwsIGJhc2UpIHtcbiAgICBjb25zdCBiYXNlVVJMID0gdHlwZW9mIGJhc2UgPT09IFwic3RyaW5nXCIgPyBuZXcgVVJMKGJhc2UpIDogYmFzZTtcbiAgICBjb25zdCByZWxhdGl2ZSA9IG5ldyBVUkwodXJsLCBiYXNlKTtcbiAgICBjb25zdCBvcmlnaW4gPSBiYXNlVVJMLnByb3RvY29sICsgXCIvL1wiICsgYmFzZVVSTC5ob3N0O1xuICAgIHJldHVybiByZWxhdGl2ZS5wcm90b2NvbCArIFwiLy9cIiArIHJlbGF0aXZlLmhvc3QgPT09IG9yaWdpbiA/IHJlbGF0aXZlLnRvU3RyaW5nKCkucmVwbGFjZShvcmlnaW4sIFwiXCIpIDogcmVsYXRpdmUudG9TdHJpbmcoKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVsYXRpdml6ZS11cmwuanMubWFwIl0sIm5hbWVzIjpbInJlbGF0aXZpemVVUkwiLCJ1cmwiLCJiYXNlIiwiYmFzZVVSTCIsIlVSTCIsInJlbGF0aXZlIiwib3JpZ2luIiwicHJvdG9jb2wiLCJob3N0IiwidG9TdHJpbmciLCJyZXBsYWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/relativize-url.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/remove-path-prefix.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/router/utils/remove-path-prefix.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   removePathPrefix: () => (/* binding */ removePathPrefix)\n/* harmony export */ });\n/* harmony import */ var _path_has_prefix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./path-has-prefix */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/path-has-prefix.js\");\n\n/**\n * Given a path and a prefix it will remove the prefix when it exists in the\n * given path. It ensures it matches exactly without containing extra chars\n * and if the prefix is not there it will be noop.\n *\n * @param path The path to remove the prefix from.\n * @param prefix The prefix to be removed.\n */ function removePathPrefix(path, prefix) {\n    // If the path doesn't start with the prefix we can return it as is. This\n    // protects us from situations where the prefix is a substring of the path\n    // prefix such as:\n    //\n    // For prefix: /blog\n    //\n    //   /blog -> true\n    //   /blog/ -> true\n    //   /blog/1 -> true\n    //   /blogging -> false\n    //   /blogging/ -> false\n    //   /blogging/1 -> false\n    if (!(0,_path_has_prefix__WEBPACK_IMPORTED_MODULE_0__.pathHasPrefix)(path, prefix)) {\n        return path;\n    }\n    // Remove the prefix from the path via slicing.\n    const withoutPrefix = path.slice(prefix.length);\n    // If the path without the prefix starts with a `/` we can return it as is.\n    if (withoutPrefix.startsWith(\"/\")) {\n        return withoutPrefix;\n    }\n    // If the path without the prefix doesn't start with a `/` we need to add it\n    // back to the path to make sure it's a valid path.\n    return \"/\" + withoutPrefix;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3JvdXRlci91dGlscy9yZW1vdmUtcGF0aC1wcmVmaXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBaUQ7QUFDakQ7Ozs7Ozs7Q0FPQSxHQUFXLFNBQVNDLGlCQUFpQkMsSUFBSSxFQUFFQyxNQUFNO0lBQzdDO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBLElBQUksQ0FBQ0gsK0RBQWFBLENBQUNFLE1BQU1DLFNBQVM7UUFDOUIsT0FBT0Q7SUFDWDtJQUNBO0lBQ0EsTUFBTUUsZ0JBQWdCRixLQUFLRyxLQUFLLENBQUNGLE9BQU9HLE1BQU07SUFDOUM7SUFDQSxJQUFJRixjQUFjRyxVQUFVLENBQUMsTUFBTTtRQUMvQixPQUFPSDtJQUNYO0lBQ0E7SUFDQTtJQUNBLE9BQU8sTUFBTUE7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcmVtb3ZlLXBhdGgtcHJlZml4LmpzPzExYTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGF0aEhhc1ByZWZpeCB9IGZyb20gXCIuL3BhdGgtaGFzLXByZWZpeFwiO1xuLyoqXG4gKiBHaXZlbiBhIHBhdGggYW5kIGEgcHJlZml4IGl0IHdpbGwgcmVtb3ZlIHRoZSBwcmVmaXggd2hlbiBpdCBleGlzdHMgaW4gdGhlXG4gKiBnaXZlbiBwYXRoLiBJdCBlbnN1cmVzIGl0IG1hdGNoZXMgZXhhY3RseSB3aXRob3V0IGNvbnRhaW5pbmcgZXh0cmEgY2hhcnNcbiAqIGFuZCBpZiB0aGUgcHJlZml4IGlzIG5vdCB0aGVyZSBpdCB3aWxsIGJlIG5vb3AuXG4gKlxuICogQHBhcmFtIHBhdGggVGhlIHBhdGggdG8gcmVtb3ZlIHRoZSBwcmVmaXggZnJvbS5cbiAqIEBwYXJhbSBwcmVmaXggVGhlIHByZWZpeCB0byBiZSByZW1vdmVkLlxuICovIGV4cG9ydCBmdW5jdGlvbiByZW1vdmVQYXRoUHJlZml4KHBhdGgsIHByZWZpeCkge1xuICAgIC8vIElmIHRoZSBwYXRoIGRvZXNuJ3Qgc3RhcnQgd2l0aCB0aGUgcHJlZml4IHdlIGNhbiByZXR1cm4gaXQgYXMgaXMuIFRoaXNcbiAgICAvLyBwcm90ZWN0cyB1cyBmcm9tIHNpdHVhdGlvbnMgd2hlcmUgdGhlIHByZWZpeCBpcyBhIHN1YnN0cmluZyBvZiB0aGUgcGF0aFxuICAgIC8vIHByZWZpeCBzdWNoIGFzOlxuICAgIC8vXG4gICAgLy8gRm9yIHByZWZpeDogL2Jsb2dcbiAgICAvL1xuICAgIC8vICAgL2Jsb2cgLT4gdHJ1ZVxuICAgIC8vICAgL2Jsb2cvIC0+IHRydWVcbiAgICAvLyAgIC9ibG9nLzEgLT4gdHJ1ZVxuICAgIC8vICAgL2Jsb2dnaW5nIC0+IGZhbHNlXG4gICAgLy8gICAvYmxvZ2dpbmcvIC0+IGZhbHNlXG4gICAgLy8gICAvYmxvZ2dpbmcvMSAtPiBmYWxzZVxuICAgIGlmICghcGF0aEhhc1ByZWZpeChwYXRoLCBwcmVmaXgpKSB7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICAvLyBSZW1vdmUgdGhlIHByZWZpeCBmcm9tIHRoZSBwYXRoIHZpYSBzbGljaW5nLlxuICAgIGNvbnN0IHdpdGhvdXRQcmVmaXggPSBwYXRoLnNsaWNlKHByZWZpeC5sZW5ndGgpO1xuICAgIC8vIElmIHRoZSBwYXRoIHdpdGhvdXQgdGhlIHByZWZpeCBzdGFydHMgd2l0aCBhIGAvYCB3ZSBjYW4gcmV0dXJuIGl0IGFzIGlzLlxuICAgIGlmICh3aXRob3V0UHJlZml4LnN0YXJ0c1dpdGgoXCIvXCIpKSB7XG4gICAgICAgIHJldHVybiB3aXRob3V0UHJlZml4O1xuICAgIH1cbiAgICAvLyBJZiB0aGUgcGF0aCB3aXRob3V0IHRoZSBwcmVmaXggZG9lc24ndCBzdGFydCB3aXRoIGEgYC9gIHdlIG5lZWQgdG8gYWRkIGl0XG4gICAgLy8gYmFjayB0byB0aGUgcGF0aCB0byBtYWtlIHN1cmUgaXQncyBhIHZhbGlkIHBhdGguXG4gICAgcmV0dXJuIFwiL1wiICsgd2l0aG91dFByZWZpeDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVtb3ZlLXBhdGgtcHJlZml4LmpzLm1hcCJdLCJuYW1lcyI6WyJwYXRoSGFzUHJlZml4IiwicmVtb3ZlUGF0aFByZWZpeCIsInBhdGgiLCJwcmVmaXgiLCJ3aXRob3V0UHJlZml4Iiwic2xpY2UiLCJsZW5ndGgiLCJzdGFydHNXaXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/remove-path-prefix.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/remove-trailing-slash.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/router/utils/remove-trailing-slash.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   removeTrailingSlash: () => (/* binding */ removeTrailingSlash)\n/* harmony export */ });\n/**\n * Removes the trailing slash for a given route or page path. Preserves the\n * root page. Examples:\n *   - `/foo/bar/` -> `/foo/bar`\n *   - `/foo/bar` -> `/foo/bar`\n *   - `/` -> `/`\n */ function removeTrailingSlash(route) {\n    return route.replace(/\\/$/, \"\") || \"/\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3JvdXRlci91dGlscy9yZW1vdmUtdHJhaWxpbmctc2xhc2guanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7Q0FNQSxHQUFXLFNBQVNBLG9CQUFvQkMsS0FBSztJQUN6QyxPQUFPQSxNQUFNQyxPQUFPLENBQUMsT0FBTyxPQUFPO0FBQ3ZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvZXNtL3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3JlbW92ZS10cmFpbGluZy1zbGFzaC5qcz84MmY1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmVtb3ZlcyB0aGUgdHJhaWxpbmcgc2xhc2ggZm9yIGEgZ2l2ZW4gcm91dGUgb3IgcGFnZSBwYXRoLiBQcmVzZXJ2ZXMgdGhlXG4gKiByb290IHBhZ2UuIEV4YW1wbGVzOlxuICogICAtIGAvZm9vL2Jhci9gIC0+IGAvZm9vL2JhcmBcbiAqICAgLSBgL2Zvby9iYXJgIC0+IGAvZm9vL2JhcmBcbiAqICAgLSBgL2AgLT4gYC9gXG4gKi8gZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVRyYWlsaW5nU2xhc2gocm91dGUpIHtcbiAgICByZXR1cm4gcm91dGUucmVwbGFjZSgvXFwvJC8sIFwiXCIpIHx8IFwiL1wiO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZW1vdmUtdHJhaWxpbmctc2xhc2guanMubWFwIl0sIm5hbWVzIjpbInJlbW92ZVRyYWlsaW5nU2xhc2giLCJyb3V0ZSIsInJlcGxhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/remove-trailing-slash.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/route-matcher.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/router/utils/route-matcher.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRouteMatcher: () => (/* binding */ getRouteMatcher)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/utils.js\");\n\nfunction getRouteMatcher(param) {\n    let { re, groups } = param;\n    return (pathname)=>{\n        const routeMatch = re.exec(pathname);\n        if (!routeMatch) {\n            return false;\n        }\n        const decode = (param)=>{\n            try {\n                return decodeURIComponent(param);\n            } catch (_) {\n                throw new _utils__WEBPACK_IMPORTED_MODULE_0__.DecodeError(\"failed to decode param\");\n            }\n        };\n        const params = {};\n        Object.keys(groups).forEach((slugName)=>{\n            const g = groups[slugName];\n            const m = routeMatch[g.pos];\n            if (m !== undefined) {\n                params[slugName] = ~m.indexOf(\"/\") ? m.split(\"/\").map((entry)=>decode(entry)) : g.repeat ? [\n                    decode(m)\n                ] : decode(m);\n            }\n        });\n        return params;\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3JvdXRlci91dGlscy9yb3V0ZS1tYXRjaGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBQ2xDLFNBQVNDLGdCQUFnQkMsS0FBSztJQUNqQyxJQUFJLEVBQUVDLEVBQUUsRUFBRUMsTUFBQUEsRUFBUSxHQUFHRjtJQUNyQixPQUFRRyxDQUFBQTtRQUNKLE1BQU1DLGFBQWFILEdBQUdJLElBQUksQ0FBQ0Y7UUFDM0IsSUFBSSxDQUFDQyxZQUFZO1lBQ2IsT0FBTztRQUNYO1FBQ0EsTUFBTUUsU0FBVU4sQ0FBQUE7WUFDWixJQUFJO2dCQUNBLE9BQU9PLG1CQUFtQlA7WUFDOUIsRUFBRSxPQUFPUSxHQUFHO2dCQUNSLE1BQU0sSUFBSVYsK0NBQVdBLENBQUM7WUFDMUI7UUFDSjtRQUNBLE1BQU1XLFNBQVMsQ0FBQztRQUNoQkMsT0FBT0MsSUFBSSxDQUFDVCxRQUFRVSxPQUFPLENBQUVDLENBQUFBO1lBQ3pCLE1BQU1DLElBQUlaLE1BQU0sQ0FBQ1csU0FBUztZQUMxQixNQUFNRSxJQUFJWCxVQUFVLENBQUNVLEVBQUVFLEdBQUcsQ0FBQztZQUMzQixJQUFJRCxNQUFNRSxXQUFXO2dCQUNqQlIsTUFBTSxDQUFDSSxTQUFTLEdBQUcsQ0FBQ0UsRUFBRUcsT0FBTyxDQUFDLE9BQU9ILEVBQUVJLEtBQUssQ0FBQyxLQUFLQyxHQUFHLENBQUVDLENBQUFBLFFBQVFmLE9BQU9lLFVBQVVQLEVBQUVRLE1BQU0sR0FBRztvQkFDdkZoQixPQUFPUztpQkFDVixHQUFHVCxPQUFPUztZQUNmO1FBQ0o7UUFDQSxPQUFPTjtJQUNYO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcm91dGUtbWF0Y2hlci5qcz9jZjk4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlY29kZUVycm9yIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Um91dGVNYXRjaGVyKHBhcmFtKSB7XG4gICAgbGV0IHsgcmUsIGdyb3VwcyB9ID0gcGFyYW07XG4gICAgcmV0dXJuIChwYXRobmFtZSk9PntcbiAgICAgICAgY29uc3Qgcm91dGVNYXRjaCA9IHJlLmV4ZWMocGF0aG5hbWUpO1xuICAgICAgICBpZiAoIXJvdXRlTWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZWNvZGUgPSAocGFyYW0pPT57XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocGFyYW0pO1xuICAgICAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBEZWNvZGVFcnJvcihcImZhaWxlZCB0byBkZWNvZGUgcGFyYW1cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyhncm91cHMpLmZvckVhY2goKHNsdWdOYW1lKT0+e1xuICAgICAgICAgICAgY29uc3QgZyA9IGdyb3Vwc1tzbHVnTmFtZV07XG4gICAgICAgICAgICBjb25zdCBtID0gcm91dGVNYXRjaFtnLnBvc107XG4gICAgICAgICAgICBpZiAobSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zW3NsdWdOYW1lXSA9IH5tLmluZGV4T2YoXCIvXCIpID8gbS5zcGxpdChcIi9cIikubWFwKChlbnRyeSk9PmRlY29kZShlbnRyeSkpIDogZy5yZXBlYXQgPyBbXG4gICAgICAgICAgICAgICAgICAgIGRlY29kZShtKVxuICAgICAgICAgICAgICAgIF0gOiBkZWNvZGUobSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgIH07XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdXRlLW1hdGNoZXIuanMubWFwIl0sIm5hbWVzIjpbIkRlY29kZUVycm9yIiwiZ2V0Um91dGVNYXRjaGVyIiwicGFyYW0iLCJyZSIsImdyb3VwcyIsInBhdGhuYW1lIiwicm91dGVNYXRjaCIsImV4ZWMiLCJkZWNvZGUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJfIiwicGFyYW1zIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJzbHVnTmFtZSIsImciLCJtIiwicG9zIiwidW5kZWZpbmVkIiwiaW5kZXhPZiIsInNwbGl0IiwibWFwIiwiZW50cnkiLCJyZXBlYXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/route-matcher.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/route-regex.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/router/utils/route-regex.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getNamedMiddlewareRegex: () => (/* binding */ getNamedMiddlewareRegex),\n/* harmony export */   getNamedRouteRegex: () => (/* binding */ getNamedRouteRegex),\n/* harmony export */   getRouteRegex: () => (/* binding */ getRouteRegex)\n/* harmony export */ });\n/* harmony import */ var _server_future_helpers_interception_routes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../server/future/helpers/interception-routes */ \"(rsc)/./node_modules/next/dist/esm/server/future/helpers/interception-routes.js\");\n/* harmony import */ var _escape_regexp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../escape-regexp */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/escape-regexp.js\");\n/* harmony import */ var _remove_trailing_slash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./remove-trailing-slash */ \"(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/remove-trailing-slash.js\");\n\n\n\nconst NEXT_QUERY_PARAM_PREFIX = \"nxtP\";\nconst NEXT_INTERCEPTION_MARKER_PREFIX = \"nxtI\";\n/**\n * Parses a given parameter from a route to a data structure that can be used\n * to generate the parametrized route. Examples:\n *   - `[...slug]` -> `{ key: 'slug', repeat: true, optional: true }`\n *   - `...slug` -> `{ key: 'slug', repeat: true, optional: false }`\n *   - `[foo]` -> `{ key: 'foo', repeat: false, optional: true }`\n *   - `bar` -> `{ key: 'bar', repeat: false, optional: false }`\n */ function parseParameter(param) {\n    const optional = param.startsWith(\"[\") && param.endsWith(\"]\");\n    if (optional) {\n        param = param.slice(1, -1);\n    }\n    const repeat = param.startsWith(\"...\");\n    if (repeat) {\n        param = param.slice(3);\n    }\n    return {\n        key: param,\n        repeat,\n        optional\n    };\n}\nfunction getParametrizedRoute(route) {\n    const segments = (0,_remove_trailing_slash__WEBPACK_IMPORTED_MODULE_2__.removeTrailingSlash)(route).slice(1).split(\"/\");\n    const groups = {};\n    let groupIndex = 1;\n    return {\n        parameterizedRoute: segments.map((segment)=>{\n            const markerMatch = _server_future_helpers_interception_routes__WEBPACK_IMPORTED_MODULE_0__.INTERCEPTION_ROUTE_MARKERS.find((m)=>segment.startsWith(m));\n            const paramMatches = segment.match(/\\[((?:\\[.*\\])|.+)\\]/) // Check for parameters\n            ;\n            if (markerMatch && paramMatches) {\n                const { key, optional, repeat } = parseParameter(paramMatches[1]);\n                groups[key] = {\n                    pos: groupIndex++,\n                    repeat,\n                    optional\n                };\n                return \"/\" + (0,_escape_regexp__WEBPACK_IMPORTED_MODULE_1__.escapeStringRegexp)(markerMatch) + \"([^/]+?)\";\n            } else if (paramMatches) {\n                const { key, repeat, optional } = parseParameter(paramMatches[1]);\n                groups[key] = {\n                    pos: groupIndex++,\n                    repeat,\n                    optional\n                };\n                return repeat ? optional ? \"(?:/(.+?))?\" : \"/(.+?)\" : \"/([^/]+?)\";\n            } else {\n                return \"/\" + (0,_escape_regexp__WEBPACK_IMPORTED_MODULE_1__.escapeStringRegexp)(segment);\n            }\n        }).join(\"\"),\n        groups\n    };\n}\n/**\n * From a normalized route this function generates a regular expression and\n * a corresponding groups object intended to be used to store matching groups\n * from the regular expression.\n */ function getRouteRegex(normalizedRoute) {\n    const { parameterizedRoute, groups } = getParametrizedRoute(normalizedRoute);\n    return {\n        re: new RegExp(\"^\" + parameterizedRoute + \"(?:/)?$\"),\n        groups: groups\n    };\n}\n/**\n * Builds a function to generate a minimal routeKey using only a-z and minimal\n * number of characters.\n */ function buildGetSafeRouteKey() {\n    let i = 0;\n    return ()=>{\n        let routeKey = \"\";\n        let j = ++i;\n        while(j > 0){\n            routeKey += String.fromCharCode(97 + (j - 1) % 26);\n            j = Math.floor((j - 1) / 26);\n        }\n        return routeKey;\n    };\n}\nfunction getSafeKeyFromSegment(param) {\n    let { interceptionMarker, getSafeRouteKey, segment, routeKeys, keyPrefix } = param;\n    const { key, optional, repeat } = parseParameter(segment);\n    // replace any non-word characters since they can break\n    // the named regex\n    let cleanedKey = key.replace(/\\W/g, \"\");\n    if (keyPrefix) {\n        cleanedKey = \"\" + keyPrefix + cleanedKey;\n    }\n    let invalidKey = false;\n    // check if the key is still invalid and fallback to using a known\n    // safe key\n    if (cleanedKey.length === 0 || cleanedKey.length > 30) {\n        invalidKey = true;\n    }\n    if (!isNaN(parseInt(cleanedKey.slice(0, 1)))) {\n        invalidKey = true;\n    }\n    if (invalidKey) {\n        cleanedKey = getSafeRouteKey();\n    }\n    if (keyPrefix) {\n        routeKeys[cleanedKey] = \"\" + keyPrefix + key;\n    } else {\n        routeKeys[cleanedKey] = key;\n    }\n    // if the segment has an interception marker, make sure that's part of the regex pattern\n    // this is to ensure that the route with the interception marker doesn't incorrectly match\n    // the non-intercepted route (ie /app/(.)[username] should not match /app/[username])\n    const interceptionPrefix = interceptionMarker ? (0,_escape_regexp__WEBPACK_IMPORTED_MODULE_1__.escapeStringRegexp)(interceptionMarker) : \"\";\n    return repeat ? optional ? \"(?:/\" + interceptionPrefix + \"(?<\" + cleanedKey + \">.+?))?\" : \"/\" + interceptionPrefix + \"(?<\" + cleanedKey + \">.+?)\" : \"/\" + interceptionPrefix + \"(?<\" + cleanedKey + \">[^/]+?)\";\n}\nfunction getNamedParametrizedRoute(route, prefixRouteKeys) {\n    const segments = (0,_remove_trailing_slash__WEBPACK_IMPORTED_MODULE_2__.removeTrailingSlash)(route).slice(1).split(\"/\");\n    const getSafeRouteKey = buildGetSafeRouteKey();\n    const routeKeys = {};\n    return {\n        namedParameterizedRoute: segments.map((segment)=>{\n            const hasInterceptionMarker = _server_future_helpers_interception_routes__WEBPACK_IMPORTED_MODULE_0__.INTERCEPTION_ROUTE_MARKERS.some((m)=>segment.startsWith(m));\n            const paramMatches = segment.match(/\\[((?:\\[.*\\])|.+)\\]/) // Check for parameters\n            ;\n            if (hasInterceptionMarker && paramMatches) {\n                const [usedMarker] = segment.split(paramMatches[0]);\n                return getSafeKeyFromSegment({\n                    getSafeRouteKey,\n                    interceptionMarker: usedMarker,\n                    segment: paramMatches[1],\n                    routeKeys,\n                    keyPrefix: prefixRouteKeys ? NEXT_INTERCEPTION_MARKER_PREFIX : undefined\n                });\n            } else if (paramMatches) {\n                return getSafeKeyFromSegment({\n                    getSafeRouteKey,\n                    segment: paramMatches[1],\n                    routeKeys,\n                    keyPrefix: prefixRouteKeys ? NEXT_QUERY_PARAM_PREFIX : undefined\n                });\n            } else {\n                return \"/\" + (0,_escape_regexp__WEBPACK_IMPORTED_MODULE_1__.escapeStringRegexp)(segment);\n            }\n        }).join(\"\"),\n        routeKeys\n    };\n}\n/**\n * This function extends `getRouteRegex` generating also a named regexp where\n * each group is named along with a routeKeys object that indexes the assigned\n * named group with its corresponding key. When the routeKeys need to be\n * prefixed to uniquely identify internally the \"prefixRouteKey\" arg should\n * be \"true\" currently this is only the case when creating the routes-manifest\n * during the build\n */ function getNamedRouteRegex(normalizedRoute, prefixRouteKey) {\n    const result = getNamedParametrizedRoute(normalizedRoute, prefixRouteKey);\n    return {\n        ...getRouteRegex(normalizedRoute),\n        namedRegex: \"^\" + result.namedParameterizedRoute + \"(?:/)?$\",\n        routeKeys: result.routeKeys\n    };\n}\n/**\n * Generates a named regexp.\n * This is intended to be using for build time only.\n */ function getNamedMiddlewareRegex(normalizedRoute, options) {\n    const { parameterizedRoute } = getParametrizedRoute(normalizedRoute);\n    const { catchAll = true } = options;\n    if (parameterizedRoute === \"/\") {\n        let catchAllRegex = catchAll ? \".*\" : \"\";\n        return {\n            namedRegex: \"^/\" + catchAllRegex + \"$\"\n        };\n    }\n    const { namedParameterizedRoute } = getNamedParametrizedRoute(normalizedRoute, false);\n    let catchAllGroupedRegex = catchAll ? \"(?:(/.*)?)\" : \"\";\n    return {\n        namedRegex: \"^\" + namedParameterizedRoute + catchAllGroupedRegex + \"$\"\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/route-regex.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/sorted-routes.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/router/utils/sorted-routes.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSortedRoutes: () => (/* binding */ getSortedRoutes)\n/* harmony export */ });\nclass UrlNode {\n    insert(urlPath) {\n        this._insert(urlPath.split(\"/\").filter(Boolean), [], false);\n    }\n    smoosh() {\n        return this._smoosh();\n    }\n    _smoosh(prefix) {\n        if (prefix === void 0) prefix = \"/\";\n        const childrenPaths = [\n            ...this.children.keys()\n        ].sort();\n        if (this.slugName !== null) {\n            childrenPaths.splice(childrenPaths.indexOf(\"[]\"), 1);\n        }\n        if (this.restSlugName !== null) {\n            childrenPaths.splice(childrenPaths.indexOf(\"[...]\"), 1);\n        }\n        if (this.optionalRestSlugName !== null) {\n            childrenPaths.splice(childrenPaths.indexOf(\"[[...]]\"), 1);\n        }\n        const routes = childrenPaths.map((c)=>this.children.get(c)._smoosh(\"\" + prefix + c + \"/\")).reduce((prev, curr)=>[\n                ...prev,\n                ...curr\n            ], []);\n        if (this.slugName !== null) {\n            routes.push(...this.children.get(\"[]\")._smoosh(prefix + \"[\" + this.slugName + \"]/\"));\n        }\n        if (!this.placeholder) {\n            const r = prefix === \"/\" ? \"/\" : prefix.slice(0, -1);\n            if (this.optionalRestSlugName != null) {\n                throw new Error('You cannot define a route with the same specificity as a optional catch-all route (\"' + r + '\" and \"' + r + \"[[...\" + this.optionalRestSlugName + ']]\").');\n            }\n            routes.unshift(r);\n        }\n        if (this.restSlugName !== null) {\n            routes.push(...this.children.get(\"[...]\")._smoosh(prefix + \"[...\" + this.restSlugName + \"]/\"));\n        }\n        if (this.optionalRestSlugName !== null) {\n            routes.push(...this.children.get(\"[[...]]\")._smoosh(prefix + \"[[...\" + this.optionalRestSlugName + \"]]/\"));\n        }\n        return routes;\n    }\n    _insert(urlPaths, slugNames, isCatchAll) {\n        if (urlPaths.length === 0) {\n            this.placeholder = false;\n            return;\n        }\n        if (isCatchAll) {\n            throw new Error(\"Catch-all must be the last part of the URL.\");\n        }\n        // The next segment in the urlPaths list\n        let nextSegment = urlPaths[0];\n        // Check if the segment matches `[something]`\n        if (nextSegment.startsWith(\"[\") && nextSegment.endsWith(\"]\")) {\n            // Strip `[` and `]`, leaving only `something`\n            let segmentName = nextSegment.slice(1, -1);\n            let isOptional = false;\n            if (segmentName.startsWith(\"[\") && segmentName.endsWith(\"]\")) {\n                // Strip optional `[` and `]`, leaving only `something`\n                segmentName = segmentName.slice(1, -1);\n                isOptional = true;\n            }\n            if (segmentName.startsWith(\"...\")) {\n                // Strip `...`, leaving only `something`\n                segmentName = segmentName.substring(3);\n                isCatchAll = true;\n            }\n            if (segmentName.startsWith(\"[\") || segmentName.endsWith(\"]\")) {\n                throw new Error(\"Segment names may not start or end with extra brackets ('\" + segmentName + \"').\");\n            }\n            if (segmentName.startsWith(\".\")) {\n                throw new Error(\"Segment names may not start with erroneous periods ('\" + segmentName + \"').\");\n            }\n            function handleSlug(previousSlug, nextSlug) {\n                if (previousSlug !== null) {\n                    // If the specific segment already has a slug but the slug is not `something`\n                    // This prevents collisions like:\n                    // pages/[post]/index.js\n                    // pages/[id]/index.js\n                    // Because currently multiple dynamic params on the same segment level are not supported\n                    if (previousSlug !== nextSlug) {\n                        // TODO: This error seems to be confusing for users, needs an error link, the description can be based on above comment.\n                        throw new Error(\"You cannot use different slug names for the same dynamic path ('\" + previousSlug + \"' !== '\" + nextSlug + \"').\");\n                    }\n                }\n                slugNames.forEach((slug)=>{\n                    if (slug === nextSlug) {\n                        throw new Error('You cannot have the same slug name \"' + nextSlug + '\" repeat within a single dynamic path');\n                    }\n                    if (slug.replace(/\\W/g, \"\") === nextSegment.replace(/\\W/g, \"\")) {\n                        throw new Error('You cannot have the slug names \"' + slug + '\" and \"' + nextSlug + '\" differ only by non-word symbols within a single dynamic path');\n                    }\n                });\n                slugNames.push(nextSlug);\n            }\n            if (isCatchAll) {\n                if (isOptional) {\n                    if (this.restSlugName != null) {\n                        throw new Error('You cannot use both an required and optional catch-all route at the same level (\"[...' + this.restSlugName + ']\" and \"' + urlPaths[0] + '\" ).');\n                    }\n                    handleSlug(this.optionalRestSlugName, segmentName);\n                    // slugName is kept as it can only be one particular slugName\n                    this.optionalRestSlugName = segmentName;\n                    // nextSegment is overwritten to [[...]] so that it can later be sorted specifically\n                    nextSegment = \"[[...]]\";\n                } else {\n                    if (this.optionalRestSlugName != null) {\n                        throw new Error('You cannot use both an optional and required catch-all route at the same level (\"[[...' + this.optionalRestSlugName + ']]\" and \"' + urlPaths[0] + '\").');\n                    }\n                    handleSlug(this.restSlugName, segmentName);\n                    // slugName is kept as it can only be one particular slugName\n                    this.restSlugName = segmentName;\n                    // nextSegment is overwritten to [...] so that it can later be sorted specifically\n                    nextSegment = \"[...]\";\n                }\n            } else {\n                if (isOptional) {\n                    throw new Error('Optional route parameters are not yet supported (\"' + urlPaths[0] + '\").');\n                }\n                handleSlug(this.slugName, segmentName);\n                // slugName is kept as it can only be one particular slugName\n                this.slugName = segmentName;\n                // nextSegment is overwritten to [] so that it can later be sorted specifically\n                nextSegment = \"[]\";\n            }\n        }\n        // If this UrlNode doesn't have the nextSegment yet we create a new child UrlNode\n        if (!this.children.has(nextSegment)) {\n            this.children.set(nextSegment, new UrlNode());\n        }\n        this.children.get(nextSegment)._insert(urlPaths.slice(1), slugNames, isCatchAll);\n    }\n    constructor(){\n        this.placeholder = true;\n        this.children = new Map();\n        this.slugName = null;\n        this.restSlugName = null;\n        this.optionalRestSlugName = null;\n    }\n}\nfunction getSortedRoutes(normalizedPages) {\n    // First the UrlNode is created, and every UrlNode can have only 1 dynamic segment\n    // Eg you can't have pages/[post]/abc.js and pages/[hello]/something-else.js\n    // Only 1 dynamic segment per nesting level\n    // So in the case that is test/integration/dynamic-routing it'll be this:\n    // pages/[post]/comments.js\n    // pages/blog/[post]/comment/[id].js\n    // Both are fine because `pages/[post]` and `pages/blog` are on the same level\n    // So in this case `UrlNode` created here has `this.slugName === 'post'`\n    // And since your PR passed through `slugName` as an array basically it'd including it in too many possibilities\n    // Instead what has to be passed through is the upwards path's dynamic names\n    const root = new UrlNode();\n    // Here the `root` gets injected multiple paths, and insert will break them up into sublevels\n    normalizedPages.forEach((pagePath)=>root.insert(pagePath));\n    // Smoosh will then sort those sublevels up to the point where you get the correct route definition priority\n    return root.smoosh();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/router/utils/sorted-routes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/segment.js":
/*!**********************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/segment.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_SEGMENT_KEY: () => (/* binding */ DEFAULT_SEGMENT_KEY),\n/* harmony export */   PAGE_SEGMENT_KEY: () => (/* binding */ PAGE_SEGMENT_KEY),\n/* harmony export */   isGroupSegment: () => (/* binding */ isGroupSegment)\n/* harmony export */ });\nfunction isGroupSegment(segment) {\n    // Use array[0] for performant purpose\n    return segment[0] === \"(\" && segment.endsWith(\")\");\n}\nconst PAGE_SEGMENT_KEY = \"__PAGE__\";\nconst DEFAULT_SEGMENT_KEY = \"__DEFAULT__\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9zaGFyZWQvbGliL3NlZ21lbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU8sU0FBU0EsZUFBZUMsT0FBTztJQUNsQztJQUNBLE9BQU9BLE9BQU8sQ0FBQyxFQUFFLEtBQUssT0FBT0EsUUFBUUMsUUFBUSxDQUFDO0FBQ2xEO0FBQ08sTUFBTUMsbUJBQW1CLFdBQVU7QUFDbkMsTUFBTUMsc0JBQXNCLGNBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2hhcmVkL2xpYi9zZWdtZW50LmpzP2ZjZDYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzR3JvdXBTZWdtZW50KHNlZ21lbnQpIHtcbiAgICAvLyBVc2UgYXJyYXlbMF0gZm9yIHBlcmZvcm1hbnQgcHVycG9zZVxuICAgIHJldHVybiBzZWdtZW50WzBdID09PSBcIihcIiAmJiBzZWdtZW50LmVuZHNXaXRoKFwiKVwiKTtcbn1cbmV4cG9ydCBjb25zdCBQQUdFX1NFR01FTlRfS0VZID0gXCJfX1BBR0VfX1wiO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VHTUVOVF9LRVkgPSBcIl9fREVGQVVMVF9fXCI7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlZ21lbnQuanMubWFwIl0sIm5hbWVzIjpbImlzR3JvdXBTZWdtZW50Iiwic2VnbWVudCIsImVuZHNXaXRoIiwiUEFHRV9TRUdNRU5UX0tFWSIsIkRFRkFVTFRfU0VHTUVOVF9LRVkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/segment.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/esm/shared/lib/utils.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/utils.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DecodeError: () => (/* binding */ DecodeError),\n/* harmony export */   MiddlewareNotFoundError: () => (/* binding */ MiddlewareNotFoundError),\n/* harmony export */   MissingStaticPage: () => (/* binding */ MissingStaticPage),\n/* harmony export */   NormalizeError: () => (/* binding */ NormalizeError),\n/* harmony export */   PageNotFoundError: () => (/* binding */ PageNotFoundError),\n/* harmony export */   SP: () => (/* binding */ SP),\n/* harmony export */   ST: () => (/* binding */ ST),\n/* harmony export */   WEB_VITALS: () => (/* binding */ WEB_VITALS),\n/* harmony export */   execOnce: () => (/* binding */ execOnce),\n/* harmony export */   getDisplayName: () => (/* binding */ getDisplayName),\n/* harmony export */   getLocationOrigin: () => (/* binding */ getLocationOrigin),\n/* harmony export */   getURL: () => (/* binding */ getURL),\n/* harmony export */   isAbsoluteUrl: () => (/* binding */ isAbsoluteUrl),\n/* harmony export */   isResSent: () => (/* binding */ isResSent),\n/* harmony export */   loadGetInitialProps: () => (/* binding */ loadGetInitialProps),\n/* harmony export */   normalizeRepeatedSlashes: () => (/* binding */ normalizeRepeatedSlashes),\n/* harmony export */   stringifyError: () => (/* binding */ stringifyError)\n/* harmony export */ });\n/**\n * Web vitals provided to _app.reportWebVitals by Core Web Vitals plugin developed by Google Chrome team.\n * https://nextjs.org/blog/next-9-4#integrated-web-vitals-reporting\n */ const WEB_VITALS = [\n    \"CLS\",\n    \"FCP\",\n    \"FID\",\n    \"INP\",\n    \"LCP\",\n    \"TTFB\"\n];\n/**\n * Utils\n */ function execOnce(fn) {\n    let used = false;\n    let result;\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (!used) {\n            used = true;\n            result = fn(...args);\n        }\n        return result;\n    };\n}\n// Scheme: https://tools.ietf.org/html/rfc3986#section-3.1\n// Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3\nconst ABSOLUTE_URL_REGEX = /^[a-zA-Z][a-zA-Z\\d+\\-.]*?:/;\nconst isAbsoluteUrl = (url)=>ABSOLUTE_URL_REGEX.test(url);\nfunction getLocationOrigin() {\n    const { protocol, hostname, port } = window.location;\n    return protocol + \"//\" + hostname + (port ? \":\" + port : \"\");\n}\nfunction getURL() {\n    const { href } = window.location;\n    const origin = getLocationOrigin();\n    return href.substring(origin.length);\n}\nfunction getDisplayName(Component) {\n    return typeof Component === \"string\" ? Component : Component.displayName || Component.name || \"Unknown\";\n}\nfunction isResSent(res) {\n    return res.finished || res.headersSent;\n}\nfunction normalizeRepeatedSlashes(url) {\n    const urlParts = url.split(\"?\");\n    const urlNoQuery = urlParts[0];\n    return urlNoQuery // first we replace any non-encoded backslashes with forward\n    // then normalize repeated forward slashes\n    .replace(/\\\\/g, \"/\").replace(/\\/\\/+/g, \"/\") + (urlParts[1] ? \"?\" + urlParts.slice(1).join(\"?\") : \"\");\n}\nasync function loadGetInitialProps(App, ctx) {\n    if (true) {\n        var _App_prototype;\n        if ((_App_prototype = App.prototype) == null ? void 0 : _App_prototype.getInitialProps) {\n            const message = '\"' + getDisplayName(App) + '.getInitialProps()\" is defined as an instance method - visit https://nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.';\n            throw new Error(message);\n        }\n    }\n    // when called from _app `ctx` is nested in `ctx`\n    const res = ctx.res || ctx.ctx && ctx.ctx.res;\n    if (!App.getInitialProps) {\n        if (ctx.ctx && ctx.Component) {\n            // @ts-ignore pageProps default\n            return {\n                pageProps: await loadGetInitialProps(ctx.Component, ctx.ctx)\n            };\n        }\n        return {};\n    }\n    const props = await App.getInitialProps(ctx);\n    if (res && isResSent(res)) {\n        return props;\n    }\n    if (!props) {\n        const message = '\"' + getDisplayName(App) + '.getInitialProps()\" should resolve to an object. But found \"' + props + '\" instead.';\n        throw new Error(message);\n    }\n    if (true) {\n        if (Object.keys(props).length === 0 && !ctx.ctx) {\n            console.warn(\"\" + getDisplayName(App) + \" returned an empty object from `getInitialProps`. This de-optimizes and prevents automatic static optimization. https://nextjs.org/docs/messages/empty-object-getInitialProps\");\n        }\n    }\n    return props;\n}\nconst SP = typeof performance !== \"undefined\";\nconst ST = SP && [\n    \"mark\",\n    \"measure\",\n    \"getEntriesByName\"\n].every((method)=>typeof performance[method] === \"function\");\nclass DecodeError extends Error {\n}\nclass NormalizeError extends Error {\n}\nclass PageNotFoundError extends Error {\n    constructor(page){\n        super();\n        this.code = \"ENOENT\";\n        this.name = \"PageNotFoundError\";\n        this.message = \"Cannot find module for page: \" + page;\n    }\n}\nclass MissingStaticPage extends Error {\n    constructor(page, message){\n        super();\n        this.message = \"Failed to load static file for page: \" + page + \" \" + message;\n    }\n}\nclass MiddlewareNotFoundError extends Error {\n    constructor(){\n        super();\n        this.code = \"ENOENT\";\n        this.message = \"Cannot find the middleware module\";\n    }\n}\nfunction stringifyError(error) {\n    return JSON.stringify({\n        message: error.message,\n        stack: error.stack\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/esm/shared/lib/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/experimental/testmode/context.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/experimental/testmode/context.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  withRequest: function () {\n    return withRequest;\n  },\n  getTestReqInfo: function () {\n    return getTestReqInfo;\n  }\n});\nconst _nodeasync_hooks = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");\nconst testStorage = new _nodeasync_hooks.AsyncLocalStorage();\nfunction extractTestInfoFromRequest(req, reader) {\n  const proxyPortHeader = reader.header(req, \"next-test-proxy-port\");\n  if (!proxyPortHeader) {\n    return undefined;\n  }\n  const url = reader.url(req);\n  const proxyPort = Number(proxyPortHeader);\n  const testData = reader.header(req, \"next-test-data\") || \"\";\n  return {\n    url,\n    proxyPort,\n    testData\n  };\n}\nfunction withRequest(req, reader, fn) {\n  const testReqInfo = extractTestInfoFromRequest(req, reader);\n  if (!testReqInfo) {\n    return fn();\n  }\n  return testStorage.run(testReqInfo, fn);\n}\nfunction getTestReqInfo(req, reader) {\n  const testReqInfo = testStorage.getStore();\n  if (testReqInfo) {\n    return testReqInfo;\n  }\n  if (req && reader) {\n    return extractTestInfoFromRequest(req, reader);\n  }\n  return undefined;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2V4cGVyaW1lbnRhbC90ZXN0bW9kZS9jb250ZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiQSw4Q0FBNkM7RUFDekNHLEtBQUssRUFBRTtBQUNYLENBQUMsRUFBQztBQUNGLENBQUMsS0FBS0MsQ0FHTCxDQUFDO0FBQ0YsU0FBU0csT0FBT0EsQ0FBQ0MsTUFBTSxFQUFFQyxHQUFHLEVBQUU7RUFDMUIsS0FBSSxJQUFJQyxJQUFJLElBQUlELEdBQUcsRUFBQ1QsTUFBTSxDQUFDQyxjQUFjLENBQUNPLE1BQU0sRUFBRUUsSUFBSSxFQUFFO0lBQ3BEQyxVQUFVLEVBQUUsSUFBSTtJQUNoQkMsR0FBRyxFQUFFSCxHQUFHLENBQUNDLElBQUk7RUFDakIsQ0FBQyxDQUFDO0FBQ047QUFDQUgsT0FBTyxDQUFDTCxPQUFPLEVBQUU7RUFDYkcsV0FBVyxFQUFFLFNBQUFBLENBQUEsRUFBVztJQUNwQixPQUFPQSxXQUFXO0VBQ3RCLENBQUM7RUFDREMsY0FBYyxFQUFFLFNBQUFBLENBQUEsRUFBVztJQUN2QixPQUFPQSxjQUFjO0VBQ3pCO0FBQ0osQ0FBQyxDQUFDO0FBQ0YsTUFBTU8sZ0JBQWdCLEdBQUdDLG1CQUFPLENBQUMsMENBQWtCLENBQUM7QUFDcEQsTUFBTUMsV0FBVyxHQUFHLElBQUlGLGdCQUFnQixDQUFDRyxpQkFBaUIsQ0FBQyxDQUFDO0FBQzVELFNBQVNDLDBCQUEwQkEsQ0FBQ0MsR0FBRyxFQUFFQyxNQUFNLEVBQUU7RUFDN0MsTUFBTUMsZUFBZSxHQUFHRCxNQUFNLENBQUNFLE1BQU0sQ0FBQ0gsR0FBRyxFQUFFLHNCQUFzQixDQUFDO0VBQ2xFLElBQUksQ0FBQ0UsZUFBZSxFQUFFO0lBQ2xCLE9BQU9FLFNBQVM7RUFDcEI7RUFDQSxNQUFNQyxHQUFHLEdBQUdKLE1BQU0sQ0FBQ0ksR0FBRyxDQUFDTCxHQUFHLENBQUM7RUFDM0IsTUFBTU0sU0FBUyxHQUFHQyxNQUFNLENBQUNMLGVBQWUsQ0FBQztFQUN6QyxNQUFNTSxRQUFRLEdBQUdQLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDSCxHQUFHLEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxFQUFFO0VBQzNELE9BQU87SUFDSEssR0FBRztJQUNIQyxTQUFTO0lBQ1RFO0VBQ0osQ0FBQztBQUNMO0FBQ0EsU0FBU3JCLFdBQVdBLENBQUNhLEdBQUcsRUFBRUMsTUFBTSxFQUFFUSxFQUFFLEVBQUU7RUFDbEMsTUFBTUMsV0FBVyxHQUFHWCwwQkFBMEIsQ0FBQ0MsR0FBRyxFQUFFQyxNQUFNLENBQUM7RUFDM0QsSUFBSSxDQUFDUyxXQUFXLEVBQUU7SUFDZCxPQUFPRCxFQUFFLENBQUMsQ0FBQztFQUNmO0VBQ0EsT0FBT1osV0FBVyxDQUFDYyxHQUFHLENBQUNELFdBQVcsRUFBRUQsRUFBRSxDQUFDO0FBQzNDO0FBQ0EsU0FBU3JCLGNBQWNBLENBQUNZLEdBQUcsRUFBRUMsTUFBTSxFQUFFO0VBQ2pDLE1BQU1TLFdBQVcsR0FBR2IsV0FBVyxDQUFDZSxRQUFRLENBQUMsQ0FBQztFQUMxQyxJQUFJRixXQUFXLEVBQUU7SUFDYixPQUFPQSxXQUFXO0VBQ3RCO0VBQ0EsSUFBSVYsR0FBRyxJQUFJQyxNQUFNLEVBQUU7SUFDZixPQUFPRiwwQkFBMEIsQ0FBQ0MsR0FBRyxFQUFFQyxNQUFNLENBQUM7RUFDbEQ7RUFDQSxPQUFPRyxTQUFTO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvZXhwZXJpbWVudGFsL3Rlc3Rtb2RlL2NvbnRleHQuanM/OTM1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIHdpdGhSZXF1ZXN0OiBudWxsLFxuICAgIGdldFRlc3RSZXFJbmZvOiBudWxsXG59KTtcbmZ1bmN0aW9uIF9leHBvcnQodGFyZ2V0LCBhbGwpIHtcbiAgICBmb3IodmFyIG5hbWUgaW4gYWxsKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBhbGxbbmFtZV1cbiAgICB9KTtcbn1cbl9leHBvcnQoZXhwb3J0cywge1xuICAgIHdpdGhSZXF1ZXN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHdpdGhSZXF1ZXN0O1xuICAgIH0sXG4gICAgZ2V0VGVzdFJlcUluZm86IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0VGVzdFJlcUluZm87XG4gICAgfVxufSk7XG5jb25zdCBfbm9kZWFzeW5jX2hvb2tzID0gcmVxdWlyZShcIm5vZGU6YXN5bmNfaG9va3NcIik7XG5jb25zdCB0ZXN0U3RvcmFnZSA9IG5ldyBfbm9kZWFzeW5jX2hvb2tzLkFzeW5jTG9jYWxTdG9yYWdlKCk7XG5mdW5jdGlvbiBleHRyYWN0VGVzdEluZm9Gcm9tUmVxdWVzdChyZXEsIHJlYWRlcikge1xuICAgIGNvbnN0IHByb3h5UG9ydEhlYWRlciA9IHJlYWRlci5oZWFkZXIocmVxLCBcIm5leHQtdGVzdC1wcm94eS1wb3J0XCIpO1xuICAgIGlmICghcHJveHlQb3J0SGVhZGVyKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IHVybCA9IHJlYWRlci51cmwocmVxKTtcbiAgICBjb25zdCBwcm94eVBvcnQgPSBOdW1iZXIocHJveHlQb3J0SGVhZGVyKTtcbiAgICBjb25zdCB0ZXN0RGF0YSA9IHJlYWRlci5oZWFkZXIocmVxLCBcIm5leHQtdGVzdC1kYXRhXCIpIHx8IFwiXCI7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdXJsLFxuICAgICAgICBwcm94eVBvcnQsXG4gICAgICAgIHRlc3REYXRhXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHdpdGhSZXF1ZXN0KHJlcSwgcmVhZGVyLCBmbikge1xuICAgIGNvbnN0IHRlc3RSZXFJbmZvID0gZXh0cmFjdFRlc3RJbmZvRnJvbVJlcXVlc3QocmVxLCByZWFkZXIpO1xuICAgIGlmICghdGVzdFJlcUluZm8pIHtcbiAgICAgICAgcmV0dXJuIGZuKCk7XG4gICAgfVxuICAgIHJldHVybiB0ZXN0U3RvcmFnZS5ydW4odGVzdFJlcUluZm8sIGZuKTtcbn1cbmZ1bmN0aW9uIGdldFRlc3RSZXFJbmZvKHJlcSwgcmVhZGVyKSB7XG4gICAgY29uc3QgdGVzdFJlcUluZm8gPSB0ZXN0U3RvcmFnZS5nZXRTdG9yZSgpO1xuICAgIGlmICh0ZXN0UmVxSW5mbykge1xuICAgICAgICByZXR1cm4gdGVzdFJlcUluZm87XG4gICAgfVxuICAgIGlmIChyZXEgJiYgcmVhZGVyKSB7XG4gICAgICAgIHJldHVybiBleHRyYWN0VGVzdEluZm9Gcm9tUmVxdWVzdChyZXEsIHJlYWRlcik7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRleHQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwid2l0aFJlcXVlc3QiLCJnZXRUZXN0UmVxSW5mbyIsIl9leHBvcnQiLCJ0YXJnZXQiLCJhbGwiLCJuYW1lIiwiZW51bWVyYWJsZSIsImdldCIsIl9ub2RlYXN5bmNfaG9va3MiLCJyZXF1aXJlIiwidGVzdFN0b3JhZ2UiLCJBc3luY0xvY2FsU3RvcmFnZSIsImV4dHJhY3RUZXN0SW5mb0Zyb21SZXF1ZXN0IiwicmVxIiwicmVhZGVyIiwicHJveHlQb3J0SGVhZGVyIiwiaGVhZGVyIiwidW5kZWZpbmVkIiwidXJsIiwicHJveHlQb3J0IiwiTnVtYmVyIiwidGVzdERhdGEiLCJmbiIsInRlc3RSZXFJbmZvIiwicnVuIiwiZ2V0U3RvcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/experimental/testmode/context.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/experimental/testmode/fetch.js":
/*!***************************************************************!*\
  !*** ./node_modules/next/dist/experimental/testmode/fetch.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"buffer\")[\"Buffer\"];\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  reader: function () {\n    return reader;\n  },\n  handleFetch: function () {\n    return handleFetch;\n  },\n  interceptFetch: function () {\n    return interceptFetch;\n  }\n});\nconst _context = __webpack_require__(/*! ./context */ \"(rsc)/./node_modules/next/dist/experimental/testmode/context.js\");\nconst reader = {\n  url(req) {\n    return req.url;\n  },\n  header(req, name) {\n    return req.headers.get(name);\n  }\n};\nfunction getTestStack() {\n  let stack = (new Error().stack ?? \"\").split(\"\\n\");\n  // Skip the first line and find first non-empty line.\n  for (let i = 1; i < stack.length; i++) {\n    if (stack[i].length > 0) {\n      stack = stack.slice(i);\n      break;\n    }\n  }\n  // Filter out franmework lines.\n  stack = stack.filter(f => !f.includes(\"/next/dist/\"));\n  // At most 5 lines.\n  stack = stack.slice(0, 5);\n  // Cleanup some internal info and trim.\n  stack = stack.map(s => s.replace(\"webpack-internal:///(rsc)/\", \"\").trim());\n  return stack.join(\"    \");\n}\nasync function buildProxyRequest(testData, request) {\n  const {\n    url,\n    method,\n    headers,\n    body,\n    cache,\n    credentials,\n    integrity,\n    mode,\n    redirect,\n    referrer,\n    referrerPolicy\n  } = request;\n  return {\n    testData,\n    api: \"fetch\",\n    request: {\n      url,\n      method,\n      headers: [...Array.from(headers), [\"next-test-stack\", getTestStack()]],\n      body: body ? Buffer.from(await request.arrayBuffer()).toString(\"base64\") : null,\n      cache,\n      credentials,\n      integrity,\n      mode,\n      redirect,\n      referrer,\n      referrerPolicy\n    }\n  };\n}\nfunction buildResponse(proxyResponse) {\n  const {\n    status,\n    headers,\n    body\n  } = proxyResponse.response;\n  return new Response(body ? Buffer.from(body, \"base64\") : null, {\n    status,\n    headers: new Headers(headers)\n  });\n}\nasync function handleFetch(originalFetch, request) {\n  const testInfo = (0, _context.getTestReqInfo)(request, reader);\n  if (!testInfo) {\n    throw new Error(`No test info for ${request.method} ${request.url}`);\n  }\n  const {\n    testData,\n    proxyPort\n  } = testInfo;\n  const proxyRequest = await buildProxyRequest(testData, request);\n  const resp = await originalFetch(`http://localhost:${proxyPort}`, {\n    method: \"POST\",\n    body: JSON.stringify(proxyRequest),\n    next: {\n      // @ts-ignore\n      internal: true\n    }\n  });\n  if (!resp.ok) {\n    throw new Error(`Proxy request failed: ${resp.status}`);\n  }\n  const proxyResponse = await resp.json();\n  const {\n    api\n  } = proxyResponse;\n  switch (api) {\n    case \"continue\":\n      return originalFetch(request);\n    case \"abort\":\n    case \"unhandled\":\n      throw new Error(`Proxy request aborted [${request.method} ${request.url}]`);\n    default:\n      break;\n  }\n  return buildResponse(proxyResponse);\n}\nfunction interceptFetch(originalFetch) {\n  __webpack_require__.g.fetch = function testFetch(input, init) {\n    var _init_next;\n    // Passthrough internal requests.\n    // @ts-ignore\n    if (init == null ? void 0 : (_init_next = init.next) == null ? void 0 : _init_next.internal) {\n      return originalFetch(input, init);\n    }\n    return handleFetch(originalFetch, new Request(input, init));\n  };\n  return () => {\n    __webpack_require__.g.fetch = originalFetch;\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/experimental/testmode/fetch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/experimental/testmode/server-edge.js":
/*!*********************************************************************!*\
  !*** ./node_modules/next/dist/experimental/testmode/server-edge.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  interceptTestApis: function () {\n    return interceptTestApis;\n  },\n  wrapRequestHandler: function () {\n    return wrapRequestHandler;\n  }\n});\nconst _context = __webpack_require__(/*! ./context */ \"(rsc)/./node_modules/next/dist/experimental/testmode/context.js\");\nconst _fetch = __webpack_require__(/*! ./fetch */ \"(rsc)/./node_modules/next/dist/experimental/testmode/fetch.js\");\nfunction interceptTestApis() {\n  return (0, _fetch.interceptFetch)(__webpack_require__.g.fetch);\n}\nfunction wrapRequestHandler(handler) {\n  return (req, fn) => (0, _context.withRequest)(req, _fetch.reader, () => handler(req, fn));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2V4cGVyaW1lbnRhbC90ZXN0bW9kZS9zZXJ2ZXItZWRnZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQ3pDRyxLQUFLLEVBQUU7QUFDWCxDQUFDLEVBQUM7QUFDRixDQUFDLEtBQUtDLENBR0wsQ0FBQztBQUNGLFNBQVNHLE9BQU9BLENBQUNDLE1BQU0sRUFBRUMsR0FBRyxFQUFFO0VBQzFCLEtBQUksSUFBSUMsSUFBSSxJQUFJRCxHQUFHLEVBQUNULE1BQU0sQ0FBQ0MsY0FBYyxDQUFDTyxNQUFNLEVBQUVFLElBQUksRUFBRTtJQUNwREMsVUFBVSxFQUFFLElBQUk7SUFDaEJDLEdBQUcsRUFBRUgsR0FBRyxDQUFDQyxJQUFJO0VBQ2pCLENBQUMsQ0FBQztBQUNOO0FBQ0FILE9BQU8sQ0FBQ0wsT0FBTyxFQUFFO0VBQ2JHLGlCQUFpQixFQUFFLFNBQUFBLENBQUEsRUFBVztJQUMxQixPQUFPQSxpQkFBaUI7RUFDNUIsQ0FBQztFQUNEQyxrQkFBa0IsRUFBRSxTQUFBQSxDQUFBLEVBQVc7SUFDM0IsT0FBT0Esa0JBQWtCO0VBQzdCO0FBQ0osQ0FBQyxDQUFDO0FBQ0YsTUFBTU8sUUFBUSxHQUFHQyxtQkFBTyxDQUFDLGtGQUFXLENBQUM7QUFDckMsTUFBTUMsTUFBTSxHQUFHRCxtQkFBTyxDQUFDLDhFQUFTLENBQUM7QUFDakMsU0FBU1QsaUJBQWlCQSxDQUFBLEVBQUc7RUFDekIsT0FBTyxDQUFDLENBQUMsRUFBRVUsTUFBTSxDQUFDQyxjQUFjLEVBQUVDLHFCQUFNLENBQUNDLEtBQUssQ0FBQztBQUNuRDtBQUNBLFNBQVNaLGtCQUFrQkEsQ0FBQ2EsT0FBTyxFQUFFO0VBQ2pDLE9BQU8sQ0FBQ0MsR0FBRyxFQUFFQyxFQUFFLEtBQUcsQ0FBQyxDQUFDLEVBQUVSLFFBQVEsQ0FBQ1MsV0FBVyxFQUFFRixHQUFHLEVBQUVMLE1BQU0sQ0FBQ1EsTUFBTSxFQUFFLE1BQUlKLE9BQU8sQ0FBQ0MsR0FBRyxFQUFFQyxFQUFFLENBQUMsQ0FBQztBQUN6RiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2V4cGVyaW1lbnRhbC90ZXN0bW9kZS9zZXJ2ZXItZWRnZS5qcz80NzE4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaW50ZXJjZXB0VGVzdEFwaXM6IG51bGwsXG4gICAgd3JhcFJlcXVlc3RIYW5kbGVyOiBudWxsXG59KTtcbmZ1bmN0aW9uIF9leHBvcnQodGFyZ2V0LCBhbGwpIHtcbiAgICBmb3IodmFyIG5hbWUgaW4gYWxsKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBhbGxbbmFtZV1cbiAgICB9KTtcbn1cbl9leHBvcnQoZXhwb3J0cywge1xuICAgIGludGVyY2VwdFRlc3RBcGlzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGludGVyY2VwdFRlc3RBcGlzO1xuICAgIH0sXG4gICAgd3JhcFJlcXVlc3RIYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBSZXF1ZXN0SGFuZGxlcjtcbiAgICB9XG59KTtcbmNvbnN0IF9jb250ZXh0ID0gcmVxdWlyZShcIi4vY29udGV4dFwiKTtcbmNvbnN0IF9mZXRjaCA9IHJlcXVpcmUoXCIuL2ZldGNoXCIpO1xuZnVuY3Rpb24gaW50ZXJjZXB0VGVzdEFwaXMoKSB7XG4gICAgcmV0dXJuICgwLCBfZmV0Y2guaW50ZXJjZXB0RmV0Y2gpKGdsb2JhbC5mZXRjaCk7XG59XG5mdW5jdGlvbiB3cmFwUmVxdWVzdEhhbmRsZXIoaGFuZGxlcikge1xuICAgIHJldHVybiAocmVxLCBmbik9PigwLCBfY29udGV4dC53aXRoUmVxdWVzdCkocmVxLCBfZmV0Y2gucmVhZGVyLCAoKT0+aGFuZGxlcihyZXEsIGZuKSk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcnZlci1lZGdlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1vZHVsZSIsImludGVyY2VwdFRlc3RBcGlzIiwid3JhcFJlcXVlc3RIYW5kbGVyIiwiX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX2NvbnRleHQiLCJyZXF1aXJlIiwiX2ZldGNoIiwiaW50ZXJjZXB0RmV0Y2giLCJnbG9iYWwiLCJmZXRjaCIsImhhbmRsZXIiLCJyZXEiLCJmbiIsIndpdGhSZXF1ZXN0IiwicmVhZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/experimental/testmode/server-edge.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/_shims/MultipartBody.mjs":
/*!******************************************************!*\
  !*** ./node_modules/openai/_shims/MultipartBody.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MultipartBody: () => (/* binding */ MultipartBody)\n/* harmony export */ });\n/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nclass MultipartBody {\n  constructor(body) {\n    this.body = body;\n  }\n  get [Symbol.toStringTag]() {\n    return 'MultipartBody';\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL19zaGltcy9NdWx0aXBhcnRCb2R5Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ08sTUFBTUEsYUFBYSxDQUFDO0VBQ3ZCQyxXQUFXQSxDQUFDQyxJQUFJLEVBQUU7SUFDZCxJQUFJLENBQUNBLElBQUksR0FBR0EsSUFBSTtFQUNwQjtFQUNBLEtBQUtDLE1BQU0sQ0FBQ0MsV0FBVyxJQUFJO0lBQ3ZCLE9BQU8sZUFBZTtFQUMxQjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3NoaW1zL011bHRpcGFydEJvZHkubWpzPzdkYWYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEaXNjbGFpbWVyOiBtb2R1bGVzIGluIF9zaGltcyBhcmVuJ3QgaW50ZW5kZWQgdG8gYmUgaW1wb3J0ZWQgYnkgU0RLIHVzZXJzLlxuICovXG5leHBvcnQgY2xhc3MgTXVsdGlwYXJ0Qm9keSB7XG4gICAgY29uc3RydWN0b3IoYm9keSkge1xuICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xuICAgIH1cbiAgICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgICAgIHJldHVybiAnTXVsdGlwYXJ0Qm9keSc7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TXVsdGlwYXJ0Qm9keS5tanMubWFwIl0sIm5hbWVzIjpbIk11bHRpcGFydEJvZHkiLCJjb25zdHJ1Y3RvciIsImJvZHkiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/_shims/MultipartBody.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/_shims/index.mjs":
/*!**********************************************!*\
  !*** ./node_modules/openai/_shims/index.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Blob: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.Blob),\n/* harmony export */   File: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.File),\n/* harmony export */   FormData: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.FormData),\n/* harmony export */   Headers: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.Headers),\n/* harmony export */   ReadableStream: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.ReadableStream),\n/* harmony export */   Request: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.Request),\n/* harmony export */   Response: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.Response),\n/* harmony export */   auto: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.auto),\n/* harmony export */   fetch: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.fetch),\n/* harmony export */   fileFromPath: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.fileFromPath),\n/* harmony export */   getDefaultAgent: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.getDefaultAgent),\n/* harmony export */   getMultipartRequestOptions: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.getMultipartRequestOptions),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   isFsReadStream: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.isFsReadStream),\n/* harmony export */   kind: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.kind),\n/* harmony export */   setShims: () => (/* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.setShims)\n/* harmony export */ });\n/* harmony import */ var _registry_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./registry.mjs */ \"(rsc)/./node_modules/openai/_shims/registry.mjs\");\n/* harmony import */ var openai_shims_auto_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/_shims/auto/runtime */ \"(rsc)/./node_modules/openai/_shims/web-runtime.mjs\");\n/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\n\n\nconst init = () => {\n  if (!_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.kind) _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.setShims(openai_shims_auto_runtime__WEBPACK_IMPORTED_MODULE_1__.getRuntime(), {\n    auto: true\n  });\n};\n\ninit();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL19zaGltcy9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ3dDO0FBQ1c7QUFDNUMsTUFBTUUsSUFBSSxHQUFHQSxDQUFBLEtBQU07RUFDeEIsSUFBSSxDQUFDRiwrQ0FBVSxFQUFFQSxtREFBYyxDQUFDQyxpRUFBZSxDQUFDLENBQUMsRUFBRTtJQUFFQSxJQUFJLEVBQUU7RUFBSyxDQUFDLENBQUM7QUFDcEUsQ0FBQztBQUM4QjtBQUUvQkMsSUFBSSxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9fc2hpbXMvaW5kZXgubWpzPzdmOTAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEaXNjbGFpbWVyOiBtb2R1bGVzIGluIF9zaGltcyBhcmVuJ3QgaW50ZW5kZWQgdG8gYmUgaW1wb3J0ZWQgYnkgU0RLIHVzZXJzLlxuICovXG5pbXBvcnQgKiBhcyBzaGltcyBmcm9tICcuL3JlZ2lzdHJ5Lm1qcyc7XG5pbXBvcnQgKiBhcyBhdXRvIGZyb20gJ29wZW5haS9fc2hpbXMvYXV0by9ydW50aW1lJztcbmV4cG9ydCBjb25zdCBpbml0ID0gKCkgPT4ge1xuICBpZiAoIXNoaW1zLmtpbmQpIHNoaW1zLnNldFNoaW1zKGF1dG8uZ2V0UnVudGltZSgpLCB7IGF1dG86IHRydWUgfSk7XG59O1xuZXhwb3J0ICogZnJvbSAnLi9yZWdpc3RyeS5tanMnO1xuXG5pbml0KCk7XG4iXSwibmFtZXMiOlsic2hpbXMiLCJhdXRvIiwiaW5pdCIsImtpbmQiLCJzZXRTaGltcyIsImdldFJ1bnRpbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/_shims/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/_shims/registry.mjs":
/*!*************************************************!*\
  !*** ./node_modules/openai/_shims/registry.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Blob: () => (/* binding */ Blob),\n/* harmony export */   File: () => (/* binding */ File),\n/* harmony export */   FormData: () => (/* binding */ FormData),\n/* harmony export */   Headers: () => (/* binding */ Headers),\n/* harmony export */   ReadableStream: () => (/* binding */ ReadableStream),\n/* harmony export */   Request: () => (/* binding */ Request),\n/* harmony export */   Response: () => (/* binding */ Response),\n/* harmony export */   auto: () => (/* binding */ auto),\n/* harmony export */   fetch: () => (/* binding */ fetch),\n/* harmony export */   fileFromPath: () => (/* binding */ fileFromPath),\n/* harmony export */   getDefaultAgent: () => (/* binding */ getDefaultAgent),\n/* harmony export */   getMultipartRequestOptions: () => (/* binding */ getMultipartRequestOptions),\n/* harmony export */   isFsReadStream: () => (/* binding */ isFsReadStream),\n/* harmony export */   kind: () => (/* binding */ kind),\n/* harmony export */   setShims: () => (/* binding */ setShims)\n/* harmony export */ });\nlet auto = false;\nlet kind = undefined;\nlet fetch = undefined;\nlet Request = undefined;\nlet Response = undefined;\nlet Headers = undefined;\nlet FormData = undefined;\nlet Blob = undefined;\nlet File = undefined;\nlet ReadableStream = undefined;\nlet getMultipartRequestOptions = undefined;\nlet getDefaultAgent = undefined;\nlet fileFromPath = undefined;\nlet isFsReadStream = undefined;\nfunction setShims(shims, options = {\n  auto: false\n}) {\n  if (auto) {\n    throw new Error(`you must \\`import 'openai/shims/${shims.kind}'\\` before importing anything else from openai`);\n  }\n  if (kind) {\n    throw new Error(`can't \\`import 'openai/shims/${shims.kind}'\\` after \\`import 'openai/shims/${kind}'\\``);\n  }\n  auto = options.auto;\n  kind = shims.kind;\n  fetch = shims.fetch;\n  Request = shims.Request;\n  Response = shims.Response;\n  Headers = shims.Headers;\n  FormData = shims.FormData;\n  Blob = shims.Blob;\n  File = shims.File;\n  ReadableStream = shims.ReadableStream;\n  getMultipartRequestOptions = shims.getMultipartRequestOptions;\n  getDefaultAgent = shims.getDefaultAgent;\n  fileFromPath = shims.fileFromPath;\n  isFsReadStream = shims.isFsReadStream;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL19zaGltcy9yZWdpc3RyeS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQU8sSUFBSUEsSUFBSSxHQUFHLEtBQUs7QUFDaEIsSUFBSUMsSUFBSSxHQUFHQyxTQUFTO0FBQ3BCLElBQUlDLEtBQUssR0FBR0QsU0FBUztBQUNyQixJQUFJRSxPQUFPLEdBQUdGLFNBQVM7QUFDdkIsSUFBSUcsUUFBUSxHQUFHSCxTQUFTO0FBQ3hCLElBQUlJLE9BQU8sR0FBR0osU0FBUztBQUN2QixJQUFJSyxRQUFRLEdBQUdMLFNBQVM7QUFDeEIsSUFBSU0sSUFBSSxHQUFHTixTQUFTO0FBQ3BCLElBQUlPLElBQUksR0FBR1AsU0FBUztBQUNwQixJQUFJUSxjQUFjLEdBQUdSLFNBQVM7QUFDOUIsSUFBSVMsMEJBQTBCLEdBQUdULFNBQVM7QUFDMUMsSUFBSVUsZUFBZSxHQUFHVixTQUFTO0FBQy9CLElBQUlXLFlBQVksR0FBR1gsU0FBUztBQUM1QixJQUFJWSxjQUFjLEdBQUdaLFNBQVM7QUFDOUIsU0FBU2EsUUFBUUEsQ0FBQ0MsS0FBSyxFQUFFQyxPQUFPLEdBQUc7RUFBRWpCLElBQUksRUFBRTtBQUFNLENBQUMsRUFBRTtFQUN2RCxJQUFJQSxJQUFJLEVBQUU7SUFDTixNQUFNLElBQUlrQixLQUFLLENBQUUsbUNBQWtDRixLQUFLLENBQUNmLElBQUssZ0RBQStDLENBQUM7RUFDbEg7RUFDQSxJQUFJQSxJQUFJLEVBQUU7SUFDTixNQUFNLElBQUlpQixLQUFLLENBQUUsZ0NBQStCRixLQUFLLENBQUNmLElBQUssb0NBQW1DQSxJQUFLLEtBQUksQ0FBQztFQUM1RztFQUNBRCxJQUFJLEdBQUdpQixPQUFPLENBQUNqQixJQUFJO0VBQ25CQyxJQUFJLEdBQUdlLEtBQUssQ0FBQ2YsSUFBSTtFQUNqQkUsS0FBSyxHQUFHYSxLQUFLLENBQUNiLEtBQUs7RUFDbkJDLE9BQU8sR0FBR1ksS0FBSyxDQUFDWixPQUFPO0VBQ3ZCQyxRQUFRLEdBQUdXLEtBQUssQ0FBQ1gsUUFBUTtFQUN6QkMsT0FBTyxHQUFHVSxLQUFLLENBQUNWLE9BQU87RUFDdkJDLFFBQVEsR0FBR1MsS0FBSyxDQUFDVCxRQUFRO0VBQ3pCQyxJQUFJLEdBQUdRLEtBQUssQ0FBQ1IsSUFBSTtFQUNqQkMsSUFBSSxHQUFHTyxLQUFLLENBQUNQLElBQUk7RUFDakJDLGNBQWMsR0FBR00sS0FBSyxDQUFDTixjQUFjO0VBQ3JDQywwQkFBMEIsR0FBR0ssS0FBSyxDQUFDTCwwQkFBMEI7RUFDN0RDLGVBQWUsR0FBR0ksS0FBSyxDQUFDSixlQUFlO0VBQ3ZDQyxZQUFZLEdBQUdHLEtBQUssQ0FBQ0gsWUFBWTtFQUNqQ0MsY0FBYyxHQUFHRSxLQUFLLENBQUNGLGNBQWM7QUFDekMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9fc2hpbXMvcmVnaXN0cnkubWpzP2I0YzAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGxldCBhdXRvID0gZmFsc2U7XG5leHBvcnQgbGV0IGtpbmQgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IGZldGNoID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBSZXF1ZXN0ID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBSZXNwb25zZSA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgSGVhZGVycyA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgRm9ybURhdGEgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IEJsb2IgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IEZpbGUgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IFJlYWRhYmxlU3RyZWFtID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBnZXRNdWx0aXBhcnRSZXF1ZXN0T3B0aW9ucyA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgZ2V0RGVmYXVsdEFnZW50ID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBmaWxlRnJvbVBhdGggPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IGlzRnNSZWFkU3RyZWFtID0gdW5kZWZpbmVkO1xuZXhwb3J0IGZ1bmN0aW9uIHNldFNoaW1zKHNoaW1zLCBvcHRpb25zID0geyBhdXRvOiBmYWxzZSB9KSB7XG4gICAgaWYgKGF1dG8pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB5b3UgbXVzdCBcXGBpbXBvcnQgJ29wZW5haS9zaGltcy8ke3NoaW1zLmtpbmR9J1xcYCBiZWZvcmUgaW1wb3J0aW5nIGFueXRoaW5nIGVsc2UgZnJvbSBvcGVuYWlgKTtcbiAgICB9XG4gICAgaWYgKGtpbmQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW4ndCBcXGBpbXBvcnQgJ29wZW5haS9zaGltcy8ke3NoaW1zLmtpbmR9J1xcYCBhZnRlciBcXGBpbXBvcnQgJ29wZW5haS9zaGltcy8ke2tpbmR9J1xcYGApO1xuICAgIH1cbiAgICBhdXRvID0gb3B0aW9ucy5hdXRvO1xuICAgIGtpbmQgPSBzaGltcy5raW5kO1xuICAgIGZldGNoID0gc2hpbXMuZmV0Y2g7XG4gICAgUmVxdWVzdCA9IHNoaW1zLlJlcXVlc3Q7XG4gICAgUmVzcG9uc2UgPSBzaGltcy5SZXNwb25zZTtcbiAgICBIZWFkZXJzID0gc2hpbXMuSGVhZGVycztcbiAgICBGb3JtRGF0YSA9IHNoaW1zLkZvcm1EYXRhO1xuICAgIEJsb2IgPSBzaGltcy5CbG9iO1xuICAgIEZpbGUgPSBzaGltcy5GaWxlO1xuICAgIFJlYWRhYmxlU3RyZWFtID0gc2hpbXMuUmVhZGFibGVTdHJlYW07XG4gICAgZ2V0TXVsdGlwYXJ0UmVxdWVzdE9wdGlvbnMgPSBzaGltcy5nZXRNdWx0aXBhcnRSZXF1ZXN0T3B0aW9ucztcbiAgICBnZXREZWZhdWx0QWdlbnQgPSBzaGltcy5nZXREZWZhdWx0QWdlbnQ7XG4gICAgZmlsZUZyb21QYXRoID0gc2hpbXMuZmlsZUZyb21QYXRoO1xuICAgIGlzRnNSZWFkU3RyZWFtID0gc2hpbXMuaXNGc1JlYWRTdHJlYW07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWdpc3RyeS5tanMubWFwIl0sIm5hbWVzIjpbImF1dG8iLCJraW5kIiwidW5kZWZpbmVkIiwiZmV0Y2giLCJSZXF1ZXN0IiwiUmVzcG9uc2UiLCJIZWFkZXJzIiwiRm9ybURhdGEiLCJCbG9iIiwiRmlsZSIsIlJlYWRhYmxlU3RyZWFtIiwiZ2V0TXVsdGlwYXJ0UmVxdWVzdE9wdGlvbnMiLCJnZXREZWZhdWx0QWdlbnQiLCJmaWxlRnJvbVBhdGgiLCJpc0ZzUmVhZFN0cmVhbSIsInNldFNoaW1zIiwic2hpbXMiLCJvcHRpb25zIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/_shims/registry.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/_shims/web-runtime.mjs":
/*!****************************************************!*\
  !*** ./node_modules/openai/_shims/web-runtime.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRuntime: () => (/* binding */ getRuntime)\n/* harmony export */ });\n/* harmony import */ var _MultipartBody_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MultipartBody.mjs */ \"(rsc)/./node_modules/openai/_shims/MultipartBody.mjs\");\n\nfunction getRuntime({\n  manuallyImported\n} = {}) {\n  const recommendation = manuallyImported ? `You may need to use polyfills` : `Add one of these imports before your first \\`import … from 'openai'\\`:\n- \\`import 'openai/shims/node'\\` (if you're running on Node)\n- \\`import 'openai/shims/web'\\` (otherwise)\n`;\n  let _fetch, _Request, _Response, _Headers;\n  try {\n    // @ts-ignore\n    _fetch = fetch;\n    // @ts-ignore\n    _Request = Request;\n    // @ts-ignore\n    _Response = Response;\n    // @ts-ignore\n    _Headers = Headers;\n  } catch (error) {\n    throw new Error(`this environment is missing the following Web Fetch API type: ${error.message}. ${recommendation}`);\n  }\n  return {\n    kind: 'web',\n    fetch: _fetch,\n    Request: _Request,\n    Response: _Response,\n    Headers: _Headers,\n    FormData:\n    // @ts-ignore\n    typeof FormData !== 'undefined' ? FormData : class FormData {\n      // @ts-ignore\n      constructor() {\n        throw new Error(`file uploads aren't supported in this environment yet as 'FormData' is undefined. ${recommendation}`);\n      }\n    },\n    Blob: typeof Blob !== 'undefined' ? Blob : class Blob {\n      constructor() {\n        throw new Error(`file uploads aren't supported in this environment yet as 'Blob' is undefined. ${recommendation}`);\n      }\n    },\n    File:\n    // @ts-ignore\n    typeof File !== 'undefined' ? File : class File {\n      // @ts-ignore\n      constructor() {\n        throw new Error(`file uploads aren't supported in this environment yet as 'File' is undefined. ${recommendation}`);\n      }\n    },\n    ReadableStream:\n    // @ts-ignore\n    typeof ReadableStream !== 'undefined' ? ReadableStream : class ReadableStream {\n      // @ts-ignore\n      constructor() {\n        throw new Error(`streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${recommendation}`);\n      }\n    },\n    getMultipartRequestOptions: async (\n    // @ts-ignore\n    form, opts) => ({\n      ...opts,\n      body: new _MultipartBody_mjs__WEBPACK_IMPORTED_MODULE_0__.MultipartBody(form)\n    }),\n    getDefaultAgent: url => undefined,\n    fileFromPath: () => {\n      throw new Error('The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/openai/openai-node#file-uploads');\n    },\n    isFsReadStream: value => false\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL19zaGltcy93ZWItcnVudGltZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0Q7QUFDN0MsU0FBU0MsVUFBVUEsQ0FBQztFQUFFQztBQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7RUFDbEQsTUFBTUMsY0FBYyxHQUFHRCxnQkFBZ0IsR0FDbEMsK0JBQThCLEdBQzVCO0FBQ1g7QUFDQTtBQUNBLENBQUM7RUFDRyxJQUFJRSxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsU0FBUyxFQUFFQyxRQUFRO0VBQ3pDLElBQUk7SUFDQTtJQUNBSCxNQUFNLEdBQUdJLEtBQUs7SUFDZDtJQUNBSCxRQUFRLEdBQUdJLE9BQU87SUFDbEI7SUFDQUgsU0FBUyxHQUFHSSxRQUFRO0lBQ3BCO0lBQ0FILFFBQVEsR0FBR0ksT0FBTztFQUN0QixDQUFDLENBQ0QsT0FBT0MsS0FBSyxFQUFFO0lBQ1YsTUFBTSxJQUFJQyxLQUFLLENBQUUsaUVBQWdFRCxLQUFLLENBQUNFLE9BQVEsS0FBSVgsY0FBZSxFQUFDLENBQUM7RUFDeEg7RUFDQSxPQUFPO0lBQ0hZLElBQUksRUFBRSxLQUFLO0lBQ1hQLEtBQUssRUFBRUosTUFBTTtJQUNiSyxPQUFPLEVBQUVKLFFBQVE7SUFDakJLLFFBQVEsRUFBRUosU0FBUztJQUNuQkssT0FBTyxFQUFFSixRQUFRO0lBQ2pCUyxRQUFRO0lBQ1I7SUFDQSxPQUFPQSxRQUFRLEtBQUssV0FBVyxHQUFHQSxRQUFRLEdBQUksTUFBTUEsUUFBUSxDQUFDO01BQ3pEO01BQ0FDLFdBQVdBLENBQUEsRUFBRztRQUNWLE1BQU0sSUFBSUosS0FBSyxDQUFFLHFGQUFvRlYsY0FBZSxFQUFDLENBQUM7TUFDMUg7SUFDSixDQUFFO0lBQ0ZlLElBQUksRUFBRSxPQUFPQSxJQUFJLEtBQUssV0FBVyxHQUFHQSxJQUFJLEdBQUksTUFBTUEsSUFBSSxDQUFDO01BQ25ERCxXQUFXQSxDQUFBLEVBQUc7UUFDVixNQUFNLElBQUlKLEtBQUssQ0FBRSxpRkFBZ0ZWLGNBQWUsRUFBQyxDQUFDO01BQ3RIO0lBQ0osQ0FBRTtJQUNGZ0IsSUFBSTtJQUNKO0lBQ0EsT0FBT0EsSUFBSSxLQUFLLFdBQVcsR0FBR0EsSUFBSSxHQUFJLE1BQU1BLElBQUksQ0FBQztNQUM3QztNQUNBRixXQUFXQSxDQUFBLEVBQUc7UUFDVixNQUFNLElBQUlKLEtBQUssQ0FBRSxpRkFBZ0ZWLGNBQWUsRUFBQyxDQUFDO01BQ3RIO0lBQ0osQ0FBRTtJQUNGaUIsY0FBYztJQUNkO0lBQ0EsT0FBT0EsY0FBYyxLQUFLLFdBQVcsR0FBR0EsY0FBYyxHQUFJLE1BQU1BLGNBQWMsQ0FBQztNQUMzRTtNQUNBSCxXQUFXQSxDQUFBLEVBQUc7UUFDVixNQUFNLElBQUlKLEtBQUssQ0FBRSx1RkFBc0ZWLGNBQWUsRUFBQyxDQUFDO01BQzVIO0lBQ0osQ0FBRTtJQUNGa0IsMEJBQTBCLEVBQUUsTUFBQUE7SUFDNUI7SUFDQUMsSUFBSSxFQUFFQyxJQUFJLE1BQU07TUFDWixHQUFHQSxJQUFJO01BQ1BDLElBQUksRUFBRSxJQUFJeEIsNkRBQWEsQ0FBQ3NCLElBQUk7SUFDaEMsQ0FBQyxDQUFDO0lBQ0ZHLGVBQWUsRUFBR0MsR0FBRyxJQUFLQyxTQUFTO0lBQ25DQyxZQUFZLEVBQUVBLENBQUEsS0FBTTtNQUNoQixNQUFNLElBQUlmLEtBQUssQ0FBQyxnSkFBZ0osQ0FBQztJQUNySyxDQUFDO0lBQ0RnQixjQUFjLEVBQUdDLEtBQUssSUFBSztFQUMvQixDQUFDO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9fc2hpbXMvd2ViLXJ1bnRpbWUubWpzP2MwOTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTXVsdGlwYXJ0Qm9keSB9IGZyb20gXCIuL011bHRpcGFydEJvZHkubWpzXCI7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UnVudGltZSh7IG1hbnVhbGx5SW1wb3J0ZWQgfSA9IHt9KSB7XG4gICAgY29uc3QgcmVjb21tZW5kYXRpb24gPSBtYW51YWxseUltcG9ydGVkID9cbiAgICAgICAgYFlvdSBtYXkgbmVlZCB0byB1c2UgcG9seWZpbGxzYFxuICAgICAgICA6IGBBZGQgb25lIG9mIHRoZXNlIGltcG9ydHMgYmVmb3JlIHlvdXIgZmlyc3QgXFxgaW1wb3J0IOKApiBmcm9tICdvcGVuYWknXFxgOlxuLSBcXGBpbXBvcnQgJ29wZW5haS9zaGltcy9ub2RlJ1xcYCAoaWYgeW91J3JlIHJ1bm5pbmcgb24gTm9kZSlcbi0gXFxgaW1wb3J0ICdvcGVuYWkvc2hpbXMvd2ViJ1xcYCAob3RoZXJ3aXNlKVxuYDtcbiAgICBsZXQgX2ZldGNoLCBfUmVxdWVzdCwgX1Jlc3BvbnNlLCBfSGVhZGVycztcbiAgICB0cnkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIF9mZXRjaCA9IGZldGNoO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIF9SZXF1ZXN0ID0gUmVxdWVzdDtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBfUmVzcG9uc2UgPSBSZXNwb25zZTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBfSGVhZGVycyA9IEhlYWRlcnM7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHRoaXMgZW52aXJvbm1lbnQgaXMgbWlzc2luZyB0aGUgZm9sbG93aW5nIFdlYiBGZXRjaCBBUEkgdHlwZTogJHtlcnJvci5tZXNzYWdlfS4gJHtyZWNvbW1lbmRhdGlvbn1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAga2luZDogJ3dlYicsXG4gICAgICAgIGZldGNoOiBfZmV0Y2gsXG4gICAgICAgIFJlcXVlc3Q6IF9SZXF1ZXN0LFxuICAgICAgICBSZXNwb25zZTogX1Jlc3BvbnNlLFxuICAgICAgICBIZWFkZXJzOiBfSGVhZGVycyxcbiAgICAgICAgRm9ybURhdGE6IFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcgPyBGb3JtRGF0YSA6IChjbGFzcyBGb3JtRGF0YSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGZpbGUgdXBsb2FkcyBhcmVuJ3Qgc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnQgeWV0IGFzICdGb3JtRGF0YScgaXMgdW5kZWZpbmVkLiAke3JlY29tbWVuZGF0aW9ufWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgQmxvYjogdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnID8gQmxvYiA6IChjbGFzcyBCbG9iIHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZmlsZSB1cGxvYWRzIGFyZW4ndCBzdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudCB5ZXQgYXMgJ0Jsb2InIGlzIHVuZGVmaW5lZC4gJHtyZWNvbW1lbmRhdGlvbn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIEZpbGU6IFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHR5cGVvZiBGaWxlICE9PSAndW5kZWZpbmVkJyA/IEZpbGUgOiAoY2xhc3MgRmlsZSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGZpbGUgdXBsb2FkcyBhcmVuJ3Qgc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnQgeWV0IGFzICdGaWxlJyBpcyB1bmRlZmluZWQuICR7cmVjb21tZW5kYXRpb259YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICBSZWFkYWJsZVN0cmVhbTogXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdHlwZW9mIFJlYWRhYmxlU3RyZWFtICE9PSAndW5kZWZpbmVkJyA/IFJlYWRhYmxlU3RyZWFtIDogKGNsYXNzIFJlYWRhYmxlU3RyZWFtIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgc3RyZWFtaW5nIGlzbid0IHN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50IHlldCBhcyAnUmVhZGFibGVTdHJlYW0nIGlzIHVuZGVmaW5lZC4gJHtyZWNvbW1lbmRhdGlvbn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIGdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zOiBhc3luYyAoXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgZm9ybSwgb3B0cykgPT4gKHtcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgICAgICBib2R5OiBuZXcgTXVsdGlwYXJ0Qm9keShmb3JtKSxcbiAgICAgICAgfSksXG4gICAgICAgIGdldERlZmF1bHRBZ2VudDogKHVybCkgPT4gdW5kZWZpbmVkLFxuICAgICAgICBmaWxlRnJvbVBhdGg6ICgpID0+IHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGBmaWxlRnJvbVBhdGhgIGZ1bmN0aW9uIGlzIG9ubHkgc3VwcG9ydGVkIGluIE5vZGUuIFNlZSB0aGUgUkVBRE1FIGZvciBtb3JlIGRldGFpbHM6IGh0dHBzOi8vd3d3LmdpdGh1Yi5jb20vb3BlbmFpL29wZW5haS1ub2RlI2ZpbGUtdXBsb2FkcycpO1xuICAgICAgICB9LFxuICAgICAgICBpc0ZzUmVhZFN0cmVhbTogKHZhbHVlKSA9PiBmYWxzZSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2ViLXJ1bnRpbWUubWpzLm1hcCJdLCJuYW1lcyI6WyJNdWx0aXBhcnRCb2R5IiwiZ2V0UnVudGltZSIsIm1hbnVhbGx5SW1wb3J0ZWQiLCJyZWNvbW1lbmRhdGlvbiIsIl9mZXRjaCIsIl9SZXF1ZXN0IiwiX1Jlc3BvbnNlIiwiX0hlYWRlcnMiLCJmZXRjaCIsIlJlcXVlc3QiLCJSZXNwb25zZSIsIkhlYWRlcnMiLCJlcnJvciIsIkVycm9yIiwibWVzc2FnZSIsImtpbmQiLCJGb3JtRGF0YSIsImNvbnN0cnVjdG9yIiwiQmxvYiIsIkZpbGUiLCJSZWFkYWJsZVN0cmVhbSIsImdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zIiwiZm9ybSIsIm9wdHMiLCJib2R5IiwiZ2V0RGVmYXVsdEFnZW50IiwidXJsIiwidW5kZWZpbmVkIiwiZmlsZUZyb21QYXRoIiwiaXNGc1JlYWRTdHJlYW0iLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/_shims/web-runtime.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/_vendor/partial-json-parser/parser.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/openai/_vendor/partial-json-parser/parser.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MalformedJSON: () => (/* binding */ MalformedJSON),\n/* harmony export */   PartialJSON: () => (/* binding */ PartialJSON),\n/* harmony export */   partialParse: () => (/* binding */ partialParse)\n/* harmony export */ });\nconst STR = 0b000000001;\nconst NUM = 0b000000010;\nconst ARR = 0b000000100;\nconst OBJ = 0b000001000;\nconst NULL = 0b000010000;\nconst BOOL = 0b000100000;\nconst NAN = 0b001000000;\nconst INFINITY = 0b010000000;\nconst MINUS_INFINITY = 0b100000000;\nconst INF = INFINITY | MINUS_INFINITY;\nconst SPECIAL = NULL | BOOL | INF | NAN;\nconst ATOM = STR | NUM | SPECIAL;\nconst COLLECTION = ARR | OBJ;\nconst ALL = ATOM | COLLECTION;\nconst Allow = {\n  STR,\n  NUM,\n  ARR,\n  OBJ,\n  NULL,\n  BOOL,\n  NAN,\n  INFINITY,\n  MINUS_INFINITY,\n  INF,\n  SPECIAL,\n  ATOM,\n  COLLECTION,\n  ALL\n};\n// The JSON string segment was unable to be parsed completely\nclass PartialJSON extends Error {}\nclass MalformedJSON extends Error {}\n/**\n * Parse incomplete JSON\n * @param {string} jsonString Partial JSON to be parsed\n * @param {number} allowPartial Specify what types are allowed to be partial, see {@link Allow} for details\n * @returns The parsed JSON\n * @throws {PartialJSON} If the JSON is incomplete (related to the `allow` parameter)\n * @throws {MalformedJSON} If the JSON is malformed\n */\nfunction parseJSON(jsonString, allowPartial = Allow.ALL) {\n  if (typeof jsonString !== 'string') {\n    throw new TypeError(`expecting str, got ${typeof jsonString}`);\n  }\n  if (!jsonString.trim()) {\n    throw new Error(`${jsonString} is empty`);\n  }\n  return _parseJSON(jsonString.trim(), allowPartial);\n}\nconst _parseJSON = (jsonString, allow) => {\n  const length = jsonString.length;\n  let index = 0;\n  const markPartialJSON = msg => {\n    throw new PartialJSON(`${msg} at position ${index}`);\n  };\n  const throwMalformedError = msg => {\n    throw new MalformedJSON(`${msg} at position ${index}`);\n  };\n  const parseAny = () => {\n    skipBlank();\n    if (index >= length) markPartialJSON('Unexpected end of input');\n    if (jsonString[index] === '\"') return parseStr();\n    if (jsonString[index] === '{') return parseObj();\n    if (jsonString[index] === '[') return parseArr();\n    if (jsonString.substring(index, index + 4) === 'null' || Allow.NULL & allow && length - index < 4 && 'null'.startsWith(jsonString.substring(index))) {\n      index += 4;\n      return null;\n    }\n    if (jsonString.substring(index, index + 4) === 'true' || Allow.BOOL & allow && length - index < 4 && 'true'.startsWith(jsonString.substring(index))) {\n      index += 4;\n      return true;\n    }\n    if (jsonString.substring(index, index + 5) === 'false' || Allow.BOOL & allow && length - index < 5 && 'false'.startsWith(jsonString.substring(index))) {\n      index += 5;\n      return false;\n    }\n    if (jsonString.substring(index, index + 8) === 'Infinity' || Allow.INFINITY & allow && length - index < 8 && 'Infinity'.startsWith(jsonString.substring(index))) {\n      index += 8;\n      return Infinity;\n    }\n    if (jsonString.substring(index, index + 9) === '-Infinity' || Allow.MINUS_INFINITY & allow && 1 < length - index && length - index < 9 && '-Infinity'.startsWith(jsonString.substring(index))) {\n      index += 9;\n      return -Infinity;\n    }\n    if (jsonString.substring(index, index + 3) === 'NaN' || Allow.NAN & allow && length - index < 3 && 'NaN'.startsWith(jsonString.substring(index))) {\n      index += 3;\n      return NaN;\n    }\n    return parseNum();\n  };\n  const parseStr = () => {\n    const start = index;\n    let escape = false;\n    index++; // skip initial quote\n    while (index < length && (jsonString[index] !== '\"' || escape && jsonString[index - 1] === '\\\\')) {\n      escape = jsonString[index] === '\\\\' ? !escape : false;\n      index++;\n    }\n    if (jsonString.charAt(index) == '\"') {\n      try {\n        return JSON.parse(jsonString.substring(start, ++index - Number(escape)));\n      } catch (e) {\n        throwMalformedError(String(e));\n      }\n    } else if (Allow.STR & allow) {\n      try {\n        return JSON.parse(jsonString.substring(start, index - Number(escape)) + '\"');\n      } catch (e) {\n        // SyntaxError: Invalid escape sequence\n        return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf('\\\\')) + '\"');\n      }\n    }\n    markPartialJSON('Unterminated string literal');\n  };\n  const parseObj = () => {\n    index++; // skip initial brace\n    skipBlank();\n    const obj = {};\n    try {\n      while (jsonString[index] !== '}') {\n        skipBlank();\n        if (index >= length && Allow.OBJ & allow) return obj;\n        const key = parseStr();\n        skipBlank();\n        index++; // skip colon\n        try {\n          const value = parseAny();\n          Object.defineProperty(obj, key, {\n            value,\n            writable: true,\n            enumerable: true,\n            configurable: true\n          });\n        } catch (e) {\n          if (Allow.OBJ & allow) return obj;else throw e;\n        }\n        skipBlank();\n        if (jsonString[index] === ',') index++; // skip comma\n      }\n    } catch (e) {\n      if (Allow.OBJ & allow) return obj;else markPartialJSON(\"Expected '}' at end of object\");\n    }\n    index++; // skip final brace\n    return obj;\n  };\n  const parseArr = () => {\n    index++; // skip initial bracket\n    const arr = [];\n    try {\n      while (jsonString[index] !== ']') {\n        arr.push(parseAny());\n        skipBlank();\n        if (jsonString[index] === ',') {\n          index++; // skip comma\n        }\n      }\n    } catch (e) {\n      if (Allow.ARR & allow) {\n        return arr;\n      }\n      markPartialJSON(\"Expected ']' at end of array\");\n    }\n    index++; // skip final bracket\n    return arr;\n  };\n  const parseNum = () => {\n    if (index === 0) {\n      if (jsonString === '-' && Allow.NUM & allow) markPartialJSON(\"Not sure what '-' is\");\n      try {\n        return JSON.parse(jsonString);\n      } catch (e) {\n        if (Allow.NUM & allow) {\n          try {\n            if ('.' === jsonString[jsonString.length - 1]) return JSON.parse(jsonString.substring(0, jsonString.lastIndexOf('.')));\n            return JSON.parse(jsonString.substring(0, jsonString.lastIndexOf('e')));\n          } catch (e) {}\n        }\n        throwMalformedError(String(e));\n      }\n    }\n    const start = index;\n    if (jsonString[index] === '-') index++;\n    while (jsonString[index] && !',]}'.includes(jsonString[index])) index++;\n    if (index == length && !(Allow.NUM & allow)) markPartialJSON('Unterminated number literal');\n    try {\n      return JSON.parse(jsonString.substring(start, index));\n    } catch (e) {\n      if (jsonString.substring(start, index) === '-' && Allow.NUM & allow) markPartialJSON(\"Not sure what '-' is\");\n      try {\n        return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf('e')));\n      } catch (e) {\n        throwMalformedError(String(e));\n      }\n    }\n  };\n  const skipBlank = () => {\n    while (index < length && ' \\n\\r\\t'.includes(jsonString[index])) {\n      index++;\n    }\n  };\n  return parseAny();\n};\n// using this function with malformed JSON is undefined behavior\nconst partialParse = input => parseJSON(input, Allow.ALL ^ Allow.NUM);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/_vendor/partial-json-parser/parser.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/core.mjs":
/*!**************************************!*\
  !*** ./node_modules/openai/core.mjs ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIClient: () => (/* binding */ APIClient),\n/* harmony export */   APIPromise: () => (/* binding */ APIPromise),\n/* harmony export */   AbstractPage: () => (/* binding */ AbstractPage),\n/* harmony export */   PagePromise: () => (/* binding */ PagePromise),\n/* harmony export */   castToError: () => (/* binding */ castToError),\n/* harmony export */   coerceBoolean: () => (/* binding */ coerceBoolean),\n/* harmony export */   coerceFloat: () => (/* binding */ coerceFloat),\n/* harmony export */   coerceInteger: () => (/* binding */ coerceInteger),\n/* harmony export */   createForm: () => (/* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.createForm),\n/* harmony export */   createResponseHeaders: () => (/* binding */ createResponseHeaders),\n/* harmony export */   debug: () => (/* binding */ debug),\n/* harmony export */   ensurePresent: () => (/* binding */ ensurePresent),\n/* harmony export */   getHeader: () => (/* binding */ getHeader),\n/* harmony export */   getRequiredHeader: () => (/* binding */ getRequiredHeader),\n/* harmony export */   hasOwn: () => (/* binding */ hasOwn),\n/* harmony export */   isEmptyObj: () => (/* binding */ isEmptyObj),\n/* harmony export */   isHeadersProtocol: () => (/* binding */ isHeadersProtocol),\n/* harmony export */   isObj: () => (/* binding */ isObj),\n/* harmony export */   isRequestOptions: () => (/* binding */ isRequestOptions),\n/* harmony export */   isRunningInBrowser: () => (/* binding */ isRunningInBrowser),\n/* harmony export */   maybeCoerceBoolean: () => (/* binding */ maybeCoerceBoolean),\n/* harmony export */   maybeCoerceFloat: () => (/* binding */ maybeCoerceFloat),\n/* harmony export */   maybeCoerceInteger: () => (/* binding */ maybeCoerceInteger),\n/* harmony export */   maybeMultipartFormRequestOptions: () => (/* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.maybeMultipartFormRequestOptions),\n/* harmony export */   multipartFormRequestOptions: () => (/* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions),\n/* harmony export */   readEnv: () => (/* binding */ readEnv),\n/* harmony export */   safeJSON: () => (/* binding */ safeJSON),\n/* harmony export */   sleep: () => (/* binding */ sleep),\n/* harmony export */   toBase64: () => (/* binding */ toBase64),\n/* harmony export */   toFloat32Array: () => (/* binding */ toFloat32Array)\n/* harmony export */ });\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./version.mjs */ \"(rsc)/./node_modules/openai/version.mjs\");\n/* harmony import */ var _streaming_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./streaming.mjs */ \"(rsc)/./node_modules/openai/streaming.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_shims/index.mjs */ \"(rsc)/./node_modules/openai/_shims/index.mjs\");\n/* harmony import */ var _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./uploads.mjs */ \"(rsc)/./node_modules/openai/uploads.mjs\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"buffer\")[\"Buffer\"];\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AbstractPage_client;\n\n\n\n\n// try running side effects outside of _shims/index to workaround https://github.com/vercel/next.js/issues/76881\n(0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.init)();\n\n\nasync function defaultParseResponse(props) {\n  const {\n    response\n  } = props;\n  if (props.options.stream) {\n    debug('response', response.status, response.url, response.headers, response.body);\n    // Note: there is an invariant here that isn't represented in the type system\n    // that if you set `stream: true` the response type must also be `Stream<T>`\n    if (props.options.__streamClass) {\n      return props.options.__streamClass.fromSSEResponse(response, props.controller);\n    }\n    return _streaming_mjs__WEBPACK_IMPORTED_MODULE_2__.Stream.fromSSEResponse(response, props.controller);\n  }\n  // fetch refuses to read the body when the status code is 204.\n  if (response.status === 204) {\n    return null;\n  }\n  if (props.options.__binaryResponse) {\n    return response;\n  }\n  const contentType = response.headers.get('content-type');\n  const mediaType = contentType?.split(';')[0]?.trim();\n  const isJSON = mediaType?.includes('application/json') || mediaType?.endsWith('+json');\n  if (isJSON) {\n    const json = await response.json();\n    debug('response', response.status, response.url, response.headers, json);\n    return _addRequestID(json, response);\n  }\n  const text = await response.text();\n  debug('response', response.status, response.url, response.headers, text);\n  // TODO handle blob, arraybuffer, other content types, etc.\n  return text;\n}\nfunction _addRequestID(value, response) {\n  if (!value || typeof value !== 'object' || Array.isArray(value)) {\n    return value;\n  }\n  return Object.defineProperty(value, '_request_id', {\n    value: response.headers.get('x-request-id'),\n    enumerable: false\n  });\n}\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */\nclass APIPromise extends Promise {\n  constructor(responsePromise, parseResponse = defaultParseResponse) {\n    super(resolve => {\n      // this is maybe a bit weird but this has to be a no-op to not implicitly\n      // parse the response body; instead .then, .catch, .finally are overridden\n      // to parse the response\n      resolve(null);\n    });\n    this.responsePromise = responsePromise;\n    this.parseResponse = parseResponse;\n  }\n  _thenUnwrap(transform) {\n    return new APIPromise(this.responsePromise, async props => _addRequestID(transform(await this.parseResponse(props), props), props.response));\n  }\n  /**\n   * Gets the raw `Response` instance instead of parsing the response\n   * data.\n   *\n   * If you want to parse the response body but still get the `Response`\n   * instance, you can use {@link withResponse()}.\n   *\n   * 👋 Getting the wrong TypeScript type for `Response`?\n   * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n   * or add one of these imports before your first `import … from 'openai'`:\n   * - `import 'openai/shims/node'` (if you're running on Node)\n   * - `import 'openai/shims/web'` (otherwise)\n   */\n  asResponse() {\n    return this.responsePromise.then(p => p.response);\n  }\n  /**\n   * Gets the parsed response data, the raw `Response` instance and the ID of the request,\n   * returned via the X-Request-ID header which is useful for debugging requests and reporting\n   * issues to OpenAI.\n   *\n   * If you just want to get the raw `Response` instance without parsing it,\n   * you can use {@link asResponse()}.\n   *\n   *\n   * 👋 Getting the wrong TypeScript type for `Response`?\n   * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n   * or add one of these imports before your first `import … from 'openai'`:\n   * - `import 'openai/shims/node'` (if you're running on Node)\n   * - `import 'openai/shims/web'` (otherwise)\n   */\n  async withResponse() {\n    const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\n    return {\n      data,\n      response,\n      request_id: response.headers.get('x-request-id')\n    };\n  }\n  parse() {\n    if (!this.parsedPromise) {\n      this.parsedPromise = this.responsePromise.then(this.parseResponse);\n    }\n    return this.parsedPromise;\n  }\n  then(onfulfilled, onrejected) {\n    return this.parse().then(onfulfilled, onrejected);\n  }\n  catch(onrejected) {\n    return this.parse().catch(onrejected);\n  }\n  finally(onfinally) {\n    return this.parse().finally(onfinally);\n  }\n}\nclass APIClient {\n  constructor({\n    baseURL,\n    maxRetries = 2,\n    timeout = 600000,\n    // 10 minutes\n    httpAgent,\n    fetch: overriddenFetch\n  }) {\n    this.baseURL = baseURL;\n    this.maxRetries = validatePositiveInteger('maxRetries', maxRetries);\n    this.timeout = validatePositiveInteger('timeout', timeout);\n    this.httpAgent = httpAgent;\n    this.fetch = overriddenFetch ?? _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.fetch;\n  }\n  authHeaders(opts) {\n    return {};\n  }\n  /**\n   * Override this to add your own default headers, for example:\n   *\n   *  {\n   *    ...super.defaultHeaders(),\n   *    Authorization: 'Bearer 123',\n   *  }\n   */\n  defaultHeaders(opts) {\n    return {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'User-Agent': this.getUserAgent(),\n      ...getPlatformHeaders(),\n      ...this.authHeaders(opts)\n    };\n  }\n  /**\n   * Override this to add your own headers validation:\n   */\n  validateHeaders(headers, customHeaders) {}\n  defaultIdempotencyKey() {\n    return `stainless-node-retry-${uuid4()}`;\n  }\n  get(path, opts) {\n    return this.methodRequest('get', path, opts);\n  }\n  post(path, opts) {\n    return this.methodRequest('post', path, opts);\n  }\n  patch(path, opts) {\n    return this.methodRequest('patch', path, opts);\n  }\n  put(path, opts) {\n    return this.methodRequest('put', path, opts);\n  }\n  delete(path, opts) {\n    return this.methodRequest('delete', path, opts);\n  }\n  methodRequest(method, path, opts) {\n    return this.request(Promise.resolve(opts).then(async opts => {\n      const body = opts && (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.isBlobLike)(opts?.body) ? new DataView(await opts.body.arrayBuffer()) : opts?.body instanceof DataView ? opts.body : opts?.body instanceof ArrayBuffer ? new DataView(opts.body) : opts && ArrayBuffer.isView(opts?.body) ? new DataView(opts.body.buffer) : opts?.body;\n      return {\n        method,\n        path,\n        ...opts,\n        body\n      };\n    }));\n  }\n  getAPIList(path, Page, opts) {\n    return this.requestAPIList(Page, {\n      method: 'get',\n      path,\n      ...opts\n    });\n  }\n  calculateContentLength(body) {\n    if (typeof body === 'string') {\n      if (typeof Buffer !== 'undefined') {\n        return Buffer.byteLength(body, 'utf8').toString();\n      }\n      if (typeof TextEncoder !== 'undefined') {\n        const encoder = new TextEncoder();\n        const encoded = encoder.encode(body);\n        return encoded.length.toString();\n      }\n    } else if (ArrayBuffer.isView(body)) {\n      return body.byteLength.toString();\n    }\n    return null;\n  }\n  buildRequest(options, {\n    retryCount = 0\n  } = {}) {\n    options = {\n      ...options\n    };\n    const {\n      method,\n      path,\n      query,\n      headers = {}\n    } = options;\n    const body = ArrayBuffer.isView(options.body) || options.__binaryRequest && typeof options.body === 'string' ? options.body : (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.isMultipartBody)(options.body) ? options.body.body : options.body ? JSON.stringify(options.body, null, 2) : null;\n    const contentLength = this.calculateContentLength(body);\n    const url = this.buildURL(path, query);\n    if ('timeout' in options) validatePositiveInteger('timeout', options.timeout);\n    options.timeout = options.timeout ?? this.timeout;\n    const httpAgent = options.httpAgent ?? this.httpAgent ?? (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getDefaultAgent)(url);\n    const minAgentTimeout = options.timeout + 1000;\n    if (typeof httpAgent?.options?.timeout === 'number' && minAgentTimeout > (httpAgent.options.timeout ?? 0)) {\n      // Allow any given request to bump our agent active socket timeout.\n      // This may seem strange, but leaking active sockets should be rare and not particularly problematic,\n      // and without mutating agent we would need to create more of them.\n      // This tradeoff optimizes for performance.\n      httpAgent.options.timeout = minAgentTimeout;\n    }\n    if (this.idempotencyHeader && method !== 'get') {\n      if (!options.idempotencyKey) options.idempotencyKey = this.defaultIdempotencyKey();\n      headers[this.idempotencyHeader] = options.idempotencyKey;\n    }\n    const reqHeaders = this.buildHeaders({\n      options,\n      headers,\n      contentLength,\n      retryCount\n    });\n    const req = {\n      method,\n      ...(body && {\n        body: body\n      }),\n      headers: reqHeaders,\n      ...(httpAgent && {\n        agent: httpAgent\n      }),\n      // @ts-ignore node-fetch uses a custom AbortSignal type that is\n      // not compatible with standard web types\n      signal: options.signal ?? null\n    };\n    return {\n      req,\n      url,\n      timeout: options.timeout\n    };\n  }\n  buildHeaders({\n    options,\n    headers,\n    contentLength,\n    retryCount\n  }) {\n    const reqHeaders = {};\n    if (contentLength) {\n      reqHeaders['content-length'] = contentLength;\n    }\n    const defaultHeaders = this.defaultHeaders(options);\n    applyHeadersMut(reqHeaders, defaultHeaders);\n    applyHeadersMut(reqHeaders, headers);\n    // let builtin fetch set the Content-Type for multipart bodies\n    if ((0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.isMultipartBody)(options.body) && _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.kind !== 'node') {\n      delete reqHeaders['content-type'];\n    }\n    // Don't set theses headers if they were already set or removed through default headers or by the caller.\n    // We check `defaultHeaders` and `headers`, which can contain nulls, instead of `reqHeaders` to account\n    // for the removal case.\n    if (getHeader(defaultHeaders, 'x-stainless-retry-count') === undefined && getHeader(headers, 'x-stainless-retry-count') === undefined) {\n      reqHeaders['x-stainless-retry-count'] = String(retryCount);\n    }\n    if (getHeader(defaultHeaders, 'x-stainless-timeout') === undefined && getHeader(headers, 'x-stainless-timeout') === undefined && options.timeout) {\n      reqHeaders['x-stainless-timeout'] = String(Math.trunc(options.timeout / 1000));\n    }\n    this.validateHeaders(reqHeaders, headers);\n    return reqHeaders;\n  }\n  /**\n   * Used as a callback for mutating the given `FinalRequestOptions` object.\n   */\n  async prepareOptions(options) {}\n  /**\n   * Used as a callback for mutating the given `RequestInit` object.\n   *\n   * This is useful for cases where you want to add certain headers based off of\n   * the request properties, e.g. `method` or `url`.\n   */\n  async prepareRequest(request, {\n    url,\n    options\n  }) {}\n  parseHeaders(headers) {\n    return !headers ? {} : Symbol.iterator in headers ? Object.fromEntries(Array.from(headers).map(header => [...header])) : {\n      ...headers\n    };\n  }\n  makeStatusError(status, error, message, headers) {\n    return _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIError.generate(status, error, message, headers);\n  }\n  request(options, remainingRetries = null) {\n    return new APIPromise(this.makeRequest(options, remainingRetries));\n  }\n  async makeRequest(optionsInput, retriesRemaining) {\n    const options = await optionsInput;\n    const maxRetries = options.maxRetries ?? this.maxRetries;\n    if (retriesRemaining == null) {\n      retriesRemaining = maxRetries;\n    }\n    await this.prepareOptions(options);\n    const {\n      req,\n      url,\n      timeout\n    } = this.buildRequest(options, {\n      retryCount: maxRetries - retriesRemaining\n    });\n    await this.prepareRequest(req, {\n      url,\n      options\n    });\n    debug('request', url, options, req.headers);\n    if (options.signal?.aborted) {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIUserAbortError();\n    }\n    const controller = new AbortController();\n    const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);\n    if (response instanceof Error) {\n      if (options.signal?.aborted) {\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIUserAbortError();\n      }\n      if (retriesRemaining) {\n        return this.retryRequest(options, retriesRemaining);\n      }\n      if (response.name === 'AbortError') {\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIConnectionTimeoutError();\n      }\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIConnectionError({\n        cause: response\n      });\n    }\n    const responseHeaders = createResponseHeaders(response.headers);\n    if (!response.ok) {\n      if (retriesRemaining && this.shouldRetry(response)) {\n        const retryMessage = `retrying, ${retriesRemaining} attempts remaining`;\n        debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders);\n        return this.retryRequest(options, retriesRemaining, responseHeaders);\n      }\n      const errText = await response.text().catch(e => castToError(e).message);\n      const errJSON = safeJSON(errText);\n      const errMessage = errJSON ? undefined : errText;\n      const retryMessage = retriesRemaining ? `(error; no more retries left)` : `(error; not retryable)`;\n      debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders, errMessage);\n      const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);\n      throw err;\n    }\n    return {\n      response,\n      options,\n      controller\n    };\n  }\n  requestAPIList(Page, options) {\n    const request = this.makeRequest(options, null);\n    return new PagePromise(this, request, Page);\n  }\n  buildURL(path, query) {\n    const url = isAbsoluteURL(path) ? new URL(path) : new URL(this.baseURL + (this.baseURL.endsWith('/') && path.startsWith('/') ? path.slice(1) : path));\n    const defaultQuery = this.defaultQuery();\n    if (!isEmptyObj(defaultQuery)) {\n      query = {\n        ...defaultQuery,\n        ...query\n      };\n    }\n    if (typeof query === 'object' && query && !Array.isArray(query)) {\n      url.search = this.stringifyQuery(query);\n    }\n    return url.toString();\n  }\n  stringifyQuery(query) {\n    return Object.entries(query).filter(([_, value]) => typeof value !== 'undefined').map(([key, value]) => {\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n      }\n      if (value === null) {\n        return `${encodeURIComponent(key)}=`;\n      }\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`);\n    }).join('&');\n  }\n  async fetchWithTimeout(url, init, ms, controller) {\n    const {\n      signal,\n      ...options\n    } = init || {};\n    if (signal) signal.addEventListener('abort', () => controller.abort());\n    const timeout = setTimeout(() => controller.abort(), ms);\n    const fetchOptions = {\n      signal: controller.signal,\n      ...options\n    };\n    if (fetchOptions.method) {\n      // Custom methods like 'patch' need to be uppercased\n      // See https://github.com/nodejs/undici/issues/2294\n      fetchOptions.method = fetchOptions.method.toUpperCase();\n    }\n    return (\n      // use undefined this binding; fetch errors if bound to something else in browser/cloudflare\n      this.fetch.call(undefined, url, fetchOptions).finally(() => {\n        clearTimeout(timeout);\n      })\n    );\n  }\n  shouldRetry(response) {\n    // Note this is not a standard header.\n    const shouldRetryHeader = response.headers.get('x-should-retry');\n    // If the server explicitly says whether or not to retry, obey.\n    if (shouldRetryHeader === 'true') return true;\n    if (shouldRetryHeader === 'false') return false;\n    // Retry on request timeouts.\n    if (response.status === 408) return true;\n    // Retry on lock timeouts.\n    if (response.status === 409) return true;\n    // Retry on rate limits.\n    if (response.status === 429) return true;\n    // Retry internal errors.\n    if (response.status >= 500) return true;\n    return false;\n  }\n  async retryRequest(options, retriesRemaining, responseHeaders) {\n    let timeoutMillis;\n    // Note the `retry-after-ms` header may not be standard, but is a good idea and we'd like proactive support for it.\n    const retryAfterMillisHeader = responseHeaders?.['retry-after-ms'];\n    if (retryAfterMillisHeader) {\n      const timeoutMs = parseFloat(retryAfterMillisHeader);\n      if (!Number.isNaN(timeoutMs)) {\n        timeoutMillis = timeoutMs;\n      }\n    }\n    // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n    const retryAfterHeader = responseHeaders?.['retry-after'];\n    if (retryAfterHeader && !timeoutMillis) {\n      const timeoutSeconds = parseFloat(retryAfterHeader);\n      if (!Number.isNaN(timeoutSeconds)) {\n        timeoutMillis = timeoutSeconds * 1000;\n      } else {\n        timeoutMillis = Date.parse(retryAfterHeader) - Date.now();\n      }\n    }\n    // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n    // just do what it says, but otherwise calculate a default\n    if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1000)) {\n      const maxRetries = options.maxRetries ?? this.maxRetries;\n      timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);\n    }\n    await sleep(timeoutMillis);\n    return this.makeRequest(options, retriesRemaining - 1);\n  }\n  calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {\n    const initialRetryDelay = 0.5;\n    const maxRetryDelay = 8.0;\n    const numRetries = maxRetries - retriesRemaining;\n    // Apply exponential backoff, but not more than the max.\n    const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);\n    // Apply some jitter, take up to at most 25 percent of the retry time.\n    const jitter = 1 - Math.random() * 0.25;\n    return sleepSeconds * jitter * 1000;\n  }\n  getUserAgent() {\n    return `${this.constructor.name}/JS ${_version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION}`;\n  }\n}\nclass AbstractPage {\n  constructor(client, response, body, options) {\n    _AbstractPage_client.set(this, void 0);\n    __classPrivateFieldSet(this, _AbstractPage_client, client, \"f\");\n    this.options = options;\n    this.response = response;\n    this.body = body;\n  }\n  hasNextPage() {\n    const items = this.getPaginatedItems();\n    if (!items.length) return false;\n    return this.nextPageInfo() != null;\n  }\n  async getNextPage() {\n    const nextInfo = this.nextPageInfo();\n    if (!nextInfo) {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError('No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.');\n    }\n    const nextOptions = {\n      ...this.options\n    };\n    if ('params' in nextInfo && typeof nextOptions.query === 'object') {\n      nextOptions.query = {\n        ...nextOptions.query,\n        ...nextInfo.params\n      };\n    } else if ('url' in nextInfo) {\n      const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];\n      for (const [key, value] of params) {\n        nextInfo.url.searchParams.set(key, value);\n      }\n      nextOptions.query = undefined;\n      nextOptions.path = nextInfo.url.toString();\n    }\n    return await __classPrivateFieldGet(this, _AbstractPage_client, \"f\").requestAPIList(this.constructor, nextOptions);\n  }\n  async *iterPages() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let page = this;\n    yield page;\n    while (page.hasNextPage()) {\n      page = await page.getNextPage();\n      yield page;\n    }\n  }\n  async *[(_AbstractPage_client = new WeakMap(), Symbol.asyncIterator)]() {\n    for await (const page of this.iterPages()) {\n      for (const item of page.getPaginatedItems()) {\n        yield item;\n      }\n    }\n  }\n}\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */\nclass PagePromise extends APIPromise {\n  constructor(client, request, Page) {\n    super(request, async props => new Page(client, props.response, await defaultParseResponse(props), props.options));\n  }\n  /**\n   * Allow auto-paginating iteration on an unawaited list call, eg:\n   *\n   *    for await (const item of client.items.list()) {\n   *      console.log(item)\n   *    }\n   */\n  async *[Symbol.asyncIterator]() {\n    const page = await this;\n    for await (const item of page) {\n      yield item;\n    }\n  }\n}\nconst createResponseHeaders = headers => {\n  return new Proxy(Object.fromEntries(\n  // @ts-ignore\n  headers.entries()), {\n    get(target, name) {\n      const key = name.toString();\n      return target[key.toLowerCase()] || target[key];\n    }\n  });\n};\n// This is required so that we can determine if a given object matches the RequestOptions\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\n// compiler such that any missing / extraneous keys will cause an error.\nconst requestOptionsKeys = {\n  method: true,\n  path: true,\n  query: true,\n  body: true,\n  headers: true,\n  maxRetries: true,\n  stream: true,\n  timeout: true,\n  httpAgent: true,\n  signal: true,\n  idempotencyKey: true,\n  __metadata: true,\n  __binaryRequest: true,\n  __binaryResponse: true,\n  __streamClass: true\n};\nconst isRequestOptions = obj => {\n  return typeof obj === 'object' && obj !== null && !isEmptyObj(obj) && Object.keys(obj).every(k => hasOwn(requestOptionsKeys, k));\n};\nconst getPlatformProperties = () => {\n  if (typeof Deno !== 'undefined' && Deno.build != null) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n      'X-Stainless-OS': normalizePlatform(Deno.build.os),\n      'X-Stainless-Arch': normalizeArch(Deno.build.arch),\n      'X-Stainless-Runtime': 'deno',\n      'X-Stainless-Runtime-Version': typeof Deno.version === 'string' ? Deno.version : Deno.version?.deno ?? 'unknown'\n    };\n  }\n  if (true) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': `other:${\"edge-runtime\"}`,\n      'X-Stainless-Runtime': 'edge',\n      'X-Stainless-Runtime-Version': process.version\n    };\n  }\n  // Check if Node.js\n  if (Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n      'X-Stainless-OS': normalizePlatform(process.platform),\n      'X-Stainless-Arch': normalizeArch(process.arch),\n      'X-Stainless-Runtime': 'node',\n      'X-Stainless-Runtime-Version': process.version\n    };\n  }\n  const browserInfo = getBrowserInfo();\n  if (browserInfo) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': 'unknown',\n      'X-Stainless-Runtime': `browser:${browserInfo.browser}`,\n      'X-Stainless-Runtime-Version': browserInfo.version\n    };\n  }\n  // TODO add support for Cloudflare workers, etc.\n  return {\n    'X-Stainless-Lang': 'js',\n    'X-Stainless-Package-Version': _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n    'X-Stainless-OS': 'Unknown',\n    'X-Stainless-Arch': 'unknown',\n    'X-Stainless-Runtime': 'unknown',\n    'X-Stainless-Runtime-Version': 'unknown'\n  };\n};\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo() {\n  if (typeof navigator === 'undefined' || !navigator) {\n    return null;\n  }\n  // NOTE: The order matters here!\n  const browserPatterns = [{\n    key: 'edge',\n    pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'ie',\n    pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'ie',\n    pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'chrome',\n    pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'firefox',\n    pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'safari',\n    pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/\n  }];\n  // Find the FIRST matching browser\n  for (const {\n    key,\n    pattern\n  } of browserPatterns) {\n    const match = pattern.exec(navigator.userAgent);\n    if (match) {\n      const major = match[1] || 0;\n      const minor = match[2] || 0;\n      const patch = match[3] || 0;\n      return {\n        browser: key,\n        version: `${major}.${minor}.${patch}`\n      };\n    }\n  }\n  return null;\n}\nconst normalizeArch = arch => {\n  // Node docs:\n  // - https://nodejs.org/api/process.html#processarch\n  // Deno docs:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  if (arch === 'x32') return 'x32';\n  if (arch === 'x86_64' || arch === 'x64') return 'x64';\n  if (arch === 'arm') return 'arm';\n  if (arch === 'aarch64' || arch === 'arm64') return 'arm64';\n  if (arch) return `other:${arch}`;\n  return 'unknown';\n};\nconst normalizePlatform = platform => {\n  // Node platforms:\n  // - https://nodejs.org/api/process.html#processplatform\n  // Deno platforms:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  // - https://github.com/denoland/deno/issues/14799\n  platform = platform.toLowerCase();\n  // NOTE: this iOS check is untested and may not work\n  // Node does not work natively on IOS, there is a fork at\n  // https://github.com/nodejs-mobile/nodejs-mobile\n  // however it is unknown at the time of writing how to detect if it is running\n  if (platform.includes('ios')) return 'iOS';\n  if (platform === 'android') return 'Android';\n  if (platform === 'darwin') return 'MacOS';\n  if (platform === 'win32') return 'Windows';\n  if (platform === 'freebsd') return 'FreeBSD';\n  if (platform === 'openbsd') return 'OpenBSD';\n  if (platform === 'linux') return 'Linux';\n  if (platform) return `Other:${platform}`;\n  return 'Unknown';\n};\nlet _platformHeaders;\nconst getPlatformHeaders = () => {\n  return _platformHeaders ?? (_platformHeaders = getPlatformProperties());\n};\nconst safeJSON = text => {\n  try {\n    return JSON.parse(text);\n  } catch (err) {\n    return undefined;\n  }\n};\n// https://url.spec.whatwg.org/#url-scheme-string\nconst startsWithSchemeRegexp = /^[a-z][a-z0-9+.-]*:/i;\nconst isAbsoluteURL = url => {\n  return startsWithSchemeRegexp.test(url);\n};\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\nconst validatePositiveInteger = (name, n) => {\n  if (typeof n !== 'number' || !Number.isInteger(n)) {\n    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`${name} must be an integer`);\n  }\n  if (n < 0) {\n    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`${name} must be a positive integer`);\n  }\n  return n;\n};\nconst castToError = err => {\n  if (err instanceof Error) return err;\n  if (typeof err === 'object' && err !== null) {\n    try {\n      return new Error(JSON.stringify(err));\n    } catch {}\n  }\n  return new Error(err);\n};\nconst ensurePresent = value => {\n  if (value == null) throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`Expected a value to be given but received ${value} instead.`);\n  return value;\n};\n/**\n * Read an environment variable.\n *\n * Trims beginning and trailing whitespace.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */\nconst readEnv = env => {\n  if (typeof process !== 'undefined') {\n    return process.env?.[env]?.trim() ?? undefined;\n  }\n  if (typeof Deno !== 'undefined') {\n    return Deno.env?.get?.(env)?.trim();\n  }\n  return undefined;\n};\nconst coerceInteger = value => {\n  if (typeof value === 'number') return Math.round(value);\n  if (typeof value === 'string') return parseInt(value, 10);\n  throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nconst coerceFloat = value => {\n  if (typeof value === 'number') return value;\n  if (typeof value === 'string') return parseFloat(value);\n  throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nconst coerceBoolean = value => {\n  if (typeof value === 'boolean') return value;\n  if (typeof value === 'string') return value === 'true';\n  return Boolean(value);\n};\nconst maybeCoerceInteger = value => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceInteger(value);\n};\nconst maybeCoerceFloat = value => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceFloat(value);\n};\nconst maybeCoerceBoolean = value => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceBoolean(value);\n};\n// https://stackoverflow.com/a/34491287\nfunction isEmptyObj(obj) {\n  if (!obj) return true;\n  for (const _k in obj) return false;\n  return true;\n}\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nfunction hasOwn(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n/**\n * Copies headers from \"newHeaders\" onto \"targetHeaders\",\n * using lower-case for all properties,\n * ignoring any keys with undefined values,\n * and deleting any keys with null values.\n */\nfunction applyHeadersMut(targetHeaders, newHeaders) {\n  for (const k in newHeaders) {\n    if (!hasOwn(newHeaders, k)) continue;\n    const lowerKey = k.toLowerCase();\n    if (!lowerKey) continue;\n    const val = newHeaders[k];\n    if (val === null) {\n      delete targetHeaders[lowerKey];\n    } else if (val !== undefined) {\n      targetHeaders[lowerKey] = val;\n    }\n  }\n}\nconst SENSITIVE_HEADERS = new Set(['authorization', 'api-key']);\nfunction debug(action, ...args) {\n  if (typeof process !== 'undefined' && process?.env?.['DEBUG'] === 'true') {\n    const modifiedArgs = args.map(arg => {\n      if (!arg) {\n        return arg;\n      }\n      // Check for sensitive headers in request body 'headers' object\n      if (arg['headers']) {\n        // clone so we don't mutate\n        const modifiedArg = {\n          ...arg,\n          headers: {\n            ...arg['headers']\n          }\n        };\n        for (const header in arg['headers']) {\n          if (SENSITIVE_HEADERS.has(header.toLowerCase())) {\n            modifiedArg['headers'][header] = 'REDACTED';\n          }\n        }\n        return modifiedArg;\n      }\n      let modifiedArg = null;\n      // Check for sensitive headers in headers object\n      for (const header in arg) {\n        if (SENSITIVE_HEADERS.has(header.toLowerCase())) {\n          // avoid making a copy until we need to\n          modifiedArg ?? (modifiedArg = {\n            ...arg\n          });\n          modifiedArg[header] = 'REDACTED';\n        }\n      }\n      return modifiedArg ?? arg;\n    });\n    console.log(`OpenAI:DEBUG:${action}`, ...modifiedArgs);\n  }\n}\n/**\n * https://stackoverflow.com/a/2117523\n */\nconst uuid4 = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n};\nconst isRunningInBrowser = () => {\n  return (\n    // @ts-ignore\n     false &&\n    // @ts-ignore\n    0\n  );\n};\nconst isHeadersProtocol = headers => {\n  return typeof headers?.get === 'function';\n};\nconst getRequiredHeader = (headers, header) => {\n  const foundHeader = getHeader(headers, header);\n  if (foundHeader === undefined) {\n    throw new Error(`Could not find ${header} header`);\n  }\n  return foundHeader;\n};\nconst getHeader = (headers, header) => {\n  const lowerCasedHeader = header.toLowerCase();\n  if (isHeadersProtocol(headers)) {\n    // to deal with the case where the header looks like Stainless-Event-Id\n    const intercapsHeader = header[0]?.toUpperCase() + header.substring(1).replace(/([^\\w])(\\w)/g, (_m, g1, g2) => g1 + g2.toUpperCase());\n    for (const key of [header, lowerCasedHeader, header.toUpperCase(), intercapsHeader]) {\n      const value = headers.get(key);\n      if (value) {\n        return value;\n      }\n    }\n  }\n  for (const [key, value] of Object.entries(headers)) {\n    if (key.toLowerCase() === lowerCasedHeader) {\n      if (Array.isArray(value)) {\n        if (value.length <= 1) return value[0];\n        console.warn(`Received ${value.length} entries for the ${header} header, using the first entry.`);\n        return value[0];\n      }\n      return value;\n    }\n  }\n  return undefined;\n};\n/**\n * Encodes a string to Base64 format.\n */\nconst toBase64 = str => {\n  if (!str) return '';\n  if (typeof Buffer !== 'undefined') {\n    return Buffer.from(str).toString('base64');\n  }\n  if (typeof btoa !== 'undefined') {\n    return btoa(str);\n  }\n  throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError('Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined');\n};\n/**\n * Converts a Base64 encoded string to a Float32Array.\n * @param base64Str - The Base64 encoded string.\n * @returns An Array of numbers interpreted as Float32 values.\n */\nconst toFloat32Array = base64Str => {\n  if (typeof Buffer !== 'undefined') {\n    // for Node.js environment\n    const buf = Buffer.from(base64Str, 'base64');\n    return Array.from(new Float32Array(buf.buffer, buf.byteOffset, buf.length / Float32Array.BYTES_PER_ELEMENT));\n  } else {\n    // for legacy web platform APIs\n    const binaryStr = atob(base64Str);\n    const len = binaryStr.length;\n    const bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryStr.charCodeAt(i);\n    }\n    return Array.from(new Float32Array(bytes.buffer));\n  }\n};\nfunction isObj(obj) {\n  return obj != null && typeof obj === 'object' && !Array.isArray(obj);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/core.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/error.mjs":
/*!***************************************!*\
  !*** ./node_modules/openai/error.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIConnectionError: () => (/* binding */ APIConnectionError),\n/* harmony export */   APIConnectionTimeoutError: () => (/* binding */ APIConnectionTimeoutError),\n/* harmony export */   APIError: () => (/* binding */ APIError),\n/* harmony export */   APIUserAbortError: () => (/* binding */ APIUserAbortError),\n/* harmony export */   AuthenticationError: () => (/* binding */ AuthenticationError),\n/* harmony export */   BadRequestError: () => (/* binding */ BadRequestError),\n/* harmony export */   ConflictError: () => (/* binding */ ConflictError),\n/* harmony export */   ContentFilterFinishReasonError: () => (/* binding */ ContentFilterFinishReasonError),\n/* harmony export */   InternalServerError: () => (/* binding */ InternalServerError),\n/* harmony export */   LengthFinishReasonError: () => (/* binding */ LengthFinishReasonError),\n/* harmony export */   NotFoundError: () => (/* binding */ NotFoundError),\n/* harmony export */   OpenAIError: () => (/* binding */ OpenAIError),\n/* harmony export */   PermissionDeniedError: () => (/* binding */ PermissionDeniedError),\n/* harmony export */   RateLimitError: () => (/* binding */ RateLimitError),\n/* harmony export */   UnprocessableEntityError: () => (/* binding */ UnprocessableEntityError)\n/* harmony export */ });\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass OpenAIError extends Error {}\nclass APIError extends OpenAIError {\n  constructor(status, error, message, headers) {\n    super(`${APIError.makeMessage(status, error, message)}`);\n    this.status = status;\n    this.headers = headers;\n    this.request_id = headers?.['x-request-id'];\n    this.error = error;\n    const data = error;\n    this.code = data?.['code'];\n    this.param = data?.['param'];\n    this.type = data?.['type'];\n  }\n  static makeMessage(status, error, message) {\n    const msg = error?.message ? typeof error.message === 'string' ? error.message : JSON.stringify(error.message) : error ? JSON.stringify(error) : message;\n    if (status && msg) {\n      return `${status} ${msg}`;\n    }\n    if (status) {\n      return `${status} status code (no body)`;\n    }\n    if (msg) {\n      return msg;\n    }\n    return '(no status code or body)';\n  }\n  static generate(status, errorResponse, message, headers) {\n    if (!status || !headers) {\n      return new APIConnectionError({\n        message,\n        cause: (0,_core_mjs__WEBPACK_IMPORTED_MODULE_0__.castToError)(errorResponse)\n      });\n    }\n    const error = errorResponse?.['error'];\n    if (status === 400) {\n      return new BadRequestError(status, error, message, headers);\n    }\n    if (status === 401) {\n      return new AuthenticationError(status, error, message, headers);\n    }\n    if (status === 403) {\n      return new PermissionDeniedError(status, error, message, headers);\n    }\n    if (status === 404) {\n      return new NotFoundError(status, error, message, headers);\n    }\n    if (status === 409) {\n      return new ConflictError(status, error, message, headers);\n    }\n    if (status === 422) {\n      return new UnprocessableEntityError(status, error, message, headers);\n    }\n    if (status === 429) {\n      return new RateLimitError(status, error, message, headers);\n    }\n    if (status >= 500) {\n      return new InternalServerError(status, error, message, headers);\n    }\n    return new APIError(status, error, message, headers);\n  }\n}\nclass APIUserAbortError extends APIError {\n  constructor({\n    message\n  } = {}) {\n    super(undefined, undefined, message || 'Request was aborted.', undefined);\n  }\n}\nclass APIConnectionError extends APIError {\n  constructor({\n    message,\n    cause\n  }) {\n    super(undefined, undefined, message || 'Connection error.', undefined);\n    // in some environments the 'cause' property is already declared\n    // @ts-ignore\n    if (cause) this.cause = cause;\n  }\n}\nclass APIConnectionTimeoutError extends APIConnectionError {\n  constructor({\n    message\n  } = {}) {\n    super({\n      message: message ?? 'Request timed out.'\n    });\n  }\n}\nclass BadRequestError extends APIError {}\nclass AuthenticationError extends APIError {}\nclass PermissionDeniedError extends APIError {}\nclass NotFoundError extends APIError {}\nclass ConflictError extends APIError {}\nclass UnprocessableEntityError extends APIError {}\nclass RateLimitError extends APIError {}\nclass InternalServerError extends APIError {}\nclass LengthFinishReasonError extends OpenAIError {\n  constructor() {\n    super(`Could not parse response content as the length limit was reached`);\n  }\n}\nclass ContentFilterFinishReasonError extends OpenAIError {\n  constructor() {\n    super(`Could not parse response content as the request was rejected by the content filter`);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/error.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/index.mjs":
/*!***************************************!*\
  !*** ./node_modules/openai/index.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIConnectionError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIConnectionError),\n/* harmony export */   APIConnectionTimeoutError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIConnectionTimeoutError),\n/* harmony export */   APIError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIError),\n/* harmony export */   APIUserAbortError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError),\n/* harmony export */   AuthenticationError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthenticationError),\n/* harmony export */   AzureOpenAI: () => (/* binding */ AzureOpenAI),\n/* harmony export */   BadRequestError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.BadRequestError),\n/* harmony export */   ConflictError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ConflictError),\n/* harmony export */   InternalServerError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.InternalServerError),\n/* harmony export */   NotFoundError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.NotFoundError),\n/* harmony export */   OpenAI: () => (/* binding */ OpenAI),\n/* harmony export */   OpenAIError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError),\n/* harmony export */   PermissionDeniedError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.PermissionDeniedError),\n/* harmony export */   RateLimitError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.RateLimitError),\n/* harmony export */   UnprocessableEntityError: () => (/* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_1__.UnprocessableEntityError),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fileFromPath: () => (/* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_19__.fileFromPath),\n/* harmony export */   toFile: () => (/* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_18__.toFile)\n/* harmony export */ });\n/* harmony import */ var _internal_qs_index_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./internal/qs/index.mjs */ \"(rsc)/./node_modules/openai/internal/qs/stringify.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _uploads_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./uploads.mjs */ \"(rsc)/./node_modules/openai/uploads.mjs\");\n/* harmony import */ var _uploads_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./uploads.mjs */ \"(rsc)/./node_modules/openai/_shims/index.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resources/completions.mjs */ \"(rsc)/./node_modules/openai/resources/completions.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resources/chat/chat.mjs */ \"(rsc)/./node_modules/openai/resources/chat/chat.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./resources/embeddings.mjs */ \"(rsc)/./node_modules/openai/resources/embeddings.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./resources/files.mjs */ \"(rsc)/./node_modules/openai/resources/files.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./resources/images.mjs */ \"(rsc)/./node_modules/openai/resources/images.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./resources/audio/audio.mjs */ \"(rsc)/./node_modules/openai/resources/audio/audio.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./resources/moderations.mjs */ \"(rsc)/./node_modules/openai/resources/moderations.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./resources/models.mjs */ \"(rsc)/./node_modules/openai/resources/models.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./resources/fine-tuning/fine-tuning.mjs */ \"(rsc)/./node_modules/openai/resources/fine-tuning/fine-tuning.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./resources/vector-stores/vector-stores.mjs */ \"(rsc)/./node_modules/openai/resources/vector-stores/vector-stores.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./resources/beta/beta.mjs */ \"(rsc)/./node_modules/openai/resources/beta/beta.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./resources/batches.mjs */ \"(rsc)/./node_modules/openai/resources/batches.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./resources/uploads/uploads.mjs */ \"(rsc)/./node_modules/openai/resources/uploads/uploads.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./resources/responses/responses.mjs */ \"(rsc)/./node_modules/openai/resources/responses/responses.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./resources/evals/evals.mjs */ \"(rsc)/./node_modules/openai/resources/evals/evals.mjs\");\n/* harmony import */ var _resources_chat_completions_completions_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./resources/chat/completions/completions.mjs */ \"(rsc)/./node_modules/openai/resources/chat/completions/completions.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _a;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * API Client for interfacing with the OpenAI API.\n */\nclass OpenAI extends _core_mjs__WEBPACK_IMPORTED_MODULE_0__.APIClient {\n  /**\n   * API Client for interfacing with the OpenAI API.\n   *\n   * @param {string | undefined} [opts.apiKey=process.env['OPENAI_API_KEY'] ?? undefined]\n   * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]\n   * @param {string | null | undefined} [opts.project=process.env['OPENAI_PROJECT_ID'] ?? null]\n   * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL'] ?? https://api.openai.com/v1] - Override the default base URL for the API.\n   * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n   * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\n   * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n   * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n   * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.\n   * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\n   * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n   */\n  constructor({\n    baseURL = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv('OPENAI_BASE_URL'),\n    apiKey = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv('OPENAI_API_KEY'),\n    organization = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv('OPENAI_ORG_ID') ?? null,\n    project = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv('OPENAI_PROJECT_ID') ?? null,\n    ...opts\n  } = {}) {\n    if (apiKey === undefined) {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' }).\");\n    }\n    const options = {\n      apiKey,\n      organization,\n      project,\n      ...opts,\n      baseURL: baseURL || `https://api.openai.com/v1`\n    };\n    if (!options.dangerouslyAllowBrowser && _core_mjs__WEBPACK_IMPORTED_MODULE_0__.isRunningInBrowser()) {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"It looks like you're running in a browser-like environment.\\n\\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\\nIf you understand the risks and have appropriate mitigations in place,\\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\\n\\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\\n\\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\\n\");\n    }\n    super({\n      baseURL: options.baseURL,\n      timeout: options.timeout ?? 600000 /* 10 minutes */,\n      httpAgent: options.httpAgent,\n      maxRetries: options.maxRetries,\n      fetch: options.fetch\n    });\n    this.completions = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Completions(this);\n    this.chat = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Chat(this);\n    this.embeddings = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_4__.Embeddings(this);\n    this.files = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Files(this);\n    this.images = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_6__.Images(this);\n    this.audio = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Audio(this);\n    this.moderations = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_8__.Moderations(this);\n    this.models = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_9__.Models(this);\n    this.fineTuning = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_10__.FineTuning(this);\n    this.vectorStores = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_11__.VectorStores(this);\n    this.beta = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_12__.Beta(this);\n    this.batches = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Batches(this);\n    this.uploads = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_14__.Uploads(this);\n    this.responses = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_15__.Responses(this);\n    this.evals = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_16__.Evals(this);\n    this._options = options;\n    this.apiKey = apiKey;\n    this.organization = organization;\n    this.project = project;\n  }\n  defaultQuery() {\n    return this._options.defaultQuery;\n  }\n  defaultHeaders(opts) {\n    return {\n      ...super.defaultHeaders(opts),\n      'OpenAI-Organization': this.organization,\n      'OpenAI-Project': this.project,\n      ...this._options.defaultHeaders\n    };\n  }\n  authHeaders(opts) {\n    return {\n      Authorization: `Bearer ${this.apiKey}`\n    };\n  }\n  stringifyQuery(query) {\n    return _internal_qs_index_mjs__WEBPACK_IMPORTED_MODULE_17__.stringify(query, {\n      arrayFormat: 'brackets'\n    });\n  }\n}\n_a = OpenAI;\nOpenAI.OpenAI = _a;\nOpenAI.DEFAULT_TIMEOUT = 600000; // 10 minutes\nOpenAI.OpenAIError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError;\nOpenAI.APIError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIError;\nOpenAI.APIConnectionError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIConnectionError;\nOpenAI.APIConnectionTimeoutError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIConnectionTimeoutError;\nOpenAI.APIUserAbortError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError;\nOpenAI.NotFoundError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.NotFoundError;\nOpenAI.ConflictError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ConflictError;\nOpenAI.RateLimitError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.RateLimitError;\nOpenAI.BadRequestError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.BadRequestError;\nOpenAI.AuthenticationError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthenticationError;\nOpenAI.InternalServerError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.InternalServerError;\nOpenAI.PermissionDeniedError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.PermissionDeniedError;\nOpenAI.UnprocessableEntityError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.UnprocessableEntityError;\nOpenAI.toFile = _uploads_mjs__WEBPACK_IMPORTED_MODULE_18__.toFile;\nOpenAI.fileFromPath = _uploads_mjs__WEBPACK_IMPORTED_MODULE_19__.fileFromPath;\nOpenAI.Completions = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Completions;\nOpenAI.Chat = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Chat;\nOpenAI.ChatCompletionsPage = _resources_chat_completions_completions_mjs__WEBPACK_IMPORTED_MODULE_20__.ChatCompletionsPage;\nOpenAI.Embeddings = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_4__.Embeddings;\nOpenAI.Files = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Files;\nOpenAI.FileObjectsPage = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_5__.FileObjectsPage;\nOpenAI.Images = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_6__.Images;\nOpenAI.Audio = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Audio;\nOpenAI.Moderations = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_8__.Moderations;\nOpenAI.Models = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_9__.Models;\nOpenAI.ModelsPage = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_9__.ModelsPage;\nOpenAI.FineTuning = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_10__.FineTuning;\nOpenAI.VectorStores = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_11__.VectorStores;\nOpenAI.VectorStoresPage = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_11__.VectorStoresPage;\nOpenAI.VectorStoreSearchResponsesPage = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_11__.VectorStoreSearchResponsesPage;\nOpenAI.Beta = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_12__.Beta;\nOpenAI.Batches = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Batches;\nOpenAI.BatchesPage = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.BatchesPage;\nOpenAI.Uploads = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_14__.Uploads;\nOpenAI.Responses = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_15__.Responses;\nOpenAI.Evals = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_16__.Evals;\nOpenAI.EvalListResponsesPage = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_16__.EvalListResponsesPage;\n/** API Client for interfacing with the Azure OpenAI API. */\nclass AzureOpenAI extends OpenAI {\n  /**\n   * API Client for interfacing with the Azure OpenAI API.\n   *\n   * @param {string | undefined} [opts.apiVersion=process.env['OPENAI_API_VERSION'] ?? undefined]\n   * @param {string | undefined} [opts.endpoint=process.env['AZURE_OPENAI_ENDPOINT'] ?? undefined] - Your Azure endpoint, including the resource, e.g. `https://example-resource.azure.openai.com/`\n   * @param {string | undefined} [opts.apiKey=process.env['AZURE_OPENAI_API_KEY'] ?? undefined]\n   * @param {string | undefined} opts.deployment - A model deployment, if given, sets the base client URL to include `/deployments/{deployment}`.\n   * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]\n   * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL']] - Sets the base URL for the API, e.g. `https://example-resource.azure.openai.com/openai/`.\n   * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n   * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\n   * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n   * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n   * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.\n   * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\n   * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n   */\n  constructor({\n    baseURL = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv('OPENAI_BASE_URL'),\n    apiKey = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv('AZURE_OPENAI_API_KEY'),\n    apiVersion = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv('OPENAI_API_VERSION'),\n    endpoint,\n    deployment,\n    azureADTokenProvider,\n    dangerouslyAllowBrowser,\n    ...opts\n  } = {}) {\n    if (!apiVersion) {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"The OPENAI_API_VERSION environment variable is missing or empty; either provide it, or instantiate the AzureOpenAI client with an apiVersion option, like new AzureOpenAI({ apiVersion: 'My API Version' }).\");\n    }\n    if (typeof azureADTokenProvider === 'function') {\n      dangerouslyAllowBrowser = true;\n    }\n    if (!azureADTokenProvider && !apiKey) {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError('Missing credentials. Please pass one of `apiKey` and `azureADTokenProvider`, or set the `AZURE_OPENAI_API_KEY` environment variable.');\n    }\n    if (azureADTokenProvider && apiKey) {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError('The `apiKey` and `azureADTokenProvider` arguments are mutually exclusive; only one can be passed at a time.');\n    }\n    // define a sentinel value to avoid any typing issues\n    apiKey ?? (apiKey = API_KEY_SENTINEL);\n    opts.defaultQuery = {\n      ...opts.defaultQuery,\n      'api-version': apiVersion\n    };\n    if (!baseURL) {\n      if (!endpoint) {\n        endpoint = process.env['AZURE_OPENAI_ENDPOINT'];\n      }\n      if (!endpoint) {\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError('Must provide one of the `baseURL` or `endpoint` arguments, or the `AZURE_OPENAI_ENDPOINT` environment variable');\n      }\n      baseURL = `${endpoint}/openai`;\n    } else {\n      if (endpoint) {\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError('baseURL and endpoint are mutually exclusive');\n      }\n    }\n    super({\n      apiKey,\n      baseURL,\n      ...opts,\n      ...(dangerouslyAllowBrowser !== undefined ? {\n        dangerouslyAllowBrowser\n      } : {})\n    });\n    this.apiVersion = '';\n    this._azureADTokenProvider = azureADTokenProvider;\n    this.apiVersion = apiVersion;\n    this.deploymentName = deployment;\n  }\n  buildRequest(options, props = {}) {\n    if (_deployments_endpoints.has(options.path) && options.method === 'post' && options.body !== undefined) {\n      if (!_core_mjs__WEBPACK_IMPORTED_MODULE_0__.isObj(options.body)) {\n        throw new Error('Expected request body to be an object');\n      }\n      const model = this.deploymentName || options.body['model'] || options.__metadata?.['model'];\n      if (model !== undefined && !this.baseURL.includes('/deployments')) {\n        options.path = `/deployments/${model}${options.path}`;\n      }\n    }\n    return super.buildRequest(options, props);\n  }\n  async _getAzureADToken() {\n    if (typeof this._azureADTokenProvider === 'function') {\n      const token = await this._azureADTokenProvider();\n      if (!token || typeof token !== 'string') {\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`Expected 'azureADTokenProvider' argument to return a string but it returned ${token}`);\n      }\n      return token;\n    }\n    return undefined;\n  }\n  authHeaders(opts) {\n    return {};\n  }\n  async prepareOptions(opts) {\n    /**\n     * The user should provide a bearer token provider if they want\n     * to use Azure AD authentication. The user shouldn't set the\n     * Authorization header manually because the header is overwritten\n     * with the Azure AD token if a bearer token provider is provided.\n     */\n    if (opts.headers?.['api-key']) {\n      return super.prepareOptions(opts);\n    }\n    const token = await this._getAzureADToken();\n    opts.headers ?? (opts.headers = {});\n    if (token) {\n      opts.headers['Authorization'] = `Bearer ${token}`;\n    } else if (this.apiKey !== API_KEY_SENTINEL) {\n      opts.headers['api-key'] = this.apiKey;\n    } else {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError('Unable to handle auth');\n    }\n    return super.prepareOptions(opts);\n  }\n}\nconst _deployments_endpoints = new Set(['/completions', '/chat/completions', '/embeddings', '/audio/transcriptions', '/audio/translations', '/audio/speech', '/images/generations']);\nconst API_KEY_SENTINEL = '<Missing Key>';\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (OpenAI);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/decoders/line.mjs":
/*!********************************************************!*\
  !*** ./node_modules/openai/internal/decoders/line.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LineDecoder: () => (/* binding */ LineDecoder),\n/* harmony export */   findDoubleNewlineIndex: () => (/* binding */ findDoubleNewlineIndex)\n/* harmony export */ });\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"buffer\")[\"Buffer\"];\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _LineDecoder_carriageReturnIndex;\n\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */\nclass LineDecoder {\n  constructor() {\n    _LineDecoder_carriageReturnIndex.set(this, void 0);\n    this.buffer = new Uint8Array();\n    __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n  }\n  decode(chunk) {\n    if (chunk == null) {\n      return [];\n    }\n    const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk) : typeof chunk === 'string' ? new TextEncoder().encode(chunk) : chunk;\n    let newData = new Uint8Array(this.buffer.length + binaryChunk.length);\n    newData.set(this.buffer);\n    newData.set(binaryChunk, this.buffer.length);\n    this.buffer = newData;\n    const lines = [];\n    let patternIndex;\n    while ((patternIndex = findNewlineIndex(this.buffer, __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\"))) != null) {\n      if (patternIndex.carriage && __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") == null) {\n        // skip until we either get a corresponding `\\n`, a new `\\r` or nothing\n        __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, patternIndex.index, \"f\");\n        continue;\n      }\n      // we got double \\r or \\rtext\\n\n      if (__classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") != null && (patternIndex.index !== __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") + 1 || patternIndex.carriage)) {\n        lines.push(this.decodeText(this.buffer.slice(0, __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") - 1)));\n        this.buffer = this.buffer.slice(__classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\"));\n        __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n        continue;\n      }\n      const endIndex = __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") !== null ? patternIndex.preceding - 1 : patternIndex.preceding;\n      const line = this.decodeText(this.buffer.slice(0, endIndex));\n      lines.push(line);\n      this.buffer = this.buffer.slice(patternIndex.index);\n      __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n    }\n    return lines;\n  }\n  decodeText(bytes) {\n    if (bytes == null) return '';\n    if (typeof bytes === 'string') return bytes;\n    // Node:\n    if (typeof Buffer !== 'undefined') {\n      if (bytes instanceof Buffer) {\n        return bytes.toString();\n      }\n      if (bytes instanceof Uint8Array) {\n        return Buffer.from(bytes).toString();\n      }\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(`Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global \"Buffer\" defined, which this library assumes to be Node. Please report this error.`);\n    }\n    // Browser\n    if (typeof TextDecoder !== 'undefined') {\n      if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {\n        this.textDecoder ?? (this.textDecoder = new TextDecoder('utf8'));\n        return this.textDecoder.decode(bytes);\n      }\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(`Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`);\n    }\n    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(`Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`);\n  }\n  flush() {\n    if (!this.buffer.length) {\n      return [];\n    }\n    return this.decode('\\n');\n  }\n}\n_LineDecoder_carriageReturnIndex = new WeakMap();\n// prettier-ignore\nLineDecoder.NEWLINE_CHARS = new Set(['\\n', '\\r']);\nLineDecoder.NEWLINE_REGEXP = /\\r\\n|[\\n\\r]/g;\n/**\n * This function searches the buffer for the end patterns, (\\r or \\n)\n * and returns an object with the index preceding the matched newline and the\n * index after the newline char. `null` is returned if no new line is found.\n *\n * ```ts\n * findNewLineIndex('abc\\ndef') -> { preceding: 2, index: 3 }\n * ```\n */\nfunction findNewlineIndex(buffer, startIndex) {\n  const newline = 0x0a; // \\n\n  const carriage = 0x0d; // \\r\n  for (let i = startIndex ?? 0; i < buffer.length; i++) {\n    if (buffer[i] === newline) {\n      return {\n        preceding: i,\n        index: i + 1,\n        carriage: false\n      };\n    }\n    if (buffer[i] === carriage) {\n      return {\n        preceding: i,\n        index: i + 1,\n        carriage: true\n      };\n    }\n  }\n  return null;\n}\nfunction findDoubleNewlineIndex(buffer) {\n  // This function searches the buffer for the end patterns (\\r\\r, \\n\\n, \\r\\n\\r\\n)\n  // and returns the index right after the first occurrence of any pattern,\n  // or -1 if none of the patterns are found.\n  const newline = 0x0a; // \\n\n  const carriage = 0x0d; // \\r\n  for (let i = 0; i < buffer.length - 1; i++) {\n    if (buffer[i] === newline && buffer[i + 1] === newline) {\n      // \\n\\n\n      return i + 2;\n    }\n    if (buffer[i] === carriage && buffer[i + 1] === carriage) {\n      // \\r\\r\n      return i + 2;\n    }\n    if (buffer[i] === carriage && buffer[i + 1] === newline && i + 3 < buffer.length && buffer[i + 2] === carriage && buffer[i + 3] === newline) {\n      // \\r\\n\\r\\n\n      return i + 4;\n    }\n  }\n  return -1;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/decoders/line.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/qs/formats.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/internal/qs/formats.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RFC1738: () => (/* binding */ RFC1738),\n/* harmony export */   RFC3986: () => (/* binding */ RFC3986),\n/* harmony export */   default_format: () => (/* binding */ default_format),\n/* harmony export */   formatters: () => (/* binding */ formatters)\n/* harmony export */ });\nconst default_format = 'RFC3986';\nconst formatters = {\n  RFC1738: v => String(v).replace(/%20/g, '+'),\n  RFC3986: v => String(v)\n};\nconst RFC1738 = 'RFC1738';\nconst RFC3986 = 'RFC3986';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3FzL2Zvcm1hdHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBTyxNQUFNQSxjQUFjLEdBQUcsU0FBUztBQUNoQyxNQUFNQyxVQUFVLEdBQUc7RUFDdEJDLE9BQU8sRUFBR0MsQ0FBQyxJQUFLQyxNQUFNLENBQUNELENBQUMsQ0FBQyxDQUFDRSxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQztFQUM5Q0MsT0FBTyxFQUFHSCxDQUFDLElBQUtDLE1BQU0sQ0FBQ0QsQ0FBQztBQUM1QixDQUFDO0FBQ00sTUFBTUQsT0FBTyxHQUFHLFNBQVM7QUFDekIsTUFBTUksT0FBTyxHQUFHLFNBQVMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9pbnRlcm5hbC9xcy9mb3JtYXRzLm1qcz9jMzBiIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBkZWZhdWx0X2Zvcm1hdCA9ICdSRkMzOTg2JztcbmV4cG9ydCBjb25zdCBmb3JtYXR0ZXJzID0ge1xuICAgIFJGQzE3Mzg6ICh2KSA9PiBTdHJpbmcodikucmVwbGFjZSgvJTIwL2csICcrJyksXG4gICAgUkZDMzk4NjogKHYpID0+IFN0cmluZyh2KSxcbn07XG5leHBvcnQgY29uc3QgUkZDMTczOCA9ICdSRkMxNzM4JztcbmV4cG9ydCBjb25zdCBSRkMzOTg2ID0gJ1JGQzM5ODYnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9ybWF0cy5tanMubWFwIl0sIm5hbWVzIjpbImRlZmF1bHRfZm9ybWF0IiwiZm9ybWF0dGVycyIsIlJGQzE3MzgiLCJ2IiwiU3RyaW5nIiwicmVwbGFjZSIsIlJGQzM5ODYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/qs/formats.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/qs/stringify.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/internal/qs/stringify.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stringify: () => (/* binding */ stringify)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(rsc)/./node_modules/openai/internal/qs/utils.mjs\");\n/* harmony import */ var _formats_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formats.mjs */ \"(rsc)/./node_modules/openai/internal/qs/formats.mjs\");\n\n\nconst has = Object.prototype.hasOwnProperty;\nconst array_prefix_generators = {\n  brackets(prefix) {\n    return String(prefix) + '[]';\n  },\n  comma: 'comma',\n  indices(prefix, key) {\n    return String(prefix) + '[' + key + ']';\n  },\n  repeat(prefix) {\n    return String(prefix);\n  }\n};\nconst is_array = Array.isArray;\nconst push = Array.prototype.push;\nconst push_to_array = function (arr, value_or_array) {\n  push.apply(arr, is_array(value_or_array) ? value_or_array : [value_or_array]);\n};\nconst to_ISO = Date.prototype.toISOString;\nconst defaults = {\n  addQueryPrefix: false,\n  allowDots: false,\n  allowEmptyArrays: false,\n  arrayFormat: 'indices',\n  charset: 'utf-8',\n  charsetSentinel: false,\n  delimiter: '&',\n  encode: true,\n  encodeDotInKeys: false,\n  encoder: _utils_mjs__WEBPACK_IMPORTED_MODULE_0__.encode,\n  encodeValuesOnly: false,\n  format: _formats_mjs__WEBPACK_IMPORTED_MODULE_1__.default_format,\n  formatter: _formats_mjs__WEBPACK_IMPORTED_MODULE_1__.formatters[_formats_mjs__WEBPACK_IMPORTED_MODULE_1__.default_format],\n  /** @deprecated */\n  indices: false,\n  serializeDate(date) {\n    return to_ISO.call(date);\n  },\n  skipNulls: false,\n  strictNullHandling: false\n};\nfunction is_non_nullish_primitive(v) {\n  return typeof v === 'string' || typeof v === 'number' || typeof v === 'boolean' || typeof v === 'symbol' || typeof v === 'bigint';\n}\nconst sentinel = {};\nfunction inner_stringify(object, prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {\n  let obj = object;\n  let tmp_sc = sideChannel;\n  let step = 0;\n  let find_flag = false;\n  while ((tmp_sc = tmp_sc.get(sentinel)) !== void undefined && !find_flag) {\n    // Where object last appeared in the ref tree\n    const pos = tmp_sc.get(object);\n    step += 1;\n    if (typeof pos !== 'undefined') {\n      if (pos === step) {\n        throw new RangeError('Cyclic object value');\n      } else {\n        find_flag = true; // Break while\n      }\n    }\n\n    if (typeof tmp_sc.get(sentinel) === 'undefined') {\n      step = 0;\n    }\n  }\n  if (typeof filter === 'function') {\n    obj = filter(prefix, obj);\n  } else if (obj instanceof Date) {\n    obj = serializeDate?.(obj);\n  } else if (generateArrayPrefix === 'comma' && is_array(obj)) {\n    obj = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.maybe_map)(obj, function (value) {\n      if (value instanceof Date) {\n        return serializeDate?.(value);\n      }\n      return value;\n    });\n  }\n  if (obj === null) {\n    if (strictNullHandling) {\n      return encoder && !encodeValuesOnly ?\n      // @ts-expect-error\n      encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;\n    }\n    obj = '';\n  }\n  if (is_non_nullish_primitive(obj) || (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.is_buffer)(obj)) {\n    if (encoder) {\n      const key_value = encodeValuesOnly ? prefix\n      // @ts-expect-error\n      : encoder(prefix, defaults.encoder, charset, 'key', format);\n      return [formatter?.(key_value) + '=' +\n      // @ts-expect-error\n      formatter?.(encoder(obj, defaults.encoder, charset, 'value', format))];\n    }\n    return [formatter?.(prefix) + '=' + formatter?.(String(obj))];\n  }\n  const values = [];\n  if (typeof obj === 'undefined') {\n    return values;\n  }\n  let obj_keys;\n  if (generateArrayPrefix === 'comma' && is_array(obj)) {\n    // we need to join elements in\n    if (encodeValuesOnly && encoder) {\n      // @ts-expect-error values only\n      obj = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.maybe_map)(obj, encoder);\n    }\n    obj_keys = [{\n      value: obj.length > 0 ? obj.join(',') || null : void undefined\n    }];\n  } else if (is_array(filter)) {\n    obj_keys = filter;\n  } else {\n    const keys = Object.keys(obj);\n    obj_keys = sort ? keys.sort(sort) : keys;\n  }\n  const encoded_prefix = encodeDotInKeys ? String(prefix).replace(/\\./g, '%2E') : String(prefix);\n  const adjusted_prefix = commaRoundTrip && is_array(obj) && obj.length === 1 ? encoded_prefix + '[]' : encoded_prefix;\n  if (allowEmptyArrays && is_array(obj) && obj.length === 0) {\n    return adjusted_prefix + '[]';\n  }\n  for (let j = 0; j < obj_keys.length; ++j) {\n    const key = obj_keys[j];\n    const value =\n    // @ts-ignore\n    typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];\n    if (skipNulls && value === null) {\n      continue;\n    }\n    // @ts-ignore\n    const encoded_key = allowDots && encodeDotInKeys ? key.replace(/\\./g, '%2E') : key;\n    const key_prefix = is_array(obj) ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjusted_prefix, encoded_key) : adjusted_prefix : adjusted_prefix + (allowDots ? '.' + encoded_key : '[' + encoded_key + ']');\n    sideChannel.set(object, step);\n    const valueSideChannel = new WeakMap();\n    valueSideChannel.set(sentinel, sideChannel);\n    push_to_array(values, inner_stringify(value, key_prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys,\n    // @ts-ignore\n    generateArrayPrefix === 'comma' && encodeValuesOnly && is_array(obj) ? null : encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));\n  }\n  return values;\n}\nfunction normalize_stringify_options(opts = defaults) {\n  if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n    throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');\n  }\n  if (typeof opts.encodeDotInKeys !== 'undefined' && typeof opts.encodeDotInKeys !== 'boolean') {\n    throw new TypeError('`encodeDotInKeys` option can only be `true` or `false`, when provided');\n  }\n  if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {\n    throw new TypeError('Encoder has to be a function.');\n  }\n  const charset = opts.charset || defaults.charset;\n  if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n    throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n  }\n  let format = _formats_mjs__WEBPACK_IMPORTED_MODULE_1__.default_format;\n  if (typeof opts.format !== 'undefined') {\n    if (!has.call(_formats_mjs__WEBPACK_IMPORTED_MODULE_1__.formatters, opts.format)) {\n      throw new TypeError('Unknown format option provided.');\n    }\n    format = opts.format;\n  }\n  const formatter = _formats_mjs__WEBPACK_IMPORTED_MODULE_1__.formatters[format];\n  let filter = defaults.filter;\n  if (typeof opts.filter === 'function' || is_array(opts.filter)) {\n    filter = opts.filter;\n  }\n  let arrayFormat;\n  if (opts.arrayFormat && opts.arrayFormat in array_prefix_generators) {\n    arrayFormat = opts.arrayFormat;\n  } else if ('indices' in opts) {\n    arrayFormat = opts.indices ? 'indices' : 'repeat';\n  } else {\n    arrayFormat = defaults.arrayFormat;\n  }\n  if ('commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {\n    throw new TypeError('`commaRoundTrip` must be a boolean, or absent');\n  }\n  const allowDots = typeof opts.allowDots === 'undefined' ? !!opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;\n  return {\n    addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,\n    // @ts-ignore\n    allowDots: allowDots,\n    allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\n    arrayFormat: arrayFormat,\n    charset: charset,\n    charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n    commaRoundTrip: !!opts.commaRoundTrip,\n    delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,\n    encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,\n    encodeDotInKeys: typeof opts.encodeDotInKeys === 'boolean' ? opts.encodeDotInKeys : defaults.encodeDotInKeys,\n    encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,\n    encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\n    filter: filter,\n    format: format,\n    formatter: formatter,\n    serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,\n    skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,\n    // @ts-ignore\n    sort: typeof opts.sort === 'function' ? opts.sort : null,\n    strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n  };\n}\nfunction stringify(object, opts = {}) {\n  let obj = object;\n  const options = normalize_stringify_options(opts);\n  let obj_keys;\n  let filter;\n  if (typeof options.filter === 'function') {\n    filter = options.filter;\n    obj = filter('', obj);\n  } else if (is_array(options.filter)) {\n    filter = options.filter;\n    obj_keys = filter;\n  }\n  const keys = [];\n  if (typeof obj !== 'object' || obj === null) {\n    return '';\n  }\n  const generateArrayPrefix = array_prefix_generators[options.arrayFormat];\n  const commaRoundTrip = generateArrayPrefix === 'comma' && options.commaRoundTrip;\n  if (!obj_keys) {\n    obj_keys = Object.keys(obj);\n  }\n  if (options.sort) {\n    obj_keys.sort(options.sort);\n  }\n  const sideChannel = new WeakMap();\n  for (let i = 0; i < obj_keys.length; ++i) {\n    const key = obj_keys[i];\n    if (options.skipNulls && obj[key] === null) {\n      continue;\n    }\n    push_to_array(keys, inner_stringify(obj[key], key,\n    // @ts-expect-error\n    generateArrayPrefix, commaRoundTrip, options.allowEmptyArrays, options.strictNullHandling, options.skipNulls, options.encodeDotInKeys, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));\n  }\n  const joined = keys.join(options.delimiter);\n  let prefix = options.addQueryPrefix === true ? '?' : '';\n  if (options.charsetSentinel) {\n    if (options.charset === 'iso-8859-1') {\n      // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n      prefix += 'utf8=%26%2310003%3B&';\n    } else {\n      // encodeURIComponent('✓')\n      prefix += 'utf8=%E2%9C%93&';\n    }\n  }\n  return joined.length > 0 ? prefix + joined : '';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/qs/stringify.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/qs/utils.mjs":
/*!***************************************************!*\
  !*** ./node_modules/openai/internal/qs/utils.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assign_single_source: () => (/* binding */ assign_single_source),\n/* harmony export */   combine: () => (/* binding */ combine),\n/* harmony export */   compact: () => (/* binding */ compact),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   is_buffer: () => (/* binding */ is_buffer),\n/* harmony export */   is_regexp: () => (/* binding */ is_regexp),\n/* harmony export */   maybe_map: () => (/* binding */ maybe_map),\n/* harmony export */   merge: () => (/* binding */ merge)\n/* harmony export */ });\n/* harmony import */ var _formats_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formats.mjs */ \"(rsc)/./node_modules/openai/internal/qs/formats.mjs\");\n\nconst has = Object.prototype.hasOwnProperty;\nconst is_array = Array.isArray;\nconst hex_table = (() => {\n  const array = [];\n  for (let i = 0; i < 256; ++i) {\n    array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());\n  }\n  return array;\n})();\nfunction compact_queue(queue) {\n  while (queue.length > 1) {\n    const item = queue.pop();\n    if (!item) continue;\n    const obj = item.obj[item.prop];\n    if (is_array(obj)) {\n      const compacted = [];\n      for (let j = 0; j < obj.length; ++j) {\n        if (typeof obj[j] !== 'undefined') {\n          compacted.push(obj[j]);\n        }\n      }\n      // @ts-ignore\n      item.obj[item.prop] = compacted;\n    }\n  }\n}\nfunction array_to_object(source, options) {\n  const obj = options && options.plainObjects ? Object.create(null) : {};\n  for (let i = 0; i < source.length; ++i) {\n    if (typeof source[i] !== 'undefined') {\n      obj[i] = source[i];\n    }\n  }\n  return obj;\n}\nfunction merge(target, source, options = {}) {\n  if (!source) {\n    return target;\n  }\n  if (typeof source !== 'object') {\n    if (is_array(target)) {\n      target.push(source);\n    } else if (target && typeof target === 'object') {\n      if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {\n        target[source] = true;\n      }\n    } else {\n      return [target, source];\n    }\n    return target;\n  }\n  if (!target || typeof target !== 'object') {\n    return [target].concat(source);\n  }\n  let mergeTarget = target;\n  if (is_array(target) && !is_array(source)) {\n    // @ts-ignore\n    mergeTarget = array_to_object(target, options);\n  }\n  if (is_array(target) && is_array(source)) {\n    source.forEach(function (item, i) {\n      if (has.call(target, i)) {\n        const targetItem = target[i];\n        if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {\n          target[i] = merge(targetItem, item, options);\n        } else {\n          target.push(item);\n        }\n      } else {\n        target[i] = item;\n      }\n    });\n    return target;\n  }\n  return Object.keys(source).reduce(function (acc, key) {\n    const value = source[key];\n    if (has.call(acc, key)) {\n      acc[key] = merge(acc[key], value, options);\n    } else {\n      acc[key] = value;\n    }\n    return acc;\n  }, mergeTarget);\n}\nfunction assign_single_source(target, source) {\n  return Object.keys(source).reduce(function (acc, key) {\n    acc[key] = source[key];\n    return acc;\n  }, target);\n}\nfunction decode(str, _, charset) {\n  const strWithoutPlus = str.replace(/\\+/g, ' ');\n  if (charset === 'iso-8859-1') {\n    // unescape never throws, no try...catch needed:\n    return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n  }\n  // utf-8\n  try {\n    return decodeURIComponent(strWithoutPlus);\n  } catch (e) {\n    return strWithoutPlus;\n  }\n}\nconst limit = 1024;\nconst encode = (str, _defaultEncoder, charset, _kind, format) => {\n  // This code was originally written by Brian White for the io.js core querystring library.\n  // It has been adapted here for stricter adherence to RFC 3986\n  if (str.length === 0) {\n    return str;\n  }\n  let string = str;\n  if (typeof str === 'symbol') {\n    string = Symbol.prototype.toString.call(str);\n  } else if (typeof str !== 'string') {\n    string = String(str);\n  }\n  if (charset === 'iso-8859-1') {\n    return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {\n      return '%26%23' + parseInt($0.slice(2), 16) + '%3B';\n    });\n  }\n  let out = '';\n  for (let j = 0; j < string.length; j += limit) {\n    const segment = string.length >= limit ? string.slice(j, j + limit) : string;\n    const arr = [];\n    for (let i = 0; i < segment.length; ++i) {\n      let c = segment.charCodeAt(i);\n      if (c === 0x2d ||\n      // -\n      c === 0x2e ||\n      // .\n      c === 0x5f ||\n      // _\n      c === 0x7e ||\n      // ~\n      c >= 0x30 && c <= 0x39 ||\n      // 0-9\n      c >= 0x41 && c <= 0x5a ||\n      // a-z\n      c >= 0x61 && c <= 0x7a ||\n      // A-Z\n      format === _formats_mjs__WEBPACK_IMPORTED_MODULE_0__.RFC1738 && (c === 0x28 || c === 0x29) // ( )\n      ) {\n        arr[arr.length] = segment.charAt(i);\n        continue;\n      }\n      if (c < 0x80) {\n        arr[arr.length] = hex_table[c];\n        continue;\n      }\n      if (c < 0x800) {\n        arr[arr.length] = hex_table[0xc0 | c >> 6] + hex_table[0x80 | c & 0x3f];\n        continue;\n      }\n      if (c < 0xd800 || c >= 0xe000) {\n        arr[arr.length] = hex_table[0xe0 | c >> 12] + hex_table[0x80 | c >> 6 & 0x3f] + hex_table[0x80 | c & 0x3f];\n        continue;\n      }\n      i += 1;\n      c = 0x10000 + ((c & 0x3ff) << 10 | segment.charCodeAt(i) & 0x3ff);\n      arr[arr.length] = hex_table[0xf0 | c >> 18] + hex_table[0x80 | c >> 12 & 0x3f] + hex_table[0x80 | c >> 6 & 0x3f] + hex_table[0x80 | c & 0x3f];\n    }\n    out += arr.join('');\n  }\n  return out;\n};\nfunction compact(value) {\n  const queue = [{\n    obj: {\n      o: value\n    },\n    prop: 'o'\n  }];\n  const refs = [];\n  for (let i = 0; i < queue.length; ++i) {\n    const item = queue[i];\n    // @ts-ignore\n    const obj = item.obj[item.prop];\n    const keys = Object.keys(obj);\n    for (let j = 0; j < keys.length; ++j) {\n      const key = keys[j];\n      const val = obj[key];\n      if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\n        queue.push({\n          obj: obj,\n          prop: key\n        });\n        refs.push(val);\n      }\n    }\n  }\n  compact_queue(queue);\n  return value;\n}\nfunction is_regexp(obj) {\n  return Object.prototype.toString.call(obj) === '[object RegExp]';\n}\nfunction is_buffer(obj) {\n  if (!obj || typeof obj !== 'object') {\n    return false;\n  }\n  return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n}\nfunction combine(a, b) {\n  return [].concat(a, b);\n}\nfunction maybe_map(val, fn) {\n  if (is_array(val)) {\n    const mapped = [];\n    for (let i = 0; i < val.length; i += 1) {\n      mapped.push(fn(val[i]));\n    }\n    return mapped;\n  }\n  return fn(val);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/qs/utils.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/internal/stream-utils.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/internal/stream-utils.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReadableStreamToAsyncIterable: () => (/* binding */ ReadableStreamToAsyncIterable)\n/* harmony export */ });\n/**\n * Most browsers don't yet have async iterable support for ReadableStream,\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\n *\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */\nfunction ReadableStreamToAsyncIterable(stream) {\n  if (stream[Symbol.asyncIterator]) return stream;\n  const reader = stream.getReader();\n  return {\n    async next() {\n      try {\n        const result = await reader.read();\n        if (result?.done) reader.releaseLock(); // release lock when stream becomes closed\n        return result;\n      } catch (e) {\n        reader.releaseLock(); // release lock when stream becomes errored\n        throw e;\n      }\n    },\n    async return() {\n      const cancelPromise = reader.cancel();\n      reader.releaseLock();\n      await cancelPromise;\n      return {\n        done: true,\n        value: undefined\n      };\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3N0cmVhbS11dGlscy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNBLDZCQUE2QkEsQ0FBQ0MsTUFBTSxFQUFFO0VBQ2xELElBQUlBLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDQyxhQUFhLENBQUMsRUFDNUIsT0FBT0YsTUFBTTtFQUNqQixNQUFNRyxNQUFNLEdBQUdILE1BQU0sQ0FBQ0ksU0FBUyxDQUFDLENBQUM7RUFDakMsT0FBTztJQUNILE1BQU1DLElBQUlBLENBQUEsRUFBRztNQUNULElBQUk7UUFDQSxNQUFNQyxNQUFNLEdBQUcsTUFBTUgsTUFBTSxDQUFDSSxJQUFJLENBQUMsQ0FBQztRQUNsQyxJQUFJRCxNQUFNLEVBQUVFLElBQUksRUFDWkwsTUFBTSxDQUFDTSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsT0FBT0gsTUFBTTtNQUNqQixDQUFDLENBQ0QsT0FBT0ksQ0FBQyxFQUFFO1FBQ05QLE1BQU0sQ0FBQ00sV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU1DLENBQUM7TUFDWDtJQUNKLENBQUM7SUFDRCxNQUFNQyxNQUFNQSxDQUFBLEVBQUc7TUFDWCxNQUFNQyxhQUFhLEdBQUdULE1BQU0sQ0FBQ1UsTUFBTSxDQUFDLENBQUM7TUFDckNWLE1BQU0sQ0FBQ00sV0FBVyxDQUFDLENBQUM7TUFDcEIsTUFBTUcsYUFBYTtNQUNuQixPQUFPO1FBQUVKLElBQUksRUFBRSxJQUFJO1FBQUVNLEtBQUssRUFBRUM7TUFBVSxDQUFDO0lBQzNDLENBQUM7SUFDRCxDQUFDZCxNQUFNLENBQUNDLGFBQWEsSUFBSTtNQUNyQixPQUFPLElBQUk7SUFDZjtFQUNKLENBQUM7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3N0cmVhbS11dGlscy5tanM/NzQwOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1vc3QgYnJvd3NlcnMgZG9uJ3QgeWV0IGhhdmUgYXN5bmMgaXRlcmFibGUgc3VwcG9ydCBmb3IgUmVhZGFibGVTdHJlYW0sXG4gKiBhbmQgTm9kZSBoYXMgYSB2ZXJ5IGRpZmZlcmVudCB3YXkgb2YgcmVhZGluZyBieXRlcyBmcm9tIGl0cyBcIlJlYWRhYmxlU3RyZWFtXCIuXG4gKlxuICogVGhpcyBwb2x5ZmlsbCB3YXMgcHVsbGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL01hdHRpYXNCdWVsZW5zL3dlYi1zdHJlYW1zLXBvbHlmaWxsL3B1bGwvMTIyI2lzc3VlY29tbWVudC0xNjI3MzU0NDkwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbVRvQXN5bmNJdGVyYWJsZShzdHJlYW0pIHtcbiAgICBpZiAoc3RyZWFtW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSlcbiAgICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICBjb25zdCByZWFkZXIgPSBzdHJlYW0uZ2V0UmVhZGVyKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXN5bmMgbmV4dCgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVhZGVyLnJlYWQoKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0Py5kb25lKVxuICAgICAgICAgICAgICAgICAgICByZWFkZXIucmVsZWFzZUxvY2soKTsgLy8gcmVsZWFzZSBsb2NrIHdoZW4gc3RyZWFtIGJlY29tZXMgY2xvc2VkXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7IC8vIHJlbGVhc2UgbG9jayB3aGVuIHN0cmVhbSBiZWNvbWVzIGVycm9yZWRcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhc3luYyByZXR1cm4oKSB7XG4gICAgICAgICAgICBjb25zdCBjYW5jZWxQcm9taXNlID0gcmVhZGVyLmNhbmNlbCgpO1xuICAgICAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7XG4gICAgICAgICAgICBhd2FpdCBjYW5jZWxQcm9taXNlO1xuICAgICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuZGVmaW5lZCB9O1xuICAgICAgICB9LFxuICAgICAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmVhbS11dGlscy5tanMubWFwIl0sIm5hbWVzIjpbIlJlYWRhYmxlU3RyZWFtVG9Bc3luY0l0ZXJhYmxlIiwic3RyZWFtIiwiU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInJlYWRlciIsImdldFJlYWRlciIsIm5leHQiLCJyZXN1bHQiLCJyZWFkIiwiZG9uZSIsInJlbGVhc2VMb2NrIiwiZSIsInJldHVybiIsImNhbmNlbFByb21pc2UiLCJjYW5jZWwiLCJ2YWx1ZSIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/internal/stream-utils.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/openai/lib/AbstractChatCompletionRunner.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractChatCompletionRunner: () => (/* binding */ AbstractChatCompletionRunner)\n/* harmony export */ });\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./RunnableFunction.mjs */ \"(rsc)/./node_modules/openai/lib/RunnableFunction.mjs\");\n/* harmony import */ var _chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chatCompletionUtils.mjs */ \"(rsc)/./node_modules/openai/lib/chatCompletionUtils.mjs\");\n/* harmony import */ var _EventStream_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventStream.mjs */ \"(rsc)/./node_modules/openai/lib/EventStream.mjs\");\n/* harmony import */ var _lib_parser_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/parser.mjs */ \"(rsc)/./node_modules/openai/lib/parser.mjs\");\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AbstractChatCompletionRunner_instances, _AbstractChatCompletionRunner_getFinalContent, _AbstractChatCompletionRunner_getFinalMessage, _AbstractChatCompletionRunner_getFinalFunctionCall, _AbstractChatCompletionRunner_getFinalFunctionCallResult, _AbstractChatCompletionRunner_calculateTotalUsage, _AbstractChatCompletionRunner_validateParams, _AbstractChatCompletionRunner_stringifyFunctionCallResult;\n\n\n\n\n\nconst DEFAULT_MAX_CHAT_COMPLETIONS = 10;\nclass AbstractChatCompletionRunner extends _EventStream_mjs__WEBPACK_IMPORTED_MODULE_0__.EventStream {\n  constructor() {\n    super(...arguments);\n    _AbstractChatCompletionRunner_instances.add(this);\n    this._chatCompletions = [];\n    this.messages = [];\n  }\n  _addChatCompletion(chatCompletion) {\n    this._chatCompletions.push(chatCompletion);\n    this._emit('chatCompletion', chatCompletion);\n    const message = chatCompletion.choices[0]?.message;\n    if (message) this._addMessage(message);\n    return chatCompletion;\n  }\n  _addMessage(message, emit = true) {\n    if (!('content' in message)) message.content = null;\n    this.messages.push(message);\n    if (emit) {\n      this._emit('message', message);\n      if (((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isFunctionMessage)(message) || (0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isToolMessage)(message)) && message.content) {\n        // Note, this assumes that {role: 'tool', content: …} is always the result of a call of tool of type=function.\n        this._emit('functionCallResult', message.content);\n      } else if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && message.function_call) {\n        this._emit('functionCall', message.function_call);\n      } else if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && message.tool_calls) {\n        for (const tool_call of message.tool_calls) {\n          if (tool_call.type === 'function') {\n            this._emit('functionCall', tool_call.function);\n          }\n        }\n      }\n    }\n  }\n  /**\n   * @returns a promise that resolves with the final ChatCompletion, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletion.\n   */\n  async finalChatCompletion() {\n    await this.done();\n    const completion = this._chatCompletions[this._chatCompletions.length - 1];\n    if (!completion) throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError('stream ended without producing a ChatCompletion');\n    return completion;\n  }\n  /**\n   * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalContent() {\n    await this.done();\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n  }\n  /**\n   * @returns a promise that resolves with the the final assistant ChatCompletionMessage response,\n   * or rejects if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalMessage() {\n    await this.done();\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\n  }\n  /**\n   * @returns a promise that resolves with the content of the final FunctionCall, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalFunctionCall() {\n    await this.done();\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);\n  }\n  async finalFunctionCallResult() {\n    await this.done();\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);\n  }\n  async totalUsage() {\n    await this.done();\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this);\n  }\n  allChatCompletions() {\n    return [...this._chatCompletions];\n  }\n  _emitFinal() {\n    const completion = this._chatCompletions[this._chatCompletions.length - 1];\n    if (completion) this._emit('finalChatCompletion', completion);\n    const finalMessage = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\n    if (finalMessage) this._emit('finalMessage', finalMessage);\n    const finalContent = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n    if (finalContent) this._emit('finalContent', finalContent);\n    const finalFunctionCall = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);\n    if (finalFunctionCall) this._emit('finalFunctionCall', finalFunctionCall);\n    const finalFunctionCallResult = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);\n    if (finalFunctionCallResult != null) this._emit('finalFunctionCallResult', finalFunctionCallResult);\n    if (this._chatCompletions.some(c => c.usage)) {\n      this._emit('totalUsage', __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this));\n    }\n  }\n  async _createChatCompletion(client, params, options) {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_validateParams).call(this, params);\n    const chatCompletion = await client.chat.completions.create({\n      ...params,\n      stream: false\n    }, {\n      ...options,\n      signal: this.controller.signal\n    });\n    this._connected();\n    return this._addChatCompletion((0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_3__.parseChatCompletion)(chatCompletion, params));\n  }\n  async _runChatCompletion(client, params, options) {\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n    return await this._createChatCompletion(client, params, options);\n  }\n  async _runFunctions(client, params, options) {\n    const role = 'function';\n    const {\n      function_call = 'auto',\n      stream,\n      ...restParams\n    } = params;\n    const singleFunctionToCall = typeof function_call !== 'string' && function_call?.name;\n    const {\n      maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS\n    } = options || {};\n    const functionsByName = {};\n    for (const f of params.functions) {\n      functionsByName[f.name || f.function.name] = f;\n    }\n    const functions = params.functions.map(f => ({\n      name: f.name || f.function.name,\n      parameters: f.parameters,\n      description: f.description\n    }));\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n    for (let i = 0; i < maxChatCompletions; ++i) {\n      const chatCompletion = await this._createChatCompletion(client, {\n        ...restParams,\n        function_call,\n        functions,\n        messages: [...this.messages]\n      }, options);\n      const message = chatCompletion.choices[0]?.message;\n      if (!message) {\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError(`missing message in ChatCompletion response`);\n      }\n      if (!message.function_call) return;\n      const {\n        name,\n        arguments: args\n      } = message.function_call;\n      const fn = functionsByName[name];\n      if (!fn) {\n        const content = `Invalid function_call: ${JSON.stringify(name)}. Available options are: ${functions.map(f => JSON.stringify(f.name)).join(', ')}. Please try again`;\n        this._addMessage({\n          role,\n          name,\n          content\n        });\n        continue;\n      } else if (singleFunctionToCall && singleFunctionToCall !== name) {\n        const content = `Invalid function_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;\n        this._addMessage({\n          role,\n          name,\n          content\n        });\n        continue;\n      }\n      let parsed;\n      try {\n        parsed = (0,_RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_4__.isRunnableFunctionWithParse)(fn) ? await fn.parse(args) : args;\n      } catch (error) {\n        this._addMessage({\n          role,\n          name,\n          content: error instanceof Error ? error.message : String(error)\n        });\n        continue;\n      }\n      // @ts-expect-error it can't rule out `never` type.\n      const rawContent = await fn.function(parsed, this);\n      const content = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);\n      this._addMessage({\n        role,\n        name,\n        content\n      });\n      if (singleFunctionToCall) return;\n    }\n  }\n  async _runTools(client, params, options) {\n    const role = 'tool';\n    const {\n      tool_choice = 'auto',\n      stream,\n      ...restParams\n    } = params;\n    const singleFunctionToCall = typeof tool_choice !== 'string' && tool_choice?.function?.name;\n    const {\n      maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS\n    } = options || {};\n    // TODO(someday): clean this logic up\n    const inputTools = params.tools.map(tool => {\n      if ((0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_3__.isAutoParsableTool)(tool)) {\n        if (!tool.$callback) {\n          throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError('Tool given to `.runTools()` that does not have an associated function');\n        }\n        return {\n          type: 'function',\n          function: {\n            function: tool.$callback,\n            name: tool.function.name,\n            description: tool.function.description || '',\n            parameters: tool.function.parameters,\n            parse: tool.$parseRaw,\n            strict: true\n          }\n        };\n      }\n      return tool;\n    });\n    const functionsByName = {};\n    for (const f of inputTools) {\n      if (f.type === 'function') {\n        functionsByName[f.function.name || f.function.function.name] = f.function;\n      }\n    }\n    const tools = 'tools' in params ? inputTools.map(t => t.type === 'function' ? {\n      type: 'function',\n      function: {\n        name: t.function.name || t.function.function.name,\n        parameters: t.function.parameters,\n        description: t.function.description,\n        strict: t.function.strict\n      }\n    } : t) : undefined;\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n    for (let i = 0; i < maxChatCompletions; ++i) {\n      const chatCompletion = await this._createChatCompletion(client, {\n        ...restParams,\n        tool_choice,\n        tools,\n        messages: [...this.messages]\n      }, options);\n      const message = chatCompletion.choices[0]?.message;\n      if (!message) {\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError(`missing message in ChatCompletion response`);\n      }\n      if (!message.tool_calls?.length) {\n        return;\n      }\n      for (const tool_call of message.tool_calls) {\n        if (tool_call.type !== 'function') continue;\n        const tool_call_id = tool_call.id;\n        const {\n          name,\n          arguments: args\n        } = tool_call.function;\n        const fn = functionsByName[name];\n        if (!fn) {\n          const content = `Invalid tool_call: ${JSON.stringify(name)}. Available options are: ${Object.keys(functionsByName).map(name => JSON.stringify(name)).join(', ')}. Please try again`;\n          this._addMessage({\n            role,\n            tool_call_id,\n            content\n          });\n          continue;\n        } else if (singleFunctionToCall && singleFunctionToCall !== name) {\n          const content = `Invalid tool_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;\n          this._addMessage({\n            role,\n            tool_call_id,\n            content\n          });\n          continue;\n        }\n        let parsed;\n        try {\n          parsed = (0,_RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_4__.isRunnableFunctionWithParse)(fn) ? await fn.parse(args) : args;\n        } catch (error) {\n          const content = error instanceof Error ? error.message : String(error);\n          this._addMessage({\n            role,\n            tool_call_id,\n            content\n          });\n          continue;\n        }\n        // @ts-expect-error it can't rule out `never` type.\n        const rawContent = await fn.function(parsed, this);\n        const content = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);\n        this._addMessage({\n          role,\n          tool_call_id,\n          content\n        });\n        if (singleFunctionToCall) {\n          return;\n        }\n      }\n    }\n    return;\n  }\n}\n_AbstractChatCompletionRunner_instances = new WeakSet(), _AbstractChatCompletionRunner_getFinalContent = function _AbstractChatCompletionRunner_getFinalContent() {\n  return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this).content ?? null;\n}, _AbstractChatCompletionRunner_getFinalMessage = function _AbstractChatCompletionRunner_getFinalMessage() {\n  let i = this.messages.length;\n  while (i-- > 0) {\n    const message = this.messages[i];\n    if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message)) {\n      const {\n        function_call,\n        ...rest\n      } = message;\n      // TODO: support audio here\n      const ret = {\n        ...rest,\n        content: message.content ?? null,\n        refusal: message.refusal ?? null\n      };\n      if (function_call) {\n        ret.function_call = function_call;\n      }\n      return ret;\n    }\n  }\n  throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError('stream ended without producing a ChatCompletionMessage with role=assistant');\n}, _AbstractChatCompletionRunner_getFinalFunctionCall = function _AbstractChatCompletionRunner_getFinalFunctionCall() {\n  for (let i = this.messages.length - 1; i >= 0; i--) {\n    const message = this.messages[i];\n    if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && message?.function_call) {\n      return message.function_call;\n    }\n    if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && message?.tool_calls?.length) {\n      return message.tool_calls.at(-1)?.function;\n    }\n  }\n  return;\n}, _AbstractChatCompletionRunner_getFinalFunctionCallResult = function _AbstractChatCompletionRunner_getFinalFunctionCallResult() {\n  for (let i = this.messages.length - 1; i >= 0; i--) {\n    const message = this.messages[i];\n    if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isFunctionMessage)(message) && message.content != null) {\n      return message.content;\n    }\n    if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isToolMessage)(message) && message.content != null && typeof message.content === 'string' && this.messages.some(x => x.role === 'assistant' && x.tool_calls?.some(y => y.type === 'function' && y.id === message.tool_call_id))) {\n      return message.content;\n    }\n  }\n  return;\n}, _AbstractChatCompletionRunner_calculateTotalUsage = function _AbstractChatCompletionRunner_calculateTotalUsage() {\n  const total = {\n    completion_tokens: 0,\n    prompt_tokens: 0,\n    total_tokens: 0\n  };\n  for (const {\n    usage\n  } of this._chatCompletions) {\n    if (usage) {\n      total.completion_tokens += usage.completion_tokens;\n      total.prompt_tokens += usage.prompt_tokens;\n      total.total_tokens += usage.total_tokens;\n    }\n  }\n  return total;\n}, _AbstractChatCompletionRunner_validateParams = function _AbstractChatCompletionRunner_validateParams(params) {\n  if (params.n != null && params.n > 1) {\n    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError('ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.');\n  }\n}, _AbstractChatCompletionRunner_stringifyFunctionCallResult = function _AbstractChatCompletionRunner_stringifyFunctionCallResult(rawContent) {\n  return typeof rawContent === 'string' ? rawContent : rawContent === undefined ? 'undefined' : JSON.stringify(rawContent);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/AssistantStream.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/lib/AssistantStream.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AssistantStream: () => (/* binding */ AssistantStream)\n/* harmony export */ });\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _streaming_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../streaming.mjs */ \"(rsc)/./node_modules/openai/streaming.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _EventStream_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventStream.mjs */ \"(rsc)/./node_modules/openai/lib/EventStream.mjs\");\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _AssistantStream_instances, _AssistantStream_events, _AssistantStream_runStepSnapshots, _AssistantStream_messageSnapshots, _AssistantStream_messageSnapshot, _AssistantStream_finalRun, _AssistantStream_currentContentIndex, _AssistantStream_currentContent, _AssistantStream_currentToolCallIndex, _AssistantStream_currentToolCall, _AssistantStream_currentEvent, _AssistantStream_currentRunSnapshot, _AssistantStream_currentRunStepSnapshot, _AssistantStream_addEvent, _AssistantStream_endRequest, _AssistantStream_handleMessage, _AssistantStream_handleRunStep, _AssistantStream_handleEvent, _AssistantStream_accumulateRunStep, _AssistantStream_accumulateMessage, _AssistantStream_accumulateContent, _AssistantStream_handleRun;\n\n\n\n\nclass AssistantStream extends _EventStream_mjs__WEBPACK_IMPORTED_MODULE_0__.EventStream {\n  constructor() {\n    super(...arguments);\n    _AssistantStream_instances.add(this);\n    //Track all events in a single list for reference\n    _AssistantStream_events.set(this, []);\n    //Used to accumulate deltas\n    //We are accumulating many types so the value here is not strict\n    _AssistantStream_runStepSnapshots.set(this, {});\n    _AssistantStream_messageSnapshots.set(this, {});\n    _AssistantStream_messageSnapshot.set(this, void 0);\n    _AssistantStream_finalRun.set(this, void 0);\n    _AssistantStream_currentContentIndex.set(this, void 0);\n    _AssistantStream_currentContent.set(this, void 0);\n    _AssistantStream_currentToolCallIndex.set(this, void 0);\n    _AssistantStream_currentToolCall.set(this, void 0);\n    //For current snapshot methods\n    _AssistantStream_currentEvent.set(this, void 0);\n    _AssistantStream_currentRunSnapshot.set(this, void 0);\n    _AssistantStream_currentRunStepSnapshot.set(this, void 0);\n  }\n  [(_AssistantStream_events = new WeakMap(), _AssistantStream_runStepSnapshots = new WeakMap(), _AssistantStream_messageSnapshots = new WeakMap(), _AssistantStream_messageSnapshot = new WeakMap(), _AssistantStream_finalRun = new WeakMap(), _AssistantStream_currentContentIndex = new WeakMap(), _AssistantStream_currentContent = new WeakMap(), _AssistantStream_currentToolCallIndex = new WeakMap(), _AssistantStream_currentToolCall = new WeakMap(), _AssistantStream_currentEvent = new WeakMap(), _AssistantStream_currentRunSnapshot = new WeakMap(), _AssistantStream_currentRunStepSnapshot = new WeakMap(), _AssistantStream_instances = new WeakSet(), Symbol.asyncIterator)]() {\n    const pushQueue = [];\n    const readQueue = [];\n    let done = false;\n    //Catch all for passing along all events\n    this.on('event', event => {\n      const reader = readQueue.shift();\n      if (reader) {\n        reader.resolve(event);\n      } else {\n        pushQueue.push(event);\n      }\n    });\n    this.on('end', () => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.resolve(undefined);\n      }\n      readQueue.length = 0;\n    });\n    this.on('abort', err => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n    this.on('error', err => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n    return {\n      next: async () => {\n        if (!pushQueue.length) {\n          if (done) {\n            return {\n              value: undefined,\n              done: true\n            };\n          }\n          return new Promise((resolve, reject) => readQueue.push({\n            resolve,\n            reject\n          })).then(chunk => chunk ? {\n            value: chunk,\n            done: false\n          } : {\n            value: undefined,\n            done: true\n          });\n        }\n        const chunk = pushQueue.shift();\n        return {\n          value: chunk,\n          done: false\n        };\n      },\n      return: async () => {\n        this.abort();\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  static fromReadableStream(stream) {\n    const runner = new AssistantStream();\n    runner._run(() => runner._fromReadableStream(stream));\n    return runner;\n  }\n  async _fromReadableStream(readableStream, options) {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    this._connected();\n    const stream = _streaming_mjs__WEBPACK_IMPORTED_MODULE_1__.Stream.fromReadableStream(readableStream, this.controller);\n    for await (const event of stream) {\n      __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n    }\n    return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n  }\n  toReadableStream() {\n    const stream = new _streaming_mjs__WEBPACK_IMPORTED_MODULE_1__.Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n    return stream.toReadableStream();\n  }\n  static createToolAssistantStream(threadId, runId, runs, params, options) {\n    const runner = new AssistantStream();\n    runner._run(() => runner._runToolAssistantStream(threadId, runId, runs, params, {\n      ...options,\n      headers: {\n        ...options?.headers,\n        'X-Stainless-Helper-Method': 'stream'\n      }\n    }));\n    return runner;\n  }\n  async _createToolAssistantStream(run, threadId, runId, params, options) {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    const body = {\n      ...params,\n      stream: true\n    };\n    const stream = await run.submitToolOutputs(threadId, runId, body, {\n      ...options,\n      signal: this.controller.signal\n    });\n    this._connected();\n    for await (const event of stream) {\n      __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n    }\n    return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n  }\n  static createThreadAssistantStream(params, thread, options) {\n    const runner = new AssistantStream();\n    runner._run(() => runner._threadAssistantStream(params, thread, {\n      ...options,\n      headers: {\n        ...options?.headers,\n        'X-Stainless-Helper-Method': 'stream'\n      }\n    }));\n    return runner;\n  }\n  static createAssistantStream(threadId, runs, params, options) {\n    const runner = new AssistantStream();\n    runner._run(() => runner._runAssistantStream(threadId, runs, params, {\n      ...options,\n      headers: {\n        ...options?.headers,\n        'X-Stainless-Helper-Method': 'stream'\n      }\n    }));\n    return runner;\n  }\n  currentEvent() {\n    return __classPrivateFieldGet(this, _AssistantStream_currentEvent, \"f\");\n  }\n  currentRun() {\n    return __classPrivateFieldGet(this, _AssistantStream_currentRunSnapshot, \"f\");\n  }\n  currentMessageSnapshot() {\n    return __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\");\n  }\n  currentRunStepSnapshot() {\n    return __classPrivateFieldGet(this, _AssistantStream_currentRunStepSnapshot, \"f\");\n  }\n  async finalRunSteps() {\n    await this.done();\n    return Object.values(__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\"));\n  }\n  async finalMessages() {\n    await this.done();\n    return Object.values(__classPrivateFieldGet(this, _AssistantStream_messageSnapshots, \"f\"));\n  }\n  async finalRun() {\n    await this.done();\n    if (!__classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\")) throw Error('Final run was not received.');\n    return __classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\");\n  }\n  async _createThreadAssistantStream(thread, params, options) {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    const body = {\n      ...params,\n      stream: true\n    };\n    const stream = await thread.createAndRun(body, {\n      ...options,\n      signal: this.controller.signal\n    });\n    this._connected();\n    for await (const event of stream) {\n      __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n    }\n    return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n  }\n  async _createAssistantStream(run, threadId, params, options) {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    const body = {\n      ...params,\n      stream: true\n    };\n    const stream = await run.create(threadId, body, {\n      ...options,\n      signal: this.controller.signal\n    });\n    this._connected();\n    for await (const event of stream) {\n      __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n    }\n    return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n  }\n  static accumulateDelta(acc, delta) {\n    for (const [key, deltaValue] of Object.entries(delta)) {\n      if (!acc.hasOwnProperty(key)) {\n        acc[key] = deltaValue;\n        continue;\n      }\n      let accValue = acc[key];\n      if (accValue === null || accValue === undefined) {\n        acc[key] = deltaValue;\n        continue;\n      }\n      // We don't accumulate these special properties\n      if (key === 'index' || key === 'type') {\n        acc[key] = deltaValue;\n        continue;\n      }\n      // Type-specific accumulation logic\n      if (typeof accValue === 'string' && typeof deltaValue === 'string') {\n        accValue += deltaValue;\n      } else if (typeof accValue === 'number' && typeof deltaValue === 'number') {\n        accValue += deltaValue;\n      } else if (_core_mjs__WEBPACK_IMPORTED_MODULE_3__.isObj(accValue) && _core_mjs__WEBPACK_IMPORTED_MODULE_3__.isObj(deltaValue)) {\n        accValue = this.accumulateDelta(accValue, deltaValue);\n      } else if (Array.isArray(accValue) && Array.isArray(deltaValue)) {\n        if (accValue.every(x => typeof x === 'string' || typeof x === 'number')) {\n          accValue.push(...deltaValue); // Use spread syntax for efficient addition\n          continue;\n        }\n        for (const deltaEntry of deltaValue) {\n          if (!_core_mjs__WEBPACK_IMPORTED_MODULE_3__.isObj(deltaEntry)) {\n            throw new Error(`Expected array delta entry to be an object but got: ${deltaEntry}`);\n          }\n          const index = deltaEntry['index'];\n          if (index == null) {\n            console.error(deltaEntry);\n            throw new Error('Expected array delta entry to have an `index` property');\n          }\n          if (typeof index !== 'number') {\n            throw new Error(`Expected array delta entry \\`index\\` property to be a number but got ${index}`);\n          }\n          const accEntry = accValue[index];\n          if (accEntry == null) {\n            accValue.push(deltaEntry);\n          } else {\n            accValue[index] = this.accumulateDelta(accEntry, deltaEntry);\n          }\n        }\n        continue;\n      } else {\n        throw Error(`Unhandled record type: ${key}, deltaValue: ${deltaValue}, accValue: ${accValue}`);\n      }\n      acc[key] = accValue;\n    }\n    return acc;\n  }\n  _addRun(run) {\n    return run;\n  }\n  async _threadAssistantStream(params, thread, options) {\n    return await this._createThreadAssistantStream(thread, params, options);\n  }\n  async _runAssistantStream(threadId, runs, params, options) {\n    return await this._createAssistantStream(runs, threadId, params, options);\n  }\n  async _runToolAssistantStream(threadId, runId, runs, params, options) {\n    return await this._createToolAssistantStream(runs, threadId, runId, params, options);\n  }\n}\n_AssistantStream_addEvent = function _AssistantStream_addEvent(event) {\n  if (this.ended) return;\n  __classPrivateFieldSet(this, _AssistantStream_currentEvent, event, \"f\");\n  __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleEvent).call(this, event);\n  switch (event.event) {\n    case 'thread.created':\n      //No action on this event.\n      break;\n    case 'thread.run.created':\n    case 'thread.run.queued':\n    case 'thread.run.in_progress':\n    case 'thread.run.requires_action':\n    case 'thread.run.completed':\n    case 'thread.run.incomplete':\n    case 'thread.run.failed':\n    case 'thread.run.cancelling':\n    case 'thread.run.cancelled':\n    case 'thread.run.expired':\n      __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleRun).call(this, event);\n      break;\n    case 'thread.run.step.created':\n    case 'thread.run.step.in_progress':\n    case 'thread.run.step.delta':\n    case 'thread.run.step.completed':\n    case 'thread.run.step.failed':\n    case 'thread.run.step.cancelled':\n    case 'thread.run.step.expired':\n      __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleRunStep).call(this, event);\n      break;\n    case 'thread.message.created':\n    case 'thread.message.in_progress':\n    case 'thread.message.delta':\n    case 'thread.message.completed':\n    case 'thread.message.incomplete':\n      __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleMessage).call(this, event);\n      break;\n    case 'error':\n      //This is included for completeness, but errors are processed in the SSE event processing so this should not occur\n      throw new Error('Encountered an error event in event processing - errors should be processed earlier');\n    default:\n      assertNever(event);\n  }\n}, _AssistantStream_endRequest = function _AssistantStream_endRequest() {\n  if (this.ended) {\n    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError(`stream has ended, this shouldn't happen`);\n  }\n  if (!__classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\")) throw Error('Final run has not been received');\n  return __classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\");\n}, _AssistantStream_handleMessage = function _AssistantStream_handleMessage(event) {\n  const [accumulatedMessage, newContent] = __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateMessage).call(this, event, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n  __classPrivateFieldSet(this, _AssistantStream_messageSnapshot, accumulatedMessage, \"f\");\n  __classPrivateFieldGet(this, _AssistantStream_messageSnapshots, \"f\")[accumulatedMessage.id] = accumulatedMessage;\n  for (const content of newContent) {\n    const snapshotContent = accumulatedMessage.content[content.index];\n    if (snapshotContent?.type == 'text') {\n      this._emit('textCreated', snapshotContent.text);\n    }\n  }\n  switch (event.event) {\n    case 'thread.message.created':\n      this._emit('messageCreated', event.data);\n      break;\n    case 'thread.message.in_progress':\n      break;\n    case 'thread.message.delta':\n      this._emit('messageDelta', event.data.delta, accumulatedMessage);\n      if (event.data.delta.content) {\n        for (const content of event.data.delta.content) {\n          //If it is text delta, emit a text delta event\n          if (content.type == 'text' && content.text) {\n            let textDelta = content.text;\n            let snapshot = accumulatedMessage.content[content.index];\n            if (snapshot && snapshot.type == 'text') {\n              this._emit('textDelta', textDelta, snapshot.text);\n            } else {\n              throw Error('The snapshot associated with this text delta is not text or missing');\n            }\n          }\n          if (content.index != __classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\")) {\n            //See if we have in progress content\n            if (__classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\")) {\n              switch (__classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").type) {\n                case 'text':\n                  this._emit('textDone', __classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").text, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n                  break;\n                case 'image_file':\n                  this._emit('imageFileDone', __classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").image_file, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n                  break;\n              }\n            }\n            __classPrivateFieldSet(this, _AssistantStream_currentContentIndex, content.index, \"f\");\n          }\n          __classPrivateFieldSet(this, _AssistantStream_currentContent, accumulatedMessage.content[content.index], \"f\");\n        }\n      }\n      break;\n    case 'thread.message.completed':\n    case 'thread.message.incomplete':\n      //We emit the latest content we were working on on completion (including incomplete)\n      if (__classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\") !== undefined) {\n        const currentContent = event.data.content[__classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\")];\n        if (currentContent) {\n          switch (currentContent.type) {\n            case 'image_file':\n              this._emit('imageFileDone', currentContent.image_file, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n              break;\n            case 'text':\n              this._emit('textDone', currentContent.text, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n              break;\n          }\n        }\n      }\n      if (__classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\")) {\n        this._emit('messageDone', event.data);\n      }\n      __classPrivateFieldSet(this, _AssistantStream_messageSnapshot, undefined, \"f\");\n  }\n}, _AssistantStream_handleRunStep = function _AssistantStream_handleRunStep(event) {\n  const accumulatedRunStep = __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateRunStep).call(this, event);\n  __classPrivateFieldSet(this, _AssistantStream_currentRunStepSnapshot, accumulatedRunStep, \"f\");\n  switch (event.event) {\n    case 'thread.run.step.created':\n      this._emit('runStepCreated', event.data);\n      break;\n    case 'thread.run.step.delta':\n      const delta = event.data.delta;\n      if (delta.step_details && delta.step_details.type == 'tool_calls' && delta.step_details.tool_calls && accumulatedRunStep.step_details.type == 'tool_calls') {\n        for (const toolCall of delta.step_details.tool_calls) {\n          if (toolCall.index == __classPrivateFieldGet(this, _AssistantStream_currentToolCallIndex, \"f\")) {\n            this._emit('toolCallDelta', toolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index]);\n          } else {\n            if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\n              this._emit('toolCallDone', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n            }\n            __classPrivateFieldSet(this, _AssistantStream_currentToolCallIndex, toolCall.index, \"f\");\n            __classPrivateFieldSet(this, _AssistantStream_currentToolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index], \"f\");\n            if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) this._emit('toolCallCreated', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n          }\n        }\n      }\n      this._emit('runStepDelta', event.data.delta, accumulatedRunStep);\n      break;\n    case 'thread.run.step.completed':\n    case 'thread.run.step.failed':\n    case 'thread.run.step.cancelled':\n    case 'thread.run.step.expired':\n      __classPrivateFieldSet(this, _AssistantStream_currentRunStepSnapshot, undefined, \"f\");\n      const details = event.data.step_details;\n      if (details.type == 'tool_calls') {\n        if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\n          this._emit('toolCallDone', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n          __classPrivateFieldSet(this, _AssistantStream_currentToolCall, undefined, \"f\");\n        }\n      }\n      this._emit('runStepDone', event.data, accumulatedRunStep);\n      break;\n    case 'thread.run.step.in_progress':\n      break;\n  }\n}, _AssistantStream_handleEvent = function _AssistantStream_handleEvent(event) {\n  __classPrivateFieldGet(this, _AssistantStream_events, \"f\").push(event);\n  this._emit('event', event);\n}, _AssistantStream_accumulateRunStep = function _AssistantStream_accumulateRunStep(event) {\n  switch (event.event) {\n    case 'thread.run.step.created':\n      __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = event.data;\n      return event.data;\n    case 'thread.run.step.delta':\n      let snapshot = __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n      if (!snapshot) {\n        throw Error('Received a RunStepDelta before creation of a snapshot');\n      }\n      let data = event.data;\n      if (data.delta) {\n        const accumulated = AssistantStream.accumulateDelta(snapshot, data.delta);\n        __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = accumulated;\n      }\n      return __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n    case 'thread.run.step.completed':\n    case 'thread.run.step.failed':\n    case 'thread.run.step.cancelled':\n    case 'thread.run.step.expired':\n    case 'thread.run.step.in_progress':\n      __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = event.data;\n      break;\n  }\n  if (__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id]) return __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n  throw new Error('No snapshot available');\n}, _AssistantStream_accumulateMessage = function _AssistantStream_accumulateMessage(event, snapshot) {\n  let newContent = [];\n  switch (event.event) {\n    case 'thread.message.created':\n      //On creation the snapshot is just the initial message\n      return [event.data, newContent];\n    case 'thread.message.delta':\n      if (!snapshot) {\n        throw Error('Received a delta with no existing snapshot (there should be one from message creation)');\n      }\n      let data = event.data;\n      //If this delta does not have content, nothing to process\n      if (data.delta.content) {\n        for (const contentElement of data.delta.content) {\n          if (contentElement.index in snapshot.content) {\n            let currentContent = snapshot.content[contentElement.index];\n            snapshot.content[contentElement.index] = __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateContent).call(this, contentElement, currentContent);\n          } else {\n            snapshot.content[contentElement.index] = contentElement;\n            // This is a new element\n            newContent.push(contentElement);\n          }\n        }\n      }\n      return [snapshot, newContent];\n    case 'thread.message.in_progress':\n    case 'thread.message.completed':\n    case 'thread.message.incomplete':\n      //No changes on other thread events\n      if (snapshot) {\n        return [snapshot, newContent];\n      } else {\n        throw Error('Received thread message event with no existing snapshot');\n      }\n  }\n  throw Error('Tried to accumulate a non-message event');\n}, _AssistantStream_accumulateContent = function _AssistantStream_accumulateContent(contentElement, currentContent) {\n  return AssistantStream.accumulateDelta(currentContent, contentElement);\n}, _AssistantStream_handleRun = function _AssistantStream_handleRun(event) {\n  __classPrivateFieldSet(this, _AssistantStream_currentRunSnapshot, event.data, \"f\");\n  switch (event.event) {\n    case 'thread.run.created':\n      break;\n    case 'thread.run.queued':\n      break;\n    case 'thread.run.in_progress':\n      break;\n    case 'thread.run.requires_action':\n    case 'thread.run.cancelled':\n    case 'thread.run.failed':\n    case 'thread.run.completed':\n    case 'thread.run.expired':\n      __classPrivateFieldSet(this, _AssistantStream_finalRun, event.data, \"f\");\n      if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\n        this._emit('toolCallDone', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n        __classPrivateFieldSet(this, _AssistantStream_currentToolCall, undefined, \"f\");\n      }\n      break;\n    case 'thread.run.cancelling':\n      break;\n  }\n};\nfunction assertNever(_x) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/AssistantStream.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/ChatCompletionRunner.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/openai/lib/ChatCompletionRunner.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionRunner: () => (/* binding */ ChatCompletionRunner)\n/* harmony export */ });\n/* harmony import */ var _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractChatCompletionRunner.mjs */ \"(rsc)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs\");\n/* harmony import */ var _chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chatCompletionUtils.mjs */ \"(rsc)/./node_modules/openai/lib/chatCompletionUtils.mjs\");\n\n\nclass ChatCompletionRunner extends _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__.AbstractChatCompletionRunner {\n  /** @deprecated - please use `runTools` instead. */\n  static runFunctions(client, params, options) {\n    const runner = new ChatCompletionRunner();\n    const opts = {\n      ...options,\n      headers: {\n        ...options?.headers,\n        'X-Stainless-Helper-Method': 'runFunctions'\n      }\n    };\n    runner._run(() => runner._runFunctions(client, params, opts));\n    return runner;\n  }\n  static runTools(client, params, options) {\n    const runner = new ChatCompletionRunner();\n    const opts = {\n      ...options,\n      headers: {\n        ...options?.headers,\n        'X-Stainless-Helper-Method': 'runTools'\n      }\n    };\n    runner._run(() => runner._runTools(client, params, opts));\n    return runner;\n  }\n  _addMessage(message, emit = true) {\n    super._addMessage(message, emit);\n    if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && message.content) {\n      this._emit('content', message.content);\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9DaGF0Q29tcGxldGlvblJ1bm5lci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1GO0FBQ3BCO0FBQ3hELE1BQU1FLG9CQUFvQixTQUFTRiwyRkFBNEIsQ0FBQztFQUNuRTtFQUNBLE9BQU9HLFlBQVlBLENBQUNDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7SUFDekMsTUFBTUMsTUFBTSxHQUFHLElBQUlMLG9CQUFvQixDQUFDLENBQUM7SUFDekMsTUFBTU0sSUFBSSxHQUFHO01BQ1QsR0FBR0YsT0FBTztNQUNWRyxPQUFPLEVBQUU7UUFBRSxHQUFHSCxPQUFPLEVBQUVHLE9BQU87UUFBRSwyQkFBMkIsRUFBRTtNQUFlO0lBQ2hGLENBQUM7SUFDREYsTUFBTSxDQUFDRyxJQUFJLENBQUMsTUFBTUgsTUFBTSxDQUFDSSxhQUFhLENBQUNQLE1BQU0sRUFBRUMsTUFBTSxFQUFFRyxJQUFJLENBQUMsQ0FBQztJQUM3RCxPQUFPRCxNQUFNO0VBQ2pCO0VBQ0EsT0FBT0ssUUFBUUEsQ0FBQ1IsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtJQUNyQyxNQUFNQyxNQUFNLEdBQUcsSUFBSUwsb0JBQW9CLENBQUMsQ0FBQztJQUN6QyxNQUFNTSxJQUFJLEdBQUc7TUFDVCxHQUFHRixPQUFPO01BQ1ZHLE9BQU8sRUFBRTtRQUFFLEdBQUdILE9BQU8sRUFBRUcsT0FBTztRQUFFLDJCQUEyQixFQUFFO01BQVc7SUFDNUUsQ0FBQztJQUNERixNQUFNLENBQUNHLElBQUksQ0FBQyxNQUFNSCxNQUFNLENBQUNNLFNBQVMsQ0FBQ1QsTUFBTSxFQUFFQyxNQUFNLEVBQUVHLElBQUksQ0FBQyxDQUFDO0lBQ3pELE9BQU9ELE1BQU07RUFDakI7RUFDQU8sV0FBV0EsQ0FBQ0MsT0FBTyxFQUFFQyxJQUFJLEdBQUcsSUFBSSxFQUFFO0lBQzlCLEtBQUssQ0FBQ0YsV0FBVyxDQUFDQyxPQUFPLEVBQUVDLElBQUksQ0FBQztJQUNoQyxJQUFJZiw0RUFBa0IsQ0FBQ2MsT0FBTyxDQUFDLElBQUlBLE9BQU8sQ0FBQ0UsT0FBTyxFQUFFO01BQ2hELElBQUksQ0FBQ0MsS0FBSyxDQUFDLFNBQVMsRUFBRUgsT0FBTyxDQUFDRSxPQUFPLENBQUM7SUFDMUM7RUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbGliL0NoYXRDb21wbGV0aW9uUnVubmVyLm1qcz8xZTBkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0Q2hhdENvbXBsZXRpb25SdW5uZXIsIH0gZnJvbSBcIi4vQWJzdHJhY3RDaGF0Q29tcGxldGlvblJ1bm5lci5tanNcIjtcbmltcG9ydCB7IGlzQXNzaXN0YW50TWVzc2FnZSB9IGZyb20gXCIuL2NoYXRDb21wbGV0aW9uVXRpbHMubWpzXCI7XG5leHBvcnQgY2xhc3MgQ2hhdENvbXBsZXRpb25SdW5uZXIgZXh0ZW5kcyBBYnN0cmFjdENoYXRDb21wbGV0aW9uUnVubmVyIHtcbiAgICAvKiogQGRlcHJlY2F0ZWQgLSBwbGVhc2UgdXNlIGBydW5Ub29sc2AgaW5zdGVhZC4gKi9cbiAgICBzdGF0aWMgcnVuRnVuY3Rpb25zKGNsaWVudCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHJ1bm5lciA9IG5ldyBDaGF0Q29tcGxldGlvblJ1bm5lcigpO1xuICAgICAgICBjb25zdCBvcHRzID0ge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgLi4ub3B0aW9ucz8uaGVhZGVycywgJ1gtU3RhaW5sZXNzLUhlbHBlci1NZXRob2QnOiAncnVuRnVuY3Rpb25zJyB9LFxuICAgICAgICB9O1xuICAgICAgICBydW5uZXIuX3J1bigoKSA9PiBydW5uZXIuX3J1bkZ1bmN0aW9ucyhjbGllbnQsIHBhcmFtcywgb3B0cykpO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgIH1cbiAgICBzdGF0aWMgcnVuVG9vbHMoY2xpZW50LCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcnVubmVyID0gbmV3IENoYXRDb21wbGV0aW9uUnVubmVyKCk7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAuLi5vcHRpb25zPy5oZWFkZXJzLCAnWC1TdGFpbmxlc3MtSGVscGVyLU1ldGhvZCc6ICdydW5Ub29scycgfSxcbiAgICAgICAgfTtcbiAgICAgICAgcnVubmVyLl9ydW4oKCkgPT4gcnVubmVyLl9ydW5Ub29scyhjbGllbnQsIHBhcmFtcywgb3B0cykpO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgIH1cbiAgICBfYWRkTWVzc2FnZShtZXNzYWdlLCBlbWl0ID0gdHJ1ZSkge1xuICAgICAgICBzdXBlci5fYWRkTWVzc2FnZShtZXNzYWdlLCBlbWl0KTtcbiAgICAgICAgaWYgKGlzQXNzaXN0YW50TWVzc2FnZShtZXNzYWdlKSAmJiBtZXNzYWdlLmNvbnRlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXQoJ2NvbnRlbnQnLCBtZXNzYWdlLmNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2hhdENvbXBsZXRpb25SdW5uZXIubWpzLm1hcCJdLCJuYW1lcyI6WyJBYnN0cmFjdENoYXRDb21wbGV0aW9uUnVubmVyIiwiaXNBc3Npc3RhbnRNZXNzYWdlIiwiQ2hhdENvbXBsZXRpb25SdW5uZXIiLCJydW5GdW5jdGlvbnMiLCJjbGllbnQiLCJwYXJhbXMiLCJvcHRpb25zIiwicnVubmVyIiwib3B0cyIsImhlYWRlcnMiLCJfcnVuIiwiX3J1bkZ1bmN0aW9ucyIsInJ1blRvb2xzIiwiX3J1blRvb2xzIiwiX2FkZE1lc3NhZ2UiLCJtZXNzYWdlIiwiZW1pdCIsImNvbnRlbnQiLCJfZW1pdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/ChatCompletionRunner.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/ChatCompletionStream.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/openai/lib/ChatCompletionStream.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionStream: () => (/* binding */ ChatCompletionStream)\n/* harmony export */ });\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractChatCompletionRunner.mjs */ \"(rsc)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs\");\n/* harmony import */ var _streaming_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../streaming.mjs */ \"(rsc)/./node_modules/openai/streaming.mjs\");\n/* harmony import */ var _lib_parser_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/parser.mjs */ \"(rsc)/./node_modules/openai/lib/parser.mjs\");\n/* harmony import */ var _vendor_partial_json_parser_parser_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../_vendor/partial-json-parser/parser.mjs */ \"(rsc)/./node_modules/openai/_vendor/partial-json-parser/parser.mjs\");\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ChatCompletionStream_instances, _ChatCompletionStream_params, _ChatCompletionStream_choiceEventStates, _ChatCompletionStream_currentChatCompletionSnapshot, _ChatCompletionStream_beginRequest, _ChatCompletionStream_getChoiceEventState, _ChatCompletionStream_addChunk, _ChatCompletionStream_emitToolCallDoneEvent, _ChatCompletionStream_emitContentDoneEvents, _ChatCompletionStream_endRequest, _ChatCompletionStream_getAutoParseableResponseFormat, _ChatCompletionStream_accumulateChatCompletion;\n\n\n\n\n\nclass ChatCompletionStream extends _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__.AbstractChatCompletionRunner {\n  constructor(params) {\n    super();\n    _ChatCompletionStream_instances.add(this);\n    _ChatCompletionStream_params.set(this, void 0);\n    _ChatCompletionStream_choiceEventStates.set(this, void 0);\n    _ChatCompletionStream_currentChatCompletionSnapshot.set(this, void 0);\n    __classPrivateFieldSet(this, _ChatCompletionStream_params, params, \"f\");\n    __classPrivateFieldSet(this, _ChatCompletionStream_choiceEventStates, [], \"f\");\n  }\n  get currentChatCompletionSnapshot() {\n    return __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n  }\n  /**\n   * Intended for use on the frontend, consuming a stream produced with\n   * `.toReadableStream()` on the backend.\n   *\n   * Note that messages sent to the model do not appear in `.on('message')`\n   * in this context.\n   */\n  static fromReadableStream(stream) {\n    const runner = new ChatCompletionStream(null);\n    runner._run(() => runner._fromReadableStream(stream));\n    return runner;\n  }\n  static createChatCompletion(client, params, options) {\n    const runner = new ChatCompletionStream(params);\n    runner._run(() => runner._runChatCompletion(client, {\n      ...params,\n      stream: true\n    }, {\n      ...options,\n      headers: {\n        ...options?.headers,\n        'X-Stainless-Helper-Method': 'stream'\n      }\n    }));\n    return runner;\n  }\n  async _createChatCompletion(client, params, options) {\n    super._createChatCompletion;\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n    const stream = await client.chat.completions.create({\n      ...params,\n      stream: true\n    }, {\n      ...options,\n      signal: this.controller.signal\n    });\n    this._connected();\n    for await (const chunk of stream) {\n      __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError();\n    }\n    return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n  }\n  async _fromReadableStream(readableStream, options) {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n    this._connected();\n    const stream = _streaming_mjs__WEBPACK_IMPORTED_MODULE_2__.Stream.fromReadableStream(readableStream, this.controller);\n    let chatId;\n    for await (const chunk of stream) {\n      if (chatId && chatId !== chunk.id) {\n        // A new request has been made.\n        this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n      }\n      __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n      chatId = chunk.id;\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError();\n    }\n    return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n  }\n  [(_ChatCompletionStream_params = new WeakMap(), _ChatCompletionStream_choiceEventStates = new WeakMap(), _ChatCompletionStream_currentChatCompletionSnapshot = new WeakMap(), _ChatCompletionStream_instances = new WeakSet(), _ChatCompletionStream_beginRequest = function _ChatCompletionStream_beginRequest() {\n    if (this.ended) return;\n    __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n  }, _ChatCompletionStream_getChoiceEventState = function _ChatCompletionStream_getChoiceEventState(choice) {\n    let state = __classPrivateFieldGet(this, _ChatCompletionStream_choiceEventStates, \"f\")[choice.index];\n    if (state) {\n      return state;\n    }\n    state = {\n      content_done: false,\n      refusal_done: false,\n      logprobs_content_done: false,\n      logprobs_refusal_done: false,\n      done_tool_calls: new Set(),\n      current_tool_call_index: null\n    };\n    __classPrivateFieldGet(this, _ChatCompletionStream_choiceEventStates, \"f\")[choice.index] = state;\n    return state;\n  }, _ChatCompletionStream_addChunk = function _ChatCompletionStream_addChunk(chunk) {\n    if (this.ended) return;\n    const completion = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_accumulateChatCompletion).call(this, chunk);\n    this._emit('chunk', chunk, completion);\n    for (const choice of chunk.choices) {\n      const choiceSnapshot = completion.choices[choice.index];\n      if (choice.delta.content != null && choiceSnapshot.message?.role === 'assistant' && choiceSnapshot.message?.content) {\n        this._emit('content', choice.delta.content, choiceSnapshot.message.content);\n        this._emit('content.delta', {\n          delta: choice.delta.content,\n          snapshot: choiceSnapshot.message.content,\n          parsed: choiceSnapshot.message.parsed\n        });\n      }\n      if (choice.delta.refusal != null && choiceSnapshot.message?.role === 'assistant' && choiceSnapshot.message?.refusal) {\n        this._emit('refusal.delta', {\n          delta: choice.delta.refusal,\n          snapshot: choiceSnapshot.message.refusal\n        });\n      }\n      if (choice.logprobs?.content != null && choiceSnapshot.message?.role === 'assistant') {\n        this._emit('logprobs.content.delta', {\n          content: choice.logprobs?.content,\n          snapshot: choiceSnapshot.logprobs?.content ?? []\n        });\n      }\n      if (choice.logprobs?.refusal != null && choiceSnapshot.message?.role === 'assistant') {\n        this._emit('logprobs.refusal.delta', {\n          refusal: choice.logprobs?.refusal,\n          snapshot: choiceSnapshot.logprobs?.refusal ?? []\n        });\n      }\n      const state = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\n      if (choiceSnapshot.finish_reason) {\n        __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitContentDoneEvents).call(this, choiceSnapshot);\n        if (state.current_tool_call_index != null) {\n          __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitToolCallDoneEvent).call(this, choiceSnapshot, state.current_tool_call_index);\n        }\n      }\n      for (const toolCall of choice.delta.tool_calls ?? []) {\n        if (state.current_tool_call_index !== toolCall.index) {\n          __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitContentDoneEvents).call(this, choiceSnapshot);\n          // new tool call started, the previous one is done\n          if (state.current_tool_call_index != null) {\n            __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitToolCallDoneEvent).call(this, choiceSnapshot, state.current_tool_call_index);\n          }\n        }\n        state.current_tool_call_index = toolCall.index;\n      }\n      for (const toolCallDelta of choice.delta.tool_calls ?? []) {\n        const toolCallSnapshot = choiceSnapshot.message.tool_calls?.[toolCallDelta.index];\n        if (!toolCallSnapshot?.type) {\n          continue;\n        }\n        if (toolCallSnapshot?.type === 'function') {\n          this._emit('tool_calls.function.arguments.delta', {\n            name: toolCallSnapshot.function?.name,\n            index: toolCallDelta.index,\n            arguments: toolCallSnapshot.function.arguments,\n            parsed_arguments: toolCallSnapshot.function.parsed_arguments,\n            arguments_delta: toolCallDelta.function?.arguments ?? ''\n          });\n        } else {\n          assertNever(toolCallSnapshot?.type);\n        }\n      }\n    }\n  }, _ChatCompletionStream_emitToolCallDoneEvent = function _ChatCompletionStream_emitToolCallDoneEvent(choiceSnapshot, toolCallIndex) {\n    const state = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\n    if (state.done_tool_calls.has(toolCallIndex)) {\n      // we've already fired the done event\n      return;\n    }\n    const toolCallSnapshot = choiceSnapshot.message.tool_calls?.[toolCallIndex];\n    if (!toolCallSnapshot) {\n      throw new Error('no tool call snapshot');\n    }\n    if (!toolCallSnapshot.type) {\n      throw new Error('tool call snapshot missing `type`');\n    }\n    if (toolCallSnapshot.type === 'function') {\n      const inputTool = __classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\")?.tools?.find(tool => tool.type === 'function' && tool.function.name === toolCallSnapshot.function.name);\n      this._emit('tool_calls.function.arguments.done', {\n        name: toolCallSnapshot.function.name,\n        index: toolCallIndex,\n        arguments: toolCallSnapshot.function.arguments,\n        parsed_arguments: (0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_3__.isAutoParsableTool)(inputTool) ? inputTool.$parseRaw(toolCallSnapshot.function.arguments) : inputTool?.function.strict ? JSON.parse(toolCallSnapshot.function.arguments) : null\n      });\n    } else {\n      assertNever(toolCallSnapshot.type);\n    }\n  }, _ChatCompletionStream_emitContentDoneEvents = function _ChatCompletionStream_emitContentDoneEvents(choiceSnapshot) {\n    const state = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\n    if (choiceSnapshot.message.content && !state.content_done) {\n      state.content_done = true;\n      const responseFormat = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getAutoParseableResponseFormat).call(this);\n      this._emit('content.done', {\n        content: choiceSnapshot.message.content,\n        parsed: responseFormat ? responseFormat.$parseRaw(choiceSnapshot.message.content) : null\n      });\n    }\n    if (choiceSnapshot.message.refusal && !state.refusal_done) {\n      state.refusal_done = true;\n      this._emit('refusal.done', {\n        refusal: choiceSnapshot.message.refusal\n      });\n    }\n    if (choiceSnapshot.logprobs?.content && !state.logprobs_content_done) {\n      state.logprobs_content_done = true;\n      this._emit('logprobs.content.done', {\n        content: choiceSnapshot.logprobs.content\n      });\n    }\n    if (choiceSnapshot.logprobs?.refusal && !state.logprobs_refusal_done) {\n      state.logprobs_refusal_done = true;\n      this._emit('logprobs.refusal.done', {\n        refusal: choiceSnapshot.logprobs.refusal\n      });\n    }\n  }, _ChatCompletionStream_endRequest = function _ChatCompletionStream_endRequest() {\n    if (this.ended) {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`stream has ended, this shouldn't happen`);\n    }\n    const snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n    if (!snapshot) {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`request ended without sending any chunks`);\n    }\n    __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n    __classPrivateFieldSet(this, _ChatCompletionStream_choiceEventStates, [], \"f\");\n    return finalizeChatCompletion(snapshot, __classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\"));\n  }, _ChatCompletionStream_getAutoParseableResponseFormat = function _ChatCompletionStream_getAutoParseableResponseFormat() {\n    const responseFormat = __classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\")?.response_format;\n    if ((0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_3__.isAutoParsableResponseFormat)(responseFormat)) {\n      return responseFormat;\n    }\n    return null;\n  }, _ChatCompletionStream_accumulateChatCompletion = function _ChatCompletionStream_accumulateChatCompletion(chunk) {\n    var _a, _b, _c, _d;\n    let snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n    const {\n      choices,\n      ...rest\n    } = chunk;\n    if (!snapshot) {\n      snapshot = __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, {\n        ...rest,\n        choices: []\n      }, \"f\");\n    } else {\n      Object.assign(snapshot, rest);\n    }\n    for (const {\n      delta,\n      finish_reason,\n      index,\n      logprobs = null,\n      ...other\n    } of chunk.choices) {\n      let choice = snapshot.choices[index];\n      if (!choice) {\n        choice = snapshot.choices[index] = {\n          finish_reason,\n          index,\n          message: {},\n          logprobs,\n          ...other\n        };\n      }\n      if (logprobs) {\n        if (!choice.logprobs) {\n          choice.logprobs = Object.assign({}, logprobs);\n        } else {\n          const {\n            content,\n            refusal,\n            ...rest\n          } = logprobs;\n          assertIsEmpty(rest);\n          Object.assign(choice.logprobs, rest);\n          if (content) {\n            (_a = choice.logprobs).content ?? (_a.content = []);\n            choice.logprobs.content.push(...content);\n          }\n          if (refusal) {\n            (_b = choice.logprobs).refusal ?? (_b.refusal = []);\n            choice.logprobs.refusal.push(...refusal);\n          }\n        }\n      }\n      if (finish_reason) {\n        choice.finish_reason = finish_reason;\n        if (__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\") && (0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_3__.hasAutoParseableInput)(__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\"))) {\n          if (finish_reason === 'length') {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.LengthFinishReasonError();\n          }\n          if (finish_reason === 'content_filter') {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ContentFilterFinishReasonError();\n          }\n        }\n      }\n      Object.assign(choice, other);\n      if (!delta) continue; // Shouldn't happen; just in case.\n      const {\n        content,\n        refusal,\n        function_call,\n        role,\n        tool_calls,\n        ...rest\n      } = delta;\n      assertIsEmpty(rest);\n      Object.assign(choice.message, rest);\n      if (refusal) {\n        choice.message.refusal = (choice.message.refusal || '') + refusal;\n      }\n      if (role) choice.message.role = role;\n      if (function_call) {\n        if (!choice.message.function_call) {\n          choice.message.function_call = function_call;\n        } else {\n          if (function_call.name) choice.message.function_call.name = function_call.name;\n          if (function_call.arguments) {\n            (_c = choice.message.function_call).arguments ?? (_c.arguments = '');\n            choice.message.function_call.arguments += function_call.arguments;\n          }\n        }\n      }\n      if (content) {\n        choice.message.content = (choice.message.content || '') + content;\n        if (!choice.message.refusal && __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getAutoParseableResponseFormat).call(this)) {\n          choice.message.parsed = (0,_vendor_partial_json_parser_parser_mjs__WEBPACK_IMPORTED_MODULE_4__.partialParse)(choice.message.content);\n        }\n      }\n      if (tool_calls) {\n        if (!choice.message.tool_calls) choice.message.tool_calls = [];\n        for (const {\n          index,\n          id,\n          type,\n          function: fn,\n          ...rest\n        } of tool_calls) {\n          const tool_call = (_d = choice.message.tool_calls)[index] ?? (_d[index] = {});\n          Object.assign(tool_call, rest);\n          if (id) tool_call.id = id;\n          if (type) tool_call.type = type;\n          if (fn) tool_call.function ?? (tool_call.function = {\n            name: fn.name ?? '',\n            arguments: ''\n          });\n          if (fn?.name) tool_call.function.name = fn.name;\n          if (fn?.arguments) {\n            tool_call.function.arguments += fn.arguments;\n            if ((0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_3__.shouldParseToolCall)(__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\"), tool_call)) {\n              tool_call.function.parsed_arguments = (0,_vendor_partial_json_parser_parser_mjs__WEBPACK_IMPORTED_MODULE_4__.partialParse)(tool_call.function.arguments);\n            }\n          }\n        }\n      }\n    }\n    return snapshot;\n  }, Symbol.asyncIterator)]() {\n    const pushQueue = [];\n    const readQueue = [];\n    let done = false;\n    this.on('chunk', chunk => {\n      const reader = readQueue.shift();\n      if (reader) {\n        reader.resolve(chunk);\n      } else {\n        pushQueue.push(chunk);\n      }\n    });\n    this.on('end', () => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.resolve(undefined);\n      }\n      readQueue.length = 0;\n    });\n    this.on('abort', err => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n    this.on('error', err => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n    return {\n      next: async () => {\n        if (!pushQueue.length) {\n          if (done) {\n            return {\n              value: undefined,\n              done: true\n            };\n          }\n          return new Promise((resolve, reject) => readQueue.push({\n            resolve,\n            reject\n          })).then(chunk => chunk ? {\n            value: chunk,\n            done: false\n          } : {\n            value: undefined,\n            done: true\n          });\n        }\n        const chunk = pushQueue.shift();\n        return {\n          value: chunk,\n          done: false\n        };\n      },\n      return: async () => {\n        this.abort();\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  toReadableStream() {\n    const stream = new _streaming_mjs__WEBPACK_IMPORTED_MODULE_2__.Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n    return stream.toReadableStream();\n  }\n}\nfunction finalizeChatCompletion(snapshot, params) {\n  const {\n    id,\n    choices,\n    created,\n    model,\n    system_fingerprint,\n    ...rest\n  } = snapshot;\n  const completion = {\n    ...rest,\n    id,\n    choices: choices.map(({\n      message,\n      finish_reason,\n      index,\n      logprobs,\n      ...choiceRest\n    }) => {\n      if (!finish_reason) {\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing finish_reason for choice ${index}`);\n      }\n      const {\n        content = null,\n        function_call,\n        tool_calls,\n        ...messageRest\n      } = message;\n      const role = message.role; // this is what we expect; in theory it could be different which would make our types a slight lie but would be fine.\n      if (!role) {\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing role for choice ${index}`);\n      }\n      if (function_call) {\n        const {\n          arguments: args,\n          name\n        } = function_call;\n        if (args == null) {\n          throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing function_call.arguments for choice ${index}`);\n        }\n        if (!name) {\n          throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing function_call.name for choice ${index}`);\n        }\n        return {\n          ...choiceRest,\n          message: {\n            content,\n            function_call: {\n              arguments: args,\n              name\n            },\n            role,\n            refusal: message.refusal ?? null\n          },\n          finish_reason,\n          index,\n          logprobs\n        };\n      }\n      if (tool_calls) {\n        return {\n          ...choiceRest,\n          index,\n          finish_reason,\n          logprobs,\n          message: {\n            ...messageRest,\n            role,\n            content,\n            refusal: message.refusal ?? null,\n            tool_calls: tool_calls.map((tool_call, i) => {\n              const {\n                function: fn,\n                type,\n                id,\n                ...toolRest\n              } = tool_call;\n              const {\n                arguments: args,\n                name,\n                ...fnRest\n              } = fn || {};\n              if (id == null) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing choices[${index}].tool_calls[${i}].id\\n${str(snapshot)}`);\n              }\n              if (type == null) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing choices[${index}].tool_calls[${i}].type\\n${str(snapshot)}`);\n              }\n              if (name == null) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing choices[${index}].tool_calls[${i}].function.name\\n${str(snapshot)}`);\n              }\n              if (args == null) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing choices[${index}].tool_calls[${i}].function.arguments\\n${str(snapshot)}`);\n              }\n              return {\n                ...toolRest,\n                id,\n                type,\n                function: {\n                  ...fnRest,\n                  name,\n                  arguments: args\n                }\n              };\n            })\n          }\n        };\n      }\n      return {\n        ...choiceRest,\n        message: {\n          ...messageRest,\n          content,\n          role,\n          refusal: message.refusal ?? null\n        },\n        finish_reason,\n        index,\n        logprobs\n      };\n    }),\n    created,\n    model,\n    object: 'chat.completion',\n    ...(system_fingerprint ? {\n      system_fingerprint\n    } : {})\n  };\n  return (0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_3__.maybeParseChatCompletion)(completion, params);\n}\nfunction str(x) {\n  return JSON.stringify(x);\n}\n/**\n * Ensures the given argument is an empty object, useful for\n * asserting that all known properties on an object have been\n * destructured.\n */\nfunction assertIsEmpty(obj) {\n  return;\n}\nfunction assertNever(_x) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/ChatCompletionStream.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionStreamingRunner: () => (/* binding */ ChatCompletionStreamingRunner)\n/* harmony export */ });\n/* harmony import */ var _ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ChatCompletionStream.mjs */ \"(rsc)/./node_modules/openai/lib/ChatCompletionStream.mjs\");\n\nclass ChatCompletionStreamingRunner extends _ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionStream {\n  static fromReadableStream(stream) {\n    const runner = new ChatCompletionStreamingRunner(null);\n    runner._run(() => runner._fromReadableStream(stream));\n    return runner;\n  }\n  /** @deprecated - please use `runTools` instead. */\n  static runFunctions(client, params, options) {\n    const runner = new ChatCompletionStreamingRunner(null);\n    const opts = {\n      ...options,\n      headers: {\n        ...options?.headers,\n        'X-Stainless-Helper-Method': 'runFunctions'\n      }\n    };\n    runner._run(() => runner._runFunctions(client, params, opts));\n    return runner;\n  }\n  static runTools(client, params, options) {\n    const runner = new ChatCompletionStreamingRunner(\n    // @ts-expect-error TODO these types are incompatible\n    params);\n    const opts = {\n      ...options,\n      headers: {\n        ...options?.headers,\n        'X-Stainless-Helper-Method': 'runTools'\n      }\n    };\n    runner._run(() => runner._runTools(client, params, opts));\n    return runner;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9DaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0U7QUFDM0QsTUFBTUMsNkJBQTZCLFNBQVNELDJFQUFvQixDQUFDO0VBQ3BFLE9BQU9FLGtCQUFrQkEsQ0FBQ0MsTUFBTSxFQUFFO0lBQzlCLE1BQU1DLE1BQU0sR0FBRyxJQUFJSCw2QkFBNkIsQ0FBQyxJQUFJLENBQUM7SUFDdERHLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDLE1BQU1ELE1BQU0sQ0FBQ0UsbUJBQW1CLENBQUNILE1BQU0sQ0FBQyxDQUFDO0lBQ3JELE9BQU9DLE1BQU07RUFDakI7RUFDQTtFQUNBLE9BQU9HLFlBQVlBLENBQUNDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7SUFDekMsTUFBTU4sTUFBTSxHQUFHLElBQUlILDZCQUE2QixDQUFDLElBQUksQ0FBQztJQUN0RCxNQUFNVSxJQUFJLEdBQUc7TUFDVCxHQUFHRCxPQUFPO01BQ1ZFLE9BQU8sRUFBRTtRQUFFLEdBQUdGLE9BQU8sRUFBRUUsT0FBTztRQUFFLDJCQUEyQixFQUFFO01BQWU7SUFDaEYsQ0FBQztJQUNEUixNQUFNLENBQUNDLElBQUksQ0FBQyxNQUFNRCxNQUFNLENBQUNTLGFBQWEsQ0FBQ0wsTUFBTSxFQUFFQyxNQUFNLEVBQUVFLElBQUksQ0FBQyxDQUFDO0lBQzdELE9BQU9QLE1BQU07RUFDakI7RUFDQSxPQUFPVSxRQUFRQSxDQUFDTixNQUFNLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO0lBQ3JDLE1BQU1OLE1BQU0sR0FBRyxJQUFJSCw2QkFBNkI7SUFDaEQ7SUFDQVEsTUFBTSxDQUFDO0lBQ1AsTUFBTUUsSUFBSSxHQUFHO01BQ1QsR0FBR0QsT0FBTztNQUNWRSxPQUFPLEVBQUU7UUFBRSxHQUFHRixPQUFPLEVBQUVFLE9BQU87UUFBRSwyQkFBMkIsRUFBRTtNQUFXO0lBQzVFLENBQUM7SUFDRFIsTUFBTSxDQUFDQyxJQUFJLENBQUMsTUFBTUQsTUFBTSxDQUFDVyxTQUFTLENBQUNQLE1BQU0sRUFBRUMsTUFBTSxFQUFFRSxJQUFJLENBQUMsQ0FBQztJQUN6RCxPQUFPUCxNQUFNO0VBQ2pCO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9saWIvQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXIubWpzP2I0ZTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhdENvbXBsZXRpb25TdHJlYW0gfSBmcm9tIFwiLi9DaGF0Q29tcGxldGlvblN0cmVhbS5tanNcIjtcbmV4cG9ydCBjbGFzcyBDaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lciBleHRlbmRzIENoYXRDb21wbGV0aW9uU3RyZWFtIHtcbiAgICBzdGF0aWMgZnJvbVJlYWRhYmxlU3RyZWFtKHN0cmVhbSkge1xuICAgICAgICBjb25zdCBydW5uZXIgPSBuZXcgQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXIobnVsbCk7XG4gICAgICAgIHJ1bm5lci5fcnVuKCgpID0+IHJ1bm5lci5fZnJvbVJlYWRhYmxlU3RyZWFtKHN0cmVhbSkpO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgIH1cbiAgICAvKiogQGRlcHJlY2F0ZWQgLSBwbGVhc2UgdXNlIGBydW5Ub29sc2AgaW5zdGVhZC4gKi9cbiAgICBzdGF0aWMgcnVuRnVuY3Rpb25zKGNsaWVudCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHJ1bm5lciA9IG5ldyBDaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lcihudWxsKTtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7IC4uLm9wdGlvbnM/LmhlYWRlcnMsICdYLVN0YWlubGVzcy1IZWxwZXItTWV0aG9kJzogJ3J1bkZ1bmN0aW9ucycgfSxcbiAgICAgICAgfTtcbiAgICAgICAgcnVubmVyLl9ydW4oKCkgPT4gcnVubmVyLl9ydW5GdW5jdGlvbnMoY2xpZW50LCBwYXJhbXMsIG9wdHMpKTtcbiAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICB9XG4gICAgc3RhdGljIHJ1blRvb2xzKGNsaWVudCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHJ1bm5lciA9IG5ldyBDaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lcihcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBUT0RPIHRoZXNlIHR5cGVzIGFyZSBpbmNvbXBhdGlibGVcbiAgICAgICAgcGFyYW1zKTtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7IC4uLm9wdGlvbnM/LmhlYWRlcnMsICdYLVN0YWlubGVzcy1IZWxwZXItTWV0aG9kJzogJ3J1blRvb2xzJyB9LFxuICAgICAgICB9O1xuICAgICAgICBydW5uZXIuX3J1bigoKSA9PiBydW5uZXIuX3J1blRvb2xzKGNsaWVudCwgcGFyYW1zLCBvcHRzKSk7XG4gICAgICAgIHJldHVybiBydW5uZXI7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXIubWpzLm1hcCJdLCJuYW1lcyI6WyJDaGF0Q29tcGxldGlvblN0cmVhbSIsIkNoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyIiwiZnJvbVJlYWRhYmxlU3RyZWFtIiwic3RyZWFtIiwicnVubmVyIiwiX3J1biIsIl9mcm9tUmVhZGFibGVTdHJlYW0iLCJydW5GdW5jdGlvbnMiLCJjbGllbnQiLCJwYXJhbXMiLCJvcHRpb25zIiwib3B0cyIsImhlYWRlcnMiLCJfcnVuRnVuY3Rpb25zIiwicnVuVG9vbHMiLCJfcnVuVG9vbHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/EventStream.mjs":
/*!*************************************************!*\
  !*** ./node_modules/openai/lib/EventStream.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventStream: () => (/* binding */ EventStream)\n/* harmony export */ });\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _EventStream_instances, _EventStream_connectedPromise, _EventStream_resolveConnectedPromise, _EventStream_rejectConnectedPromise, _EventStream_endPromise, _EventStream_resolveEndPromise, _EventStream_rejectEndPromise, _EventStream_listeners, _EventStream_ended, _EventStream_errored, _EventStream_aborted, _EventStream_catchingPromiseCreated, _EventStream_handleError;\n\nclass EventStream {\n  constructor() {\n    _EventStream_instances.add(this);\n    this.controller = new AbortController();\n    _EventStream_connectedPromise.set(this, void 0);\n    _EventStream_resolveConnectedPromise.set(this, () => {});\n    _EventStream_rejectConnectedPromise.set(this, () => {});\n    _EventStream_endPromise.set(this, void 0);\n    _EventStream_resolveEndPromise.set(this, () => {});\n    _EventStream_rejectEndPromise.set(this, () => {});\n    _EventStream_listeners.set(this, {});\n    _EventStream_ended.set(this, false);\n    _EventStream_errored.set(this, false);\n    _EventStream_aborted.set(this, false);\n    _EventStream_catchingPromiseCreated.set(this, false);\n    __classPrivateFieldSet(this, _EventStream_connectedPromise, new Promise((resolve, reject) => {\n      __classPrivateFieldSet(this, _EventStream_resolveConnectedPromise, resolve, \"f\");\n      __classPrivateFieldSet(this, _EventStream_rejectConnectedPromise, reject, \"f\");\n    }), \"f\");\n    __classPrivateFieldSet(this, _EventStream_endPromise, new Promise((resolve, reject) => {\n      __classPrivateFieldSet(this, _EventStream_resolveEndPromise, resolve, \"f\");\n      __classPrivateFieldSet(this, _EventStream_rejectEndPromise, reject, \"f\");\n    }), \"f\");\n    // Don't let these promises cause unhandled rejection errors.\n    // we will manually cause an unhandled rejection error later\n    // if the user hasn't registered any error listener or called\n    // any promise-returning method.\n    __classPrivateFieldGet(this, _EventStream_connectedPromise, \"f\").catch(() => {});\n    __classPrivateFieldGet(this, _EventStream_endPromise, \"f\").catch(() => {});\n  }\n  _run(executor) {\n    // Unfortunately if we call `executor()` immediately we get runtime errors about\n    // references to `this` before the `super()` constructor call returns.\n    setTimeout(() => {\n      executor().then(() => {\n        this._emitFinal();\n        this._emit('end');\n      }, __classPrivateFieldGet(this, _EventStream_instances, \"m\", _EventStream_handleError).bind(this));\n    }, 0);\n  }\n  _connected() {\n    if (this.ended) return;\n    __classPrivateFieldGet(this, _EventStream_resolveConnectedPromise, \"f\").call(this);\n    this._emit('connect');\n  }\n  get ended() {\n    return __classPrivateFieldGet(this, _EventStream_ended, \"f\");\n  }\n  get errored() {\n    return __classPrivateFieldGet(this, _EventStream_errored, \"f\");\n  }\n  get aborted() {\n    return __classPrivateFieldGet(this, _EventStream_aborted, \"f\");\n  }\n  abort() {\n    this.controller.abort();\n  }\n  /**\n   * Adds the listener function to the end of the listeners array for the event.\n   * No checks are made to see if the listener has already been added. Multiple calls passing\n   * the same combination of event and listener will result in the listener being added, and\n   * called, multiple times.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n  on(event, listener) {\n    const listeners = __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] = []);\n    listeners.push({\n      listener\n    });\n    return this;\n  }\n  /**\n   * Removes the specified listener from the listener array for the event.\n   * off() will remove, at most, one instance of a listener from the listener array. If any single\n   * listener has been added multiple times to the listener array for the specified event, then\n   * off() must be called multiple times to remove each instance.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n  off(event, listener) {\n    const listeners = __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event];\n    if (!listeners) return this;\n    const index = listeners.findIndex(l => l.listener === listener);\n    if (index >= 0) listeners.splice(index, 1);\n    return this;\n  }\n  /**\n   * Adds a one-time listener function for the event. The next time the event is triggered,\n   * this listener is removed and then invoked.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n  once(event, listener) {\n    const listeners = __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] = []);\n    listeners.push({\n      listener,\n      once: true\n    });\n    return this;\n  }\n  /**\n   * This is similar to `.once()`, but returns a Promise that resolves the next time\n   * the event is triggered, instead of calling a listener callback.\n   * @returns a Promise that resolves the next time given event is triggered,\n   * or rejects if an error is emitted.  (If you request the 'error' event,\n   * returns a promise that resolves with the error).\n   *\n   * Example:\n   *\n   *   const message = await stream.emitted('message') // rejects if the stream errors\n   */\n  emitted(event) {\n    return new Promise((resolve, reject) => {\n      __classPrivateFieldSet(this, _EventStream_catchingPromiseCreated, true, \"f\");\n      if (event !== 'error') this.once('error', reject);\n      this.once(event, resolve);\n    });\n  }\n  async done() {\n    __classPrivateFieldSet(this, _EventStream_catchingPromiseCreated, true, \"f\");\n    await __classPrivateFieldGet(this, _EventStream_endPromise, \"f\");\n  }\n  _emit(event, ...args) {\n    // make sure we don't emit any events after end\n    if (__classPrivateFieldGet(this, _EventStream_ended, \"f\")) {\n      return;\n    }\n    if (event === 'end') {\n      __classPrivateFieldSet(this, _EventStream_ended, true, \"f\");\n      __classPrivateFieldGet(this, _EventStream_resolveEndPromise, \"f\").call(this);\n    }\n    const listeners = __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event];\n    if (listeners) {\n      __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] = listeners.filter(l => !l.once);\n      listeners.forEach(({\n        listener\n      }) => listener(...args));\n    }\n    if (event === 'abort') {\n      const error = args[0];\n      if (!__classPrivateFieldGet(this, _EventStream_catchingPromiseCreated, \"f\") && !listeners?.length) {\n        Promise.reject(error);\n      }\n      __classPrivateFieldGet(this, _EventStream_rejectConnectedPromise, \"f\").call(this, error);\n      __classPrivateFieldGet(this, _EventStream_rejectEndPromise, \"f\").call(this, error);\n      this._emit('end');\n      return;\n    }\n    if (event === 'error') {\n      // NOTE: _emit('error', error) should only be called from #handleError().\n      const error = args[0];\n      if (!__classPrivateFieldGet(this, _EventStream_catchingPromiseCreated, \"f\") && !listeners?.length) {\n        // Trigger an unhandled rejection if the user hasn't registered any error handlers.\n        // If you are seeing stack traces here, make sure to handle errors via either:\n        // - runner.on('error', () => ...)\n        // - await runner.done()\n        // - await runner.finalChatCompletion()\n        // - etc.\n        Promise.reject(error);\n      }\n      __classPrivateFieldGet(this, _EventStream_rejectConnectedPromise, \"f\").call(this, error);\n      __classPrivateFieldGet(this, _EventStream_rejectEndPromise, \"f\").call(this, error);\n      this._emit('end');\n    }\n  }\n  _emitFinal() {}\n}\n_EventStream_connectedPromise = new WeakMap(), _EventStream_resolveConnectedPromise = new WeakMap(), _EventStream_rejectConnectedPromise = new WeakMap(), _EventStream_endPromise = new WeakMap(), _EventStream_resolveEndPromise = new WeakMap(), _EventStream_rejectEndPromise = new WeakMap(), _EventStream_listeners = new WeakMap(), _EventStream_ended = new WeakMap(), _EventStream_errored = new WeakMap(), _EventStream_aborted = new WeakMap(), _EventStream_catchingPromiseCreated = new WeakMap(), _EventStream_instances = new WeakSet(), _EventStream_handleError = function _EventStream_handleError(error) {\n  __classPrivateFieldSet(this, _EventStream_errored, true, \"f\");\n  if (error instanceof Error && error.name === 'AbortError') {\n    error = new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.APIUserAbortError();\n  }\n  if (error instanceof _error_mjs__WEBPACK_IMPORTED_MODULE_0__.APIUserAbortError) {\n    __classPrivateFieldSet(this, _EventStream_aborted, true, \"f\");\n    return this._emit('abort', error);\n  }\n  if (error instanceof _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError) {\n    return this._emit('error', error);\n  }\n  if (error instanceof Error) {\n    const openAIError = new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(error.message);\n    // @ts-ignore\n    openAIError.cause = error;\n    return this._emit('error', openAIError);\n  }\n  return this._emit('error', new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(String(error)));\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/EventStream.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/ResponsesParser.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/lib/ResponsesParser.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addOutputText: () => (/* binding */ addOutputText),\n/* harmony export */   hasAutoParseableInput: () => (/* binding */ hasAutoParseableInput),\n/* harmony export */   isAutoParsableTool: () => (/* binding */ isAutoParsableTool),\n/* harmony export */   makeParseableResponseTool: () => (/* binding */ makeParseableResponseTool),\n/* harmony export */   maybeParseResponse: () => (/* binding */ maybeParseResponse),\n/* harmony export */   parseResponse: () => (/* binding */ parseResponse),\n/* harmony export */   shouldParseToolCall: () => (/* binding */ shouldParseToolCall),\n/* harmony export */   validateInputTools: () => (/* binding */ validateInputTools)\n/* harmony export */ });\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _lib_parser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/parser.mjs */ \"(rsc)/./node_modules/openai/lib/parser.mjs\");\n\n\nfunction maybeParseResponse(response, params) {\n  if (!params || !hasAutoParseableInput(params)) {\n    return {\n      ...response,\n      output_parsed: null,\n      output: response.output.map(item => {\n        if (item.type === 'function_call') {\n          return {\n            ...item,\n            parsed_arguments: null\n          };\n        }\n        if (item.type === 'message') {\n          return {\n            ...item,\n            content: item.content.map(content => ({\n              ...content,\n              parsed: null\n            }))\n          };\n        } else {\n          return item;\n        }\n      })\n    };\n  }\n  return parseResponse(response, params);\n}\nfunction parseResponse(response, params) {\n  const output = response.output.map(item => {\n    if (item.type === 'function_call') {\n      return {\n        ...item,\n        parsed_arguments: parseToolCall(params, item)\n      };\n    }\n    if (item.type === 'message') {\n      const content = item.content.map(content => {\n        if (content.type === 'output_text') {\n          return {\n            ...content,\n            parsed: parseTextFormat(params, content.text)\n          };\n        }\n        return content;\n      });\n      return {\n        ...item,\n        content\n      };\n    }\n    return item;\n  });\n  const parsed = Object.assign({}, response, {\n    output\n  });\n  if (!Object.getOwnPropertyDescriptor(response, 'output_text')) {\n    addOutputText(parsed);\n  }\n  Object.defineProperty(parsed, 'output_parsed', {\n    enumerable: true,\n    get() {\n      for (const output of parsed.output) {\n        if (output.type !== 'message') {\n          continue;\n        }\n        for (const content of output.content) {\n          if (content.type === 'output_text' && content.parsed !== null) {\n            return content.parsed;\n          }\n        }\n      }\n      return null;\n    }\n  });\n  return parsed;\n}\nfunction parseTextFormat(params, content) {\n  if (params.text?.format?.type !== 'json_schema') {\n    return null;\n  }\n  if ('$parseRaw' in params.text?.format) {\n    const text_format = params.text?.format;\n    return text_format.$parseRaw(content);\n  }\n  return JSON.parse(content);\n}\nfunction hasAutoParseableInput(params) {\n  if ((0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_0__.isAutoParsableResponseFormat)(params.text?.format)) {\n    return true;\n  }\n  return false;\n}\nfunction makeParseableResponseTool(tool, {\n  parser,\n  callback\n}) {\n  const obj = {\n    ...tool\n  };\n  Object.defineProperties(obj, {\n    $brand: {\n      value: 'auto-parseable-tool',\n      enumerable: false\n    },\n    $parseRaw: {\n      value: parser,\n      enumerable: false\n    },\n    $callback: {\n      value: callback,\n      enumerable: false\n    }\n  });\n  return obj;\n}\nfunction isAutoParsableTool(tool) {\n  return tool?.['$brand'] === 'auto-parseable-tool';\n}\nfunction getInputToolByName(input_tools, name) {\n  return input_tools.find(tool => tool.type === 'function' && tool.name === name);\n}\nfunction parseToolCall(params, toolCall) {\n  const inputTool = getInputToolByName(params.tools ?? [], toolCall.name);\n  return {\n    ...toolCall,\n    ...toolCall,\n    parsed_arguments: isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCall.arguments) : inputTool?.strict ? JSON.parse(toolCall.arguments) : null\n  };\n}\nfunction shouldParseToolCall(params, toolCall) {\n  if (!params) {\n    return false;\n  }\n  const inputTool = getInputToolByName(params.tools ?? [], toolCall.name);\n  return isAutoParsableTool(inputTool) || inputTool?.strict || false;\n}\nfunction validateInputTools(tools) {\n  for (const tool of tools ?? []) {\n    if (tool.type !== 'function') {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`Currently only \\`function\\` tool types support auto-parsing; Received \\`${tool.type}\\``);\n    }\n    if (tool.function.strict !== true) {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`The \\`${tool.function.name}\\` tool is not marked with \\`strict: true\\`. Only strict function tools can be auto-parsed`);\n    }\n  }\n}\nfunction addOutputText(rsp) {\n  const texts = [];\n  for (const output of rsp.output) {\n    if (output.type !== 'message') {\n      continue;\n    }\n    for (const content of output.content) {\n      if (content.type === 'output_text') {\n        texts.push(content.text);\n      }\n    }\n  }\n  rsp.output_text = texts.join('');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/ResponsesParser.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/RunnableFunction.mjs":
/*!******************************************************!*\
  !*** ./node_modules/openai/lib/RunnableFunction.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ParsingFunction: () => (/* binding */ ParsingFunction),\n/* harmony export */   ParsingToolFunction: () => (/* binding */ ParsingToolFunction),\n/* harmony export */   isRunnableFunctionWithParse: () => (/* binding */ isRunnableFunctionWithParse)\n/* harmony export */ });\nfunction isRunnableFunctionWithParse(fn) {\n  return typeof fn.parse === 'function';\n}\n/**\n * This is helper class for passing a `function` and `parse` where the `function`\n * argument type matches the `parse` return type.\n *\n * @deprecated - please use ParsingToolFunction instead.\n */\nclass ParsingFunction {\n  constructor(input) {\n    this.function = input.function;\n    this.parse = input.parse;\n    this.parameters = input.parameters;\n    this.description = input.description;\n    this.name = input.name;\n  }\n}\n/**\n * This is helper class for passing a `function` and `parse` where the `function`\n * argument type matches the `parse` return type.\n */\nclass ParsingToolFunction {\n  constructor(input) {\n    this.type = 'function';\n    this.function = input;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9SdW5uYWJsZUZ1bmN0aW9uLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTyxTQUFTQSwyQkFBMkJBLENBQUNDLEVBQUUsRUFBRTtFQUM1QyxPQUFPLE9BQU9BLEVBQUUsQ0FBQ0MsS0FBSyxLQUFLLFVBQVU7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQyxlQUFlLENBQUM7RUFDekJDLFdBQVdBLENBQUNDLEtBQUssRUFBRTtJQUNmLElBQUksQ0FBQ0MsUUFBUSxHQUFHRCxLQUFLLENBQUNDLFFBQVE7SUFDOUIsSUFBSSxDQUFDSixLQUFLLEdBQUdHLEtBQUssQ0FBQ0gsS0FBSztJQUN4QixJQUFJLENBQUNLLFVBQVUsR0FBR0YsS0FBSyxDQUFDRSxVQUFVO0lBQ2xDLElBQUksQ0FBQ0MsV0FBVyxHQUFHSCxLQUFLLENBQUNHLFdBQVc7SUFDcEMsSUFBSSxDQUFDQyxJQUFJLEdBQUdKLEtBQUssQ0FBQ0ksSUFBSTtFQUMxQjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQyxtQkFBbUIsQ0FBQztFQUM3Qk4sV0FBV0EsQ0FBQ0MsS0FBSyxFQUFFO0lBQ2YsSUFBSSxDQUFDTSxJQUFJLEdBQUcsVUFBVTtJQUN0QixJQUFJLENBQUNMLFFBQVEsR0FBR0QsS0FBSztFQUN6QjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbGliL1J1bm5hYmxlRnVuY3Rpb24ubWpzP2E2YjQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzUnVubmFibGVGdW5jdGlvbldpdGhQYXJzZShmbikge1xuICAgIHJldHVybiB0eXBlb2YgZm4ucGFyc2UgPT09ICdmdW5jdGlvbic7XG59XG4vKipcbiAqIFRoaXMgaXMgaGVscGVyIGNsYXNzIGZvciBwYXNzaW5nIGEgYGZ1bmN0aW9uYCBhbmQgYHBhcnNlYCB3aGVyZSB0aGUgYGZ1bmN0aW9uYFxuICogYXJndW1lbnQgdHlwZSBtYXRjaGVzIHRoZSBgcGFyc2VgIHJldHVybiB0eXBlLlxuICpcbiAqIEBkZXByZWNhdGVkIC0gcGxlYXNlIHVzZSBQYXJzaW5nVG9vbEZ1bmN0aW9uIGluc3RlYWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBQYXJzaW5nRnVuY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKGlucHV0KSB7XG4gICAgICAgIHRoaXMuZnVuY3Rpb24gPSBpbnB1dC5mdW5jdGlvbjtcbiAgICAgICAgdGhpcy5wYXJzZSA9IGlucHV0LnBhcnNlO1xuICAgICAgICB0aGlzLnBhcmFtZXRlcnMgPSBpbnB1dC5wYXJhbWV0ZXJzO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gaW5wdXQuZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMubmFtZSA9IGlucHV0Lm5hbWU7XG4gICAgfVxufVxuLyoqXG4gKiBUaGlzIGlzIGhlbHBlciBjbGFzcyBmb3IgcGFzc2luZyBhIGBmdW5jdGlvbmAgYW5kIGBwYXJzZWAgd2hlcmUgdGhlIGBmdW5jdGlvbmBcbiAqIGFyZ3VtZW50IHR5cGUgbWF0Y2hlcyB0aGUgYHBhcnNlYCByZXR1cm4gdHlwZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFBhcnNpbmdUb29sRnVuY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKGlucHV0KSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdmdW5jdGlvbic7XG4gICAgICAgIHRoaXMuZnVuY3Rpb24gPSBpbnB1dDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SdW5uYWJsZUZ1bmN0aW9uLm1qcy5tYXAiXSwibmFtZXMiOlsiaXNSdW5uYWJsZUZ1bmN0aW9uV2l0aFBhcnNlIiwiZm4iLCJwYXJzZSIsIlBhcnNpbmdGdW5jdGlvbiIsImNvbnN0cnVjdG9yIiwiaW5wdXQiLCJmdW5jdGlvbiIsInBhcmFtZXRlcnMiLCJkZXNjcmlwdGlvbiIsIm5hbWUiLCJQYXJzaW5nVG9vbEZ1bmN0aW9uIiwidHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/RunnableFunction.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/Util.mjs":
/*!******************************************!*\
  !*** ./node_modules/openai/lib/Util.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   allSettledWithThrow: () => (/* binding */ allSettledWithThrow)\n/* harmony export */ });\n/**\n * Like `Promise.allSettled()` but throws an error if any promises are rejected.\n */\nconst allSettledWithThrow = async promises => {\n  const results = await Promise.allSettled(promises);\n  const rejected = results.filter(result => result.status === 'rejected');\n  if (rejected.length) {\n    for (const result of rejected) {\n      console.error(result.reason);\n    }\n    throw new Error(`${rejected.length} promise(s) failed - see the above errors`);\n  }\n  // Note: TS was complaining about using `.filter().map()` here for some reason\n  const values = [];\n  for (const result of results) {\n    if (result.status === 'fulfilled') {\n      values.push(result.value);\n    }\n  }\n  return values;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9VdGlsLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ08sTUFBTUEsbUJBQW1CLEdBQUcsTUFBT0MsUUFBUSxJQUFLO0VBQ25ELE1BQU1DLE9BQU8sR0FBRyxNQUFNQyxPQUFPLENBQUNDLFVBQVUsQ0FBQ0gsUUFBUSxDQUFDO0VBQ2xELE1BQU1JLFFBQVEsR0FBR0gsT0FBTyxDQUFDSSxNQUFNLENBQUVDLE1BQU0sSUFBS0EsTUFBTSxDQUFDQyxNQUFNLEtBQUssVUFBVSxDQUFDO0VBQ3pFLElBQUlILFFBQVEsQ0FBQ0ksTUFBTSxFQUFFO0lBQ2pCLEtBQUssTUFBTUYsTUFBTSxJQUFJRixRQUFRLEVBQUU7TUFDM0JLLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDSixNQUFNLENBQUNLLE1BQU0sQ0FBQztJQUNoQztJQUNBLE1BQU0sSUFBSUMsS0FBSyxDQUFFLEdBQUVSLFFBQVEsQ0FBQ0ksTUFBTywyQ0FBMEMsQ0FBQztFQUNsRjtFQUNBO0VBQ0EsTUFBTUssTUFBTSxHQUFHLEVBQUU7RUFDakIsS0FBSyxNQUFNUCxNQUFNLElBQUlMLE9BQU8sRUFBRTtJQUMxQixJQUFJSyxNQUFNLENBQUNDLE1BQU0sS0FBSyxXQUFXLEVBQUU7TUFDL0JNLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDUixNQUFNLENBQUNTLEtBQUssQ0FBQztJQUM3QjtFQUNKO0VBQ0EsT0FBT0YsTUFBTTtBQUNqQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbGliL1V0aWwubWpzP2M4ZDgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBMaWtlIGBQcm9taXNlLmFsbFNldHRsZWQoKWAgYnV0IHRocm93cyBhbiBlcnJvciBpZiBhbnkgcHJvbWlzZXMgYXJlIHJlamVjdGVkLlxuICovXG5leHBvcnQgY29uc3QgYWxsU2V0dGxlZFdpdGhUaHJvdyA9IGFzeW5jIChwcm9taXNlcykgPT4ge1xuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbFNldHRsZWQocHJvbWlzZXMpO1xuICAgIGNvbnN0IHJlamVjdGVkID0gcmVzdWx0cy5maWx0ZXIoKHJlc3VsdCkgPT4gcmVzdWx0LnN0YXR1cyA9PT0gJ3JlamVjdGVkJyk7XG4gICAgaWYgKHJlamVjdGVkLmxlbmd0aCkge1xuICAgICAgICBmb3IgKGNvbnN0IHJlc3VsdCBvZiByZWplY3RlZCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihyZXN1bHQucmVhc29uKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cmVqZWN0ZWQubGVuZ3RofSBwcm9taXNlKHMpIGZhaWxlZCAtIHNlZSB0aGUgYWJvdmUgZXJyb3JzYCk7XG4gICAgfVxuICAgIC8vIE5vdGU6IFRTIHdhcyBjb21wbGFpbmluZyBhYm91dCB1c2luZyBgLmZpbHRlcigpLm1hcCgpYCBoZXJlIGZvciBzb21lIHJlYXNvblxuICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgIGZvciAoY29uc3QgcmVzdWx0IG9mIHJlc3VsdHMpIHtcbiAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgPT09ICdmdWxmaWxsZWQnKSB7XG4gICAgICAgICAgICB2YWx1ZXMucHVzaChyZXN1bHQudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VXRpbC5tanMubWFwIl0sIm5hbWVzIjpbImFsbFNldHRsZWRXaXRoVGhyb3ciLCJwcm9taXNlcyIsInJlc3VsdHMiLCJQcm9taXNlIiwiYWxsU2V0dGxlZCIsInJlamVjdGVkIiwiZmlsdGVyIiwicmVzdWx0Iiwic3RhdHVzIiwibGVuZ3RoIiwiY29uc29sZSIsImVycm9yIiwicmVhc29uIiwiRXJyb3IiLCJ2YWx1ZXMiLCJwdXNoIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/Util.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/chatCompletionUtils.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/openai/lib/chatCompletionUtils.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAssistantMessage: () => (/* binding */ isAssistantMessage),\n/* harmony export */   isFunctionMessage: () => (/* binding */ isFunctionMessage),\n/* harmony export */   isPresent: () => (/* binding */ isPresent),\n/* harmony export */   isToolMessage: () => (/* binding */ isToolMessage)\n/* harmony export */ });\nconst isAssistantMessage = message => {\n  return message?.role === 'assistant';\n};\nconst isFunctionMessage = message => {\n  return message?.role === 'function';\n};\nconst isToolMessage = message => {\n  return message?.role === 'tool';\n};\nfunction isPresent(obj) {\n  return obj != null;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9jaGF0Q29tcGxldGlvblV0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQU8sTUFBTUEsa0JBQWtCLEdBQUlDLE9BQU8sSUFBSztFQUMzQyxPQUFPQSxPQUFPLEVBQUVDLElBQUksS0FBSyxXQUFXO0FBQ3hDLENBQUM7QUFDTSxNQUFNQyxpQkFBaUIsR0FBSUYsT0FBTyxJQUFLO0VBQzFDLE9BQU9BLE9BQU8sRUFBRUMsSUFBSSxLQUFLLFVBQVU7QUFDdkMsQ0FBQztBQUNNLE1BQU1FLGFBQWEsR0FBSUgsT0FBTyxJQUFLO0VBQ3RDLE9BQU9BLE9BQU8sRUFBRUMsSUFBSSxLQUFLLE1BQU07QUFDbkMsQ0FBQztBQUNNLFNBQVNHLFNBQVNBLENBQUNDLEdBQUcsRUFBRTtFQUMzQixPQUFPQSxHQUFHLElBQUksSUFBSTtBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9jaGF0Q29tcGxldGlvblV0aWxzLm1qcz83MmE0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBpc0Fzc2lzdGFudE1lc3NhZ2UgPSAobWVzc2FnZSkgPT4ge1xuICAgIHJldHVybiBtZXNzYWdlPy5yb2xlID09PSAnYXNzaXN0YW50Jztcbn07XG5leHBvcnQgY29uc3QgaXNGdW5jdGlvbk1lc3NhZ2UgPSAobWVzc2FnZSkgPT4ge1xuICAgIHJldHVybiBtZXNzYWdlPy5yb2xlID09PSAnZnVuY3Rpb24nO1xufTtcbmV4cG9ydCBjb25zdCBpc1Rvb2xNZXNzYWdlID0gKG1lc3NhZ2UpID0+IHtcbiAgICByZXR1cm4gbWVzc2FnZT8ucm9sZSA9PT0gJ3Rvb2wnO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBpc1ByZXNlbnQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPSBudWxsO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hhdENvbXBsZXRpb25VdGlscy5tanMubWFwIl0sIm5hbWVzIjpbImlzQXNzaXN0YW50TWVzc2FnZSIsIm1lc3NhZ2UiLCJyb2xlIiwiaXNGdW5jdGlvbk1lc3NhZ2UiLCJpc1Rvb2xNZXNzYWdlIiwiaXNQcmVzZW50Iiwib2JqIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/chatCompletionUtils.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/parser.mjs":
/*!********************************************!*\
  !*** ./node_modules/openai/lib/parser.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasAutoParseableInput: () => (/* binding */ hasAutoParseableInput),\n/* harmony export */   isAutoParsableResponseFormat: () => (/* binding */ isAutoParsableResponseFormat),\n/* harmony export */   isAutoParsableTool: () => (/* binding */ isAutoParsableTool),\n/* harmony export */   makeParseableResponseFormat: () => (/* binding */ makeParseableResponseFormat),\n/* harmony export */   makeParseableTextFormat: () => (/* binding */ makeParseableTextFormat),\n/* harmony export */   makeParseableTool: () => (/* binding */ makeParseableTool),\n/* harmony export */   maybeParseChatCompletion: () => (/* binding */ maybeParseChatCompletion),\n/* harmony export */   parseChatCompletion: () => (/* binding */ parseChatCompletion),\n/* harmony export */   shouldParseToolCall: () => (/* binding */ shouldParseToolCall),\n/* harmony export */   validateInputTools: () => (/* binding */ validateInputTools)\n/* harmony export */ });\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\n\nfunction makeParseableResponseFormat(response_format, parser) {\n  const obj = {\n    ...response_format\n  };\n  Object.defineProperties(obj, {\n    $brand: {\n      value: 'auto-parseable-response-format',\n      enumerable: false\n    },\n    $parseRaw: {\n      value: parser,\n      enumerable: false\n    }\n  });\n  return obj;\n}\nfunction makeParseableTextFormat(response_format, parser) {\n  const obj = {\n    ...response_format\n  };\n  Object.defineProperties(obj, {\n    $brand: {\n      value: 'auto-parseable-response-format',\n      enumerable: false\n    },\n    $parseRaw: {\n      value: parser,\n      enumerable: false\n    }\n  });\n  return obj;\n}\nfunction isAutoParsableResponseFormat(response_format) {\n  return response_format?.['$brand'] === 'auto-parseable-response-format';\n}\nfunction makeParseableTool(tool, {\n  parser,\n  callback\n}) {\n  const obj = {\n    ...tool\n  };\n  Object.defineProperties(obj, {\n    $brand: {\n      value: 'auto-parseable-tool',\n      enumerable: false\n    },\n    $parseRaw: {\n      value: parser,\n      enumerable: false\n    },\n    $callback: {\n      value: callback,\n      enumerable: false\n    }\n  });\n  return obj;\n}\nfunction isAutoParsableTool(tool) {\n  return tool?.['$brand'] === 'auto-parseable-tool';\n}\nfunction maybeParseChatCompletion(completion, params) {\n  if (!params || !hasAutoParseableInput(params)) {\n    return {\n      ...completion,\n      choices: completion.choices.map(choice => ({\n        ...choice,\n        message: {\n          ...choice.message,\n          parsed: null,\n          ...(choice.message.tool_calls ? {\n            tool_calls: choice.message.tool_calls\n          } : undefined)\n        }\n      }))\n    };\n  }\n  return parseChatCompletion(completion, params);\n}\nfunction parseChatCompletion(completion, params) {\n  const choices = completion.choices.map(choice => {\n    if (choice.finish_reason === 'length') {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.LengthFinishReasonError();\n    }\n    if (choice.finish_reason === 'content_filter') {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.ContentFilterFinishReasonError();\n    }\n    return {\n      ...choice,\n      message: {\n        ...choice.message,\n        ...(choice.message.tool_calls ? {\n          tool_calls: choice.message.tool_calls?.map(toolCall => parseToolCall(params, toolCall)) ?? undefined\n        } : undefined),\n        parsed: choice.message.content && !choice.message.refusal ? parseResponseFormat(params, choice.message.content) : null\n      }\n    };\n  });\n  return {\n    ...completion,\n    choices\n  };\n}\nfunction parseResponseFormat(params, content) {\n  if (params.response_format?.type !== 'json_schema') {\n    return null;\n  }\n  if (params.response_format?.type === 'json_schema') {\n    if ('$parseRaw' in params.response_format) {\n      const response_format = params.response_format;\n      return response_format.$parseRaw(content);\n    }\n    return JSON.parse(content);\n  }\n  return null;\n}\nfunction parseToolCall(params, toolCall) {\n  const inputTool = params.tools?.find(inputTool => inputTool.function?.name === toolCall.function.name);\n  return {\n    ...toolCall,\n    function: {\n      ...toolCall.function,\n      parsed_arguments: isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCall.function.arguments) : inputTool?.function.strict ? JSON.parse(toolCall.function.arguments) : null\n    }\n  };\n}\nfunction shouldParseToolCall(params, toolCall) {\n  if (!params) {\n    return false;\n  }\n  const inputTool = params.tools?.find(inputTool => inputTool.function?.name === toolCall.function.name);\n  return isAutoParsableTool(inputTool) || inputTool?.function.strict || false;\n}\nfunction hasAutoParseableInput(params) {\n  if (isAutoParsableResponseFormat(params.response_format)) {\n    return true;\n  }\n  return params.tools?.some(t => isAutoParsableTool(t) || t.type === 'function' && t.function.strict === true) ?? false;\n}\nfunction validateInputTools(tools) {\n  for (const tool of tools ?? []) {\n    if (tool.type !== 'function') {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(`Currently only \\`function\\` tool types support auto-parsing; Received \\`${tool.type}\\``);\n    }\n    if (tool.function.strict !== true) {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(`The \\`${tool.function.name}\\` tool is not marked with \\`strict: true\\`. Only strict function tools can be auto-parsed`);\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/parser.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/lib/responses/ResponseStream.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/openai/lib/responses/ResponseStream.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResponseStream: () => (/* binding */ ResponseStream)\n/* harmony export */ });\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _EventStream_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../EventStream.mjs */ \"(rsc)/./node_modules/openai/lib/EventStream.mjs\");\n/* harmony import */ var _ResponsesParser_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ResponsesParser.mjs */ \"(rsc)/./node_modules/openai/lib/ResponsesParser.mjs\");\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ResponseStream_instances, _ResponseStream_params, _ResponseStream_currentResponseSnapshot, _ResponseStream_finalResponse, _ResponseStream_beginRequest, _ResponseStream_addEvent, _ResponseStream_endRequest, _ResponseStream_accumulateResponse;\n\n\n\nclass ResponseStream extends _EventStream_mjs__WEBPACK_IMPORTED_MODULE_0__.EventStream {\n  constructor(params) {\n    super();\n    _ResponseStream_instances.add(this);\n    _ResponseStream_params.set(this, void 0);\n    _ResponseStream_currentResponseSnapshot.set(this, void 0);\n    _ResponseStream_finalResponse.set(this, void 0);\n    __classPrivateFieldSet(this, _ResponseStream_params, params, \"f\");\n  }\n  static createResponse(client, params, options) {\n    const runner = new ResponseStream(params);\n    runner._run(() => runner._createResponse(client, params, {\n      ...options,\n      headers: {\n        ...options?.headers,\n        'X-Stainless-Helper-Method': 'stream'\n      }\n    }));\n    return runner;\n  }\n  async _createResponse(client, params, options) {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    __classPrivateFieldGet(this, _ResponseStream_instances, \"m\", _ResponseStream_beginRequest).call(this);\n    const stream = await client.responses.create({\n      ...params,\n      stream: true\n    }, {\n      ...options,\n      signal: this.controller.signal\n    });\n    this._connected();\n    for await (const event of stream) {\n      __classPrivateFieldGet(this, _ResponseStream_instances, \"m\", _ResponseStream_addEvent).call(this, event);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError();\n    }\n    return __classPrivateFieldGet(this, _ResponseStream_instances, \"m\", _ResponseStream_endRequest).call(this);\n  }\n  [(_ResponseStream_params = new WeakMap(), _ResponseStream_currentResponseSnapshot = new WeakMap(), _ResponseStream_finalResponse = new WeakMap(), _ResponseStream_instances = new WeakSet(), _ResponseStream_beginRequest = function _ResponseStream_beginRequest() {\n    if (this.ended) return;\n    __classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, undefined, \"f\");\n  }, _ResponseStream_addEvent = function _ResponseStream_addEvent(event) {\n    if (this.ended) return;\n    const response = __classPrivateFieldGet(this, _ResponseStream_instances, \"m\", _ResponseStream_accumulateResponse).call(this, event);\n    this._emit('event', event);\n    switch (event.type) {\n      case 'response.output_text.delta':\n        {\n          const output = response.output[event.output_index];\n          if (!output) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing output at index ${event.output_index}`);\n          }\n          if (output.type === 'message') {\n            const content = output.content[event.content_index];\n            if (!content) {\n              throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing content at index ${event.content_index}`);\n            }\n            if (content.type !== 'output_text') {\n              throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`expected content to be 'output_text', got ${content.type}`);\n            }\n            this._emit('response.output_text.delta', {\n              ...event,\n              snapshot: content.text\n            });\n          }\n          break;\n        }\n      case 'response.function_call_arguments.delta':\n        {\n          const output = response.output[event.output_index];\n          if (!output) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing output at index ${event.output_index}`);\n          }\n          if (output.type === 'function_call') {\n            this._emit('response.function_call_arguments.delta', {\n              ...event,\n              snapshot: output.arguments\n            });\n          }\n          break;\n        }\n      default:\n        // @ts-ignore\n        this._emit(event.type, event);\n        break;\n    }\n  }, _ResponseStream_endRequest = function _ResponseStream_endRequest() {\n    if (this.ended) {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`stream has ended, this shouldn't happen`);\n    }\n    const snapshot = __classPrivateFieldGet(this, _ResponseStream_currentResponseSnapshot, \"f\");\n    if (!snapshot) {\n      throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`request ended without sending any events`);\n    }\n    __classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, undefined, \"f\");\n    const parsedResponse = finalizeResponse(snapshot, __classPrivateFieldGet(this, _ResponseStream_params, \"f\"));\n    __classPrivateFieldSet(this, _ResponseStream_finalResponse, parsedResponse, \"f\");\n    return parsedResponse;\n  }, _ResponseStream_accumulateResponse = function _ResponseStream_accumulateResponse(event) {\n    let snapshot = __classPrivateFieldGet(this, _ResponseStream_currentResponseSnapshot, \"f\");\n    if (!snapshot) {\n      if (event.type !== 'response.created') {\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`When snapshot hasn't been set yet, expected 'response.created' event, got ${event.type}`);\n      }\n      snapshot = __classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, event.response, \"f\");\n      return snapshot;\n    }\n    switch (event.type) {\n      case 'response.output_item.added':\n        {\n          snapshot.output.push(event.item);\n          break;\n        }\n      case 'response.content_part.added':\n        {\n          const output = snapshot.output[event.output_index];\n          if (!output) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing output at index ${event.output_index}`);\n          }\n          if (output.type === 'message') {\n            output.content.push(event.part);\n          }\n          break;\n        }\n      case 'response.output_text.delta':\n        {\n          const output = snapshot.output[event.output_index];\n          if (!output) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing output at index ${event.output_index}`);\n          }\n          if (output.type === 'message') {\n            const content = output.content[event.content_index];\n            if (!content) {\n              throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing content at index ${event.content_index}`);\n            }\n            if (content.type !== 'output_text') {\n              throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`expected content to be 'output_text', got ${content.type}`);\n            }\n            content.text += event.delta;\n          }\n          break;\n        }\n      case 'response.function_call_arguments.delta':\n        {\n          const output = snapshot.output[event.output_index];\n          if (!output) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing output at index ${event.output_index}`);\n          }\n          if (output.type === 'function_call') {\n            output.arguments += event.delta;\n          }\n          break;\n        }\n      case 'response.completed':\n        {\n          __classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, event.response, \"f\");\n          break;\n        }\n    }\n    return snapshot;\n  }, Symbol.asyncIterator)]() {\n    const pushQueue = [];\n    const readQueue = [];\n    let done = false;\n    this.on('event', event => {\n      const reader = readQueue.shift();\n      if (reader) {\n        reader.resolve(event);\n      } else {\n        pushQueue.push(event);\n      }\n    });\n    this.on('end', () => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.resolve(undefined);\n      }\n      readQueue.length = 0;\n    });\n    this.on('abort', err => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n    this.on('error', err => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n    return {\n      next: async () => {\n        if (!pushQueue.length) {\n          if (done) {\n            return {\n              value: undefined,\n              done: true\n            };\n          }\n          return new Promise((resolve, reject) => readQueue.push({\n            resolve,\n            reject\n          })).then(event => event ? {\n            value: event,\n            done: false\n          } : {\n            value: undefined,\n            done: true\n          });\n        }\n        const event = pushQueue.shift();\n        return {\n          value: event,\n          done: false\n        };\n      },\n      return: async () => {\n        this.abort();\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  /**\n   * @returns a promise that resolves with the final Response, or rejects\n   * if an error occurred or the stream ended prematurely without producing a REsponse.\n   */\n  async finalResponse() {\n    await this.done();\n    const response = __classPrivateFieldGet(this, _ResponseStream_finalResponse, \"f\");\n    if (!response) throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError('stream ended without producing a ChatCompletion');\n    return response;\n  }\n}\nfunction finalizeResponse(snapshot, params) {\n  return (0,_ResponsesParser_mjs__WEBPACK_IMPORTED_MODULE_2__.maybeParseResponse)(snapshot, params);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9yZXNwb25zZXMvUmVzcG9uc2VTdHJlYW0ubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFJQSxzQkFBc0IsR0FBSSxTQUFJLElBQUksU0FBSSxDQUFDQSxzQkFBc0IsSUFBSyxVQUFVQyxRQUFRLEVBQUVDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLENBQUMsRUFBRTtFQUM3RyxJQUFJRCxJQUFJLEtBQUssR0FBRyxFQUFFLE1BQU0sSUFBSUUsU0FBUyxDQUFDLGdDQUFnQyxDQUFDO0VBQ3ZFLElBQUlGLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQ0MsQ0FBQyxFQUFFLE1BQU0sSUFBSUMsU0FBUyxDQUFDLCtDQUErQyxDQUFDO0VBQzVGLElBQUksT0FBT0osS0FBSyxLQUFLLFVBQVUsR0FBR0QsUUFBUSxLQUFLQyxLQUFLLElBQUksQ0FBQ0csQ0FBQyxHQUFHLENBQUNILEtBQUssQ0FBQ0ssR0FBRyxDQUFDTixRQUFRLENBQUMsRUFBRSxNQUFNLElBQUlLLFNBQVMsQ0FBQyx5RUFBeUUsQ0FBQztFQUNqTCxPQUFRRixJQUFJLEtBQUssR0FBRyxHQUFHQyxDQUFDLENBQUNHLElBQUksQ0FBQ1AsUUFBUSxFQUFFRSxLQUFLLENBQUMsR0FBR0UsQ0FBQyxHQUFHQSxDQUFDLENBQUNGLEtBQUssR0FBR0EsS0FBSyxHQUFHRCxLQUFLLENBQUNPLEdBQUcsQ0FBQ1IsUUFBUSxFQUFFRSxLQUFLLENBQUMsRUFBR0EsS0FBSztBQUM3RyxDQUFDO0FBQ0QsSUFBSU8sc0JBQXNCLEdBQUksU0FBSSxJQUFJLFNBQUksQ0FBQ0Esc0JBQXNCLElBQUssVUFBVVQsUUFBUSxFQUFFQyxLQUFLLEVBQUVFLElBQUksRUFBRUMsQ0FBQyxFQUFFO0VBQ3RHLElBQUlELElBQUksS0FBSyxHQUFHLElBQUksQ0FBQ0MsQ0FBQyxFQUFFLE1BQU0sSUFBSUMsU0FBUyxDQUFDLCtDQUErQyxDQUFDO0VBQzVGLElB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LENBQUNHLElBQUksQ0FBRW5DLEtBQUssSUFBTUEsS0FBSyxHQUFHO1lBQUV6QyxLQUFLLEVBQUV5QyxLQUFLO1lBQUV5QixJQUFJLEVBQUU7VUFBTSxDQUFDLEdBQUc7WUFBRWxFLEtBQUssRUFBRTZDLFNBQVM7WUFBRXFCLElBQUksRUFBRTtVQUFLLENBQUUsQ0FBQztRQUM1SztRQUNBLE1BQU16QixLQUFLLEdBQUd1QixTQUFTLENBQUNLLEtBQUssQ0FBQyxDQUFDO1FBQy9CLE9BQU87VUFBRXJFLEtBQUssRUFBRXlDLEtBQUs7VUFBRXlCLElBQUksRUFBRTtRQUFNLENBQUM7TUFDeEMsQ0FBQztNQUNEVyxNQUFNLEVBQUUsTUFBQUEsQ0FBQSxLQUFZO1FBQ2hCLElBQUksQ0FBQzFDLEtBQUssQ0FBQyxDQUFDO1FBQ1osT0FBTztVQUFFbkMsS0FBSyxFQUFFNkMsU0FBUztVQUFFcUIsSUFBSSxFQUFFO1FBQUssQ0FBQztNQUMzQztJQUNKLENBQUM7RUFDTDtFQUNBO0FBQ0o7QUFDQTtBQUNBO0VBQ0ksTUFBTVksYUFBYUEsQ0FBQSxFQUFHO0lBQ2xCLE1BQU0sSUFBSSxDQUFDWixJQUFJLENBQUMsQ0FBQztJQUNqQixNQUFNcEIsUUFBUSxHQUFHdkMsc0JBQXNCLENBQUMsSUFBSSxFQUFFSyw2QkFBNkIsRUFBRSxHQUFHLENBQUM7SUFDakYsSUFBSSxDQUFDa0MsUUFBUSxFQUNULE1BQU0sSUFBSTVCLG1EQUFXLENBQUMsaURBQWlELENBQUM7SUFDNUUsT0FBTzRCLFFBQVE7RUFDbkI7QUFDSjtBQUNBLFNBQVNXLGdCQUFnQkEsQ0FBQ0osUUFBUSxFQUFFOUIsTUFBTSxFQUFFO0VBQ3hDLE9BQU9ILHdFQUFrQixDQUFDaUMsUUFBUSxFQUFFOUIsTUFBTSxDQUFDO0FBQy9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbGliL3Jlc3BvbnNlcy9SZXNwb25zZVN0cmVhbS5tanM/MDZiMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX1Jlc3BvbnNlU3RyZWFtX2luc3RhbmNlcywgX1Jlc3BvbnNlU3RyZWFtX3BhcmFtcywgX1Jlc3BvbnNlU3RyZWFtX2N1cnJlbnRSZXNwb25zZVNuYXBzaG90LCBfUmVzcG9uc2VTdHJlYW1fZmluYWxSZXNwb25zZSwgX1Jlc3BvbnNlU3RyZWFtX2JlZ2luUmVxdWVzdCwgX1Jlc3BvbnNlU3RyZWFtX2FkZEV2ZW50LCBfUmVzcG9uc2VTdHJlYW1fZW5kUmVxdWVzdCwgX1Jlc3BvbnNlU3RyZWFtX2FjY3VtdWxhdGVSZXNwb25zZTtcbmltcG9ydCB7IEFQSVVzZXJBYm9ydEVycm9yLCBPcGVuQUlFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci5tanNcIjtcbmltcG9ydCB7IEV2ZW50U3RyZWFtIH0gZnJvbSBcIi4uL0V2ZW50U3RyZWFtLm1qc1wiO1xuaW1wb3J0IHsgbWF5YmVQYXJzZVJlc3BvbnNlIH0gZnJvbSBcIi4uL1Jlc3BvbnNlc1BhcnNlci5tanNcIjtcbmV4cG9ydCBjbGFzcyBSZXNwb25zZVN0cmVhbSBleHRlbmRzIEV2ZW50U3RyZWFtIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgX1Jlc3BvbnNlU3RyZWFtX2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIF9SZXNwb25zZVN0cmVhbV9wYXJhbXMuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9SZXNwb25zZVN0cmVhbV9jdXJyZW50UmVzcG9uc2VTbmFwc2hvdC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX1Jlc3BvbnNlU3RyZWFtX2ZpbmFsUmVzcG9uc2Uuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3BvbnNlU3RyZWFtX3BhcmFtcywgcGFyYW1zLCBcImZcIik7XG4gICAgfVxuICAgIHN0YXRpYyBjcmVhdGVSZXNwb25zZShjbGllbnQsIHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBydW5uZXIgPSBuZXcgUmVzcG9uc2VTdHJlYW0ocGFyYW1zKTtcbiAgICAgICAgcnVubmVyLl9ydW4oKCkgPT4gcnVubmVyLl9jcmVhdGVSZXNwb25zZShjbGllbnQsIHBhcmFtcywge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgLi4ub3B0aW9ucz8uaGVhZGVycywgJ1gtU3RhaW5sZXNzLUhlbHBlci1NZXRob2QnOiAnc3RyZWFtJyB9LFxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBydW5uZXI7XG4gICAgfVxuICAgIGFzeW5jIF9jcmVhdGVSZXNwb25zZShjbGllbnQsIHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBzaWduYWwgPSBvcHRpb25zPy5zaWduYWw7XG4gICAgICAgIGlmIChzaWduYWwpIHtcbiAgICAgICAgICAgIGlmIChzaWduYWwuYWJvcnRlZClcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgICAgIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsICgpID0+IHRoaXMuY29udHJvbGxlci5hYm9ydCgpKTtcbiAgICAgICAgfVxuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9SZXNwb25zZVN0cmVhbV9pbnN0YW5jZXMsIFwibVwiLCBfUmVzcG9uc2VTdHJlYW1fYmVnaW5SZXF1ZXN0KS5jYWxsKHRoaXMpO1xuICAgICAgICBjb25zdCBzdHJlYW0gPSBhd2FpdCBjbGllbnQucmVzcG9uc2VzLmNyZWF0ZSh7IC4uLnBhcmFtcywgc3RyZWFtOiB0cnVlIH0sIHsgLi4ub3B0aW9ucywgc2lnbmFsOiB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsIH0pO1xuICAgICAgICB0aGlzLl9jb25uZWN0ZWQoKTtcbiAgICAgICAgZm9yIGF3YWl0IChjb25zdCBldmVudCBvZiBzdHJlYW0pIHtcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3BvbnNlU3RyZWFtX2luc3RhbmNlcywgXCJtXCIsIF9SZXNwb25zZVN0cmVhbV9hZGRFdmVudCkuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0cmVhbS5jb250cm9sbGVyLnNpZ25hbD8uYWJvcnRlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFQSVVzZXJBYm9ydEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3BvbnNlU3RyZWFtX2luc3RhbmNlcywgXCJtXCIsIF9SZXNwb25zZVN0cmVhbV9lbmRSZXF1ZXN0KS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgICBbKF9SZXNwb25zZVN0cmVhbV9wYXJhbXMgPSBuZXcgV2Vha01hcCgpLCBfUmVzcG9uc2VTdHJlYW1fY3VycmVudFJlc3BvbnNlU25hcHNob3QgPSBuZXcgV2Vha01hcCgpLCBfUmVzcG9uc2VTdHJlYW1fZmluYWxSZXNwb25zZSA9IG5ldyBXZWFrTWFwKCksIF9SZXNwb25zZVN0cmVhbV9pbnN0YW5jZXMgPSBuZXcgV2Vha1NldCgpLCBfUmVzcG9uc2VTdHJlYW1fYmVnaW5SZXF1ZXN0ID0gZnVuY3Rpb24gX1Jlc3BvbnNlU3RyZWFtX2JlZ2luUmVxdWVzdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZW5kZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Jlc3BvbnNlU3RyZWFtX2N1cnJlbnRSZXNwb25zZVNuYXBzaG90LCB1bmRlZmluZWQsIFwiZlwiKTtcbiAgICB9LCBfUmVzcG9uc2VTdHJlYW1fYWRkRXZlbnQgPSBmdW5jdGlvbiBfUmVzcG9uc2VTdHJlYW1fYWRkRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuZW5kZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzcG9uc2VTdHJlYW1faW5zdGFuY2VzLCBcIm1cIiwgX1Jlc3BvbnNlU3RyZWFtX2FjY3VtdWxhdGVSZXNwb25zZSkuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgICAgIHRoaXMuX2VtaXQoJ2V2ZW50JywgZXZlbnQpO1xuICAgICAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3Jlc3BvbnNlLm91dHB1dF90ZXh0LmRlbHRhJzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IG91dHB1dCA9IHJlc3BvbnNlLm91dHB1dFtldmVudC5vdXRwdXRfaW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmICghb3V0cHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihgbWlzc2luZyBvdXRwdXQgYXQgaW5kZXggJHtldmVudC5vdXRwdXRfaW5kZXh9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvdXRwdXQudHlwZSA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBvdXRwdXQuY29udGVudFtldmVudC5jb250ZW50X2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYG1pc3NpbmcgY29udGVudCBhdCBpbmRleCAke2V2ZW50LmNvbnRlbnRfaW5kZXh9YCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQudHlwZSAhPT0gJ291dHB1dF90ZXh0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBleHBlY3RlZCBjb250ZW50IHRvIGJlICdvdXRwdXRfdGV4dCcsIGdvdCAke2NvbnRlbnQudHlwZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbWl0KCdyZXNwb25zZS5vdXRwdXRfdGV4dC5kZWx0YScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmV2ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgc25hcHNob3Q6IGNvbnRlbnQudGV4dCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAncmVzcG9uc2UuZnVuY3Rpb25fY2FsbF9hcmd1bWVudHMuZGVsdGEnOiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3V0cHV0ID0gcmVzcG9uc2Uub3V0cHV0W2V2ZW50Lm91dHB1dF9pbmRleF07XG4gICAgICAgICAgICAgICAgaWYgKCFvdXRwdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBtaXNzaW5nIG91dHB1dCBhdCBpbmRleCAke2V2ZW50Lm91dHB1dF9pbmRleH1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG91dHB1dC50eXBlID09PSAnZnVuY3Rpb25fY2FsbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW1pdCgncmVzcG9uc2UuZnVuY3Rpb25fY2FsbF9hcmd1bWVudHMuZGVsdGEnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5ldmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNuYXBzaG90OiBvdXRwdXQuYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0KGV2ZW50LnR5cGUsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH0sIF9SZXNwb25zZVN0cmVhbV9lbmRSZXF1ZXN0ID0gZnVuY3Rpb24gX1Jlc3BvbnNlU3RyZWFtX2VuZFJlcXVlc3QoKSB7XG4gICAgICAgIGlmICh0aGlzLmVuZGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYHN0cmVhbSBoYXMgZW5kZWQsIHRoaXMgc2hvdWxkbid0IGhhcHBlbmApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNuYXBzaG90ID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUmVzcG9uc2VTdHJlYW1fY3VycmVudFJlc3BvbnNlU25hcHNob3QsIFwiZlwiKTtcbiAgICAgICAgaWYgKCFzbmFwc2hvdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGByZXF1ZXN0IGVuZGVkIHdpdGhvdXQgc2VuZGluZyBhbnkgZXZlbnRzYCk7XG4gICAgICAgIH1cbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzcG9uc2VTdHJlYW1fY3VycmVudFJlc3BvbnNlU25hcHNob3QsIHVuZGVmaW5lZCwgXCJmXCIpO1xuICAgICAgICBjb25zdCBwYXJzZWRSZXNwb25zZSA9IGZpbmFsaXplUmVzcG9uc2Uoc25hcHNob3QsIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3BvbnNlU3RyZWFtX3BhcmFtcywgXCJmXCIpKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUmVzcG9uc2VTdHJlYW1fZmluYWxSZXNwb25zZSwgcGFyc2VkUmVzcG9uc2UsIFwiZlwiKTtcbiAgICAgICAgcmV0dXJuIHBhcnNlZFJlc3BvbnNlO1xuICAgIH0sIF9SZXNwb25zZVN0cmVhbV9hY2N1bXVsYXRlUmVzcG9uc2UgPSBmdW5jdGlvbiBfUmVzcG9uc2VTdHJlYW1fYWNjdW11bGF0ZVJlc3BvbnNlKGV2ZW50KSB7XG4gICAgICAgIGxldCBzbmFwc2hvdCA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3BvbnNlU3RyZWFtX2N1cnJlbnRSZXNwb25zZVNuYXBzaG90LCBcImZcIik7XG4gICAgICAgIGlmICghc25hcHNob3QpIHtcbiAgICAgICAgICAgIGlmIChldmVudC50eXBlICE9PSAncmVzcG9uc2UuY3JlYXRlZCcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYFdoZW4gc25hcHNob3QgaGFzbid0IGJlZW4gc2V0IHlldCwgZXhwZWN0ZWQgJ3Jlc3BvbnNlLmNyZWF0ZWQnIGV2ZW50LCBnb3QgJHtldmVudC50eXBlfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc25hcHNob3QgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXNwb25zZVN0cmVhbV9jdXJyZW50UmVzcG9uc2VTbmFwc2hvdCwgZXZlbnQucmVzcG9uc2UsIFwiZlwiKTtcbiAgICAgICAgICAgIHJldHVybiBzbmFwc2hvdDtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3Jlc3BvbnNlLm91dHB1dF9pdGVtLmFkZGVkJzoge1xuICAgICAgICAgICAgICAgIHNuYXBzaG90Lm91dHB1dC5wdXNoKGV2ZW50Lml0ZW0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAncmVzcG9uc2UuY29udGVudF9wYXJ0LmFkZGVkJzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IG91dHB1dCA9IHNuYXBzaG90Lm91dHB1dFtldmVudC5vdXRwdXRfaW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmICghb3V0cHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihgbWlzc2luZyBvdXRwdXQgYXQgaW5kZXggJHtldmVudC5vdXRwdXRfaW5kZXh9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvdXRwdXQudHlwZSA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5jb250ZW50LnB1c2goZXZlbnQucGFydCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAncmVzcG9uc2Uub3V0cHV0X3RleHQuZGVsdGEnOiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3V0cHV0ID0gc25hcHNob3Qub3V0cHV0W2V2ZW50Lm91dHB1dF9pbmRleF07XG4gICAgICAgICAgICAgICAgaWYgKCFvdXRwdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBtaXNzaW5nIG91dHB1dCBhdCBpbmRleCAke2V2ZW50Lm91dHB1dF9pbmRleH1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG91dHB1dC50eXBlID09PSAnbWVzc2FnZScpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IG91dHB1dC5jb250ZW50W2V2ZW50LmNvbnRlbnRfaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihgbWlzc2luZyBjb250ZW50IGF0IGluZGV4ICR7ZXZlbnQuY29udGVudF9pbmRleH1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudC50eXBlICE9PSAnb3V0cHV0X3RleHQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYGV4cGVjdGVkIGNvbnRlbnQgdG8gYmUgJ291dHB1dF90ZXh0JywgZ290ICR7Y29udGVudC50eXBlfWApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQudGV4dCArPSBldmVudC5kZWx0YTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdyZXNwb25zZS5mdW5jdGlvbl9jYWxsX2FyZ3VtZW50cy5kZWx0YSc6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBvdXRwdXQgPSBzbmFwc2hvdC5vdXRwdXRbZXZlbnQub3V0cHV0X2luZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAoIW91dHB1dCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYG1pc3Npbmcgb3V0cHV0IGF0IGluZGV4ICR7ZXZlbnQub3V0cHV0X2luZGV4fWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3V0cHV0LnR5cGUgPT09ICdmdW5jdGlvbl9jYWxsJykge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQuYXJndW1lbnRzICs9IGV2ZW50LmRlbHRhO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ3Jlc3BvbnNlLmNvbXBsZXRlZCc6IHtcbiAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9SZXNwb25zZVN0cmVhbV9jdXJyZW50UmVzcG9uc2VTbmFwc2hvdCwgZXZlbnQucmVzcG9uc2UsIFwiZlwiKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc25hcHNob3Q7XG4gICAgfSwgU3ltYm9sLmFzeW5jSXRlcmF0b3IpXSgpIHtcbiAgICAgICAgY29uc3QgcHVzaFF1ZXVlID0gW107XG4gICAgICAgIGNvbnN0IHJlYWRRdWV1ZSA9IFtdO1xuICAgICAgICBsZXQgZG9uZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLm9uKCdldmVudCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVhZGVyID0gcmVhZFF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAocmVhZGVyKSB7XG4gICAgICAgICAgICAgICAgcmVhZGVyLnJlc29sdmUoZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcHVzaFF1ZXVlLnB1c2goZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJlYWRlciBvZiByZWFkUXVldWUpIHtcbiAgICAgICAgICAgICAgICByZWFkZXIucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZFF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uKCdhYm9ydCcsIChlcnIpID0+IHtcbiAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgZm9yIChjb25zdCByZWFkZXIgb2YgcmVhZFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgcmVhZGVyLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZFF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgZm9yIChjb25zdCByZWFkZXIgb2YgcmVhZFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgcmVhZGVyLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZFF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmV4dDogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghcHVzaFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiByZWFkUXVldWUucHVzaCh7IHJlc29sdmUsIHJlamVjdCB9KSkudGhlbigoZXZlbnQpID0+IChldmVudCA/IHsgdmFsdWU6IGV2ZW50LCBkb25lOiBmYWxzZSB9IDogeyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBwdXNoUXVldWUuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogZXZlbnQsIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hYm9ydCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGZpbmFsIFJlc3BvbnNlLCBvciByZWplY3RzXG4gICAgICogaWYgYW4gZXJyb3Igb2NjdXJyZWQgb3IgdGhlIHN0cmVhbSBlbmRlZCBwcmVtYXR1cmVseSB3aXRob3V0IHByb2R1Y2luZyBhIFJFc3BvbnNlLlxuICAgICAqL1xuICAgIGFzeW5jIGZpbmFsUmVzcG9uc2UoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZG9uZSgpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1Jlc3BvbnNlU3RyZWFtX2ZpbmFsUmVzcG9uc2UsIFwiZlwiKTtcbiAgICAgICAgaWYgKCFyZXNwb25zZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcignc3RyZWFtIGVuZGVkIHdpdGhvdXQgcHJvZHVjaW5nIGEgQ2hhdENvbXBsZXRpb24nKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGZpbmFsaXplUmVzcG9uc2Uoc25hcHNob3QsIHBhcmFtcykge1xuICAgIHJldHVybiBtYXliZVBhcnNlUmVzcG9uc2Uoc25hcHNob3QsIHBhcmFtcyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZXNwb25zZVN0cmVhbS5tanMubWFwIl0sIm5hbWVzIjpbIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCJyZWNlaXZlciIsInN0YXRlIiwidmFsdWUiLCJraW5kIiwiZiIsIlR5cGVFcnJvciIsImhhcyIsImNhbGwiLCJzZXQiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0IiwiZ2V0IiwiX1Jlc3BvbnNlU3RyZWFtX2luc3RhbmNlcyIsIl9SZXNwb25zZVN0cmVhbV9wYXJhbXMiLCJfUmVzcG9uc2VTdHJlYW1fY3VycmVudFJlc3BvbnNlU25hcHNob3QiLCJfUmVzcG9uc2VTdHJlYW1fZmluYWxSZXNwb25zZSIsIl9SZXNwb25zZVN0cmVhbV9iZWdpblJlcXVlc3QiLCJfUmVzcG9uc2VTdHJlYW1fYWRkRXZlbnQiLCJfUmVzcG9uc2VTdHJlYW1fZW5kUmVxdWVzdCIsIl9SZXNwb25zZVN0cmVhbV9hY2N1bXVsYXRlUmVzcG9uc2UiLCJBUElVc2VyQWJvcnRFcnJvciIsIk9wZW5BSUVycm9yIiwiRXZlbnRTdHJlYW0iLCJtYXliZVBhcnNlUmVzcG9uc2UiLCJSZXNwb25zZVN0cmVhbSIsImNvbnN0cnVjdG9yIiwicGFyYW1zIiwiYWRkIiwiY3JlYXRlUmVzcG9uc2UiLCJjbGllbnQiLCJvcHRpb25zIiwicnVubmVyIiwiX3J1biIsIl9jcmVhdGVSZXNwb25zZSIsImhlYWRlcnMiLCJzaWduYWwiLCJhYm9ydGVkIiwiY29udHJvbGxlciIsImFib3J0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInN0cmVhbSIsInJlc3BvbnNlcyIsImNyZWF0ZSIsIl9jb25uZWN0ZWQiLCJldmVudCIsIldlYWtNYXAiLCJXZWFrU2V0IiwiZW5kZWQiLCJ1bmRlZmluZWQiLCJyZXNwb25zZSIsIl9lbWl0IiwidHlwZSIsIm91dHB1dCIsIm91dHB1dF9pbmRleCIsImNvbnRlbnQiLCJjb250ZW50X2luZGV4Iiwic25hcHNob3QiLCJ0ZXh0IiwiYXJndW1lbnRzIiwicGFyc2VkUmVzcG9uc2UiLCJmaW5hbGl6ZVJlc3BvbnNlIiwicHVzaCIsIml0ZW0iLCJwYXJ0IiwiZGVsdGEiLCJTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwicHVzaFF1ZXVlIiwicmVhZFF1ZXVlIiwiZG9uZSIsIm9uIiwicmVhZGVyIiwic2hpZnQiLCJyZXNvbHZlIiwibGVuZ3RoIiwiZXJyIiwicmVqZWN0IiwibmV4dCIsIlByb21pc2UiLCJ0aGVuIiwicmV0dXJuIiwiZmluYWxSZXNwb25zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/lib/responses/ResponseStream.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/pagination.mjs":
/*!********************************************!*\
  !*** ./node_modules/openai/pagination.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CursorPage: () => (/* binding */ CursorPage),\n/* harmony export */   Page: () => (/* binding */ Page)\n/* harmony export */ });\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nclass Page extends _core_mjs__WEBPACK_IMPORTED_MODULE_0__.AbstractPage {\n  constructor(client, response, body, options) {\n    super(client, response, body, options);\n    this.data = body.data || [];\n    this.object = body.object;\n  }\n  getPaginatedItems() {\n    return this.data ?? [];\n  }\n  // @deprecated Please use `nextPageInfo()` instead\n  /**\n   * This page represents a response that isn't actually paginated at the API level\n   * so there will never be any next page params.\n   */\n  nextPageParams() {\n    return null;\n  }\n  nextPageInfo() {\n    return null;\n  }\n}\nclass CursorPage extends _core_mjs__WEBPACK_IMPORTED_MODULE_0__.AbstractPage {\n  constructor(client, response, body, options) {\n    super(client, response, body, options);\n    this.data = body.data || [];\n    this.has_more = body.has_more || false;\n  }\n  getPaginatedItems() {\n    return this.data ?? [];\n  }\n  hasNextPage() {\n    if (this.has_more === false) {\n      return false;\n    }\n    return super.hasNextPage();\n  }\n  // @deprecated Please use `nextPageInfo()` instead\n  nextPageParams() {\n    const info = this.nextPageInfo();\n    if (!info) return null;\n    if ('params' in info) return info.params;\n    const params = Object.fromEntries(info.url.searchParams);\n    if (!Object.keys(params).length) return null;\n    return params;\n  }\n  nextPageInfo() {\n    const data = this.getPaginatedItems();\n    if (!data.length) {\n      return null;\n    }\n    const id = data[data.length - 1]?.id;\n    if (!id) {\n      return null;\n    }\n    return {\n      params: {\n        after: id\n      }\n    };\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3BhZ2luYXRpb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQzBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNPLE1BQU1DLElBQUksU0FBU0QsbURBQVksQ0FBQztFQUNuQ0UsV0FBV0EsQ0FBQ0MsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsT0FBTyxFQUFFO0lBQ3pDLEtBQUssQ0FBQ0gsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsT0FBTyxDQUFDO0lBQ3RDLElBQUksQ0FBQ0MsSUFBSSxHQUFHRixJQUFJLENBQUNFLElBQUksSUFBSSxFQUFFO0lBQzNCLElBQUksQ0FBQ0MsTUFBTSxHQUFHSCxJQUFJLENBQUNHLE1BQU07RUFDN0I7RUFDQUMsaUJBQWlCQSxDQUFBLEVBQUc7SUFDaEIsT0FBTyxJQUFJLENBQUNGLElBQUksSUFBSSxFQUFFO0VBQzFCO0VBQ0E7RUFDQTtBQUNKO0FBQ0E7QUFDQTtFQUNJRyxjQUFjQSxDQUFBLEVBQUc7SUFDYixPQUFPLElBQUk7RUFDZjtFQUNBQyxZQUFZQSxDQUFBLEVBQUc7SUFDWCxPQUFPLElBQUk7RUFDZjtBQUNKO0FBQ08sTUFBTUMsVUFBVSxTQUFTWixtREFBWSxDQUFDO0VBQ3pDRSxXQUFXQSxDQUFDQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsSUFBSSxFQUFFQyxPQUFPLEVBQUU7SUFDekMsS0FBSyxDQUFDSCxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsSUFBSSxFQUFFQyxPQUFPLENBQUM7SUFDdEMsSUFBSSxDQUFDQyxJQUFJLEdBQUdGLElBQUksQ0FBQ0UsSUFBSSxJQUFJLEVBQUU7SUFDM0IsSUFBSSxDQUFDTSxRQUFRLEdBQUdSLElBQUksQ0FBQ1EsUUFBUSxJQUFJLEtBQUs7RUFDMUM7RUFDQUosaUJBQWlCQSxDQUFBLEVBQUc7SUFDaEIsT0FBTyxJQUFJLENBQUNGLElBQUksSUFBSSxFQUFFO0VBQzFCO0VBQ0FPLFdBQVdBLENBQUEsRUFBRztJQUNWLElBQUksSUFBSSxDQUFDRCxRQUFRLEtBQUssS0FBSyxFQUFFO01BQ3pCLE9BQU8sS0FBSztJQUNoQjtJQUNBLE9BQU8sS0FBSyxDQUFDQyxXQUFXLENBQUMsQ0FBQztFQUM5QjtFQUNBO0VBQ0FKLGNBQWNBLENBQUEsRUFBRztJQUNiLE1BQU1LLElBQUksR0FBRyxJQUFJLENBQUNKLFlBQVksQ0FBQyxDQUFDO0lBQ2hDLElBQUksQ0FBQ0ksSUFBSSxFQUNMLE9BQU8sSUFBSTtJQUNmLElBQUksUUFBUSxJQUFJQSxJQUFJLEVBQ2hCLE9BQU9BLElBQUksQ0FBQ0MsTUFBTTtJQUN0QixNQUFNQSxNQUFNLEdBQUdDLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDSCxJQUFJLENBQUNJLEdBQUcsQ0FBQ0MsWUFBWSxDQUFDO0lBQ3hELElBQUksQ0FBQ0gsTUFBTSxDQUFDSSxJQUFJLENBQUNMLE1BQU0sQ0FBQyxDQUFDTSxNQUFNLEVBQzNCLE9BQU8sSUFBSTtJQUNmLE9BQU9OLE1BQU07RUFDakI7RUFDQUwsWUFBWUEsQ0FBQSxFQUFHO0lBQ1gsTUFBTUosSUFBSSxHQUFHLElBQUksQ0FBQ0UsaUJBQWlCLENBQUMsQ0FBQztJQUNyQyxJQUFJLENBQUNGLElBQUksQ0FBQ2UsTUFBTSxFQUFFO01BQ2QsT0FBTyxJQUFJO0lBQ2Y7SUFDQSxNQUFNQyxFQUFFLEdBQUdoQixJQUFJLENBQUNBLElBQUksQ0FBQ2UsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFQyxFQUFFO0lBQ3BDLElBQUksQ0FBQ0EsRUFBRSxFQUFFO01BQ0wsT0FBTyxJQUFJO0lBQ2Y7SUFDQSxPQUFPO01BQUVQLE1BQU0sRUFBRTtRQUFFUSxLQUFLLEVBQUVEO01BQUc7SUFBRSxDQUFDO0VBQ3BDO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9wYWdpbmF0aW9uLm1qcz8yYzdmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBYnN0cmFjdFBhZ2UgfSBmcm9tIFwiLi9jb3JlLm1qc1wiO1xuLyoqXG4gKiBOb3RlOiBubyBwYWdpbmF0aW9uIGFjdHVhbGx5IG9jY3VycyB5ZXQsIHRoaXMgaXMgZm9yIGZvcndhcmRzLWNvbXBhdGliaWxpdHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBQYWdlIGV4dGVuZHMgQWJzdHJhY3RQYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihjbGllbnQsIHJlc3BvbnNlLCBib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGNsaWVudCwgcmVzcG9uc2UsIGJvZHksIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmRhdGEgPSBib2R5LmRhdGEgfHwgW107XG4gICAgICAgIHRoaXMub2JqZWN0ID0gYm9keS5vYmplY3Q7XG4gICAgfVxuICAgIGdldFBhZ2luYXRlZEl0ZW1zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhID8/IFtdO1xuICAgIH1cbiAgICAvLyBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGBuZXh0UGFnZUluZm8oKWAgaW5zdGVhZFxuICAgIC8qKlxuICAgICAqIFRoaXMgcGFnZSByZXByZXNlbnRzIGEgcmVzcG9uc2UgdGhhdCBpc24ndCBhY3R1YWxseSBwYWdpbmF0ZWQgYXQgdGhlIEFQSSBsZXZlbFxuICAgICAqIHNvIHRoZXJlIHdpbGwgbmV2ZXIgYmUgYW55IG5leHQgcGFnZSBwYXJhbXMuXG4gICAgICovXG4gICAgbmV4dFBhZ2VQYXJhbXMoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBuZXh0UGFnZUluZm8oKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDdXJzb3JQYWdlIGV4dGVuZHMgQWJzdHJhY3RQYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihjbGllbnQsIHJlc3BvbnNlLCBib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGNsaWVudCwgcmVzcG9uc2UsIGJvZHksIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmRhdGEgPSBib2R5LmRhdGEgfHwgW107XG4gICAgICAgIHRoaXMuaGFzX21vcmUgPSBib2R5Lmhhc19tb3JlIHx8IGZhbHNlO1xuICAgIH1cbiAgICBnZXRQYWdpbmF0ZWRJdGVtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YSA/PyBbXTtcbiAgICB9XG4gICAgaGFzTmV4dFBhZ2UoKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc19tb3JlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5oYXNOZXh0UGFnZSgpO1xuICAgIH1cbiAgICAvLyBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGBuZXh0UGFnZUluZm8oKWAgaW5zdGVhZFxuICAgIG5leHRQYWdlUGFyYW1zKCkge1xuICAgICAgICBjb25zdCBpbmZvID0gdGhpcy5uZXh0UGFnZUluZm8oKTtcbiAgICAgICAgaWYgKCFpbmZvKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICgncGFyYW1zJyBpbiBpbmZvKVxuICAgICAgICAgICAgcmV0dXJuIGluZm8ucGFyYW1zO1xuICAgICAgICBjb25zdCBwYXJhbXMgPSBPYmplY3QuZnJvbUVudHJpZXMoaW5mby51cmwuc2VhcmNoUGFyYW1zKTtcbiAgICAgICAgaWYgKCFPYmplY3Qua2V5cyhwYXJhbXMpLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgIH1cbiAgICBuZXh0UGFnZUluZm8oKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdldFBhZ2luYXRlZEl0ZW1zKCk7XG4gICAgICAgIGlmICghZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlkID0gZGF0YVtkYXRhLmxlbmd0aCAtIDFdPy5pZDtcbiAgICAgICAgaWYgKCFpZCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgcGFyYW1zOiB7IGFmdGVyOiBpZCB9IH07XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnaW5hdGlvbi5tanMubWFwIl0sIm5hbWVzIjpbIkFic3RyYWN0UGFnZSIsIlBhZ2UiLCJjb25zdHJ1Y3RvciIsImNsaWVudCIsInJlc3BvbnNlIiwiYm9keSIsIm9wdGlvbnMiLCJkYXRhIiwib2JqZWN0IiwiZ2V0UGFnaW5hdGVkSXRlbXMiLCJuZXh0UGFnZVBhcmFtcyIsIm5leHRQYWdlSW5mbyIsIkN1cnNvclBhZ2UiLCJoYXNfbW9yZSIsImhhc05leHRQYWdlIiwiaW5mbyIsInBhcmFtcyIsIk9iamVjdCIsImZyb21FbnRyaWVzIiwidXJsIiwic2VhcmNoUGFyYW1zIiwia2V5cyIsImxlbmd0aCIsImlkIiwiYWZ0ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/pagination.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resource.mjs":
/*!******************************************!*\
  !*** ./node_modules/openai/resource.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIResource: () => (/* binding */ APIResource)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nclass APIResource {\n  constructor(client) {\n    this._client = client;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDTyxNQUFNQSxXQUFXLENBQUM7RUFDckJDLFdBQVdBLENBQUNDLE1BQU0sRUFBRTtJQUNoQixJQUFJLENBQUNDLE9BQU8sR0FBR0QsTUFBTTtFQUN6QjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2UubWpzP2UyYzgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmV4cG9ydCBjbGFzcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgICAgIHRoaXMuX2NsaWVudCA9IGNsaWVudDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvdXJjZS5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiY29uc3RydWN0b3IiLCJjbGllbnQiLCJfY2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resource.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/audio/audio.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/resources/audio/audio.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Audio: () => (/* binding */ Audio)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _speech_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./speech.mjs */ \"(rsc)/./node_modules/openai/resources/audio/speech.mjs\");\n/* harmony import */ var _transcriptions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transcriptions.mjs */ \"(rsc)/./node_modules/openai/resources/audio/transcriptions.mjs\");\n/* harmony import */ var _translations_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./translations.mjs */ \"(rsc)/./node_modules/openai/resources/audio/translations.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\nclass Audio extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  constructor() {\n    super(...arguments);\n    this.transcriptions = new _transcriptions_mjs__WEBPACK_IMPORTED_MODULE_1__.Transcriptions(this._client);\n    this.translations = new _translations_mjs__WEBPACK_IMPORTED_MODULE_2__.Translations(this._client);\n    this.speech = new _speech_mjs__WEBPACK_IMPORTED_MODULE_3__.Speech(this._client);\n  }\n}\nAudio.Transcriptions = _transcriptions_mjs__WEBPACK_IMPORTED_MODULE_1__.Transcriptions;\nAudio.Translations = _translations_mjs__WEBPACK_IMPORTED_MODULE_2__.Translations;\nAudio.Speech = _speech_mjs__WEBPACK_IMPORTED_MODULE_3__.Speech;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby9hdWRpby5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNpRDtBQUNQO0FBQ0o7QUFDb0I7QUFDSDtBQUNEO0FBQ0g7QUFDNUMsTUFBTU8sS0FBSyxTQUFTUCxzREFBVyxDQUFDO0VBQ25DUSxXQUFXQSxDQUFBLEVBQUc7SUFDVixLQUFLLENBQUMsR0FBR0MsU0FBUyxDQUFDO0lBQ25CLElBQUksQ0FBQ0MsY0FBYyxHQUFHLElBQUlQLCtEQUFnQyxDQUFDLElBQUksQ0FBQ1EsT0FBTyxDQUFDO0lBQ3hFLElBQUksQ0FBQ0MsWUFBWSxHQUFHLElBQUlQLDJEQUE0QixDQUFDLElBQUksQ0FBQ00sT0FBTyxDQUFDO0lBQ2xFLElBQUksQ0FBQ0UsTUFBTSxHQUFHLElBQUlaLCtDQUFnQixDQUFDLElBQUksQ0FBQ1UsT0FBTyxDQUFDO0VBQ3BEO0FBQ0o7QUFDQUosS0FBSyxDQUFDSCxjQUFjLEdBQUdBLCtEQUFjO0FBQ3JDRyxLQUFLLENBQUNELFlBQVksR0FBR0EsMkRBQVk7QUFDakNDLEtBQUssQ0FBQ0wsTUFBTSxHQUFHQSwrQ0FBTSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby9hdWRpby5tanM/ZGE1NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgKiBhcyBTcGVlY2hBUEkgZnJvbSBcIi4vc3BlZWNoLm1qc1wiO1xuaW1wb3J0IHsgU3BlZWNoIH0gZnJvbSBcIi4vc3BlZWNoLm1qc1wiO1xuaW1wb3J0ICogYXMgVHJhbnNjcmlwdGlvbnNBUEkgZnJvbSBcIi4vdHJhbnNjcmlwdGlvbnMubWpzXCI7XG5pbXBvcnQgeyBUcmFuc2NyaXB0aW9ucywgfSBmcm9tIFwiLi90cmFuc2NyaXB0aW9ucy5tanNcIjtcbmltcG9ydCAqIGFzIFRyYW5zbGF0aW9uc0FQSSBmcm9tIFwiLi90cmFuc2xhdGlvbnMubWpzXCI7XG5pbXBvcnQgeyBUcmFuc2xhdGlvbnMsIH0gZnJvbSBcIi4vdHJhbnNsYXRpb25zLm1qc1wiO1xuZXhwb3J0IGNsYXNzIEF1ZGlvIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnRyYW5zY3JpcHRpb25zID0gbmV3IFRyYW5zY3JpcHRpb25zQVBJLlRyYW5zY3JpcHRpb25zKHRoaXMuX2NsaWVudCk7XG4gICAgICAgIHRoaXMudHJhbnNsYXRpb25zID0gbmV3IFRyYW5zbGF0aW9uc0FQSS5UcmFuc2xhdGlvbnModGhpcy5fY2xpZW50KTtcbiAgICAgICAgdGhpcy5zcGVlY2ggPSBuZXcgU3BlZWNoQVBJLlNwZWVjaCh0aGlzLl9jbGllbnQpO1xuICAgIH1cbn1cbkF1ZGlvLlRyYW5zY3JpcHRpb25zID0gVHJhbnNjcmlwdGlvbnM7XG5BdWRpby5UcmFuc2xhdGlvbnMgPSBUcmFuc2xhdGlvbnM7XG5BdWRpby5TcGVlY2ggPSBTcGVlY2g7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdWRpby5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiU3BlZWNoQVBJIiwiU3BlZWNoIiwiVHJhbnNjcmlwdGlvbnNBUEkiLCJUcmFuc2NyaXB0aW9ucyIsIlRyYW5zbGF0aW9uc0FQSSIsIlRyYW5zbGF0aW9ucyIsIkF1ZGlvIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJ0cmFuc2NyaXB0aW9ucyIsIl9jbGllbnQiLCJ0cmFuc2xhdGlvbnMiLCJzcGVlY2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/audio/audio.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/audio/speech.mjs":
/*!********************************************************!*\
  !*** ./node_modules/openai/resources/audio/speech.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Speech: () => (/* binding */ Speech)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass Speech extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  /**\n   * Generates audio from the input text.\n   */\n  create(body, options) {\n    return this._client.post('/audio/speech', {\n      body,\n      ...options,\n      headers: {\n        Accept: 'application/octet-stream',\n        ...options?.headers\n      },\n      __binaryResponse: true\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby9zcGVlY2gubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDaUQ7QUFDMUMsTUFBTUMsTUFBTSxTQUFTRCxzREFBVyxDQUFDO0VBQ3BDO0FBQ0o7QUFDQTtFQUNJRSxNQUFNQSxDQUFDQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtJQUNsQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsZUFBZSxFQUFFO01BQ3RDSCxJQUFJO01BQ0osR0FBR0MsT0FBTztNQUNWRyxPQUFPLEVBQUU7UUFBRUMsTUFBTSxFQUFFLDBCQUEwQjtRQUFFLEdBQUdKLE9BQU8sRUFBRUc7TUFBUSxDQUFDO01BQ3BFRSxnQkFBZ0IsRUFBRTtJQUN0QixDQUFDLENBQUM7RUFDTjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL3NwZWVjaC5tanM/OWNiMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vcmVzb3VyY2UubWpzXCI7XG5leHBvcnQgY2xhc3MgU3BlZWNoIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhdWRpbyBmcm9tIHRoZSBpbnB1dCB0ZXh0LlxuICAgICAqL1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2F1ZGlvL3NwZWVjaCcsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgICAgICBfX2JpbmFyeVJlc3BvbnNlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zcGVlY2gubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIlNwZWVjaCIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiLCJoZWFkZXJzIiwiQWNjZXB0IiwiX19iaW5hcnlSZXNwb25zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/audio/speech.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/audio/transcriptions.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/openai/resources/audio/transcriptions.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Transcriptions: () => (/* binding */ Transcriptions)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.mjs */ \"(rsc)/./node_modules/openai/uploads.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Transcriptions extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  create(body, options) {\n    return this._client.post('/audio/transcriptions', _core_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions({\n      body,\n      ...options,\n      stream: body.stream ?? false,\n      __metadata: {\n        model: body.model\n      }\n    }));\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby90cmFuc2NyaXB0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDaUQ7QUFDVjtBQUNoQyxNQUFNRSxjQUFjLFNBQVNGLHNEQUFXLENBQUM7RUFDNUNHLE1BQU1BLENBQUNDLElBQUksRUFBRUMsT0FBTyxFQUFFO0lBQ2xCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyx1QkFBdUIsRUFBRU4sa0VBQWdDLENBQUM7TUFDL0VHLElBQUk7TUFDSixHQUFHQyxPQUFPO01BQ1ZJLE1BQU0sRUFBRUwsSUFBSSxDQUFDSyxNQUFNLElBQUksS0FBSztNQUM1QkMsVUFBVSxFQUFFO1FBQUVDLEtBQUssRUFBRVAsSUFBSSxDQUFDTztNQUFNO0lBQ3BDLENBQUMsQ0FBQyxDQUFDO0VBQ1A7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby90cmFuc2NyaXB0aW9ucy5tanM/NWZjOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gXCIuLi8uLi9jb3JlLm1qc1wiO1xuZXhwb3J0IGNsYXNzIFRyYW5zY3JpcHRpb25zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2F1ZGlvL3RyYW5zY3JpcHRpb25zJywgQ29yZS5tdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMoe1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBzdHJlYW06IGJvZHkuc3RyZWFtID8/IGZhbHNlLFxuICAgICAgICAgICAgX19tZXRhZGF0YTogeyBtb2RlbDogYm9keS5tb2RlbCB9LFxuICAgICAgICB9KSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNjcmlwdGlvbnMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIkNvcmUiLCJUcmFuc2NyaXB0aW9ucyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiLCJtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMiLCJzdHJlYW0iLCJfX21ldGFkYXRhIiwibW9kZWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/audio/transcriptions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/audio/translations.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/openai/resources/audio/translations.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Translations: () => (/* binding */ Translations)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.mjs */ \"(rsc)/./node_modules/openai/uploads.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Translations extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  create(body, options) {\n    return this._client.post('/audio/translations', _core_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions({\n      body,\n      ...options,\n      __metadata: {\n        model: body.model\n      }\n    }));\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby90cmFuc2xhdGlvbnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ2lEO0FBQ1Y7QUFDaEMsTUFBTUUsWUFBWSxTQUFTRixzREFBVyxDQUFDO0VBQzFDRyxNQUFNQSxDQUFDQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtJQUNsQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMscUJBQXFCLEVBQUVOLGtFQUFnQyxDQUFDO01BQUVHLElBQUk7TUFBRSxHQUFHQyxPQUFPO01BQUVJLFVBQVUsRUFBRTtRQUFFQyxLQUFLLEVBQUVOLElBQUksQ0FBQ007TUFBTTtJQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzlJO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYXVkaW8vdHJhbnNsYXRpb25zLm1qcz80YzFkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCAqIGFzIENvcmUgZnJvbSBcIi4uLy4uL2NvcmUubWpzXCI7XG5leHBvcnQgY2xhc3MgVHJhbnNsYXRpb25zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2F1ZGlvL3RyYW5zbGF0aW9ucycsIENvcmUubXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zKHsgYm9keSwgLi4ub3B0aW9ucywgX19tZXRhZGF0YTogeyBtb2RlbDogYm9keS5tb2RlbCB9IH0pKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2xhdGlvbnMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIkNvcmUiLCJUcmFuc2xhdGlvbnMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0IiwibXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zIiwiX19tZXRhZGF0YSIsIm1vZGVsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/audio/translations.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/batches.mjs":
/*!***************************************************!*\
  !*** ./node_modules/openai/resources/batches.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Batches: () => (/* binding */ Batches),\n/* harmony export */   BatchesPage: () => (/* binding */ BatchesPage)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Batches extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  /**\n   * Creates and executes a batch from an uploaded file of requests\n   */\n  create(body, options) {\n    return this._client.post('/batches', {\n      body,\n      ...options\n    });\n  }\n  /**\n   * Retrieves a batch.\n   */\n  retrieve(batchId, options) {\n    return this._client.get(`/batches/${batchId}`, options);\n  }\n  list(query = {}, options) {\n    if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n      return this.list({}, query);\n    }\n    return this._client.getAPIList('/batches', BatchesPage, {\n      query,\n      ...options\n    });\n  }\n  /**\n   * Cancels an in-progress batch. The batch will be in status `cancelling` for up to\n   * 10 minutes, before changing to `cancelled`, where it will have partial results\n   * (if any) available in the output file.\n   */\n  cancel(batchId, options) {\n    return this._client.post(`/batches/${batchId}/cancel`, options);\n  }\n}\nclass BatchesPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage {}\nBatches.BatchesPage = BatchesPage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iYXRjaGVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQzhDO0FBQ0M7QUFDQTtBQUN4QyxNQUFNRyxPQUFPLFNBQVNILHNEQUFXLENBQUM7RUFDckM7QUFDSjtBQUNBO0VBQ0lJLE1BQU1BLENBQUNDLElBQUksRUFBRUMsT0FBTyxFQUFFO0lBQ2xCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxVQUFVLEVBQUU7TUFBRUgsSUFBSTtNQUFFLEdBQUdDO0lBQVEsQ0FBQyxDQUFDO0VBQzlEO0VBQ0E7QUFDSjtBQUNBO0VBQ0lHLFFBQVFBLENBQUNDLE9BQU8sRUFBRUosT0FBTyxFQUFFO0lBQ3ZCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNJLEdBQUcsQ0FBRSxZQUFXRCxPQUFRLEVBQUMsRUFBRUosT0FBTyxDQUFDO0VBQzNEO0VBQ0FNLElBQUlBLENBQUNDLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRVAsT0FBTyxFQUFFO0lBQ3RCLElBQUlMLDJEQUFnQixDQUFDWSxLQUFLLENBQUMsRUFBRTtNQUN6QixPQUFPLElBQUksQ0FBQ0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFQyxLQUFLLENBQUM7SUFDL0I7SUFDQSxPQUFPLElBQUksQ0FBQ04sT0FBTyxDQUFDTyxVQUFVLENBQUMsVUFBVSxFQUFFQyxXQUFXLEVBQUU7TUFBRUYsS0FBSztNQUFFLEdBQUdQO0lBQVEsQ0FBQyxDQUFDO0VBQ2xGO0VBQ0E7QUFDSjtBQUNBO0FBQ0E7QUFDQTtFQUNJVSxNQUFNQSxDQUFDTixPQUFPLEVBQUVKLE9BQU8sRUFBRTtJQUNyQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUUsWUFBV0UsT0FBUSxTQUFRLEVBQUVKLE9BQU8sQ0FBQztFQUNuRTtBQUNKO0FBQ08sTUFBTVMsV0FBVyxTQUFTYix1REFBVSxDQUFDO0FBRTVDQyxPQUFPLENBQUNZLFdBQVcsR0FBR0EsV0FBVyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iYXRjaGVzLm1qcz9jNDk2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IGlzUmVxdWVzdE9wdGlvbnMgfSBmcm9tIFwiLi4vY29yZS5tanNcIjtcbmltcG9ydCB7IEN1cnNvclBhZ2UgfSBmcm9tIFwiLi4vcGFnaW5hdGlvbi5tanNcIjtcbmV4cG9ydCBjbGFzcyBCYXRjaGVzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGV4ZWN1dGVzIGEgYmF0Y2ggZnJvbSBhbiB1cGxvYWRlZCBmaWxlIG9mIHJlcXVlc3RzXG4gICAgICovXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvYmF0Y2hlcycsIHsgYm9keSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgYmF0Y2guXG4gICAgICovXG4gICAgcmV0cmlldmUoYmF0Y2hJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL2JhdGNoZXMvJHtiYXRjaElkfWAsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBsaXN0KHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0KHt9LCBxdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KCcvYmF0Y2hlcycsIEJhdGNoZXNQYWdlLCB7IHF1ZXJ5LCAuLi5vcHRpb25zIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYW5jZWxzIGFuIGluLXByb2dyZXNzIGJhdGNoLiBUaGUgYmF0Y2ggd2lsbCBiZSBpbiBzdGF0dXMgYGNhbmNlbGxpbmdgIGZvciB1cCB0b1xuICAgICAqIDEwIG1pbnV0ZXMsIGJlZm9yZSBjaGFuZ2luZyB0byBgY2FuY2VsbGVkYCwgd2hlcmUgaXQgd2lsbCBoYXZlIHBhcnRpYWwgcmVzdWx0c1xuICAgICAqIChpZiBhbnkpIGF2YWlsYWJsZSBpbiB0aGUgb3V0cHV0IGZpbGUuXG4gICAgICovXG4gICAgY2FuY2VsKGJhdGNoSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvYmF0Y2hlcy8ke2JhdGNoSWR9L2NhbmNlbGAsIG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBCYXRjaGVzUGFnZSBleHRlbmRzIEN1cnNvclBhZ2Uge1xufVxuQmF0Y2hlcy5CYXRjaGVzUGFnZSA9IEJhdGNoZXNQYWdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmF0Y2hlcy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiaXNSZXF1ZXN0T3B0aW9ucyIsIkN1cnNvclBhZ2UiLCJCYXRjaGVzIiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJfY2xpZW50IiwicG9zdCIsInJldHJpZXZlIiwiYmF0Y2hJZCIsImdldCIsImxpc3QiLCJxdWVyeSIsImdldEFQSUxpc3QiLCJCYXRjaGVzUGFnZSIsImNhbmNlbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/batches.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/assistants.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/openai/resources/beta/assistants.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Assistants: () => (/* binding */ Assistants),\n/* harmony export */   AssistantsPage: () => (/* binding */ AssistantsPage)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Assistants extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  /**\n   * Create an assistant with a model and instructions.\n   */\n  create(body, options) {\n    return this._client.post('/assistants', {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Retrieves an assistant.\n   */\n  retrieve(assistantId, options) {\n    return this._client.get(`/assistants/${assistantId}`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Modifies an assistant.\n   */\n  update(assistantId, body, options) {\n    return this._client.post(`/assistants/${assistantId}`, {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  list(query = {}, options) {\n    if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n      return this.list({}, query);\n    }\n    return this._client.getAPIList('/assistants', AssistantsPage, {\n      query,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Delete an assistant.\n   */\n  del(assistantId, options) {\n    return this._client.delete(`/assistants/${assistantId}`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n}\nclass AssistantsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage {}\nAssistants.AssistantsPage = AssistantsPage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL2Fzc2lzdGFudHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDaUQ7QUFDQztBQUNBO0FBQzNDLE1BQU1HLFVBQVUsU0FBU0gsc0RBQVcsQ0FBQztFQUN4QztBQUNKO0FBQ0E7RUFDSUksTUFBTUEsQ0FBQ0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7SUFDbEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLGFBQWEsRUFBRTtNQUNwQ0gsSUFBSTtNQUNKLEdBQUdDLE9BQU87TUFDVkcsT0FBTyxFQUFFO1FBQUUsYUFBYSxFQUFFLGVBQWU7UUFBRSxHQUFHSCxPQUFPLEVBQUVHO01BQVE7SUFDbkUsQ0FBQyxDQUFDO0VBQ047RUFDQTtBQUNKO0FBQ0E7RUFDSUMsUUFBUUEsQ0FBQ0MsV0FBVyxFQUFFTCxPQUFPLEVBQUU7SUFDM0IsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0ssR0FBRyxDQUFFLGVBQWNELFdBQVksRUFBQyxFQUFFO01BQ2xELEdBQUdMLE9BQU87TUFDVkcsT0FBTyxFQUFFO1FBQUUsYUFBYSxFQUFFLGVBQWU7UUFBRSxHQUFHSCxPQUFPLEVBQUVHO01BQVE7SUFDbkUsQ0FBQyxDQUFDO0VBQ047RUFDQTtBQUNKO0FBQ0E7RUFDSUksTUFBTUEsQ0FBQ0YsV0FBVyxFQUFFTixJQUFJLEVBQUVDLE9BQU8sRUFBRTtJQUMvQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUUsZUFBY0csV0FBWSxFQUFDLEVBQUU7TUFDbkROLElBQUk7TUFDSixHQUFHQyxPQUFPO01BQ1ZHLE9BQU8sRUFBRTtRQUFFLGFBQWEsRUFBRSxlQUFlO1FBQUUsR0FBR0gsT0FBTyxFQUFFRztNQUFRO0lBQ25FLENBQUMsQ0FBQztFQUNOO0VBQ0FLLElBQUlBLENBQUNDLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRVQsT0FBTyxFQUFFO0lBQ3RCLElBQUlMLDJEQUFnQixDQUFDYyxLQUFLLENBQUMsRUFBRTtNQUN6QixPQUFPLElBQUksQ0FBQ0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFQyxLQUFLLENBQUM7SUFDL0I7SUFDQSxPQUFPLElBQUksQ0FBQ1IsT0FBTyxDQUFDUyxVQUFVLENBQUMsYUFBYSxFQUFFQyxjQUFjLEVBQUU7TUFDMURGLEtBQUs7TUFDTCxHQUFHVCxPQUFPO01BQ1ZHLE9BQU8sRUFBRTtRQUFFLGFBQWEsRUFBRSxlQUFlO1FBQUUsR0FBR0gsT0FBTyxFQUFFRztNQUFRO0lBQ25FLENBQUMsQ0FBQztFQUNOO0VBQ0E7QUFDSjtBQUNBO0VBQ0lTLEdBQUdBLENBQUNQLFdBQVcsRUFBRUwsT0FBTyxFQUFFO0lBQ3RCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNZLE1BQU0sQ0FBRSxlQUFjUixXQUFZLEVBQUMsRUFBRTtNQUNyRCxHQUFHTCxPQUFPO01BQ1ZHLE9BQU8sRUFBRTtRQUFFLGFBQWEsRUFBRSxlQUFlO1FBQUUsR0FBR0gsT0FBTyxFQUFFRztNQUFRO0lBQ25FLENBQUMsQ0FBQztFQUNOO0FBQ0o7QUFDTyxNQUFNUSxjQUFjLFNBQVNmLHVEQUFVLENBQUM7QUFFL0NDLFVBQVUsQ0FBQ2MsY0FBYyxHQUFHQSxjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvYXNzaXN0YW50cy5tanM/NDUzYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSBcIi4uLy4uL2NvcmUubWpzXCI7XG5pbXBvcnQgeyBDdXJzb3JQYWdlIH0gZnJvbSBcIi4uLy4uL3BhZ2luYXRpb24ubWpzXCI7XG5leHBvcnQgY2xhc3MgQXNzaXN0YW50cyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gYXNzaXN0YW50IHdpdGggYSBtb2RlbCBhbmQgaW5zdHJ1Y3Rpb25zLlxuICAgICAqL1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2Fzc2lzdGFudHMnLCB7XG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYW4gYXNzaXN0YW50LlxuICAgICAqL1xuICAgIHJldHJpZXZlKGFzc2lzdGFudElkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvYXNzaXN0YW50cy8ke2Fzc2lzdGFudElkfWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTW9kaWZpZXMgYW4gYXNzaXN0YW50LlxuICAgICAqL1xuICAgIHVwZGF0ZShhc3Npc3RhbnRJZCwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC9hc3Npc3RhbnRzLyR7YXNzaXN0YW50SWR9YCwge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGlzdChxdWVyeSA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdCh7fSwgcXVlcnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdCgnL2Fzc2lzdGFudHMnLCBBc3Npc3RhbnRzUGFnZSwge1xuICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhbiBhc3Npc3RhbnQuXG4gICAgICovXG4gICAgZGVsKGFzc2lzdGFudElkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZGVsZXRlKGAvYXNzaXN0YW50cy8ke2Fzc2lzdGFudElkfWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQXNzaXN0YW50c1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlIHtcbn1cbkFzc2lzdGFudHMuQXNzaXN0YW50c1BhZ2UgPSBBc3Npc3RhbnRzUGFnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzc2lzdGFudHMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsImlzUmVxdWVzdE9wdGlvbnMiLCJDdXJzb3JQYWdlIiwiQXNzaXN0YW50cyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiLCJoZWFkZXJzIiwicmV0cmlldmUiLCJhc3Npc3RhbnRJZCIsImdldCIsInVwZGF0ZSIsImxpc3QiLCJxdWVyeSIsImdldEFQSUxpc3QiLCJBc3Npc3RhbnRzUGFnZSIsImRlbCIsImRlbGV0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/assistants.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/beta.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/resources/beta/beta.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Beta: () => (/* binding */ Beta)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _assistants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./assistants.mjs */ \"(rsc)/./node_modules/openai/resources/beta/assistants.mjs\");\n/* harmony import */ var _chat_chat_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chat/chat.mjs */ \"(rsc)/./node_modules/openai/resources/beta/chat/chat.mjs\");\n/* harmony import */ var _realtime_realtime_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./realtime/realtime.mjs */ \"(rsc)/./node_modules/openai/resources/beta/realtime/realtime.mjs\");\n/* harmony import */ var _threads_threads_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./threads/threads.mjs */ \"(rsc)/./node_modules/openai/resources/beta/threads/threads.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\n\n\nclass Beta extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  constructor() {\n    super(...arguments);\n    this.realtime = new _realtime_realtime_mjs__WEBPACK_IMPORTED_MODULE_1__.Realtime(this._client);\n    this.chat = new _chat_chat_mjs__WEBPACK_IMPORTED_MODULE_2__.Chat(this._client);\n    this.assistants = new _assistants_mjs__WEBPACK_IMPORTED_MODULE_3__.Assistants(this._client);\n    this.threads = new _threads_threads_mjs__WEBPACK_IMPORTED_MODULE_4__.Threads(this._client);\n  }\n}\nBeta.Realtime = _realtime_realtime_mjs__WEBPACK_IMPORTED_MODULE_1__.Realtime;\nBeta.Assistants = _assistants_mjs__WEBPACK_IMPORTED_MODULE_3__.Assistants;\nBeta.AssistantsPage = _assistants_mjs__WEBPACK_IMPORTED_MODULE_3__.AssistantsPage;\nBeta.Threads = _threads_threads_mjs__WEBPACK_IMPORTED_MODULE_4__.Threads;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL2JldGEubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ2lEO0FBQ0M7QUFDUDtBQUNvQjtBQUNSO0FBQ0g7QUFDQTtBQUNIO0FBQ1Y7QUFDaEMsTUFBTVUsSUFBSSxTQUFTVixzREFBVyxDQUFDO0VBQ2xDVyxXQUFXQSxDQUFBLEVBQUc7SUFDVixLQUFLLENBQUMsR0FBR0MsU0FBUyxDQUFDO0lBQ25CLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUlSLDREQUFvQixDQUFDLElBQUksQ0FBQ1MsT0FBTyxDQUFDO0lBQ3RELElBQUksQ0FBQ0MsSUFBSSxHQUFHLElBQUliLGdEQUFZLENBQUMsSUFBSSxDQUFDWSxPQUFPLENBQUM7SUFDMUMsSUFBSSxDQUFDRSxVQUFVLEdBQUcsSUFBSWYsdURBQXdCLENBQUMsSUFBSSxDQUFDYSxPQUFPLENBQUM7SUFDNUQsSUFBSSxDQUFDRyxPQUFPLEdBQUcsSUFBSVYseURBQWtCLENBQUMsSUFBSSxDQUFDTyxPQUFPLENBQUM7RUFDdkQ7QUFDSjtBQUNBSixJQUFJLENBQUNKLFFBQVEsR0FBR0EsNERBQVE7QUFDeEJJLElBQUksQ0FBQ1AsVUFBVSxHQUFHQSx1REFBVTtBQUM1Qk8sSUFBSSxDQUFDTixjQUFjLEdBQUdBLDJEQUFjO0FBQ3BDTSxJQUFJLENBQUNGLE9BQU8sR0FBR0EseURBQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYmV0YS9iZXRhLm1qcz9mOTI1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCAqIGFzIEFzc2lzdGFudHNBUEkgZnJvbSBcIi4vYXNzaXN0YW50cy5tanNcIjtcbmltcG9ydCAqIGFzIENoYXRBUEkgZnJvbSBcIi4vY2hhdC9jaGF0Lm1qc1wiO1xuaW1wb3J0IHsgQXNzaXN0YW50cywgQXNzaXN0YW50c1BhZ2UsIH0gZnJvbSBcIi4vYXNzaXN0YW50cy5tanNcIjtcbmltcG9ydCAqIGFzIFJlYWx0aW1lQVBJIGZyb20gXCIuL3JlYWx0aW1lL3JlYWx0aW1lLm1qc1wiO1xuaW1wb3J0IHsgUmVhbHRpbWUsIH0gZnJvbSBcIi4vcmVhbHRpbWUvcmVhbHRpbWUubWpzXCI7XG5pbXBvcnQgKiBhcyBUaHJlYWRzQVBJIGZyb20gXCIuL3RocmVhZHMvdGhyZWFkcy5tanNcIjtcbmltcG9ydCB7IFRocmVhZHMsIH0gZnJvbSBcIi4vdGhyZWFkcy90aHJlYWRzLm1qc1wiO1xuaW1wb3J0IHsgQ2hhdCB9IGZyb20gXCIuL2NoYXQvY2hhdC5tanNcIjtcbmV4cG9ydCBjbGFzcyBCZXRhIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnJlYWx0aW1lID0gbmV3IFJlYWx0aW1lQVBJLlJlYWx0aW1lKHRoaXMuX2NsaWVudCk7XG4gICAgICAgIHRoaXMuY2hhdCA9IG5ldyBDaGF0QVBJLkNoYXQodGhpcy5fY2xpZW50KTtcbiAgICAgICAgdGhpcy5hc3Npc3RhbnRzID0gbmV3IEFzc2lzdGFudHNBUEkuQXNzaXN0YW50cyh0aGlzLl9jbGllbnQpO1xuICAgICAgICB0aGlzLnRocmVhZHMgPSBuZXcgVGhyZWFkc0FQSS5UaHJlYWRzKHRoaXMuX2NsaWVudCk7XG4gICAgfVxufVxuQmV0YS5SZWFsdGltZSA9IFJlYWx0aW1lO1xuQmV0YS5Bc3Npc3RhbnRzID0gQXNzaXN0YW50cztcbkJldGEuQXNzaXN0YW50c1BhZ2UgPSBBc3Npc3RhbnRzUGFnZTtcbkJldGEuVGhyZWFkcyA9IFRocmVhZHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iZXRhLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJBc3Npc3RhbnRzQVBJIiwiQ2hhdEFQSSIsIkFzc2lzdGFudHMiLCJBc3Npc3RhbnRzUGFnZSIsIlJlYWx0aW1lQVBJIiwiUmVhbHRpbWUiLCJUaHJlYWRzQVBJIiwiVGhyZWFkcyIsIkNoYXQiLCJCZXRhIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJyZWFsdGltZSIsIl9jbGllbnQiLCJjaGF0IiwiYXNzaXN0YW50cyIsInRocmVhZHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/beta.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/chat/chat.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/openai/resources/beta/chat/chat.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chat: () => (/* binding */ Chat)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _completions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./completions.mjs */ \"(rsc)/./node_modules/openai/resources/beta/chat/completions.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Chat extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  constructor() {\n    super(...arguments);\n    this.completions = new _completions_mjs__WEBPACK_IMPORTED_MODULE_1__.Completions(this._client);\n  }\n}\n(function (Chat) {\n  Chat.Completions = _completions_mjs__WEBPACK_IMPORTED_MODULE_1__.Completions;\n})(Chat || (Chat = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL2NoYXQvY2hhdC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDb0Q7QUFDQTtBQUM3QyxNQUFNRSxJQUFJLFNBQVNGLHNEQUFXLENBQUM7RUFDbENHLFdBQVdBLENBQUEsRUFBRztJQUNWLEtBQUssQ0FBQyxHQUFHQyxTQUFTLENBQUM7SUFDbkIsSUFBSSxDQUFDQyxXQUFXLEdBQUcsSUFBSUoseURBQTBCLENBQUMsSUFBSSxDQUFDTSxPQUFPLENBQUM7RUFDbkU7QUFDSjtBQUNBLENBQUMsVUFBVUwsSUFBSSxFQUFFO0VBQ2JBLElBQUksQ0FBQ0ksV0FBVyxHQUFHTCx5REFBMEI7QUFDakQsQ0FBQyxFQUFFQyxJQUFJLEtBQUtBLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvY2hhdC9jaGF0Lm1qcz82Zjg3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi8uLi9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCAqIGFzIENvbXBsZXRpb25zQVBJIGZyb20gXCIuL2NvbXBsZXRpb25zLm1qc1wiO1xuZXhwb3J0IGNsYXNzIENoYXQgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY29tcGxldGlvbnMgPSBuZXcgQ29tcGxldGlvbnNBUEkuQ29tcGxldGlvbnModGhpcy5fY2xpZW50KTtcbiAgICB9XG59XG4oZnVuY3Rpb24gKENoYXQpIHtcbiAgICBDaGF0LkNvbXBsZXRpb25zID0gQ29tcGxldGlvbnNBUEkuQ29tcGxldGlvbnM7XG59KShDaGF0IHx8IChDaGF0ID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoYXQubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIkNvbXBsZXRpb25zQVBJIiwiQ2hhdCIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiY29tcGxldGlvbnMiLCJDb21wbGV0aW9ucyIsIl9jbGllbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/chat/chat.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/chat/completions.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/openai/resources/beta/chat/completions.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionRunner: () => (/* reexport safe */ _lib_ChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_3__.ChatCompletionRunner),\n/* harmony export */   ChatCompletionStream: () => (/* reexport safe */ _lib_ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_2__.ChatCompletionStream),\n/* harmony export */   ChatCompletionStreamingRunner: () => (/* reexport safe */ _lib_ChatCompletionStreamingRunner_mjs__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionStreamingRunner),\n/* harmony export */   Completions: () => (/* binding */ Completions),\n/* harmony export */   ParsingFunction: () => (/* reexport safe */ _lib_RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_1__.ParsingFunction),\n/* harmony export */   ParsingToolFunction: () => (/* reexport safe */ _lib_RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_1__.ParsingToolFunction)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _lib_ChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lib/ChatCompletionRunner.mjs */ \"(rsc)/./node_modules/openai/lib/ChatCompletionRunner.mjs\");\n/* harmony import */ var _lib_ChatCompletionStreamingRunner_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/ChatCompletionStreamingRunner.mjs */ \"(rsc)/./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs\");\n/* harmony import */ var _lib_ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/ChatCompletionStream.mjs */ \"(rsc)/./node_modules/openai/lib/ChatCompletionStream.mjs\");\n/* harmony import */ var _lib_parser_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../lib/parser.mjs */ \"(rsc)/./node_modules/openai/lib/parser.mjs\");\n/* harmony import */ var _lib_RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/RunnableFunction.mjs */ \"(rsc)/./node_modules/openai/lib/RunnableFunction.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\n\n\nclass Completions extends _resource_mjs__WEBPACK_IMPORTED_MODULE_4__.APIResource {\n  parse(body, options) {\n    (0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_5__.validateInputTools)(body.tools);\n    return this._client.chat.completions.create(body, {\n      ...options,\n      headers: {\n        ...options?.headers,\n        'X-Stainless-Helper-Method': 'beta.chat.completions.parse'\n      }\n    })._thenUnwrap(completion => (0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_5__.parseChatCompletion)(completion, body));\n  }\n  runFunctions(body, options) {\n    if (body.stream) {\n      return _lib_ChatCompletionStreamingRunner_mjs__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionStreamingRunner.runFunctions(this._client, body, options);\n    }\n    return _lib_ChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_3__.ChatCompletionRunner.runFunctions(this._client, body, options);\n  }\n  runTools(body, options) {\n    if (body.stream) {\n      return _lib_ChatCompletionStreamingRunner_mjs__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionStreamingRunner.runTools(this._client, body, options);\n    }\n    return _lib_ChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_3__.ChatCompletionRunner.runTools(this._client, body, options);\n  }\n  /**\n   * Creates a chat completion stream\n   */\n  stream(body, options) {\n    return _lib_ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_2__.ChatCompletionStream.createChatCompletion(this._client, body, options);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL2NoYXQvY29tcGxldGlvbnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ29EO0FBQ3lCO0FBQ21CO0FBQ25CO0FBQ0s7QUFDYztBQUNOO0FBQ2I7QUFDQztBQUN2RSxNQUFNUSxXQUFXLFNBQVNSLHNEQUFXLENBQUM7RUFDekNTLEtBQUtBLENBQUNDLElBQUksRUFBRUMsT0FBTyxFQUFFO0lBQ2pCTixtRUFBa0IsQ0FBQ0ssSUFBSSxDQUFDRSxLQUFLLENBQUM7SUFDOUIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDQyxXQUFXLENBQy9CQyxNQUFNLENBQUNOLElBQUksRUFBRTtNQUNkLEdBQUdDLE9BQU87TUFDVk0sT0FBTyxFQUFFO1FBQ0wsR0FBR04sT0FBTyxFQUFFTSxPQUFPO1FBQ25CLDJCQUEyQixFQUFFO01BQ2pDO0lBQ0osQ0FBQyxDQUFDLENBQ0dDLFdBQVcsQ0FBRUMsVUFBVSxJQUFLZixvRUFBbUIsQ0FBQ2UsVUFBVSxFQUFFVCxJQUFJLENBQUMsQ0FBQztFQUMzRTtFQUNBVSxZQUFZQSxDQUFDVixJQUFJLEVBQUVDLE9BQU8sRUFBRTtJQUN4QixJQUFJRCxJQUFJLENBQUNXLE1BQU0sRUFBRTtNQUNiLE9BQU9uQixpR0FBNkIsQ0FBQ2tCLFlBQVksQ0FBQyxJQUFJLENBQUNQLE9BQU8sRUFBRUgsSUFBSSxFQUFFQyxPQUFPLENBQUM7SUFDbEY7SUFDQSxPQUFPViwrRUFBb0IsQ0FBQ21CLFlBQVksQ0FBQyxJQUFJLENBQUNQLE9BQU8sRUFBRUgsSUFBSSxFQUFFQyxPQUFPLENBQUM7RUFDekU7RUFDQVcsUUFBUUEsQ0FBQ1osSUFBSSxFQUFFQyxPQUFPLEVBQUU7SUFDcEIsSUFBSUQsSUFBSSxDQUFDVyxNQUFNLEVBQUU7TUFDYixPQUFPbkIsaUdBQTZCLENBQUNvQixRQUFRLENBQUMsSUFBSSxDQUFDVCxPQUFPLEVBQUVILElBQUksRUFBRUMsT0FBTyxDQUFDO0lBQzlFO0lBQ0EsT0FBT1YsK0VBQW9CLENBQUNxQixRQUFRLENBQUMsSUFBSSxDQUFDVCxPQUFPLEVBQUVILElBQUksRUFBRUMsT0FBTyxDQUFDO0VBQ3JFO0VBQ0E7QUFDSjtBQUNBO0VBQ0lVLE1BQU1BLENBQUNYLElBQUksRUFBRUMsT0FBTyxFQUFFO0lBQ2xCLE9BQU9SLCtFQUFvQixDQUFDb0Isb0JBQW9CLENBQUMsSUFBSSxDQUFDVixPQUFPLEVBQUVILElBQUksRUFBRUMsT0FBTyxDQUFDO0VBQ2pGO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYmV0YS9jaGF0L2NvbXBsZXRpb25zLm1qcz8wMGNhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi8uLi9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IENoYXRDb21wbGV0aW9uUnVubmVyIH0gZnJvbSBcIi4uLy4uLy4uL2xpYi9DaGF0Q29tcGxldGlvblJ1bm5lci5tanNcIjtcbmltcG9ydCB7IENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyLCB9IGZyb20gXCIuLi8uLi8uLi9saWIvQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXIubWpzXCI7XG5pbXBvcnQgeyBDaGF0Q29tcGxldGlvblN0cmVhbSB9IGZyb20gXCIuLi8uLi8uLi9saWIvQ2hhdENvbXBsZXRpb25TdHJlYW0ubWpzXCI7XG5pbXBvcnQgeyBwYXJzZUNoYXRDb21wbGV0aW9uLCB2YWxpZGF0ZUlucHV0VG9vbHMgfSBmcm9tIFwiLi4vLi4vLi4vbGliL3BhcnNlci5tanNcIjtcbmV4cG9ydCB7IENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyLCB9IGZyb20gXCIuLi8uLi8uLi9saWIvQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXIubWpzXCI7XG5leHBvcnQgeyBQYXJzaW5nRnVuY3Rpb24sIFBhcnNpbmdUb29sRnVuY3Rpb24sIH0gZnJvbSBcIi4uLy4uLy4uL2xpYi9SdW5uYWJsZUZ1bmN0aW9uLm1qc1wiO1xuZXhwb3J0IHsgQ2hhdENvbXBsZXRpb25TdHJlYW0gfSBmcm9tIFwiLi4vLi4vLi4vbGliL0NoYXRDb21wbGV0aW9uU3RyZWFtLm1qc1wiO1xuZXhwb3J0IHsgQ2hhdENvbXBsZXRpb25SdW5uZXIsIH0gZnJvbSBcIi4uLy4uLy4uL2xpYi9DaGF0Q29tcGxldGlvblJ1bm5lci5tanNcIjtcbmV4cG9ydCBjbGFzcyBDb21wbGV0aW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBwYXJzZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHZhbGlkYXRlSW5wdXRUb29scyhib2R5LnRvb2xzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5jaGF0LmNvbXBsZXRpb25zXG4gICAgICAgICAgICAuY3JlYXRlKGJvZHksIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucz8uaGVhZGVycyxcbiAgICAgICAgICAgICAgICAnWC1TdGFpbmxlc3MtSGVscGVyLU1ldGhvZCc6ICdiZXRhLmNoYXQuY29tcGxldGlvbnMucGFyc2UnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5fdGhlblVud3JhcCgoY29tcGxldGlvbikgPT4gcGFyc2VDaGF0Q29tcGxldGlvbihjb21wbGV0aW9uLCBib2R5KSk7XG4gICAgfVxuICAgIHJ1bkZ1bmN0aW9ucyhib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChib2R5LnN0cmVhbSkge1xuICAgICAgICAgICAgcmV0dXJuIENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyLnJ1bkZ1bmN0aW9ucyh0aGlzLl9jbGllbnQsIGJvZHksIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBDaGF0Q29tcGxldGlvblJ1bm5lci5ydW5GdW5jdGlvbnModGhpcy5fY2xpZW50LCBib2R5LCBvcHRpb25zKTtcbiAgICB9XG4gICAgcnVuVG9vbHMoYm9keSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoYm9keS5zdHJlYW0pIHtcbiAgICAgICAgICAgIHJldHVybiBDaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lci5ydW5Ub29scyh0aGlzLl9jbGllbnQsIGJvZHksIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBDaGF0Q29tcGxldGlvblJ1bm5lci5ydW5Ub29scyh0aGlzLl9jbGllbnQsIGJvZHksIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2hhdCBjb21wbGV0aW9uIHN0cmVhbVxuICAgICAqL1xuICAgIHN0cmVhbShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBDaGF0Q29tcGxldGlvblN0cmVhbS5jcmVhdGVDaGF0Q29tcGxldGlvbih0aGlzLl9jbGllbnQsIGJvZHksIG9wdGlvbnMpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBsZXRpb25zLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJDaGF0Q29tcGxldGlvblJ1bm5lciIsIkNoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyIiwiQ2hhdENvbXBsZXRpb25TdHJlYW0iLCJwYXJzZUNoYXRDb21wbGV0aW9uIiwidmFsaWRhdGVJbnB1dFRvb2xzIiwiUGFyc2luZ0Z1bmN0aW9uIiwiUGFyc2luZ1Rvb2xGdW5jdGlvbiIsIkNvbXBsZXRpb25zIiwicGFyc2UiLCJib2R5Iiwib3B0aW9ucyIsInRvb2xzIiwiX2NsaWVudCIsImNoYXQiLCJjb21wbGV0aW9ucyIsImNyZWF0ZSIsImhlYWRlcnMiLCJfdGhlblVud3JhcCIsImNvbXBsZXRpb24iLCJydW5GdW5jdGlvbnMiLCJzdHJlYW0iLCJydW5Ub29scyIsImNyZWF0ZUNoYXRDb21wbGV0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/chat/completions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/realtime/realtime.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/openai/resources/beta/realtime/realtime.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Realtime: () => (/* binding */ Realtime)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _sessions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sessions.mjs */ \"(rsc)/./node_modules/openai/resources/beta/realtime/sessions.mjs\");\n/* harmony import */ var _transcription_sessions_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transcription-sessions.mjs */ \"(rsc)/./node_modules/openai/resources/beta/realtime/transcription-sessions.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\nclass Realtime extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  constructor() {\n    super(...arguments);\n    this.sessions = new _sessions_mjs__WEBPACK_IMPORTED_MODULE_1__.Sessions(this._client);\n    this.transcriptionSessions = new _transcription_sessions_mjs__WEBPACK_IMPORTED_MODULE_2__.TranscriptionSessions(this._client);\n  }\n}\nRealtime.Sessions = _sessions_mjs__WEBPACK_IMPORTED_MODULE_1__.Sessions;\nRealtime.TranscriptionSessions = _transcription_sessions_mjs__WEBPACK_IMPORTED_MODULE_2__.TranscriptionSessions;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3JlYWx0aW1lL3JlYWx0aW1lLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDb0Q7QUFDTjtBQUNIO0FBQzhCO0FBQ0g7QUFDL0QsTUFBTUssUUFBUSxTQUFTTCxzREFBVyxDQUFDO0VBQ3RDTSxXQUFXQSxDQUFBLEVBQUc7SUFDVixLQUFLLENBQUMsR0FBR0MsU0FBUyxDQUFDO0lBQ25CLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUlQLG1EQUFvQixDQUFDLElBQUksQ0FBQ1EsT0FBTyxDQUFDO0lBQ3RELElBQUksQ0FBQ0MscUJBQXFCLEdBQUcsSUFBSVAsOEVBQThDLENBQUMsSUFBSSxDQUFDTSxPQUFPLENBQUM7RUFDakc7QUFDSjtBQUNBSixRQUFRLENBQUNILFFBQVEsR0FBR0EsbURBQVE7QUFDNUJHLFFBQVEsQ0FBQ0QscUJBQXFCLEdBQUdBLDhFQUFxQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3JlYWx0aW1lL3JlYWx0aW1lLm1qcz9iNWIzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi8uLi9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCAqIGFzIFNlc3Npb25zQVBJIGZyb20gXCIuL3Nlc3Npb25zLm1qc1wiO1xuaW1wb3J0IHsgU2Vzc2lvbnMsIH0gZnJvbSBcIi4vc2Vzc2lvbnMubWpzXCI7XG5pbXBvcnQgKiBhcyBUcmFuc2NyaXB0aW9uU2Vzc2lvbnNBUEkgZnJvbSBcIi4vdHJhbnNjcmlwdGlvbi1zZXNzaW9ucy5tanNcIjtcbmltcG9ydCB7IFRyYW5zY3JpcHRpb25TZXNzaW9ucywgfSBmcm9tIFwiLi90cmFuc2NyaXB0aW9uLXNlc3Npb25zLm1qc1wiO1xuZXhwb3J0IGNsYXNzIFJlYWx0aW1lIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnNlc3Npb25zID0gbmV3IFNlc3Npb25zQVBJLlNlc3Npb25zKHRoaXMuX2NsaWVudCk7XG4gICAgICAgIHRoaXMudHJhbnNjcmlwdGlvblNlc3Npb25zID0gbmV3IFRyYW5zY3JpcHRpb25TZXNzaW9uc0FQSS5UcmFuc2NyaXB0aW9uU2Vzc2lvbnModGhpcy5fY2xpZW50KTtcbiAgICB9XG59XG5SZWFsdGltZS5TZXNzaW9ucyA9IFNlc3Npb25zO1xuUmVhbHRpbWUuVHJhbnNjcmlwdGlvblNlc3Npb25zID0gVHJhbnNjcmlwdGlvblNlc3Npb25zO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhbHRpbWUubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIlNlc3Npb25zQVBJIiwiU2Vzc2lvbnMiLCJUcmFuc2NyaXB0aW9uU2Vzc2lvbnNBUEkiLCJUcmFuc2NyaXB0aW9uU2Vzc2lvbnMiLCJSZWFsdGltZSIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwic2Vzc2lvbnMiLCJfY2xpZW50IiwidHJhbnNjcmlwdGlvblNlc3Npb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/realtime/realtime.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/realtime/sessions.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/openai/resources/beta/realtime/sessions.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Sessions: () => (/* binding */ Sessions)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass Sessions extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  /**\n   * Create an ephemeral API token for use in client-side applications with the\n   * Realtime API. Can be configured with the same session parameters as the\n   * `session.update` client event.\n   *\n   * It responds with a session object, plus a `client_secret` key which contains a\n   * usable ephemeral API token that can be used to authenticate browser clients for\n   * the Realtime API.\n   */\n  create(body, options) {\n    return this._client.post('/realtime/sessions', {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3JlYWx0aW1lL3Nlc3Npb25zLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ29EO0FBQzdDLE1BQU1DLFFBQVEsU0FBU0Qsc0RBQVcsQ0FBQztFQUN0QztBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDSUUsTUFBTUEsQ0FBQ0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7SUFDbEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLG9CQUFvQixFQUFFO01BQzNDSCxJQUFJO01BQ0osR0FBR0MsT0FBTztNQUNWRyxPQUFPLEVBQUU7UUFBRSxhQUFhLEVBQUUsZUFBZTtRQUFFLEdBQUdILE9BQU8sRUFBRUc7TUFBUTtJQUNuRSxDQUFDLENBQUM7RUFDTjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvcmVhbHRpbWUvc2Vzc2lvbnMubWpzP2I1ZGMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uLy4uL3Jlc291cmNlLm1qc1wiO1xuZXhwb3J0IGNsYXNzIFNlc3Npb25zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbiBlcGhlbWVyYWwgQVBJIHRva2VuIGZvciB1c2UgaW4gY2xpZW50LXNpZGUgYXBwbGljYXRpb25zIHdpdGggdGhlXG4gICAgICogUmVhbHRpbWUgQVBJLiBDYW4gYmUgY29uZmlndXJlZCB3aXRoIHRoZSBzYW1lIHNlc3Npb24gcGFyYW1ldGVycyBhcyB0aGVcbiAgICAgKiBgc2Vzc2lvbi51cGRhdGVgIGNsaWVudCBldmVudC5cbiAgICAgKlxuICAgICAqIEl0IHJlc3BvbmRzIHdpdGggYSBzZXNzaW9uIG9iamVjdCwgcGx1cyBhIGBjbGllbnRfc2VjcmV0YCBrZXkgd2hpY2ggY29udGFpbnMgYVxuICAgICAqIHVzYWJsZSBlcGhlbWVyYWwgQVBJIHRva2VuIHRoYXQgY2FuIGJlIHVzZWQgdG8gYXV0aGVudGljYXRlIGJyb3dzZXIgY2xpZW50cyBmb3JcbiAgICAgKiB0aGUgUmVhbHRpbWUgQVBJLlxuICAgICAqL1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL3JlYWx0aW1lL3Nlc3Npb25zJywge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXNzaW9ucy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiU2Vzc2lvbnMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0IiwiaGVhZGVycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/realtime/sessions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/realtime/transcription-sessions.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/openai/resources/beta/realtime/transcription-sessions.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TranscriptionSessions: () => (/* binding */ TranscriptionSessions)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass TranscriptionSessions extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  /**\n   * Create an ephemeral API token for use in client-side applications with the\n   * Realtime API specifically for realtime transcriptions. Can be configured with\n   * the same session parameters as the `transcription_session.update` client event.\n   *\n   * It responds with a session object, plus a `client_secret` key which contains a\n   * usable ephemeral API token that can be used to authenticate browser clients for\n   * the Realtime API.\n   */\n  create(body, options) {\n    return this._client.post('/realtime/transcription_sessions', {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3JlYWx0aW1lL3RyYW5zY3JpcHRpb24tc2Vzc2lvbnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDb0Q7QUFDN0MsTUFBTUMscUJBQXFCLFNBQVNELHNEQUFXLENBQUM7RUFDbkQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0lFLE1BQU1BLENBQUNDLElBQUksRUFBRUMsT0FBTyxFQUFFO0lBQ2xCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxrQ0FBa0MsRUFBRTtNQUN6REgsSUFBSTtNQUNKLEdBQUdDLE9BQU87TUFDVkcsT0FBTyxFQUFFO1FBQUUsYUFBYSxFQUFFLGVBQWU7UUFBRSxHQUFHSCxPQUFPLEVBQUVHO01BQVE7SUFDbkUsQ0FBQyxDQUFDO0VBQ047QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3JlYWx0aW1lL3RyYW5zY3JpcHRpb24tc2Vzc2lvbnMubWpzPzU4MjEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uLy4uL3Jlc291cmNlLm1qc1wiO1xuZXhwb3J0IGNsYXNzIFRyYW5zY3JpcHRpb25TZXNzaW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gZXBoZW1lcmFsIEFQSSB0b2tlbiBmb3IgdXNlIGluIGNsaWVudC1zaWRlIGFwcGxpY2F0aW9ucyB3aXRoIHRoZVxuICAgICAqIFJlYWx0aW1lIEFQSSBzcGVjaWZpY2FsbHkgZm9yIHJlYWx0aW1lIHRyYW5zY3JpcHRpb25zLiBDYW4gYmUgY29uZmlndXJlZCB3aXRoXG4gICAgICogdGhlIHNhbWUgc2Vzc2lvbiBwYXJhbWV0ZXJzIGFzIHRoZSBgdHJhbnNjcmlwdGlvbl9zZXNzaW9uLnVwZGF0ZWAgY2xpZW50IGV2ZW50LlxuICAgICAqXG4gICAgICogSXQgcmVzcG9uZHMgd2l0aCBhIHNlc3Npb24gb2JqZWN0LCBwbHVzIGEgYGNsaWVudF9zZWNyZXRgIGtleSB3aGljaCBjb250YWlucyBhXG4gICAgICogdXNhYmxlIGVwaGVtZXJhbCBBUEkgdG9rZW4gdGhhdCBjYW4gYmUgdXNlZCB0byBhdXRoZW50aWNhdGUgYnJvd3NlciBjbGllbnRzIGZvclxuICAgICAqIHRoZSBSZWFsdGltZSBBUEkuXG4gICAgICovXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvcmVhbHRpbWUvdHJhbnNjcmlwdGlvbl9zZXNzaW9ucycsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNjcmlwdGlvbi1zZXNzaW9ucy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiVHJhbnNjcmlwdGlvblNlc3Npb25zIiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJfY2xpZW50IiwicG9zdCIsImhlYWRlcnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/realtime/transcription-sessions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/threads/messages.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/messages.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Messages: () => (/* binding */ Messages),\n/* harmony export */   MessagesPage: () => (/* binding */ MessagesPage)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Messages extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  /**\n   * Create a message.\n   */\n  create(threadId, body, options) {\n    return this._client.post(`/threads/${threadId}/messages`, {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Retrieve a message.\n   */\n  retrieve(threadId, messageId, options) {\n    return this._client.get(`/threads/${threadId}/messages/${messageId}`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Modifies a message.\n   */\n  update(threadId, messageId, body, options) {\n    return this._client.post(`/threads/${threadId}/messages/${messageId}`, {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  list(threadId, query = {}, options) {\n    if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n      return this.list(threadId, {}, query);\n    }\n    return this._client.getAPIList(`/threads/${threadId}/messages`, MessagesPage, {\n      query,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Deletes a message.\n   */\n  del(threadId, messageId, options) {\n    return this._client.delete(`/threads/${threadId}/messages/${messageId}`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n}\nclass MessagesPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage {}\nMessages.MessagesPage = MessagesPage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvbWVzc2FnZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDb0Q7QUFDQztBQUNBO0FBQzlDLE1BQU1HLFFBQVEsU0FBU0gsc0RBQVcsQ0FBQztFQUN0QztBQUNKO0FBQ0E7RUFDSUksTUFBTUEsQ0FBQ0MsUUFBUSxFQUFFQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtJQUM1QixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUUsWUFBV0osUUFBUyxXQUFVLEVBQUU7TUFDdERDLElBQUk7TUFDSixHQUFHQyxPQUFPO01BQ1ZHLE9BQU8sRUFBRTtRQUFFLGFBQWEsRUFBRSxlQUFlO1FBQUUsR0FBR0gsT0FBTyxFQUFFRztNQUFRO0lBQ25FLENBQUMsQ0FBQztFQUNOO0VBQ0E7QUFDSjtBQUNBO0VBQ0lDLFFBQVFBLENBQUNOLFFBQVEsRUFBRU8sU0FBUyxFQUFFTCxPQUFPLEVBQUU7SUFDbkMsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0ssR0FBRyxDQUFFLFlBQVdSLFFBQVMsYUFBWU8sU0FBVSxFQUFDLEVBQUU7TUFDbEUsR0FBR0wsT0FBTztNQUNWRyxPQUFPLEVBQUU7UUFBRSxhQUFhLEVBQUUsZUFBZTtRQUFFLEdBQUdILE9BQU8sRUFBRUc7TUFBUTtJQUNuRSxDQUFDLENBQUM7RUFDTjtFQUNBO0FBQ0o7QUFDQTtFQUNJSSxNQUFNQSxDQUFDVCxRQUFRLEVBQUVPLFNBQVMsRUFBRU4sSUFBSSxFQUFFQyxPQUFPLEVBQUU7SUFDdkMsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFFLFlBQVdKLFFBQVMsYUFBWU8sU0FBVSxFQUFDLEVBQUU7TUFDbkVOLElBQUk7TUFDSixHQUFHQyxPQUFPO01BQ1ZHLE9BQU8sRUFBRTtRQUFFLGFBQWEsRUFBRSxlQUFlO1FBQUUsR0FBR0gsT0FBTyxFQUFFRztNQUFRO0lBQ25FLENBQUMsQ0FBQztFQUNOO0VBQ0FLLElBQUlBLENBQUNWLFFBQVEsRUFBRVcsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFVCxPQUFPLEVBQUU7SUFDaEMsSUFBSU4sMkRBQWdCLENBQUNlLEtBQUssQ0FBQyxFQUFFO01BQ3pCLE9BQU8sSUFBSSxDQUFDRCxJQUFJLENBQUNWLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRVcsS0FBSyxDQUFDO0lBQ3pDO0lBQ0EsT0FBTyxJQUFJLENBQUNSLE9BQU8sQ0FBQ1MsVUFBVSxDQUFFLFlBQVdaLFFBQVMsV0FBVSxFQUFFYSxZQUFZLEVBQUU7TUFDMUVGLEtBQUs7TUFDTCxHQUFHVCxPQUFPO01BQ1ZHLE9BQU8sRUFBRTtRQUFFLGFBQWEsRUFBRSxlQUFlO1FBQUUsR0FBR0gsT0FBTyxFQUFFRztNQUFRO0lBQ25FLENBQUMsQ0FBQztFQUNOO0VBQ0E7QUFDSjtBQUNBO0VBQ0lTLEdBQUdBLENBQUNkLFFBQVEsRUFBRU8sU0FBUyxFQUFFTCxPQUFPLEVBQUU7SUFDOUIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ1ksTUFBTSxDQUFFLFlBQVdmLFFBQVMsYUFBWU8sU0FBVSxFQUFDLEVBQUU7TUFDckUsR0FBR0wsT0FBTztNQUNWRyxPQUFPLEVBQUU7UUFBRSxhQUFhLEVBQUUsZUFBZTtRQUFFLEdBQUdILE9BQU8sRUFBRUc7TUFBUTtJQUNuRSxDQUFDLENBQUM7RUFDTjtBQUNKO0FBQ08sTUFBTVEsWUFBWSxTQUFTaEIsdURBQVUsQ0FBQztBQUU3Q0MsUUFBUSxDQUFDZSxZQUFZLEdBQUdBLFlBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYmV0YS90aHJlYWRzL21lc3NhZ2VzLm1qcz8wNWRmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi8uLi9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IGlzUmVxdWVzdE9wdGlvbnMgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS5tanNcIjtcbmltcG9ydCB7IEN1cnNvclBhZ2UgfSBmcm9tIFwiLi4vLi4vLi4vcGFnaW5hdGlvbi5tanNcIjtcbmV4cG9ydCBjbGFzcyBNZXNzYWdlcyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBtZXNzYWdlLlxuICAgICAqL1xuICAgIGNyZWF0ZSh0aHJlYWRJZCwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC90aHJlYWRzLyR7dGhyZWFkSWR9L21lc3NhZ2VzYCwge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgYSBtZXNzYWdlLlxuICAgICAqL1xuICAgIHJldHJpZXZlKHRocmVhZElkLCBtZXNzYWdlSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC90aHJlYWRzLyR7dGhyZWFkSWR9L21lc3NhZ2VzLyR7bWVzc2FnZUlkfWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTW9kaWZpZXMgYSBtZXNzYWdlLlxuICAgICAqL1xuICAgIHVwZGF0ZSh0aHJlYWRJZCwgbWVzc2FnZUlkLCBib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL3RocmVhZHMvJHt0aHJlYWRJZH0vbWVzc2FnZXMvJHttZXNzYWdlSWR9YCwge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGlzdCh0aHJlYWRJZCwgcXVlcnkgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhxdWVyeSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3QodGhyZWFkSWQsIHt9LCBxdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KGAvdGhyZWFkcy8ke3RocmVhZElkfS9tZXNzYWdlc2AsIE1lc3NhZ2VzUGFnZSwge1xuICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgYSBtZXNzYWdlLlxuICAgICAqL1xuICAgIGRlbCh0aHJlYWRJZCwgbWVzc2FnZUlkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZGVsZXRlKGAvdGhyZWFkcy8ke3RocmVhZElkfS9tZXNzYWdlcy8ke21lc3NhZ2VJZH1gLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VzUGFnZSBleHRlbmRzIEN1cnNvclBhZ2Uge1xufVxuTWVzc2FnZXMuTWVzc2FnZXNQYWdlID0gTWVzc2FnZXNQYWdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVzc2FnZXMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsImlzUmVxdWVzdE9wdGlvbnMiLCJDdXJzb3JQYWdlIiwiTWVzc2FnZXMiLCJjcmVhdGUiLCJ0aHJlYWRJZCIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiLCJoZWFkZXJzIiwicmV0cmlldmUiLCJtZXNzYWdlSWQiLCJnZXQiLCJ1cGRhdGUiLCJsaXN0IiwicXVlcnkiLCJnZXRBUElMaXN0IiwiTWVzc2FnZXNQYWdlIiwiZGVsIiwiZGVsZXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/threads/messages.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/threads/runs/runs.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/runs/runs.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Runs: () => (/* binding */ Runs),\n/* harmony export */   RunsPage: () => (/* binding */ RunsPage)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../lib/AssistantStream.mjs */ \"(rsc)/./node_modules/openai/lib/AssistantStream.mjs\");\n/* harmony import */ var _steps_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./steps.mjs */ \"(rsc)/./node_modules/openai/resources/beta/threads/runs/steps.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\nclass Runs extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  constructor() {\n    super(...arguments);\n    this.steps = new _steps_mjs__WEBPACK_IMPORTED_MODULE_1__.Steps(this._client);\n  }\n  create(threadId, params, options) {\n    const {\n      include,\n      ...body\n    } = params;\n    return this._client.post(`/threads/${threadId}/runs`, {\n      query: {\n        include\n      },\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      },\n      stream: params.stream ?? false\n    });\n  }\n  /**\n   * Retrieves a run.\n   */\n  retrieve(threadId, runId, options) {\n    return this._client.get(`/threads/${threadId}/runs/${runId}`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Modifies a run.\n   */\n  update(threadId, runId, body, options) {\n    return this._client.post(`/threads/${threadId}/runs/${runId}`, {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  list(threadId, query = {}, options) {\n    if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_2__.isRequestOptions)(query)) {\n      return this.list(threadId, {}, query);\n    }\n    return this._client.getAPIList(`/threads/${threadId}/runs`, RunsPage, {\n      query,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Cancels a run that is `in_progress`.\n   */\n  cancel(threadId, runId, options) {\n    return this._client.post(`/threads/${threadId}/runs/${runId}/cancel`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * A helper to create a run an poll for a terminal state. More information on Run\n   * lifecycles can be found here:\n   * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n   */\n  async createAndPoll(threadId, body, options) {\n    const run = await this.create(threadId, body, options);\n    return await this.poll(threadId, run.id, options);\n  }\n  /**\n   * Create a Run stream\n   *\n   * @deprecated use `stream` instead\n   */\n  createAndStream(threadId, body, options) {\n    return _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_3__.AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);\n  }\n  /**\n   * A helper to poll a run status until it reaches a terminal state. More\n   * information on Run lifecycles can be found here:\n   * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n   */\n  async poll(threadId, runId, options) {\n    const headers = {\n      ...options?.headers,\n      'X-Stainless-Poll-Helper': 'true'\n    };\n    if (options?.pollIntervalMs) {\n      headers['X-Stainless-Custom-Poll-Interval'] = options.pollIntervalMs.toString();\n    }\n    while (true) {\n      const {\n        data: run,\n        response\n      } = await this.retrieve(threadId, runId, {\n        ...options,\n        headers: {\n          ...options?.headers,\n          ...headers\n        }\n      }).withResponse();\n      switch (run.status) {\n        //If we are in any sort of intermediate state we poll\n        case 'queued':\n        case 'in_progress':\n        case 'cancelling':\n          let sleepInterval = 5000;\n          if (options?.pollIntervalMs) {\n            sleepInterval = options.pollIntervalMs;\n          } else {\n            const headerInterval = response.headers.get('openai-poll-after-ms');\n            if (headerInterval) {\n              const headerIntervalMs = parseInt(headerInterval);\n              if (!isNaN(headerIntervalMs)) {\n                sleepInterval = headerIntervalMs;\n              }\n            }\n          }\n          await (0,_core_mjs__WEBPACK_IMPORTED_MODULE_2__.sleep)(sleepInterval);\n          break;\n        //We return the run in any terminal state.\n        case 'requires_action':\n        case 'incomplete':\n        case 'cancelled':\n        case 'completed':\n        case 'failed':\n        case 'expired':\n          return run;\n      }\n    }\n  }\n  /**\n   * Create a Run stream\n   */\n  stream(threadId, body, options) {\n    return _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_3__.AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);\n  }\n  submitToolOutputs(threadId, runId, body, options) {\n    return this._client.post(`/threads/${threadId}/runs/${runId}/submit_tool_outputs`, {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      },\n      stream: body.stream ?? false\n    });\n  }\n  /**\n   * A helper to submit a tool output to a run and poll for a terminal run state.\n   * More information on Run lifecycles can be found here:\n   * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n   */\n  async submitToolOutputsAndPoll(threadId, runId, body, options) {\n    const run = await this.submitToolOutputs(threadId, runId, body, options);\n    return await this.poll(threadId, run.id, options);\n  }\n  /**\n   * Submit the tool outputs from a previous run and stream the run to a terminal\n   * state. More information on Run lifecycles can be found here:\n   * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n   */\n  submitToolOutputsStream(threadId, runId, body, options) {\n    return _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_3__.AssistantStream.createToolAssistantStream(threadId, runId, this._client.beta.threads.runs, body, options);\n  }\n}\nclass RunsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__.CursorPage {}\nRuns.RunsPage = RunsPage;\nRuns.Steps = _steps_mjs__WEBPACK_IMPORTED_MODULE_1__.Steps;\nRuns.RunStepsPage = _steps_mjs__WEBPACK_IMPORTED_MODULE_1__.RunStepsPage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/threads/runs/runs.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/threads/runs/steps.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/runs/steps.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RunStepsPage: () => (/* binding */ RunStepsPage),\n/* harmony export */   Steps: () => (/* binding */ Steps)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Steps extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  retrieve(threadId, runId, stepId, query = {}, options) {\n    if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n      return this.retrieve(threadId, runId, stepId, {}, query);\n    }\n    return this._client.get(`/threads/${threadId}/runs/${runId}/steps/${stepId}`, {\n      query,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  list(threadId, runId, query = {}, options) {\n    if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n      return this.list(threadId, runId, {}, query);\n    }\n    return this._client.getAPIList(`/threads/${threadId}/runs/${runId}/steps`, RunStepsPage, {\n      query,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n}\nclass RunStepsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage {}\nSteps.RunStepsPage = RunStepsPage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvcnVucy9zdGVwcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUN1RDtBQUNDO0FBQ0E7QUFDakQsTUFBTUcsS0FBSyxTQUFTSCxzREFBVyxDQUFDO0VBQ25DSSxRQUFRQSxDQUFDQyxRQUFRLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUVDLE9BQU8sRUFBRTtJQUNuRCxJQUFJUiwyREFBZ0IsQ0FBQ08sS0FBSyxDQUFDLEVBQUU7TUFDekIsT0FBTyxJQUFJLENBQUNKLFFBQVEsQ0FBQ0MsUUFBUSxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRUMsS0FBSyxDQUFDO0lBQzVEO0lBQ0EsT0FBTyxJQUFJLENBQUNFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFFLFlBQVdOLFFBQVMsU0FBUUMsS0FBTSxVQUFTQyxNQUFPLEVBQUMsRUFBRTtNQUMxRUMsS0FBSztNQUNMLEdBQUdDLE9BQU87TUFDVkcsT0FBTyxFQUFFO1FBQUUsYUFBYSxFQUFFLGVBQWU7UUFBRSxHQUFHSCxPQUFPLEVBQUVHO01BQVE7SUFDbkUsQ0FBQyxDQUFDO0VBQ047RUFDQUMsSUFBSUEsQ0FBQ1IsUUFBUSxFQUFFQyxLQUFLLEVBQUVFLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRUMsT0FBTyxFQUFFO0lBQ3ZDLElBQUlSLDJEQUFnQixDQUFDTyxLQUFLLENBQUMsRUFBRTtNQUN6QixPQUFPLElBQUksQ0FBQ0ssSUFBSSxDQUFDUixRQUFRLEVBQUVDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRUUsS0FBSyxDQUFDO0lBQ2hEO0lBQ0EsT0FBTyxJQUFJLENBQUNFLE9BQU8sQ0FBQ0ksVUFBVSxDQUFFLFlBQVdULFFBQVMsU0FBUUMsS0FBTSxRQUFPLEVBQUVTLFlBQVksRUFBRTtNQUNyRlAsS0FBSztNQUNMLEdBQUdDLE9BQU87TUFDVkcsT0FBTyxFQUFFO1FBQUUsYUFBYSxFQUFFLGVBQWU7UUFBRSxHQUFHSCxPQUFPLEVBQUVHO01BQVE7SUFDbkUsQ0FBQyxDQUFDO0VBQ047QUFDSjtBQUNPLE1BQU1HLFlBQVksU0FBU2IsdURBQVUsQ0FBQztBQUU3Q0MsS0FBSyxDQUFDWSxZQUFZLEdBQUdBLFlBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYmV0YS90aHJlYWRzL3J1bnMvc3RlcHMubWpzPzQ3ZTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gXCIuLi8uLi8uLi8uLi9jb3JlLm1qc1wiO1xuaW1wb3J0IHsgQ3Vyc29yUGFnZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9wYWdpbmF0aW9uLm1qc1wiO1xuZXhwb3J0IGNsYXNzIFN0ZXBzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIHJldHJpZXZlKHRocmVhZElkLCBydW5JZCwgc3RlcElkLCBxdWVyeSA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmV0cmlldmUodGhyZWFkSWQsIHJ1bklkLCBzdGVwSWQsIHt9LCBxdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC90aHJlYWRzLyR7dGhyZWFkSWR9L3J1bnMvJHtydW5JZH0vc3RlcHMvJHtzdGVwSWR9YCwge1xuICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxpc3QodGhyZWFkSWQsIHJ1bklkLCBxdWVyeSA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdCh0aHJlYWRJZCwgcnVuSWQsIHt9LCBxdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KGAvdGhyZWFkcy8ke3RocmVhZElkfS9ydW5zLyR7cnVuSWR9L3N0ZXBzYCwgUnVuU3RlcHNQYWdlLCB7XG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUnVuU3RlcHNQYWdlIGV4dGVuZHMgQ3Vyc29yUGFnZSB7XG59XG5TdGVwcy5SdW5TdGVwc1BhZ2UgPSBSdW5TdGVwc1BhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGVwcy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiaXNSZXF1ZXN0T3B0aW9ucyIsIkN1cnNvclBhZ2UiLCJTdGVwcyIsInJldHJpZXZlIiwidGhyZWFkSWQiLCJydW5JZCIsInN0ZXBJZCIsInF1ZXJ5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJnZXQiLCJoZWFkZXJzIiwibGlzdCIsImdldEFQSUxpc3QiLCJSdW5TdGVwc1BhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/threads/runs/steps.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/beta/threads/threads.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/threads.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Threads: () => (/* binding */ Threads)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../lib/AssistantStream.mjs */ \"(rsc)/./node_modules/openai/lib/AssistantStream.mjs\");\n/* harmony import */ var _messages_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./messages.mjs */ \"(rsc)/./node_modules/openai/resources/beta/threads/messages.mjs\");\n/* harmony import */ var _runs_runs_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./runs/runs.mjs */ \"(rsc)/./node_modules/openai/resources/beta/threads/runs/runs.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\nclass Threads extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  constructor() {\n    super(...arguments);\n    this.runs = new _runs_runs_mjs__WEBPACK_IMPORTED_MODULE_1__.Runs(this._client);\n    this.messages = new _messages_mjs__WEBPACK_IMPORTED_MODULE_2__.Messages(this._client);\n  }\n  create(body = {}, options) {\n    if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_3__.isRequestOptions)(body)) {\n      return this.create({}, body);\n    }\n    return this._client.post('/threads', {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Retrieves a thread.\n   */\n  retrieve(threadId, options) {\n    return this._client.get(`/threads/${threadId}`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Modifies a thread.\n   */\n  update(threadId, body, options) {\n    return this._client.post(`/threads/${threadId}`, {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Delete a thread.\n   */\n  del(threadId, options) {\n    return this._client.delete(`/threads/${threadId}`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  createAndRun(body, options) {\n    return this._client.post('/threads/runs', {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      },\n      stream: body.stream ?? false\n    });\n  }\n  /**\n   * A helper to create a thread, start a run and then poll for a terminal state.\n   * More information on Run lifecycles can be found here:\n   * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n   */\n  async createAndRunPoll(body, options) {\n    const run = await this.createAndRun(body, options);\n    return await this.runs.poll(run.thread_id, run.id, options);\n  }\n  /**\n   * Create a thread and stream the run back\n   */\n  createAndRunStream(body, options) {\n    return _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_4__.AssistantStream.createThreadAssistantStream(body, this._client.beta.threads, options);\n  }\n}\nThreads.Runs = _runs_runs_mjs__WEBPACK_IMPORTED_MODULE_1__.Runs;\nThreads.RunsPage = _runs_runs_mjs__WEBPACK_IMPORTED_MODULE_1__.RunsPage;\nThreads.Messages = _messages_mjs__WEBPACK_IMPORTED_MODULE_2__.Messages;\nThreads.MessagesPage = _messages_mjs__WEBPACK_IMPORTED_MODULE_2__.MessagesPage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvdGhyZWFkcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDb0Q7QUFDQztBQUNjO0FBQ3JCO0FBQ1c7QUFDZDtBQUNPO0FBQzNDLE1BQU1TLE9BQU8sU0FBU1Qsc0RBQVcsQ0FBQztFQUNyQ1UsV0FBV0EsQ0FBQSxFQUFHO0lBQ1YsS0FBSyxDQUFDLEdBQUdDLFNBQVMsQ0FBQztJQUNuQixJQUFJLENBQUNDLElBQUksR0FBRyxJQUFJTixnREFBWSxDQUFDLElBQUksQ0FBQ08sT0FBTyxDQUFDO0lBQzFDLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUlYLG1EQUFvQixDQUFDLElBQUksQ0FBQ1UsT0FBTyxDQUFDO0VBQzFEO0VBQ0FFLE1BQU1BLENBQUNDLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRUMsT0FBTyxFQUFFO0lBQ3ZCLElBQUloQiwyREFBZ0IsQ0FBQ2UsSUFBSSxDQUFDLEVBQUU7TUFDeEIsT0FBTyxJQUFJLENBQUNELE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRUMsSUFBSSxDQUFDO0lBQ2hDO0lBQ0EsT0FBTyxJQUFJLENBQUNILE9BQU8sQ0FBQ0ssSUFBSSxDQUFDLFVBQVUsRUFBRTtNQUNqQ0YsSUFBSTtNQUNKLEdBQUdDLE9BQU87TUFDVkUsT0FBTyxFQUFFO1FBQUUsYUFBYSxFQUFFLGVBQWU7UUFBRSxHQUFHRixPQUFPLEVBQUVFO01BQVE7SUFDbkUsQ0FBQyxDQUFDO0VBQ047RUFDQTtBQUNKO0FBQ0E7RUFDSUMsUUFBUUEsQ0FBQ0MsUUFBUSxFQUFFSixPQUFPLEVBQUU7SUFDeEIsT0FBTyxJQUFJLENBQUNKLE9BQU8sQ0FBQ1MsR0FBRyxDQUFFLFlBQVdELFFBQVMsRUFBQyxFQUFFO01BQzVDLEdBQUdKLE9BQU87TUFDVkUsT0FBTyxFQUFFO1FBQUUsYUFBYSxFQUFFLGVBQWU7UUFBRSxHQUFHRixPQUFPLEVBQUVFO01BQVE7SUFDbkUsQ0FBQyxDQUFDO0VBQ047RUFDQTtBQUNKO0FBQ0E7RUFDSUksTUFBTUEsQ0FBQ0YsUUFBUSxFQUFFTCxJQUFJLEVBQUVDLE9BQU8sRUFBRTtJQUM1QixPQUFPLElBQUksQ0FBQ0osT0FBTyxDQUFDSyxJQUFJLENBQUUsWUFBV0csUUFBUyxFQUFDLEVBQUU7TUFDN0NMLElBQUk7TUFDSixHQUFHQyxPQUFPO01BQ1ZFLE9BQU8sRUFBRTtRQUFFLGFBQWEsRUFBRSxlQUFlO1FBQUUsR0FBR0YsT0FBTyxFQUFFRTtNQUFRO0lBQ25FLENBQUMsQ0FBQztFQUNOO0VBQ0E7QUFDSjtBQUNBO0VBQ0lLLEdBQUdBLENBQUNILFFBQVEsRUFBRUosT0FBTyxFQUFFO0lBQ25CLE9BQU8sSUFBSSxDQUFDSixPQUFPLENBQUNZLE1BQU0sQ0FBRSxZQUFXSixRQUFTLEVBQUMsRUFBRTtNQUMvQyxHQUFHSixPQUFPO01BQ1ZFLE9BQU8sRUFBRTtRQUFFLGFBQWEsRUFBRSxlQUFlO1FBQUUsR0FBR0YsT0FBTyxFQUFFRTtNQUFRO0lBQ25FLENBQUMsQ0FBQztFQUNOO0VBQ0FPLFlBQVlBLENBQUNWLElBQUksRUFBRUMsT0FBTyxFQUFFO0lBQ3hCLE9BQU8sSUFBSSxDQUFDSixPQUFPLENBQUNLLElBQUksQ0FBQyxlQUFlLEVBQUU7TUFDdENGLElBQUk7TUFDSixHQUFHQyxPQUFPO01BQ1ZFLE9BQU8sRUFBRTtRQUFFLGFBQWEsRUFBRSxlQUFlO1FBQUUsR0FBR0YsT0FBTyxFQUFFRTtNQUFRLENBQUM7TUFDaEVRLE1BQU0sRUFBRVgsSUFBSSxDQUFDVyxNQUFNLElBQUk7SUFDM0IsQ0FBQyxDQUFDO0VBQ047RUFDQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0VBQ0ksTUFBTUMsZ0JBQWdCQSxDQUFDWixJQUFJLEVBQUVDLE9BQU8sRUFBRTtJQUNsQyxNQUFNWSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUNILFlBQVksQ0FBQ1YsSUFBSSxFQUFFQyxPQUFPLENBQUM7SUFDbEQsT0FBTyxNQUFNLElBQUksQ0FBQ0wsSUFBSSxDQUFDa0IsSUFBSSxDQUFDRCxHQUFHLENBQUNFLFNBQVMsRUFBRUYsR0FBRyxDQUFDRyxFQUFFLEVBQUVmLE9BQU8sQ0FBQztFQUMvRDtFQUNBO0FBQ0o7QUFDQTtFQUNJZ0Isa0JBQWtCQSxDQUFDakIsSUFBSSxFQUFFQyxPQUFPLEVBQUU7SUFDOUIsT0FBT2YscUVBQWUsQ0FBQ2dDLDJCQUEyQixDQUFDbEIsSUFBSSxFQUFFLElBQUksQ0FBQ0gsT0FBTyxDQUFDc0IsSUFBSSxDQUFDQyxPQUFPLEVBQUVuQixPQUFPLENBQUM7RUFDaEc7QUFDSjtBQUNBUixPQUFPLENBQUNGLElBQUksR0FBR0EsZ0RBQUk7QUFDbkJFLE9BQU8sQ0FBQ0QsUUFBUSxHQUFHQSxvREFBUTtBQUMzQkMsT0FBTyxDQUFDTCxRQUFRLEdBQUdBLG1EQUFRO0FBQzNCSyxPQUFPLENBQUNKLFlBQVksR0FBR0EsdURBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYmV0YS90aHJlYWRzL3RocmVhZHMubWpzPzY3NzEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uLy4uL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gXCIuLi8uLi8uLi9jb3JlLm1qc1wiO1xuaW1wb3J0IHsgQXNzaXN0YW50U3RyZWFtIH0gZnJvbSBcIi4uLy4uLy4uL2xpYi9Bc3Npc3RhbnRTdHJlYW0ubWpzXCI7XG5pbXBvcnQgKiBhcyBNZXNzYWdlc0FQSSBmcm9tIFwiLi9tZXNzYWdlcy5tanNcIjtcbmltcG9ydCB7IE1lc3NhZ2VzLCBNZXNzYWdlc1BhZ2UsIH0gZnJvbSBcIi4vbWVzc2FnZXMubWpzXCI7XG5pbXBvcnQgKiBhcyBSdW5zQVBJIGZyb20gXCIuL3J1bnMvcnVucy5tanNcIjtcbmltcG9ydCB7IFJ1bnMsIFJ1bnNQYWdlLCB9IGZyb20gXCIuL3J1bnMvcnVucy5tanNcIjtcbmV4cG9ydCBjbGFzcyBUaHJlYWRzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnJ1bnMgPSBuZXcgUnVuc0FQSS5SdW5zKHRoaXMuX2NsaWVudCk7XG4gICAgICAgIHRoaXMubWVzc2FnZXMgPSBuZXcgTWVzc2FnZXNBUEkuTWVzc2FnZXModGhpcy5fY2xpZW50KTtcbiAgICB9XG4gICAgY3JlYXRlKGJvZHkgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhib2R5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKHt9LCBib2R5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy90aHJlYWRzJywge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgdGhyZWFkLlxuICAgICAqL1xuICAgIHJldHJpZXZlKHRocmVhZElkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvdGhyZWFkcy8ke3RocmVhZElkfWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTW9kaWZpZXMgYSB0aHJlYWQuXG4gICAgICovXG4gICAgdXBkYXRlKHRocmVhZElkLCBib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL3RocmVhZHMvJHt0aHJlYWRJZH1gLCB7XG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSB0aHJlYWQuXG4gICAgICovXG4gICAgZGVsKHRocmVhZElkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZGVsZXRlKGAvdGhyZWFkcy8ke3RocmVhZElkfWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY3JlYXRlQW5kUnVuKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvdGhyZWFkcy9ydW5zJywge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICAgICAgc3RyZWFtOiBib2R5LnN0cmVhbSA/PyBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgaGVscGVyIHRvIGNyZWF0ZSBhIHRocmVhZCwgc3RhcnQgYSBydW4gYW5kIHRoZW4gcG9sbCBmb3IgYSB0ZXJtaW5hbCBzdGF0ZS5cbiAgICAgKiBNb3JlIGluZm9ybWF0aW9uIG9uIFJ1biBsaWZlY3ljbGVzIGNhbiBiZSBmb3VuZCBoZXJlOlxuICAgICAqIGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2Fzc2lzdGFudHMvaG93LWl0LXdvcmtzL3J1bnMtYW5kLXJ1bi1zdGVwc1xuICAgICAqL1xuICAgIGFzeW5jIGNyZWF0ZUFuZFJ1blBvbGwoYm9keSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBydW4gPSBhd2FpdCB0aGlzLmNyZWF0ZUFuZFJ1bihib2R5LCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucnVucy5wb2xsKHJ1bi50aHJlYWRfaWQsIHJ1bi5pZCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHRocmVhZCBhbmQgc3RyZWFtIHRoZSBydW4gYmFja1xuICAgICAqL1xuICAgIGNyZWF0ZUFuZFJ1blN0cmVhbShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBBc3Npc3RhbnRTdHJlYW0uY3JlYXRlVGhyZWFkQXNzaXN0YW50U3RyZWFtKGJvZHksIHRoaXMuX2NsaWVudC5iZXRhLnRocmVhZHMsIG9wdGlvbnMpO1xuICAgIH1cbn1cblRocmVhZHMuUnVucyA9IFJ1bnM7XG5UaHJlYWRzLlJ1bnNQYWdlID0gUnVuc1BhZ2U7XG5UaHJlYWRzLk1lc3NhZ2VzID0gTWVzc2FnZXM7XG5UaHJlYWRzLk1lc3NhZ2VzUGFnZSA9IE1lc3NhZ2VzUGFnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocmVhZHMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsImlzUmVxdWVzdE9wdGlvbnMiLCJBc3Npc3RhbnRTdHJlYW0iLCJNZXNzYWdlc0FQSSIsIk1lc3NhZ2VzIiwiTWVzc2FnZXNQYWdlIiwiUnVuc0FQSSIsIlJ1bnMiLCJSdW5zUGFnZSIsIlRocmVhZHMiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsInJ1bnMiLCJfY2xpZW50IiwibWVzc2FnZXMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsInBvc3QiLCJoZWFkZXJzIiwicmV0cmlldmUiLCJ0aHJlYWRJZCIsImdldCIsInVwZGF0ZSIsImRlbCIsImRlbGV0ZSIsImNyZWF0ZUFuZFJ1biIsInN0cmVhbSIsImNyZWF0ZUFuZFJ1blBvbGwiLCJydW4iLCJwb2xsIiwidGhyZWFkX2lkIiwiaWQiLCJjcmVhdGVBbmRSdW5TdHJlYW0iLCJjcmVhdGVUaHJlYWRBc3Npc3RhbnRTdHJlYW0iLCJiZXRhIiwidGhyZWFkcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/beta/threads/threads.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/chat/chat.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/resources/chat/chat.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chat: () => (/* binding */ Chat)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _completions_completions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./completions/completions.mjs */ \"(rsc)/./node_modules/openai/resources/chat/completions/completions.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Chat extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  constructor() {\n    super(...arguments);\n    this.completions = new _completions_completions_mjs__WEBPACK_IMPORTED_MODULE_1__.Completions(this._client);\n  }\n}\nChat.Completions = _completions_completions_mjs__WEBPACK_IMPORTED_MODULE_1__.Completions;\nChat.ChatCompletionsPage = _completions_completions_mjs__WEBPACK_IMPORTED_MODULE_1__.ChatCompletionsPage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jaGF0L2NoYXQubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ2lEO0FBQ2U7QUFDa0I7QUFDM0UsTUFBTUksSUFBSSxTQUFTSixzREFBVyxDQUFDO0VBQ2xDSyxXQUFXQSxDQUFBLEVBQUc7SUFDVixLQUFLLENBQUMsR0FBR0MsU0FBUyxDQUFDO0lBQ25CLElBQUksQ0FBQ0MsV0FBVyxHQUFHLElBQUlOLHFFQUEwQixDQUFDLElBQUksQ0FBQ08sT0FBTyxDQUFDO0VBQ25FO0FBQ0o7QUFDQUosSUFBSSxDQUFDRCxXQUFXLEdBQUdBLHFFQUFXO0FBQzlCQyxJQUFJLENBQUNGLG1CQUFtQixHQUFHQSw2RUFBbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvY2hhdC9jaGF0Lm1qcz85MGMxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCAqIGFzIENvbXBsZXRpb25zQVBJIGZyb20gXCIuL2NvbXBsZXRpb25zL2NvbXBsZXRpb25zLm1qc1wiO1xuaW1wb3J0IHsgQ2hhdENvbXBsZXRpb25zUGFnZSwgQ29tcGxldGlvbnMsIH0gZnJvbSBcIi4vY29tcGxldGlvbnMvY29tcGxldGlvbnMubWpzXCI7XG5leHBvcnQgY2xhc3MgQ2hhdCBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jb21wbGV0aW9ucyA9IG5ldyBDb21wbGV0aW9uc0FQSS5Db21wbGV0aW9ucyh0aGlzLl9jbGllbnQpO1xuICAgIH1cbn1cbkNoYXQuQ29tcGxldGlvbnMgPSBDb21wbGV0aW9ucztcbkNoYXQuQ2hhdENvbXBsZXRpb25zUGFnZSA9IENoYXRDb21wbGV0aW9uc1BhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGF0Lm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJDb21wbGV0aW9uc0FQSSIsIkNoYXRDb21wbGV0aW9uc1BhZ2UiLCJDb21wbGV0aW9ucyIsIkNoYXQiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImNvbXBsZXRpb25zIiwiX2NsaWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/chat/chat.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/chat/completions/completions.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/openai/resources/chat/completions/completions.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionStoreMessagesPage: () => (/* binding */ ChatCompletionStoreMessagesPage),\n/* harmony export */   ChatCompletionsPage: () => (/* binding */ ChatCompletionsPage),\n/* harmony export */   Completions: () => (/* binding */ Completions)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _messages_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./messages.mjs */ \"(rsc)/./node_modules/openai/resources/chat/completions/messages.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\nclass Completions extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  constructor() {\n    super(...arguments);\n    this.messages = new _messages_mjs__WEBPACK_IMPORTED_MODULE_1__.Messages(this._client);\n  }\n  create(body, options) {\n    return this._client.post('/chat/completions', {\n      body,\n      ...options,\n      stream: body.stream ?? false\n    });\n  }\n  /**\n   * Get a stored chat completion. Only Chat Completions that have been created with\n   * the `store` parameter set to `true` will be returned.\n   */\n  retrieve(completionId, options) {\n    return this._client.get(`/chat/completions/${completionId}`, options);\n  }\n  /**\n   * Modify a stored chat completion. Only Chat Completions that have been created\n   * with the `store` parameter set to `true` can be modified. Currently, the only\n   * supported modification is to update the `metadata` field.\n   */\n  update(completionId, body, options) {\n    return this._client.post(`/chat/completions/${completionId}`, {\n      body,\n      ...options\n    });\n  }\n  list(query = {}, options) {\n    if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_2__.isRequestOptions)(query)) {\n      return this.list({}, query);\n    }\n    return this._client.getAPIList('/chat/completions', ChatCompletionsPage, {\n      query,\n      ...options\n    });\n  }\n  /**\n   * Delete a stored chat completion. Only Chat Completions that have been created\n   * with the `store` parameter set to `true` can be deleted.\n   */\n  del(completionId, options) {\n    return this._client.delete(`/chat/completions/${completionId}`, options);\n  }\n}\nclass ChatCompletionsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_3__.CursorPage {}\nclass ChatCompletionStoreMessagesPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_3__.CursorPage {}\nCompletions.ChatCompletionsPage = ChatCompletionsPage;\nCompletions.Messages = _messages_mjs__WEBPACK_IMPORTED_MODULE_1__.Messages;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jaGF0L2NvbXBsZXRpb25zL2NvbXBsZXRpb25zLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDb0Q7QUFDQztBQUNQO0FBQ0o7QUFDVztBQUM5QyxNQUFNSyxXQUFXLFNBQVNMLHNEQUFXLENBQUM7RUFDekNNLFdBQVdBLENBQUEsRUFBRztJQUNWLEtBQUssQ0FBQyxHQUFHQyxTQUFTLENBQUM7SUFDbkIsSUFBSSxDQUFDQyxRQUFRLEdBQUcsSUFBSU4sbURBQW9CLENBQUMsSUFBSSxDQUFDTyxPQUFPLENBQUM7RUFDMUQ7RUFDQUMsTUFBTUEsQ0FBQ0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7SUFDbEIsT0FBTyxJQUFJLENBQUNILE9BQU8sQ0FBQ0ksSUFBSSxDQUFDLG1CQUFtQixFQUFFO01BQUVGLElBQUk7TUFBRSxHQUFHQyxPQUFPO01BQUVFLE1BQU0sRUFBRUgsSUFBSSxDQUFDRyxNQUFNLElBQUk7SUFBTSxDQUFDLENBQUM7RUFDckc7RUFDQTtBQUNKO0FBQ0E7QUFDQTtFQUNJQyxRQUFRQSxDQUFDQyxZQUFZLEVBQUVKLE9BQU8sRUFBRTtJQUM1QixPQUFPLElBQUksQ0FBQ0gsT0FBTyxDQUFDUSxHQUFHLENBQUUscUJBQW9CRCxZQUFhLEVBQUMsRUFBRUosT0FBTyxDQUFDO0VBQ3pFO0VBQ0E7QUFDSjtBQUNBO0FBQ0E7QUFDQTtFQUNJTSxNQUFNQSxDQUFDRixZQUFZLEVBQUVMLElBQUksRUFBRUMsT0FBTyxFQUFFO0lBQ2hDLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNJLElBQUksQ0FBRSxxQkFBb0JHLFlBQWEsRUFBQyxFQUFFO01BQUVMLElBQUk7TUFBRSxHQUFHQztJQUFRLENBQUMsQ0FBQztFQUN2RjtFQUNBTyxJQUFJQSxDQUFDQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUVSLE9BQU8sRUFBRTtJQUN0QixJQUFJWCwyREFBZ0IsQ0FBQ21CLEtBQUssQ0FBQyxFQUFFO01BQ3pCLE9BQU8sSUFBSSxDQUFDRCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUVDLEtBQUssQ0FBQztJQUMvQjtJQUNBLE9BQU8sSUFBSSxDQUFDWCxPQUFPLENBQUNZLFVBQVUsQ0FBQyxtQkFBbUIsRUFBRUMsbUJBQW1CLEVBQUU7TUFBRUYsS0FBSztNQUFFLEdBQUdSO0lBQVEsQ0FBQyxDQUFDO0VBQ25HO0VBQ0E7QUFDSjtBQUNBO0FBQ0E7RUFDSVcsR0FBR0EsQ0FBQ1AsWUFBWSxFQUFFSixPQUFPLEVBQUU7SUFDdkIsT0FBTyxJQUFJLENBQUNILE9BQU8sQ0FBQ2UsTUFBTSxDQUFFLHFCQUFvQlIsWUFBYSxFQUFDLEVBQUVKLE9BQU8sQ0FBQztFQUM1RTtBQUNKO0FBQ08sTUFBTVUsbUJBQW1CLFNBQVNsQix1REFBVSxDQUFDO0FBRTdDLE1BQU1xQiwrQkFBK0IsU0FBU3JCLHVEQUFVLENBQUM7QUFFaEVDLFdBQVcsQ0FBQ2lCLG1CQUFtQixHQUFHQSxtQkFBbUI7QUFDckRqQixXQUFXLENBQUNGLFFBQVEsR0FBR0EsbURBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvY2hhdC9jb21wbGV0aW9ucy9jb21wbGV0aW9ucy5tanM/ZWRhOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vLi4vcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUubWpzXCI7XG5pbXBvcnQgKiBhcyBNZXNzYWdlc0FQSSBmcm9tIFwiLi9tZXNzYWdlcy5tanNcIjtcbmltcG9ydCB7IE1lc3NhZ2VzIH0gZnJvbSBcIi4vbWVzc2FnZXMubWpzXCI7XG5pbXBvcnQgeyBDdXJzb3JQYWdlIH0gZnJvbSBcIi4uLy4uLy4uL3BhZ2luYXRpb24ubWpzXCI7XG5leHBvcnQgY2xhc3MgQ29tcGxldGlvbnMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMubWVzc2FnZXMgPSBuZXcgTWVzc2FnZXNBUEkuTWVzc2FnZXModGhpcy5fY2xpZW50KTtcbiAgICB9XG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvY2hhdC9jb21wbGV0aW9ucycsIHsgYm9keSwgLi4ub3B0aW9ucywgc3RyZWFtOiBib2R5LnN0cmVhbSA/PyBmYWxzZSB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGEgc3RvcmVkIGNoYXQgY29tcGxldGlvbi4gT25seSBDaGF0IENvbXBsZXRpb25zIHRoYXQgaGF2ZSBiZWVuIGNyZWF0ZWQgd2l0aFxuICAgICAqIHRoZSBgc3RvcmVgIHBhcmFtZXRlciBzZXQgdG8gYHRydWVgIHdpbGwgYmUgcmV0dXJuZWQuXG4gICAgICovXG4gICAgcmV0cmlldmUoY29tcGxldGlvbklkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvY2hhdC9jb21wbGV0aW9ucy8ke2NvbXBsZXRpb25JZH1gLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTW9kaWZ5IGEgc3RvcmVkIGNoYXQgY29tcGxldGlvbi4gT25seSBDaGF0IENvbXBsZXRpb25zIHRoYXQgaGF2ZSBiZWVuIGNyZWF0ZWRcbiAgICAgKiB3aXRoIHRoZSBgc3RvcmVgIHBhcmFtZXRlciBzZXQgdG8gYHRydWVgIGNhbiBiZSBtb2RpZmllZC4gQ3VycmVudGx5LCB0aGUgb25seVxuICAgICAqIHN1cHBvcnRlZCBtb2RpZmljYXRpb24gaXMgdG8gdXBkYXRlIHRoZSBgbWV0YWRhdGFgIGZpZWxkLlxuICAgICAqL1xuICAgIHVwZGF0ZShjb21wbGV0aW9uSWQsIGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvY2hhdC9jb21wbGV0aW9ucy8ke2NvbXBsZXRpb25JZH1gLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxuICAgIGxpc3QocXVlcnkgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhxdWVyeSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3Qoe30sIHF1ZXJ5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoJy9jaGF0L2NvbXBsZXRpb25zJywgQ2hhdENvbXBsZXRpb25zUGFnZSwgeyBxdWVyeSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgc3RvcmVkIGNoYXQgY29tcGxldGlvbi4gT25seSBDaGF0IENvbXBsZXRpb25zIHRoYXQgaGF2ZSBiZWVuIGNyZWF0ZWRcbiAgICAgKiB3aXRoIHRoZSBgc3RvcmVgIHBhcmFtZXRlciBzZXQgdG8gYHRydWVgIGNhbiBiZSBkZWxldGVkLlxuICAgICAqL1xuICAgIGRlbChjb21wbGV0aW9uSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5kZWxldGUoYC9jaGF0L2NvbXBsZXRpb25zLyR7Y29tcGxldGlvbklkfWAsIG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDaGF0Q29tcGxldGlvbnNQYWdlIGV4dGVuZHMgQ3Vyc29yUGFnZSB7XG59XG5leHBvcnQgY2xhc3MgQ2hhdENvbXBsZXRpb25TdG9yZU1lc3NhZ2VzUGFnZSBleHRlbmRzIEN1cnNvclBhZ2Uge1xufVxuQ29tcGxldGlvbnMuQ2hhdENvbXBsZXRpb25zUGFnZSA9IENoYXRDb21wbGV0aW9uc1BhZ2U7XG5Db21wbGV0aW9ucy5NZXNzYWdlcyA9IE1lc3NhZ2VzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcGxldGlvbnMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsImlzUmVxdWVzdE9wdGlvbnMiLCJNZXNzYWdlc0FQSSIsIk1lc3NhZ2VzIiwiQ3Vyc29yUGFnZSIsIkNvbXBsZXRpb25zIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJtZXNzYWdlcyIsIl9jbGllbnQiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsInBvc3QiLCJzdHJlYW0iLCJyZXRyaWV2ZSIsImNvbXBsZXRpb25JZCIsImdldCIsInVwZGF0ZSIsImxpc3QiLCJxdWVyeSIsImdldEFQSUxpc3QiLCJDaGF0Q29tcGxldGlvbnNQYWdlIiwiZGVsIiwiZGVsZXRlIiwiQ2hhdENvbXBsZXRpb25TdG9yZU1lc3NhZ2VzUGFnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/chat/completions/completions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/chat/completions/messages.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/openai/resources/chat/completions/messages.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionStoreMessagesPage: () => (/* reexport safe */ _completions_mjs__WEBPACK_IMPORTED_MODULE_2__.ChatCompletionStoreMessagesPage),\n/* harmony export */   Messages: () => (/* binding */ Messages)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _completions_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./completions.mjs */ \"(rsc)/./node_modules/openai/resources/chat/completions/completions.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Messages extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  list(completionId, query = {}, options) {\n    if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n      return this.list(completionId, {}, query);\n    }\n    return this._client.getAPIList(`/chat/completions/${completionId}/messages`, _completions_mjs__WEBPACK_IMPORTED_MODULE_2__.ChatCompletionStoreMessagesPage, {\n      query,\n      ...options\n    });\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jaGF0L2NvbXBsZXRpb25zL21lc3NhZ2VzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ29EO0FBQ0M7QUFDZTtBQUM3RCxNQUFNRyxRQUFRLFNBQVNILHNEQUFXLENBQUM7RUFDdENJLElBQUlBLENBQUNDLFlBQVksRUFBRUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFQyxPQUFPLEVBQUU7SUFDcEMsSUFBSU4sMkRBQWdCLENBQUNLLEtBQUssQ0FBQyxFQUFFO01BQ3pCLE9BQU8sSUFBSSxDQUFDRixJQUFJLENBQUNDLFlBQVksRUFBRSxDQUFDLENBQUMsRUFBRUMsS0FBSyxDQUFDO0lBQzdDO0lBQ0EsT0FBTyxJQUFJLENBQUNFLE9BQU8sQ0FBQ0MsVUFBVSxDQUFFLHFCQUFvQkosWUFBYSxXQUFVLEVBQUVILDZFQUErQixFQUFFO01BQUVJLEtBQUs7TUFBRSxHQUFHQztJQUFRLENBQUMsQ0FBQztFQUN4STtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2NoYXQvY29tcGxldGlvbnMvbWVzc2FnZXMubWpzPzIzNDIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uLy4uL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gXCIuLi8uLi8uLi9jb3JlLm1qc1wiO1xuaW1wb3J0IHsgQ2hhdENvbXBsZXRpb25TdG9yZU1lc3NhZ2VzUGFnZSB9IGZyb20gXCIuL2NvbXBsZXRpb25zLm1qc1wiO1xuZXhwb3J0IGNsYXNzIE1lc3NhZ2VzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGxpc3QoY29tcGxldGlvbklkLCBxdWVyeSA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdChjb21wbGV0aW9uSWQsIHt9LCBxdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KGAvY2hhdC9jb21wbGV0aW9ucy8ke2NvbXBsZXRpb25JZH0vbWVzc2FnZXNgLCBDaGF0Q29tcGxldGlvblN0b3JlTWVzc2FnZXNQYWdlLCB7IHF1ZXJ5LCAuLi5vcHRpb25zIH0pO1xuICAgIH1cbn1cbmV4cG9ydCB7IENoYXRDb21wbGV0aW9uU3RvcmVNZXNzYWdlc1BhZ2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lc3NhZ2VzLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJpc1JlcXVlc3RPcHRpb25zIiwiQ2hhdENvbXBsZXRpb25TdG9yZU1lc3NhZ2VzUGFnZSIsIk1lc3NhZ2VzIiwibGlzdCIsImNvbXBsZXRpb25JZCIsInF1ZXJ5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJnZXRBUElMaXN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/chat/completions/messages.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/completions.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/resources/completions.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Completions: () => (/* binding */ Completions)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass Completions extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  create(body, options) {\n    return this._client.post('/completions', {\n      body,\n      ...options,\n      stream: body.stream ?? false\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jb21wbGV0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUM4QztBQUN2QyxNQUFNQyxXQUFXLFNBQVNELHNEQUFXLENBQUM7RUFDekNFLE1BQU1BLENBQUNDLElBQUksRUFBRUMsT0FBTyxFQUFFO0lBQ2xCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxjQUFjLEVBQUU7TUFBRUgsSUFBSTtNQUFFLEdBQUdDLE9BQU87TUFBRUcsTUFBTSxFQUFFSixJQUFJLENBQUNJLE1BQU0sSUFBSTtJQUFNLENBQUMsQ0FBQztFQUNoRztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2NvbXBsZXRpb25zLm1qcz9hNDgxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi9yZXNvdXJjZS5tanNcIjtcbmV4cG9ydCBjbGFzcyBDb21wbGV0aW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9jb21wbGV0aW9ucycsIHsgYm9keSwgLi4ub3B0aW9ucywgc3RyZWFtOiBib2R5LnN0cmVhbSA/PyBmYWxzZSB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wbGV0aW9ucy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiQ29tcGxldGlvbnMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0Iiwic3RyZWFtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/completions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/embeddings.mjs":
/*!******************************************************!*\
  !*** ./node_modules/openai/resources/embeddings.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Embeddings: () => (/* binding */ Embeddings)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Embeddings extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  /**\n   * Creates an embedding vector representing the input text.\n   */\n  create(body, options) {\n    const hasUserProvidedEncodingFormat = !!body.encoding_format;\n    // No encoding_format specified, defaulting to base64 for performance reasons\n    // See https://github.com/openai/openai-node/pull/1312\n    let encoding_format = hasUserProvidedEncodingFormat ? body.encoding_format : 'base64';\n    if (hasUserProvidedEncodingFormat) {\n      _core_mjs__WEBPACK_IMPORTED_MODULE_1__.debug('Request', 'User defined encoding_format:', body.encoding_format);\n    }\n    const response = this._client.post('/embeddings', {\n      body: {\n        ...body,\n        encoding_format: encoding_format\n      },\n      ...options\n    });\n    // if the user specified an encoding_format, return the response as-is\n    if (hasUserProvidedEncodingFormat) {\n      return response;\n    }\n    // in this stage, we are sure the user did not specify an encoding_format\n    // and we defaulted to base64 for performance reasons\n    // we are sure then that the response is base64 encoded, let's decode it\n    // the returned result will be a float32 array since this is OpenAI API's default encoding\n    _core_mjs__WEBPACK_IMPORTED_MODULE_1__.debug('response', 'Decoding base64 embeddings to float32 array');\n    return response._thenUnwrap(response => {\n      if (response && response.data) {\n        response.data.forEach(embeddingBase64Obj => {\n          const embeddingBase64Str = embeddingBase64Obj.embedding;\n          embeddingBase64Obj.embedding = _core_mjs__WEBPACK_IMPORTED_MODULE_1__.toFloat32Array(embeddingBase64Str);\n        });\n      }\n      return response;\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9lbWJlZGRpbmdzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUM4QztBQUNWO0FBQzdCLE1BQU1FLFVBQVUsU0FBU0Ysc0RBQVcsQ0FBQztFQUN4QztBQUNKO0FBQ0E7RUFDSUcsTUFBTUEsQ0FBQ0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7SUFDbEIsTUFBTUMsNkJBQTZCLEdBQUcsQ0FBQyxDQUFDRixJQUFJLENBQUNHLGVBQWU7SUFDNUQ7SUFDQTtJQUNBLElBQUlBLGVBQWUsR0FBR0QsNkJBQTZCLEdBQUdGLElBQUksQ0FBQ0csZUFBZSxHQUFHLFFBQVE7SUFDckYsSUFBSUQsNkJBQTZCLEVBQUU7TUFDL0JMLDRDQUFVLENBQUMsU0FBUyxFQUFFLCtCQUErQixFQUFFRyxJQUFJLENBQUNHLGVBQWUsQ0FBQztJQUNoRjtJQUNBLE1BQU1FLFFBQVEsR0FBRyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLGFBQWEsRUFBRTtNQUM5Q1AsSUFBSSxFQUFFO1FBQ0YsR0FBR0EsSUFBSTtRQUNQRyxlQUFlLEVBQUVBO01BQ3JCLENBQUM7TUFDRCxHQUFHRjtJQUNQLENBQUMsQ0FBQztJQUNGO0lBQ0EsSUFBSUMsNkJBQTZCLEVBQUU7TUFDL0IsT0FBT0csUUFBUTtJQUNuQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0FSLDRDQUFVLENBQUMsVUFBVSxFQUFFLDZDQUE2QyxDQUFDO0lBQ3JFLE9BQU9RLFFBQVEsQ0FBQ0csV0FBVyxDQUFFSCxRQUFRLElBQUs7TUFDdEMsSUFBSUEsUUFBUSxJQUFJQSxRQUFRLENBQUNJLElBQUksRUFBRTtRQUMzQkosUUFBUSxDQUFDSSxJQUFJLENBQUNDLE9BQU8sQ0FBRUMsa0JBQWtCLElBQUs7VUFDMUMsTUFBTUMsa0JBQWtCLEdBQUdELGtCQUFrQixDQUFDRSxTQUFTO1VBQ3ZERixrQkFBa0IsQ0FBQ0UsU0FBUyxHQUFHaEIscURBQW1CLENBQUNlLGtCQUFrQixDQUFDO1FBQzFFLENBQUMsQ0FBQztNQUNOO01BQ0EsT0FBT1AsUUFBUTtJQUNuQixDQUFDLENBQUM7RUFDTjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2VtYmVkZGluZ3MubWpzPzg3OTEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tIFwiLi4vY29yZS5tanNcIjtcbmV4cG9ydCBjbGFzcyBFbWJlZGRpbmdzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gZW1iZWRkaW5nIHZlY3RvciByZXByZXNlbnRpbmcgdGhlIGlucHV0IHRleHQuXG4gICAgICovXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgaGFzVXNlclByb3ZpZGVkRW5jb2RpbmdGb3JtYXQgPSAhIWJvZHkuZW5jb2RpbmdfZm9ybWF0O1xuICAgICAgICAvLyBObyBlbmNvZGluZ19mb3JtYXQgc3BlY2lmaWVkLCBkZWZhdWx0aW5nIHRvIGJhc2U2NCBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL29wZW5haS9vcGVuYWktbm9kZS9wdWxsLzEzMTJcbiAgICAgICAgbGV0IGVuY29kaW5nX2Zvcm1hdCA9IGhhc1VzZXJQcm92aWRlZEVuY29kaW5nRm9ybWF0ID8gYm9keS5lbmNvZGluZ19mb3JtYXQgOiAnYmFzZTY0JztcbiAgICAgICAgaWYgKGhhc1VzZXJQcm92aWRlZEVuY29kaW5nRm9ybWF0KSB7XG4gICAgICAgICAgICBDb3JlLmRlYnVnKCdSZXF1ZXN0JywgJ1VzZXIgZGVmaW5lZCBlbmNvZGluZ19mb3JtYXQ6JywgYm9keS5lbmNvZGluZ19mb3JtYXQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gdGhpcy5fY2xpZW50LnBvc3QoJy9lbWJlZGRpbmdzJywge1xuICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgIC4uLmJvZHksXG4gICAgICAgICAgICAgICAgZW5jb2RpbmdfZm9ybWF0OiBlbmNvZGluZ19mb3JtYXQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGlmIHRoZSB1c2VyIHNwZWNpZmllZCBhbiBlbmNvZGluZ19mb3JtYXQsIHJldHVybiB0aGUgcmVzcG9uc2UgYXMtaXNcbiAgICAgICAgaWYgKGhhc1VzZXJQcm92aWRlZEVuY29kaW5nRm9ybWF0KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaW4gdGhpcyBzdGFnZSwgd2UgYXJlIHN1cmUgdGhlIHVzZXIgZGlkIG5vdCBzcGVjaWZ5IGFuIGVuY29kaW5nX2Zvcm1hdFxuICAgICAgICAvLyBhbmQgd2UgZGVmYXVsdGVkIHRvIGJhc2U2NCBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICAgICAgICAvLyB3ZSBhcmUgc3VyZSB0aGVuIHRoYXQgdGhlIHJlc3BvbnNlIGlzIGJhc2U2NCBlbmNvZGVkLCBsZXQncyBkZWNvZGUgaXRcbiAgICAgICAgLy8gdGhlIHJldHVybmVkIHJlc3VsdCB3aWxsIGJlIGEgZmxvYXQzMiBhcnJheSBzaW5jZSB0aGlzIGlzIE9wZW5BSSBBUEkncyBkZWZhdWx0IGVuY29kaW5nXG4gICAgICAgIENvcmUuZGVidWcoJ3Jlc3BvbnNlJywgJ0RlY29kaW5nIGJhc2U2NCBlbWJlZGRpbmdzIHRvIGZsb2F0MzIgYXJyYXknKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLl90aGVuVW53cmFwKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhLmZvckVhY2goKGVtYmVkZGluZ0Jhc2U2NE9iaikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbWJlZGRpbmdCYXNlNjRTdHIgPSBlbWJlZGRpbmdCYXNlNjRPYmouZW1iZWRkaW5nO1xuICAgICAgICAgICAgICAgICAgICBlbWJlZGRpbmdCYXNlNjRPYmouZW1iZWRkaW5nID0gQ29yZS50b0Zsb2F0MzJBcnJheShlbWJlZGRpbmdCYXNlNjRTdHIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbWJlZGRpbmdzLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJDb3JlIiwiRW1iZWRkaW5ncyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwiaGFzVXNlclByb3ZpZGVkRW5jb2RpbmdGb3JtYXQiLCJlbmNvZGluZ19mb3JtYXQiLCJkZWJ1ZyIsInJlc3BvbnNlIiwiX2NsaWVudCIsInBvc3QiLCJfdGhlblVud3JhcCIsImRhdGEiLCJmb3JFYWNoIiwiZW1iZWRkaW5nQmFzZTY0T2JqIiwiZW1iZWRkaW5nQmFzZTY0U3RyIiwiZW1iZWRkaW5nIiwidG9GbG9hdDMyQXJyYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/embeddings.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/evals/evals.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/resources/evals/evals.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EvalListResponsesPage: () => (/* binding */ EvalListResponsesPage),\n/* harmony export */   Evals: () => (/* binding */ Evals)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _runs_runs_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./runs/runs.mjs */ \"(rsc)/./node_modules/openai/resources/evals/runs/runs.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\nclass Evals extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  constructor() {\n    super(...arguments);\n    this.runs = new _runs_runs_mjs__WEBPACK_IMPORTED_MODULE_1__.Runs(this._client);\n  }\n  /**\n   * Create the structure of an evaluation that can be used to test a model's\n   * performance. An evaluation is a set of testing criteria and a datasource. After\n   * creating an evaluation, you can run it on different models and model parameters.\n   * We support several types of graders and datasources. For more information, see\n   * the [Evals guide](https://platform.openai.com/docs/guides/evals).\n   */\n  create(body, options) {\n    return this._client.post('/evals', {\n      body,\n      ...options\n    });\n  }\n  /**\n   * Get an evaluation by ID.\n   */\n  retrieve(evalId, options) {\n    return this._client.get(`/evals/${evalId}`, options);\n  }\n  /**\n   * Update certain properties of an evaluation.\n   */\n  update(evalId, body, options) {\n    return this._client.post(`/evals/${evalId}`, {\n      body,\n      ...options\n    });\n  }\n  list(query = {}, options) {\n    if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_2__.isRequestOptions)(query)) {\n      return this.list({}, query);\n    }\n    return this._client.getAPIList('/evals', EvalListResponsesPage, {\n      query,\n      ...options\n    });\n  }\n  /**\n   * Delete an evaluation.\n   */\n  del(evalId, options) {\n    return this._client.delete(`/evals/${evalId}`, options);\n  }\n}\nclass EvalListResponsesPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_3__.CursorPage {}\nEvals.EvalListResponsesPage = EvalListResponsesPage;\nEvals.Runs = _runs_runs_mjs__WEBPACK_IMPORTED_MODULE_1__.Runs;\nEvals.RunListResponsesPage = _runs_runs_mjs__WEBPACK_IMPORTED_MODULE_1__.RunListResponsesPage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9ldmFscy9ldmFscy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDaUQ7QUFDQztBQUNQO0FBQ21CO0FBQ1o7QUFDM0MsTUFBTU0sS0FBSyxTQUFTTixzREFBVyxDQUFDO0VBQ25DTyxXQUFXQSxDQUFBLEVBQUc7SUFDVixLQUFLLENBQUMsR0FBR0MsU0FBUyxDQUFDO0lBQ25CLElBQUksQ0FBQ0MsSUFBSSxHQUFHLElBQUlQLGdEQUFZLENBQUMsSUFBSSxDQUFDUSxPQUFPLENBQUM7RUFDOUM7RUFDQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNJQyxNQUFNQSxDQUFDQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtJQUNsQixPQUFPLElBQUksQ0FBQ0gsT0FBTyxDQUFDSSxJQUFJLENBQUMsUUFBUSxFQUFFO01BQUVGLElBQUk7TUFBRSxHQUFHQztJQUFRLENBQUMsQ0FBQztFQUM1RDtFQUNBO0FBQ0o7QUFDQTtFQUNJRSxRQUFRQSxDQUFDQyxNQUFNLEVBQUVILE9BQU8sRUFBRTtJQUN0QixPQUFPLElBQUksQ0FBQ0gsT0FBTyxDQUFDTyxHQUFHLENBQUUsVUFBU0QsTUFBTyxFQUFDLEVBQUVILE9BQU8sQ0FBQztFQUN4RDtFQUNBO0FBQ0o7QUFDQTtFQUNJSyxNQUFNQSxDQUFDRixNQUFNLEVBQUVKLElBQUksRUFBRUMsT0FBTyxFQUFFO0lBQzFCLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNJLElBQUksQ0FBRSxVQUFTRSxNQUFPLEVBQUMsRUFBRTtNQUFFSixJQUFJO01BQUUsR0FBR0M7SUFBUSxDQUFDLENBQUM7RUFDdEU7RUFDQU0sSUFBSUEsQ0FBQ0MsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFUCxPQUFPLEVBQUU7SUFDdEIsSUFBSVosMkRBQWdCLENBQUNtQixLQUFLLENBQUMsRUFBRTtNQUN6QixPQUFPLElBQUksQ0FBQ0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFQyxLQUFLLENBQUM7SUFDL0I7SUFDQSxPQUFPLElBQUksQ0FBQ1YsT0FBTyxDQUFDVyxVQUFVLENBQUMsUUFBUSxFQUFFQyxxQkFBcUIsRUFBRTtNQUFFRixLQUFLO01BQUUsR0FBR1A7SUFBUSxDQUFDLENBQUM7RUFDMUY7RUFDQTtBQUNKO0FBQ0E7RUFDSVUsR0FBR0EsQ0FBQ1AsTUFBTSxFQUFFSCxPQUFPLEVBQUU7SUFDakIsT0FBTyxJQUFJLENBQUNILE9BQU8sQ0FBQ2MsTUFBTSxDQUFFLFVBQVNSLE1BQU8sRUFBQyxFQUFFSCxPQUFPLENBQUM7RUFDM0Q7QUFDSjtBQUNPLE1BQU1TLHFCQUFxQixTQUFTakIsdURBQVUsQ0FBQztBQUV0REMsS0FBSyxDQUFDZ0IscUJBQXFCLEdBQUdBLHFCQUFxQjtBQUNuRGhCLEtBQUssQ0FBQ0YsSUFBSSxHQUFHQSxnREFBSTtBQUNqQkUsS0FBSyxDQUFDSCxvQkFBb0IsR0FBR0EsZ0VBQW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2V2YWxzL2V2YWxzLm1qcz81YjY2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IGlzUmVxdWVzdE9wdGlvbnMgfSBmcm9tIFwiLi4vLi4vY29yZS5tanNcIjtcbmltcG9ydCAqIGFzIFJ1bnNBUEkgZnJvbSBcIi4vcnVucy9ydW5zLm1qc1wiO1xuaW1wb3J0IHsgUnVuTGlzdFJlc3BvbnNlc1BhZ2UsIFJ1bnMsIH0gZnJvbSBcIi4vcnVucy9ydW5zLm1qc1wiO1xuaW1wb3J0IHsgQ3Vyc29yUGFnZSB9IGZyb20gXCIuLi8uLi9wYWdpbmF0aW9uLm1qc1wiO1xuZXhwb3J0IGNsYXNzIEV2YWxzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnJ1bnMgPSBuZXcgUnVuc0FQSS5SdW5zKHRoaXMuX2NsaWVudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSB0aGUgc3RydWN0dXJlIG9mIGFuIGV2YWx1YXRpb24gdGhhdCBjYW4gYmUgdXNlZCB0byB0ZXN0IGEgbW9kZWwnc1xuICAgICAqIHBlcmZvcm1hbmNlLiBBbiBldmFsdWF0aW9uIGlzIGEgc2V0IG9mIHRlc3RpbmcgY3JpdGVyaWEgYW5kIGEgZGF0YXNvdXJjZS4gQWZ0ZXJcbiAgICAgKiBjcmVhdGluZyBhbiBldmFsdWF0aW9uLCB5b3UgY2FuIHJ1biBpdCBvbiBkaWZmZXJlbnQgbW9kZWxzIGFuZCBtb2RlbCBwYXJhbWV0ZXJzLlxuICAgICAqIFdlIHN1cHBvcnQgc2V2ZXJhbCB0eXBlcyBvZiBncmFkZXJzIGFuZCBkYXRhc291cmNlcy4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuICAgICAqIHRoZSBbRXZhbHMgZ3VpZGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9ldmFscykuXG4gICAgICovXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvZXZhbHMnLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhbiBldmFsdWF0aW9uIGJ5IElELlxuICAgICAqL1xuICAgIHJldHJpZXZlKGV2YWxJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL2V2YWxzLyR7ZXZhbElkfWAsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgY2VydGFpbiBwcm9wZXJ0aWVzIG9mIGFuIGV2YWx1YXRpb24uXG4gICAgICovXG4gICAgdXBkYXRlKGV2YWxJZCwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC9ldmFscy8ke2V2YWxJZH1gLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxuICAgIGxpc3QocXVlcnkgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhxdWVyeSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3Qoe30sIHF1ZXJ5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoJy9ldmFscycsIEV2YWxMaXN0UmVzcG9uc2VzUGFnZSwgeyBxdWVyeSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlIGFuIGV2YWx1YXRpb24uXG4gICAgICovXG4gICAgZGVsKGV2YWxJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmRlbGV0ZShgL2V2YWxzLyR7ZXZhbElkfWAsIG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBFdmFsTGlzdFJlc3BvbnNlc1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlIHtcbn1cbkV2YWxzLkV2YWxMaXN0UmVzcG9uc2VzUGFnZSA9IEV2YWxMaXN0UmVzcG9uc2VzUGFnZTtcbkV2YWxzLlJ1bnMgPSBSdW5zO1xuRXZhbHMuUnVuTGlzdFJlc3BvbnNlc1BhZ2UgPSBSdW5MaXN0UmVzcG9uc2VzUGFnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2YWxzLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJpc1JlcXVlc3RPcHRpb25zIiwiUnVuc0FQSSIsIlJ1bkxpc3RSZXNwb25zZXNQYWdlIiwiUnVucyIsIkN1cnNvclBhZ2UiLCJFdmFscyIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwicnVucyIsIl9jbGllbnQiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsInBvc3QiLCJyZXRyaWV2ZSIsImV2YWxJZCIsImdldCIsInVwZGF0ZSIsImxpc3QiLCJxdWVyeSIsImdldEFQSUxpc3QiLCJFdmFsTGlzdFJlc3BvbnNlc1BhZ2UiLCJkZWwiLCJkZWxldGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/evals/evals.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/evals/runs/output-items.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/openai/resources/evals/runs/output-items.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OutputItemListResponsesPage: () => (/* binding */ OutputItemListResponsesPage),\n/* harmony export */   OutputItems: () => (/* binding */ OutputItems)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass OutputItems extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  /**\n   * Get an evaluation run output item by ID.\n   */\n  retrieve(evalId, runId, outputItemId, options) {\n    return this._client.get(`/evals/${evalId}/runs/${runId}/output_items/${outputItemId}`, options);\n  }\n  list(evalId, runId, query = {}, options) {\n    if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n      return this.list(evalId, runId, {}, query);\n    }\n    return this._client.getAPIList(`/evals/${evalId}/runs/${runId}/output_items`, OutputItemListResponsesPage, {\n      query,\n      ...options\n    });\n  }\n}\nclass OutputItemListResponsesPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage {}\nOutputItems.OutputItemListResponsesPage = OutputItemListResponsesPage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9ldmFscy9ydW5zL291dHB1dC1pdGVtcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNvRDtBQUNDO0FBQ0E7QUFDOUMsTUFBTUcsV0FBVyxTQUFTSCxzREFBVyxDQUFDO0VBQ3pDO0FBQ0o7QUFDQTtFQUNJSSxRQUFRQSxDQUFDQyxNQUFNLEVBQUVDLEtBQUssRUFBRUMsWUFBWSxFQUFFQyxPQUFPLEVBQUU7SUFDM0MsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFFLFVBQVNMLE1BQU8sU0FBUUMsS0FBTSxpQkFBZ0JDLFlBQWEsRUFBQyxFQUFFQyxPQUFPLENBQUM7RUFDbkc7RUFDQUcsSUFBSUEsQ0FBQ04sTUFBTSxFQUFFQyxLQUFLLEVBQUVNLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRUosT0FBTyxFQUFFO0lBQ3JDLElBQUlQLDJEQUFnQixDQUFDVyxLQUFLLENBQUMsRUFBRTtNQUN6QixPQUFPLElBQUksQ0FBQ0QsSUFBSSxDQUFDTixNQUFNLEVBQUVDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRU0sS0FBSyxDQUFDO0lBQzlDO0lBQ0EsT0FBTyxJQUFJLENBQUNILE9BQU8sQ0FBQ0ksVUFBVSxDQUFFLFVBQVNSLE1BQU8sU0FBUUMsS0FBTSxlQUFjLEVBQUVRLDJCQUEyQixFQUFFO01BQUVGLEtBQUs7TUFBRSxHQUFHSjtJQUFRLENBQUMsQ0FBQztFQUNySTtBQUNKO0FBQ08sTUFBTU0sMkJBQTJCLFNBQVNaLHVEQUFVLENBQUM7QUFFNURDLFdBQVcsQ0FBQ1csMkJBQTJCLEdBQUdBLDJCQUEyQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9ldmFscy9ydW5zL291dHB1dC1pdGVtcy5tanM/Nzg3NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vLi4vcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUubWpzXCI7XG5pbXBvcnQgeyBDdXJzb3JQYWdlIH0gZnJvbSBcIi4uLy4uLy4uL3BhZ2luYXRpb24ubWpzXCI7XG5leHBvcnQgY2xhc3MgT3V0cHV0SXRlbXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogR2V0IGFuIGV2YWx1YXRpb24gcnVuIG91dHB1dCBpdGVtIGJ5IElELlxuICAgICAqL1xuICAgIHJldHJpZXZlKGV2YWxJZCwgcnVuSWQsIG91dHB1dEl0ZW1JZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL2V2YWxzLyR7ZXZhbElkfS9ydW5zLyR7cnVuSWR9L291dHB1dF9pdGVtcy8ke291dHB1dEl0ZW1JZH1gLCBvcHRpb25zKTtcbiAgICB9XG4gICAgbGlzdChldmFsSWQsIHJ1bklkLCBxdWVyeSA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdChldmFsSWQsIHJ1bklkLCB7fSwgcXVlcnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdChgL2V2YWxzLyR7ZXZhbElkfS9ydW5zLyR7cnVuSWR9L291dHB1dF9pdGVtc2AsIE91dHB1dEl0ZW1MaXN0UmVzcG9uc2VzUGFnZSwgeyBxdWVyeSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgT3V0cHV0SXRlbUxpc3RSZXNwb25zZXNQYWdlIGV4dGVuZHMgQ3Vyc29yUGFnZSB7XG59XG5PdXRwdXRJdGVtcy5PdXRwdXRJdGVtTGlzdFJlc3BvbnNlc1BhZ2UgPSBPdXRwdXRJdGVtTGlzdFJlc3BvbnNlc1BhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdXRwdXQtaXRlbXMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsImlzUmVxdWVzdE9wdGlvbnMiLCJDdXJzb3JQYWdlIiwiT3V0cHV0SXRlbXMiLCJyZXRyaWV2ZSIsImV2YWxJZCIsInJ1bklkIiwib3V0cHV0SXRlbUlkIiwib3B0aW9ucyIsIl9jbGllbnQiLCJnZXQiLCJsaXN0IiwicXVlcnkiLCJnZXRBUElMaXN0IiwiT3V0cHV0SXRlbUxpc3RSZXNwb25zZXNQYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/evals/runs/output-items.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/evals/runs/runs.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/openai/resources/evals/runs/runs.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RunListResponsesPage: () => (/* binding */ RunListResponsesPage),\n/* harmony export */   Runs: () => (/* binding */ Runs)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _output_items_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./output-items.mjs */ \"(rsc)/./node_modules/openai/resources/evals/runs/output-items.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\nclass Runs extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  constructor() {\n    super(...arguments);\n    this.outputItems = new _output_items_mjs__WEBPACK_IMPORTED_MODULE_1__.OutputItems(this._client);\n  }\n  /**\n   * Create a new evaluation run. This is the endpoint that will kick off grading.\n   */\n  create(evalId, body, options) {\n    return this._client.post(`/evals/${evalId}/runs`, {\n      body,\n      ...options\n    });\n  }\n  /**\n   * Get an evaluation run by ID.\n   */\n  retrieve(evalId, runId, options) {\n    return this._client.get(`/evals/${evalId}/runs/${runId}`, options);\n  }\n  list(evalId, query = {}, options) {\n    if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_2__.isRequestOptions)(query)) {\n      return this.list(evalId, {}, query);\n    }\n    return this._client.getAPIList(`/evals/${evalId}/runs`, RunListResponsesPage, {\n      query,\n      ...options\n    });\n  }\n  /**\n   * Delete an eval run.\n   */\n  del(evalId, runId, options) {\n    return this._client.delete(`/evals/${evalId}/runs/${runId}`, options);\n  }\n  /**\n   * Cancel an ongoing evaluation run.\n   */\n  cancel(evalId, runId, options) {\n    return this._client.post(`/evals/${evalId}/runs/${runId}`, options);\n  }\n}\nclass RunListResponsesPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_3__.CursorPage {}\nRuns.RunListResponsesPage = RunListResponsesPage;\nRuns.OutputItems = _output_items_mjs__WEBPACK_IMPORTED_MODULE_1__.OutputItems;\nRuns.OutputItemListResponsesPage = _output_items_mjs__WEBPACK_IMPORTED_MODULE_1__.OutputItemListResponsesPage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9ldmFscy9ydW5zL3J1bnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ29EO0FBQ0M7QUFDQTtBQUMwQjtBQUMxQjtBQUM5QyxNQUFNTSxJQUFJLFNBQVNOLHNEQUFXLENBQUM7RUFDbENPLFdBQVdBLENBQUEsRUFBRztJQUNWLEtBQUssQ0FBQyxHQUFHQyxTQUFTLENBQUM7SUFDbkIsSUFBSSxDQUFDQyxXQUFXLEdBQUcsSUFBSVAsMERBQTBCLENBQUMsSUFBSSxDQUFDUSxPQUFPLENBQUM7RUFDbkU7RUFDQTtBQUNKO0FBQ0E7RUFDSUMsTUFBTUEsQ0FBQ0MsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtJQUMxQixPQUFPLElBQUksQ0FBQ0osT0FBTyxDQUFDSyxJQUFJLENBQUUsVUFBU0gsTUFBTyxPQUFNLEVBQUU7TUFBRUMsSUFBSTtNQUFFLEdBQUdDO0lBQVEsQ0FBQyxDQUFDO0VBQzNFO0VBQ0E7QUFDSjtBQUNBO0VBQ0lFLFFBQVFBLENBQUNKLE1BQU0sRUFBRUssS0FBSyxFQUFFSCxPQUFPLEVBQUU7SUFDN0IsT0FBTyxJQUFJLENBQUNKLE9BQU8sQ0FBQ1EsR0FBRyxDQUFFLFVBQVNOLE1BQU8sU0FBUUssS0FBTSxFQUFDLEVBQUVILE9BQU8sQ0FBQztFQUN0RTtFQUNBSyxJQUFJQSxDQUFDUCxNQUFNLEVBQUVRLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRU4sT0FBTyxFQUFFO0lBQzlCLElBQUliLDJEQUFnQixDQUFDbUIsS0FBSyxDQUFDLEVBQUU7TUFDekIsT0FBTyxJQUFJLENBQUNELElBQUksQ0FBQ1AsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFUSxLQUFLLENBQUM7SUFDdkM7SUFDQSxPQUFPLElBQUksQ0FBQ1YsT0FBTyxDQUFDVyxVQUFVLENBQUUsVUFBU1QsTUFBTyxPQUFNLEVBQUVVLG9CQUFvQixFQUFFO01BQUVGLEtBQUs7TUFBRSxHQUFHTjtJQUFRLENBQUMsQ0FBQztFQUN4RztFQUNBO0FBQ0o7QUFDQTtFQUNJUyxHQUFHQSxDQUFDWCxNQUFNLEVBQUVLLEtBQUssRUFBRUgsT0FBTyxFQUFFO0lBQ3hCLE9BQU8sSUFBSSxDQUFDSixPQUFPLENBQUNjLE1BQU0sQ0FBRSxVQUFTWixNQUFPLFNBQVFLLEtBQU0sRUFBQyxFQUFFSCxPQUFPLENBQUM7RUFDekU7RUFDQTtBQUNKO0FBQ0E7RUFDSVcsTUFBTUEsQ0FBQ2IsTUFBTSxFQUFFSyxLQUFLLEVBQUVILE9BQU8sRUFBRTtJQUMzQixPQUFPLElBQUksQ0FBQ0osT0FBTyxDQUFDSyxJQUFJLENBQUUsVUFBU0gsTUFBTyxTQUFRSyxLQUFNLEVBQUMsRUFBRUgsT0FBTyxDQUFDO0VBQ3ZFO0FBQ0o7QUFDTyxNQUFNUSxvQkFBb0IsU0FBU2pCLHVEQUFVLENBQUM7QUFFckRDLElBQUksQ0FBQ2dCLG9CQUFvQixHQUFHQSxvQkFBb0I7QUFDaERoQixJQUFJLENBQUNGLFdBQVcsR0FBR0EsMERBQVc7QUFDOUJFLElBQUksQ0FBQ0gsMkJBQTJCLEdBQUdBLDBFQUEyQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9ldmFscy9ydW5zL3J1bnMubWpzPzdkM2IiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uLy4uL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gXCIuLi8uLi8uLi9jb3JlLm1qc1wiO1xuaW1wb3J0ICogYXMgT3V0cHV0SXRlbXNBUEkgZnJvbSBcIi4vb3V0cHV0LWl0ZW1zLm1qc1wiO1xuaW1wb3J0IHsgT3V0cHV0SXRlbUxpc3RSZXNwb25zZXNQYWdlLCBPdXRwdXRJdGVtcywgfSBmcm9tIFwiLi9vdXRwdXQtaXRlbXMubWpzXCI7XG5pbXBvcnQgeyBDdXJzb3JQYWdlIH0gZnJvbSBcIi4uLy4uLy4uL3BhZ2luYXRpb24ubWpzXCI7XG5leHBvcnQgY2xhc3MgUnVucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5vdXRwdXRJdGVtcyA9IG5ldyBPdXRwdXRJdGVtc0FQSS5PdXRwdXRJdGVtcyh0aGlzLl9jbGllbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgZXZhbHVhdGlvbiBydW4uIFRoaXMgaXMgdGhlIGVuZHBvaW50IHRoYXQgd2lsbCBraWNrIG9mZiBncmFkaW5nLlxuICAgICAqL1xuICAgIGNyZWF0ZShldmFsSWQsIGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvZXZhbHMvJHtldmFsSWR9L3J1bnNgLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhbiBldmFsdWF0aW9uIHJ1biBieSBJRC5cbiAgICAgKi9cbiAgICByZXRyaWV2ZShldmFsSWQsIHJ1bklkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvZXZhbHMvJHtldmFsSWR9L3J1bnMvJHtydW5JZH1gLCBvcHRpb25zKTtcbiAgICB9XG4gICAgbGlzdChldmFsSWQsIHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0KGV2YWxJZCwge30sIHF1ZXJ5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoYC9ldmFscy8ke2V2YWxJZH0vcnVuc2AsIFJ1bkxpc3RSZXNwb25zZXNQYWdlLCB7IHF1ZXJ5LCAuLi5vcHRpb25zIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYW4gZXZhbCBydW4uXG4gICAgICovXG4gICAgZGVsKGV2YWxJZCwgcnVuSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5kZWxldGUoYC9ldmFscy8ke2V2YWxJZH0vcnVucy8ke3J1bklkfWAsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYW5jZWwgYW4gb25nb2luZyBldmFsdWF0aW9uIHJ1bi5cbiAgICAgKi9cbiAgICBjYW5jZWwoZXZhbElkLCBydW5JZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC9ldmFscy8ke2V2YWxJZH0vcnVucy8ke3J1bklkfWAsIG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBSdW5MaXN0UmVzcG9uc2VzUGFnZSBleHRlbmRzIEN1cnNvclBhZ2Uge1xufVxuUnVucy5SdW5MaXN0UmVzcG9uc2VzUGFnZSA9IFJ1bkxpc3RSZXNwb25zZXNQYWdlO1xuUnVucy5PdXRwdXRJdGVtcyA9IE91dHB1dEl0ZW1zO1xuUnVucy5PdXRwdXRJdGVtTGlzdFJlc3BvbnNlc1BhZ2UgPSBPdXRwdXRJdGVtTGlzdFJlc3BvbnNlc1BhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ydW5zLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJpc1JlcXVlc3RPcHRpb25zIiwiT3V0cHV0SXRlbXNBUEkiLCJPdXRwdXRJdGVtTGlzdFJlc3BvbnNlc1BhZ2UiLCJPdXRwdXRJdGVtcyIsIkN1cnNvclBhZ2UiLCJSdW5zIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJvdXRwdXRJdGVtcyIsIl9jbGllbnQiLCJjcmVhdGUiLCJldmFsSWQiLCJib2R5Iiwib3B0aW9ucyIsInBvc3QiLCJyZXRyaWV2ZSIsInJ1bklkIiwiZ2V0IiwibGlzdCIsInF1ZXJ5IiwiZ2V0QVBJTGlzdCIsIlJ1bkxpc3RSZXNwb25zZXNQYWdlIiwiZGVsIiwiZGVsZXRlIiwiY2FuY2VsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/evals/runs/runs.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/files.mjs":
/*!*************************************************!*\
  !*** ./node_modules/openai/resources/files.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FileObjectsPage: () => (/* binding */ FileObjectsPage),\n/* harmony export */   Files: () => (/* binding */ Files)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core.mjs */ \"(rsc)/./node_modules/openai/uploads.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\nclass Files extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  /**\n   * Upload a file that can be used across various endpoints. Individual files can be\n   * up to 512 MB, and the size of all files uploaded by one organization can be up\n   * to 100 GB.\n   *\n   * The Assistants API supports files up to 2 million tokens and of specific file\n   * types. See the\n   * [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) for\n   * details.\n   *\n   * The Fine-tuning API only supports `.jsonl` files. The input also has certain\n   * required formats for fine-tuning\n   * [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or\n   * [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)\n   * models.\n   *\n   * The Batch API only supports `.jsonl` files up to 200 MB in size. The input also\n   * has a specific required\n   * [format](https://platform.openai.com/docs/api-reference/batch/request-input).\n   *\n   * Please [contact us](https://help.openai.com/) if you need to increase these\n   * storage limits.\n   */\n  create(body, options) {\n    return this._client.post('/files', _core_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions({\n      body,\n      ...options\n    }));\n  }\n  /**\n   * Returns information about a specific file.\n   */\n  retrieve(fileId, options) {\n    return this._client.get(`/files/${fileId}`, options);\n  }\n  list(query = {}, options) {\n    if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_2__.isRequestOptions)(query)) {\n      return this.list({}, query);\n    }\n    return this._client.getAPIList('/files', FileObjectsPage, {\n      query,\n      ...options\n    });\n  }\n  /**\n   * Delete a file.\n   */\n  del(fileId, options) {\n    return this._client.delete(`/files/${fileId}`, options);\n  }\n  /**\n   * Returns the contents of the specified file.\n   */\n  content(fileId, options) {\n    return this._client.get(`/files/${fileId}/content`, {\n      ...options,\n      headers: {\n        Accept: 'application/binary',\n        ...options?.headers\n      },\n      __binaryResponse: true\n    });\n  }\n  /**\n   * Returns the contents of the specified file.\n   *\n   * @deprecated The `.content()` method should be used instead\n   */\n  retrieveContent(fileId, options) {\n    return this._client.get(`/files/${fileId}/content`, options);\n  }\n  /**\n   * Waits for the given file to be processed, default timeout is 30 mins.\n   */\n  async waitForProcessing(id, {\n    pollInterval = 5000,\n    maxWait = 30 * 60 * 1000\n  } = {}) {\n    const TERMINAL_STATES = new Set(['processed', 'error', 'deleted']);\n    const start = Date.now();\n    let file = await this.retrieve(id);\n    while (!file.status || !TERMINAL_STATES.has(file.status)) {\n      await (0,_core_mjs__WEBPACK_IMPORTED_MODULE_2__.sleep)(pollInterval);\n      file = await this.retrieve(id);\n      if (Date.now() - start > maxWait) {\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIConnectionTimeoutError({\n          message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`\n        });\n      }\n    }\n    return file;\n  }\n}\nclass FileObjectsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__.CursorPage {}\nFiles.FileObjectsPage = FileObjectsPage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/files.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/fine-tuning/checkpoints/checkpoints.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/openai/resources/fine-tuning/checkpoints/checkpoints.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Checkpoints: () => (/* binding */ Checkpoints)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _permissions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./permissions.mjs */ \"(rsc)/./node_modules/openai/resources/fine-tuning/checkpoints/permissions.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Checkpoints extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  constructor() {\n    super(...arguments);\n    this.permissions = new _permissions_mjs__WEBPACK_IMPORTED_MODULE_1__.Permissions(this._client);\n  }\n}\nCheckpoints.Permissions = _permissions_mjs__WEBPACK_IMPORTED_MODULE_1__.Permissions;\nCheckpoints.PermissionCreateResponsesPage = _permissions_mjs__WEBPACK_IMPORTED_MODULE_1__.PermissionCreateResponsesPage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9jaGVja3BvaW50cy9jaGVja3BvaW50cy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDb0Q7QUFDQTtBQUM0QjtBQUN6RSxNQUFNSSxXQUFXLFNBQVNKLHNEQUFXLENBQUM7RUFDekNLLFdBQVdBLENBQUEsRUFBRztJQUNWLEtBQUssQ0FBQyxHQUFHQyxTQUFTLENBQUM7SUFDbkIsSUFBSSxDQUFDQyxXQUFXLEdBQUcsSUFBSU4seURBQTBCLENBQUMsSUFBSSxDQUFDTyxPQUFPLENBQUM7RUFDbkU7QUFDSjtBQUNBSixXQUFXLENBQUNELFdBQVcsR0FBR0EseURBQVc7QUFDckNDLFdBQVcsQ0FBQ0YsNkJBQTZCLEdBQUdBLDJFQUE2QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9jaGVja3BvaW50cy9jaGVja3BvaW50cy5tanM/MzhmNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vLi4vcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgKiBhcyBQZXJtaXNzaW9uc0FQSSBmcm9tIFwiLi9wZXJtaXNzaW9ucy5tanNcIjtcbmltcG9ydCB7IFBlcm1pc3Npb25DcmVhdGVSZXNwb25zZXNQYWdlLCBQZXJtaXNzaW9ucywgfSBmcm9tIFwiLi9wZXJtaXNzaW9ucy5tanNcIjtcbmV4cG9ydCBjbGFzcyBDaGVja3BvaW50cyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5wZXJtaXNzaW9ucyA9IG5ldyBQZXJtaXNzaW9uc0FQSS5QZXJtaXNzaW9ucyh0aGlzLl9jbGllbnQpO1xuICAgIH1cbn1cbkNoZWNrcG9pbnRzLlBlcm1pc3Npb25zID0gUGVybWlzc2lvbnM7XG5DaGVja3BvaW50cy5QZXJtaXNzaW9uQ3JlYXRlUmVzcG9uc2VzUGFnZSA9IFBlcm1pc3Npb25DcmVhdGVSZXNwb25zZXNQYWdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hlY2twb2ludHMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIlBlcm1pc3Npb25zQVBJIiwiUGVybWlzc2lvbkNyZWF0ZVJlc3BvbnNlc1BhZ2UiLCJQZXJtaXNzaW9ucyIsIkNoZWNrcG9pbnRzIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJwZXJtaXNzaW9ucyIsIl9jbGllbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/fine-tuning/checkpoints/checkpoints.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/fine-tuning/checkpoints/permissions.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/openai/resources/fine-tuning/checkpoints/permissions.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PermissionCreateResponsesPage: () => (/* binding */ PermissionCreateResponsesPage),\n/* harmony export */   Permissions: () => (/* binding */ Permissions)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Permissions extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  /**\n   * **NOTE:** Calling this endpoint requires an [admin API key](../admin-api-keys).\n   *\n   * This enables organization owners to share fine-tuned models with other projects\n   * in their organization.\n   */\n  create(fineTunedModelCheckpoint, body, options) {\n    return this._client.getAPIList(`/fine_tuning/checkpoints/${fineTunedModelCheckpoint}/permissions`, PermissionCreateResponsesPage, {\n      body,\n      method: 'post',\n      ...options\n    });\n  }\n  retrieve(fineTunedModelCheckpoint, query = {}, options) {\n    if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n      return this.retrieve(fineTunedModelCheckpoint, {}, query);\n    }\n    return this._client.get(`/fine_tuning/checkpoints/${fineTunedModelCheckpoint}/permissions`, {\n      query,\n      ...options\n    });\n  }\n  /**\n   * **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).\n   *\n   * Organization owners can use this endpoint to delete a permission for a\n   * fine-tuned model checkpoint.\n   */\n  del(fineTunedModelCheckpoint, options) {\n    return this._client.delete(`/fine_tuning/checkpoints/${fineTunedModelCheckpoint}/permissions`, options);\n  }\n}\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nclass PermissionCreateResponsesPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.Page {}\nPermissions.PermissionCreateResponsesPage = PermissionCreateResponsesPage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9jaGVja3BvaW50cy9wZXJtaXNzaW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNvRDtBQUNDO0FBQ047QUFDeEMsTUFBTUcsV0FBVyxTQUFTSCxzREFBVyxDQUFDO0VBQ3pDO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNJSSxNQUFNQSxDQUFDQyx3QkFBd0IsRUFBRUMsSUFBSSxFQUFFQyxPQUFPLEVBQUU7SUFDNUMsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsVUFBVSxDQUFFLDRCQUEyQkosd0JBQXlCLGNBQWEsRUFBRUssNkJBQTZCLEVBQUU7TUFBRUosSUFBSTtNQUFFSyxNQUFNLEVBQUUsTUFBTTtNQUFFLEdBQUdKO0lBQVEsQ0FBQyxDQUFDO0VBQzNLO0VBQ0FLLFFBQVFBLENBQUNQLHdCQUF3QixFQUFFUSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUVOLE9BQU8sRUFBRTtJQUNwRCxJQUFJTiwyREFBZ0IsQ0FBQ1ksS0FBSyxDQUFDLEVBQUU7TUFDekIsT0FBTyxJQUFJLENBQUNELFFBQVEsQ0FBQ1Asd0JBQXdCLEVBQUUsQ0FBQyxDQUFDLEVBQUVRLEtBQUssQ0FBQztJQUM3RDtJQUNBLE9BQU8sSUFBSSxDQUFDTCxPQUFPLENBQUNNLEdBQUcsQ0FBRSw0QkFBMkJULHdCQUF5QixjQUFhLEVBQUU7TUFDeEZRLEtBQUs7TUFDTCxHQUFHTjtJQUNQLENBQUMsQ0FBQztFQUNOO0VBQ0E7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0lRLEdBQUdBLENBQUNWLHdCQUF3QixFQUFFRSxPQUFPLEVBQUU7SUFDbkMsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ1EsTUFBTSxDQUFFLDRCQUEyQlgsd0JBQXlCLGNBQWEsRUFBRUUsT0FBTyxDQUFDO0VBQzNHO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNRyw2QkFBNkIsU0FBU1IsaURBQUksQ0FBQztBQUV4REMsV0FBVyxDQUFDTyw2QkFBNkIsR0FBR0EsNkJBQTZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ZpbmUtdHVuaW5nL2NoZWNrcG9pbnRzL3Blcm1pc3Npb25zLm1qcz8zNWQ2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi8uLi9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IGlzUmVxdWVzdE9wdGlvbnMgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS5tanNcIjtcbmltcG9ydCB7IFBhZ2UgfSBmcm9tIFwiLi4vLi4vLi4vcGFnaW5hdGlvbi5tanNcIjtcbmV4cG9ydCBjbGFzcyBQZXJtaXNzaW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiAqKk5PVEU6KiogQ2FsbGluZyB0aGlzIGVuZHBvaW50IHJlcXVpcmVzIGFuIFthZG1pbiBBUEkga2V5XSguLi9hZG1pbi1hcGkta2V5cykuXG4gICAgICpcbiAgICAgKiBUaGlzIGVuYWJsZXMgb3JnYW5pemF0aW9uIG93bmVycyB0byBzaGFyZSBmaW5lLXR1bmVkIG1vZGVscyB3aXRoIG90aGVyIHByb2plY3RzXG4gICAgICogaW4gdGhlaXIgb3JnYW5pemF0aW9uLlxuICAgICAqL1xuICAgIGNyZWF0ZShmaW5lVHVuZWRNb2RlbENoZWNrcG9pbnQsIGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KGAvZmluZV90dW5pbmcvY2hlY2twb2ludHMvJHtmaW5lVHVuZWRNb2RlbENoZWNrcG9pbnR9L3Blcm1pc3Npb25zYCwgUGVybWlzc2lvbkNyZWF0ZVJlc3BvbnNlc1BhZ2UsIHsgYm9keSwgbWV0aG9kOiAncG9zdCcsIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxuICAgIHJldHJpZXZlKGZpbmVUdW5lZE1vZGVsQ2hlY2twb2ludCwgcXVlcnkgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhxdWVyeSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJldHJpZXZlKGZpbmVUdW5lZE1vZGVsQ2hlY2twb2ludCwge30sIHF1ZXJ5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL2ZpbmVfdHVuaW5nL2NoZWNrcG9pbnRzLyR7ZmluZVR1bmVkTW9kZWxDaGVja3BvaW50fS9wZXJtaXNzaW9uc2AsIHtcbiAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICoqTk9URToqKiBUaGlzIGVuZHBvaW50IHJlcXVpcmVzIGFuIFthZG1pbiBBUEkga2V5XSguLi9hZG1pbi1hcGkta2V5cykuXG4gICAgICpcbiAgICAgKiBPcmdhbml6YXRpb24gb3duZXJzIGNhbiB1c2UgdGhpcyBlbmRwb2ludCB0byBkZWxldGUgYSBwZXJtaXNzaW9uIGZvciBhXG4gICAgICogZmluZS10dW5lZCBtb2RlbCBjaGVja3BvaW50LlxuICAgICAqL1xuICAgIGRlbChmaW5lVHVuZWRNb2RlbENoZWNrcG9pbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5kZWxldGUoYC9maW5lX3R1bmluZy9jaGVja3BvaW50cy8ke2ZpbmVUdW5lZE1vZGVsQ2hlY2twb2ludH0vcGVybWlzc2lvbnNgLCBvcHRpb25zKTtcbiAgICB9XG59XG4vKipcbiAqIE5vdGU6IG5vIHBhZ2luYXRpb24gYWN0dWFsbHkgb2NjdXJzIHlldCwgdGhpcyBpcyBmb3IgZm9yd2FyZHMtY29tcGF0aWJpbGl0eS5cbiAqL1xuZXhwb3J0IGNsYXNzIFBlcm1pc3Npb25DcmVhdGVSZXNwb25zZXNQYWdlIGV4dGVuZHMgUGFnZSB7XG59XG5QZXJtaXNzaW9ucy5QZXJtaXNzaW9uQ3JlYXRlUmVzcG9uc2VzUGFnZSA9IFBlcm1pc3Npb25DcmVhdGVSZXNwb25zZXNQYWdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGVybWlzc2lvbnMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsImlzUmVxdWVzdE9wdGlvbnMiLCJQYWdlIiwiUGVybWlzc2lvbnMiLCJjcmVhdGUiLCJmaW5lVHVuZWRNb2RlbENoZWNrcG9pbnQiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJnZXRBUElMaXN0IiwiUGVybWlzc2lvbkNyZWF0ZVJlc3BvbnNlc1BhZ2UiLCJtZXRob2QiLCJyZXRyaWV2ZSIsInF1ZXJ5IiwiZ2V0IiwiZGVsIiwiZGVsZXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/fine-tuning/checkpoints/permissions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/fine-tuning/fine-tuning.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/openai/resources/fine-tuning/fine-tuning.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FineTuning: () => (/* binding */ FineTuning)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _checkpoints_checkpoints_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./checkpoints/checkpoints.mjs */ \"(rsc)/./node_modules/openai/resources/fine-tuning/checkpoints/checkpoints.mjs\");\n/* harmony import */ var _jobs_jobs_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jobs/jobs.mjs */ \"(rsc)/./node_modules/openai/resources/fine-tuning/jobs/jobs.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\nclass FineTuning extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  constructor() {\n    super(...arguments);\n    this.jobs = new _jobs_jobs_mjs__WEBPACK_IMPORTED_MODULE_1__.Jobs(this._client);\n    this.checkpoints = new _checkpoints_checkpoints_mjs__WEBPACK_IMPORTED_MODULE_2__.Checkpoints(this._client);\n  }\n}\nFineTuning.Jobs = _jobs_jobs_mjs__WEBPACK_IMPORTED_MODULE_1__.Jobs;\nFineTuning.FineTuningJobsPage = _jobs_jobs_mjs__WEBPACK_IMPORTED_MODULE_1__.FineTuningJobsPage;\nFineTuning.FineTuningJobEventsPage = _jobs_jobs_mjs__WEBPACK_IMPORTED_MODULE_1__.FineTuningJobEventsPage;\nFineTuning.Checkpoints = _checkpoints_checkpoints_mjs__WEBPACK_IMPORTED_MODULE_2__.Checkpoints;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9maW5lLXR1bmluZy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ2lEO0FBQ2U7QUFDSjtBQUNqQjtBQUMwQztBQUM5RSxNQUFNTyxVQUFVLFNBQVNQLHNEQUFXLENBQUM7RUFDeENRLFdBQVdBLENBQUEsRUFBRztJQUNWLEtBQUssQ0FBQyxHQUFHQyxTQUFTLENBQUM7SUFDbkIsSUFBSSxDQUFDQyxJQUFJLEdBQUcsSUFBSVAsZ0RBQVksQ0FBQyxJQUFJLENBQUNRLE9BQU8sQ0FBQztJQUMxQyxJQUFJLENBQUNDLFdBQVcsR0FBRyxJQUFJWCxxRUFBMEIsQ0FBQyxJQUFJLENBQUNVLE9BQU8sQ0FBQztFQUNuRTtBQUNKO0FBQ0FKLFVBQVUsQ0FBQ0QsSUFBSSxHQUFHQSxnREFBSTtBQUN0QkMsVUFBVSxDQUFDRixrQkFBa0IsR0FBR0EsOERBQWtCO0FBQ2xERSxVQUFVLENBQUNILHVCQUF1QixHQUFHQSxtRUFBdUI7QUFDNURHLFVBQVUsQ0FBQ0wsV0FBVyxHQUFHQSxxRUFBVyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9maW5lLXR1bmluZy5tanM/MjY3NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgKiBhcyBDaGVja3BvaW50c0FQSSBmcm9tIFwiLi9jaGVja3BvaW50cy9jaGVja3BvaW50cy5tanNcIjtcbmltcG9ydCB7IENoZWNrcG9pbnRzIH0gZnJvbSBcIi4vY2hlY2twb2ludHMvY2hlY2twb2ludHMubWpzXCI7XG5pbXBvcnQgKiBhcyBKb2JzQVBJIGZyb20gXCIuL2pvYnMvam9icy5tanNcIjtcbmltcG9ydCB7IEZpbmVUdW5pbmdKb2JFdmVudHNQYWdlLCBGaW5lVHVuaW5nSm9ic1BhZ2UsIEpvYnMsIH0gZnJvbSBcIi4vam9icy9qb2JzLm1qc1wiO1xuZXhwb3J0IGNsYXNzIEZpbmVUdW5pbmcgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuam9icyA9IG5ldyBKb2JzQVBJLkpvYnModGhpcy5fY2xpZW50KTtcbiAgICAgICAgdGhpcy5jaGVja3BvaW50cyA9IG5ldyBDaGVja3BvaW50c0FQSS5DaGVja3BvaW50cyh0aGlzLl9jbGllbnQpO1xuICAgIH1cbn1cbkZpbmVUdW5pbmcuSm9icyA9IEpvYnM7XG5GaW5lVHVuaW5nLkZpbmVUdW5pbmdKb2JzUGFnZSA9IEZpbmVUdW5pbmdKb2JzUGFnZTtcbkZpbmVUdW5pbmcuRmluZVR1bmluZ0pvYkV2ZW50c1BhZ2UgPSBGaW5lVHVuaW5nSm9iRXZlbnRzUGFnZTtcbkZpbmVUdW5pbmcuQ2hlY2twb2ludHMgPSBDaGVja3BvaW50cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbmUtdHVuaW5nLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJDaGVja3BvaW50c0FQSSIsIkNoZWNrcG9pbnRzIiwiSm9ic0FQSSIsIkZpbmVUdW5pbmdKb2JFdmVudHNQYWdlIiwiRmluZVR1bmluZ0pvYnNQYWdlIiwiSm9icyIsIkZpbmVUdW5pbmciLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImpvYnMiLCJfY2xpZW50IiwiY2hlY2twb2ludHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/fine-tuning/fine-tuning.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/fine-tuning/jobs/checkpoints.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/openai/resources/fine-tuning/jobs/checkpoints.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Checkpoints: () => (/* binding */ Checkpoints),\n/* harmony export */   FineTuningJobCheckpointsPage: () => (/* binding */ FineTuningJobCheckpointsPage)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Checkpoints extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  list(fineTuningJobId, query = {}, options) {\n    if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n      return this.list(fineTuningJobId, {}, query);\n    }\n    return this._client.getAPIList(`/fine_tuning/jobs/${fineTuningJobId}/checkpoints`, FineTuningJobCheckpointsPage, {\n      query,\n      ...options\n    });\n  }\n}\nclass FineTuningJobCheckpointsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage {}\nCheckpoints.FineTuningJobCheckpointsPage = FineTuningJobCheckpointsPage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9qb2JzL2NoZWNrcG9pbnRzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ29EO0FBQ0M7QUFDQTtBQUM5QyxNQUFNRyxXQUFXLFNBQVNILHNEQUFXLENBQUM7RUFDekNJLElBQUlBLENBQUNDLGVBQWUsRUFBRUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFQyxPQUFPLEVBQUU7SUFDdkMsSUFBSU4sMkRBQWdCLENBQUNLLEtBQUssQ0FBQyxFQUFFO01BQ3pCLE9BQU8sSUFBSSxDQUFDRixJQUFJLENBQUNDLGVBQWUsRUFBRSxDQUFDLENBQUMsRUFBRUMsS0FBSyxDQUFDO0lBQ2hEO0lBQ0EsT0FBTyxJQUFJLENBQUNFLE9BQU8sQ0FBQ0MsVUFBVSxDQUFFLHFCQUFvQkosZUFBZ0IsY0FBYSxFQUFFSyw0QkFBNEIsRUFBRTtNQUFFSixLQUFLO01BQUUsR0FBR0M7SUFBUSxDQUFDLENBQUM7RUFDM0k7QUFDSjtBQUNPLE1BQU1HLDRCQUE0QixTQUFTUix1REFBVSxDQUFDO0FBRTdEQyxXQUFXLENBQUNPLDRCQUE0QixHQUFHQSw0QkFBNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvZmluZS10dW5pbmcvam9icy9jaGVja3BvaW50cy5tanM/NDY0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vLi4vcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUubWpzXCI7XG5pbXBvcnQgeyBDdXJzb3JQYWdlIH0gZnJvbSBcIi4uLy4uLy4uL3BhZ2luYXRpb24ubWpzXCI7XG5leHBvcnQgY2xhc3MgQ2hlY2twb2ludHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgbGlzdChmaW5lVHVuaW5nSm9iSWQsIHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0KGZpbmVUdW5pbmdKb2JJZCwge30sIHF1ZXJ5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoYC9maW5lX3R1bmluZy9qb2JzLyR7ZmluZVR1bmluZ0pvYklkfS9jaGVja3BvaW50c2AsIEZpbmVUdW5pbmdKb2JDaGVja3BvaW50c1BhZ2UsIHsgcXVlcnksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEZpbmVUdW5pbmdKb2JDaGVja3BvaW50c1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlIHtcbn1cbkNoZWNrcG9pbnRzLkZpbmVUdW5pbmdKb2JDaGVja3BvaW50c1BhZ2UgPSBGaW5lVHVuaW5nSm9iQ2hlY2twb2ludHNQYWdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hlY2twb2ludHMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsImlzUmVxdWVzdE9wdGlvbnMiLCJDdXJzb3JQYWdlIiwiQ2hlY2twb2ludHMiLCJsaXN0IiwiZmluZVR1bmluZ0pvYklkIiwicXVlcnkiLCJvcHRpb25zIiwiX2NsaWVudCIsImdldEFQSUxpc3QiLCJGaW5lVHVuaW5nSm9iQ2hlY2twb2ludHNQYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/fine-tuning/jobs/checkpoints.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/fine-tuning/jobs/jobs.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/openai/resources/fine-tuning/jobs/jobs.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FineTuningJobEventsPage: () => (/* binding */ FineTuningJobEventsPage),\n/* harmony export */   FineTuningJobsPage: () => (/* binding */ FineTuningJobsPage),\n/* harmony export */   Jobs: () => (/* binding */ Jobs)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _checkpoints_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./checkpoints.mjs */ \"(rsc)/./node_modules/openai/resources/fine-tuning/jobs/checkpoints.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\nclass Jobs extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  constructor() {\n    super(...arguments);\n    this.checkpoints = new _checkpoints_mjs__WEBPACK_IMPORTED_MODULE_1__.Checkpoints(this._client);\n  }\n  /**\n   * Creates a fine-tuning job which begins the process of creating a new model from\n   * a given dataset.\n   *\n   * Response includes details of the enqueued job including job status and the name\n   * of the fine-tuned models once complete.\n   *\n   * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\n   */\n  create(body, options) {\n    return this._client.post('/fine_tuning/jobs', {\n      body,\n      ...options\n    });\n  }\n  /**\n   * Get info about a fine-tuning job.\n   *\n   * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\n   */\n  retrieve(fineTuningJobId, options) {\n    return this._client.get(`/fine_tuning/jobs/${fineTuningJobId}`, options);\n  }\n  list(query = {}, options) {\n    if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_2__.isRequestOptions)(query)) {\n      return this.list({}, query);\n    }\n    return this._client.getAPIList('/fine_tuning/jobs', FineTuningJobsPage, {\n      query,\n      ...options\n    });\n  }\n  /**\n   * Immediately cancel a fine-tune job.\n   */\n  cancel(fineTuningJobId, options) {\n    return this._client.post(`/fine_tuning/jobs/${fineTuningJobId}/cancel`, options);\n  }\n  listEvents(fineTuningJobId, query = {}, options) {\n    if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_2__.isRequestOptions)(query)) {\n      return this.listEvents(fineTuningJobId, {}, query);\n    }\n    return this._client.getAPIList(`/fine_tuning/jobs/${fineTuningJobId}/events`, FineTuningJobEventsPage, {\n      query,\n      ...options\n    });\n  }\n}\nclass FineTuningJobsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_3__.CursorPage {}\nclass FineTuningJobEventsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_3__.CursorPage {}\nJobs.FineTuningJobsPage = FineTuningJobsPage;\nJobs.FineTuningJobEventsPage = FineTuningJobEventsPage;\nJobs.Checkpoints = _checkpoints_mjs__WEBPACK_IMPORTED_MODULE_1__.Checkpoints;\nJobs.FineTuningJobCheckpointsPage = _checkpoints_mjs__WEBPACK_IMPORTED_MODULE_1__.FineTuningJobCheckpointsPage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9qb2JzL2pvYnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNvRDtBQUNDO0FBQ0Q7QUFDMkI7QUFDMUI7QUFDOUMsTUFBTU0sSUFBSSxTQUFTTixzREFBVyxDQUFDO0VBQ2xDTyxXQUFXQSxDQUFBLEVBQUc7SUFDVixLQUFLLENBQUMsR0FBR0MsU0FBUyxDQUFDO0lBQ25CLElBQUksQ0FBQ0MsV0FBVyxHQUFHLElBQUlQLHlEQUEwQixDQUFDLElBQUksQ0FBQ1EsT0FBTyxDQUFDO0VBQ25FO0VBQ0E7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0lDLE1BQU1BLENBQUNDLElBQUksRUFBRUMsT0FBTyxFQUFFO0lBQ2xCLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNJLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtNQUFFRixJQUFJO01BQUUsR0FBR0M7SUFBUSxDQUFDLENBQUM7RUFDdkU7RUFDQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0VBQ0lFLFFBQVFBLENBQUNDLGVBQWUsRUFBRUgsT0FBTyxFQUFFO0lBQy9CLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNPLEdBQUcsQ0FBRSxxQkFBb0JELGVBQWdCLEVBQUMsRUFBRUgsT0FBTyxDQUFDO0VBQzVFO0VBQ0FLLElBQUlBLENBQUNDLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRU4sT0FBTyxFQUFFO0lBQ3RCLElBQUlaLDJEQUFnQixDQUFDa0IsS0FBSyxDQUFDLEVBQUU7TUFDekIsT0FBTyxJQUFJLENBQUNELElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRUMsS0FBSyxDQUFDO0lBQy9CO0lBQ0EsT0FBTyxJQUFJLENBQUNULE9BQU8sQ0FBQ1UsVUFBVSxDQUFDLG1CQUFtQixFQUFFQyxrQkFBa0IsRUFBRTtNQUFFRixLQUFLO01BQUUsR0FBR047SUFBUSxDQUFDLENBQUM7RUFDbEc7RUFDQTtBQUNKO0FBQ0E7RUFDSVMsTUFBTUEsQ0FBQ04sZUFBZSxFQUFFSCxPQUFPLEVBQUU7SUFDN0IsT0FBTyxJQUFJLENBQUNILE9BQU8sQ0FBQ0ksSUFBSSxDQUFFLHFCQUFvQkUsZUFBZ0IsU0FBUSxFQUFFSCxPQUFPLENBQUM7RUFDcEY7RUFDQVUsVUFBVUEsQ0FBQ1AsZUFBZSxFQUFFRyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUVOLE9BQU8sRUFBRTtJQUM3QyxJQUFJWiwyREFBZ0IsQ0FBQ2tCLEtBQUssQ0FBQyxFQUFFO01BQ3pCLE9BQU8sSUFBSSxDQUFDSSxVQUFVLENBQUNQLGVBQWUsRUFBRSxDQUFDLENBQUMsRUFBRUcsS0FBSyxDQUFDO0lBQ3REO0lBQ0EsT0FBTyxJQUFJLENBQUNULE9BQU8sQ0FBQ1UsVUFBVSxDQUFFLHFCQUFvQkosZUFBZ0IsU0FBUSxFQUFFUSx1QkFBdUIsRUFBRTtNQUNuR0wsS0FBSztNQUNMLEdBQUdOO0lBQ1AsQ0FBQyxDQUFDO0VBQ047QUFDSjtBQUNPLE1BQU1RLGtCQUFrQixTQUFTaEIsdURBQVUsQ0FBQztBQUU1QyxNQUFNbUIsdUJBQXVCLFNBQVNuQix1REFBVSxDQUFDO0FBRXhEQyxJQUFJLENBQUNlLGtCQUFrQixHQUFHQSxrQkFBa0I7QUFDNUNmLElBQUksQ0FBQ2tCLHVCQUF1QixHQUFHQSx1QkFBdUI7QUFDdERsQixJQUFJLENBQUNILFdBQVcsR0FBR0EseURBQVc7QUFDOUJHLElBQUksQ0FBQ0YsNEJBQTRCLEdBQUdBLDBFQUE0QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9qb2JzL2pvYnMubWpzPzk4MTciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uLy4uL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gXCIuLi8uLi8uLi9jb3JlLm1qc1wiO1xuaW1wb3J0ICogYXMgQ2hlY2twb2ludHNBUEkgZnJvbSBcIi4vY2hlY2twb2ludHMubWpzXCI7XG5pbXBvcnQgeyBDaGVja3BvaW50cywgRmluZVR1bmluZ0pvYkNoZWNrcG9pbnRzUGFnZSwgfSBmcm9tIFwiLi9jaGVja3BvaW50cy5tanNcIjtcbmltcG9ydCB7IEN1cnNvclBhZ2UgfSBmcm9tIFwiLi4vLi4vLi4vcGFnaW5hdGlvbi5tanNcIjtcbmV4cG9ydCBjbGFzcyBKb2JzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNoZWNrcG9pbnRzID0gbmV3IENoZWNrcG9pbnRzQVBJLkNoZWNrcG9pbnRzKHRoaXMuX2NsaWVudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmaW5lLXR1bmluZyBqb2Igd2hpY2ggYmVnaW5zIHRoZSBwcm9jZXNzIG9mIGNyZWF0aW5nIGEgbmV3IG1vZGVsIGZyb21cbiAgICAgKiBhIGdpdmVuIGRhdGFzZXQuXG4gICAgICpcbiAgICAgKiBSZXNwb25zZSBpbmNsdWRlcyBkZXRhaWxzIG9mIHRoZSBlbnF1ZXVlZCBqb2IgaW5jbHVkaW5nIGpvYiBzdGF0dXMgYW5kIHRoZSBuYW1lXG4gICAgICogb2YgdGhlIGZpbmUtdHVuZWQgbW9kZWxzIG9uY2UgY29tcGxldGUuXG4gICAgICpcbiAgICAgKiBbTGVhcm4gbW9yZSBhYm91dCBmaW5lLXR1bmluZ10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL2ZpbmUtdHVuaW5nKVxuICAgICAqL1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2ZpbmVfdHVuaW5nL2pvYnMnLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBpbmZvIGFib3V0IGEgZmluZS10dW5pbmcgam9iLlxuICAgICAqXG4gICAgICogW0xlYXJuIG1vcmUgYWJvdXQgZmluZS10dW5pbmddKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9maW5lLXR1bmluZylcbiAgICAgKi9cbiAgICByZXRyaWV2ZShmaW5lVHVuaW5nSm9iSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC9maW5lX3R1bmluZy9qb2JzLyR7ZmluZVR1bmluZ0pvYklkfWAsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBsaXN0KHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0KHt9LCBxdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KCcvZmluZV90dW5pbmcvam9icycsIEZpbmVUdW5pbmdKb2JzUGFnZSwgeyBxdWVyeSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW1tZWRpYXRlbHkgY2FuY2VsIGEgZmluZS10dW5lIGpvYi5cbiAgICAgKi9cbiAgICBjYW5jZWwoZmluZVR1bmluZ0pvYklkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL2ZpbmVfdHVuaW5nL2pvYnMvJHtmaW5lVHVuaW5nSm9iSWR9L2NhbmNlbGAsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBsaXN0RXZlbnRzKGZpbmVUdW5pbmdKb2JJZCwgcXVlcnkgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhxdWVyeSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3RFdmVudHMoZmluZVR1bmluZ0pvYklkLCB7fSwgcXVlcnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdChgL2ZpbmVfdHVuaW5nL2pvYnMvJHtmaW5lVHVuaW5nSm9iSWR9L2V2ZW50c2AsIEZpbmVUdW5pbmdKb2JFdmVudHNQYWdlLCB7XG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBGaW5lVHVuaW5nSm9ic1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlIHtcbn1cbmV4cG9ydCBjbGFzcyBGaW5lVHVuaW5nSm9iRXZlbnRzUGFnZSBleHRlbmRzIEN1cnNvclBhZ2Uge1xufVxuSm9icy5GaW5lVHVuaW5nSm9ic1BhZ2UgPSBGaW5lVHVuaW5nSm9ic1BhZ2U7XG5Kb2JzLkZpbmVUdW5pbmdKb2JFdmVudHNQYWdlID0gRmluZVR1bmluZ0pvYkV2ZW50c1BhZ2U7XG5Kb2JzLkNoZWNrcG9pbnRzID0gQ2hlY2twb2ludHM7XG5Kb2JzLkZpbmVUdW5pbmdKb2JDaGVja3BvaW50c1BhZ2UgPSBGaW5lVHVuaW5nSm9iQ2hlY2twb2ludHNQYWdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9am9icy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiaXNSZXF1ZXN0T3B0aW9ucyIsIkNoZWNrcG9pbnRzQVBJIiwiQ2hlY2twb2ludHMiLCJGaW5lVHVuaW5nSm9iQ2hlY2twb2ludHNQYWdlIiwiQ3Vyc29yUGFnZSIsIkpvYnMiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImNoZWNrcG9pbnRzIiwiX2NsaWVudCIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwicG9zdCIsInJldHJpZXZlIiwiZmluZVR1bmluZ0pvYklkIiwiZ2V0IiwibGlzdCIsInF1ZXJ5IiwiZ2V0QVBJTGlzdCIsIkZpbmVUdW5pbmdKb2JzUGFnZSIsImNhbmNlbCIsImxpc3RFdmVudHMiLCJGaW5lVHVuaW5nSm9iRXZlbnRzUGFnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/fine-tuning/jobs/jobs.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/images.mjs":
/*!**************************************************!*\
  !*** ./node_modules/openai/resources/images.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Images: () => (/* binding */ Images)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core.mjs */ \"(rsc)/./node_modules/openai/uploads.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Images extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  /**\n   * Creates a variation of a given image.\n   */\n  createVariation(body, options) {\n    return this._client.post('/images/variations', _core_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions({\n      body,\n      ...options\n    }));\n  }\n  /**\n   * Creates an edited or extended image given an original image and a prompt.\n   */\n  edit(body, options) {\n    return this._client.post('/images/edits', _core_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions({\n      body,\n      ...options\n    }));\n  }\n  /**\n   * Creates an image given a prompt.\n   */\n  generate(body, options) {\n    return this._client.post('/images/generations', {\n      body,\n      ...options\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9pbWFnZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQzhDO0FBQ1Y7QUFDN0IsTUFBTUUsTUFBTSxTQUFTRixzREFBVyxDQUFDO0VBQ3BDO0FBQ0o7QUFDQTtFQUNJRyxlQUFlQSxDQUFDQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtJQUMzQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsb0JBQW9CLEVBQUVOLGtFQUFnQyxDQUFDO01BQUVHLElBQUk7TUFBRSxHQUFHQztJQUFRLENBQUMsQ0FBQyxDQUFDO0VBQzFHO0VBQ0E7QUFDSjtBQUNBO0VBQ0lJLElBQUlBLENBQUNMLElBQUksRUFBRUMsT0FBTyxFQUFFO0lBQ2hCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxlQUFlLEVBQUVOLGtFQUFnQyxDQUFDO01BQUVHLElBQUk7TUFBRSxHQUFHQztJQUFRLENBQUMsQ0FBQyxDQUFDO0VBQ3JHO0VBQ0E7QUFDSjtBQUNBO0VBQ0lLLFFBQVFBLENBQUNOLElBQUksRUFBRUMsT0FBTyxFQUFFO0lBQ3BCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtNQUFFSCxJQUFJO01BQUUsR0FBR0M7SUFBUSxDQUFDLENBQUM7RUFDekU7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9pbWFnZXMubWpzPzZmN2UiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tIFwiLi4vY29yZS5tanNcIjtcbmV4cG9ydCBjbGFzcyBJbWFnZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHZhcmlhdGlvbiBvZiBhIGdpdmVuIGltYWdlLlxuICAgICAqL1xuICAgIGNyZWF0ZVZhcmlhdGlvbihib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2ltYWdlcy92YXJpYXRpb25zJywgQ29yZS5tdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMoeyBib2R5LCAuLi5vcHRpb25zIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBlZGl0ZWQgb3IgZXh0ZW5kZWQgaW1hZ2UgZ2l2ZW4gYW4gb3JpZ2luYWwgaW1hZ2UgYW5kIGEgcHJvbXB0LlxuICAgICAqL1xuICAgIGVkaXQoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9pbWFnZXMvZWRpdHMnLCBDb3JlLm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyh7IGJvZHksIC4uLm9wdGlvbnMgfSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGltYWdlIGdpdmVuIGEgcHJvbXB0LlxuICAgICAqL1xuICAgIGdlbmVyYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvaW1hZ2VzL2dlbmVyYXRpb25zJywgeyBib2R5LCAuLi5vcHRpb25zIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWltYWdlcy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiQ29yZSIsIkltYWdlcyIsImNyZWF0ZVZhcmlhdGlvbiIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiLCJtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMiLCJlZGl0IiwiZ2VuZXJhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/images.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/models.mjs":
/*!**************************************************!*\
  !*** ./node_modules/openai/resources/models.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Models: () => (/* binding */ Models),\n/* harmony export */   ModelsPage: () => (/* binding */ ModelsPage)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Models extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  /**\n   * Retrieves a model instance, providing basic information about the model such as\n   * the owner and permissioning.\n   */\n  retrieve(model, options) {\n    return this._client.get(`/models/${model}`, options);\n  }\n  /**\n   * Lists the currently available models, and provides basic information about each\n   * one such as the owner and availability.\n   */\n  list(options) {\n    return this._client.getAPIList('/models', ModelsPage, options);\n  }\n  /**\n   * Delete a fine-tuned model. You must have the Owner role in your organization to\n   * delete a model.\n   */\n  del(model, options) {\n    return this._client.delete(`/models/${model}`, options);\n  }\n}\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nclass ModelsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.Page {}\nModels.ModelsPage = ModelsPage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9tb2RlbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUM4QztBQUNMO0FBQ2xDLE1BQU1FLE1BQU0sU0FBU0Ysc0RBQVcsQ0FBQztFQUNwQztBQUNKO0FBQ0E7QUFDQTtFQUNJRyxRQUFRQSxDQUFDQyxLQUFLLEVBQUVDLE9BQU8sRUFBRTtJQUNyQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxHQUFHLENBQUUsV0FBVUgsS0FBTSxFQUFDLEVBQUVDLE9BQU8sQ0FBQztFQUN4RDtFQUNBO0FBQ0o7QUFDQTtBQUNBO0VBQ0lHLElBQUlBLENBQUNILE9BQU8sRUFBRTtJQUNWLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNHLFVBQVUsQ0FBQyxTQUFTLEVBQUVDLFVBQVUsRUFBRUwsT0FBTyxDQUFDO0VBQ2xFO0VBQ0E7QUFDSjtBQUNBO0FBQ0E7RUFDSU0sR0FBR0EsQ0FBQ1AsS0FBSyxFQUFFQyxPQUFPLEVBQUU7SUFDaEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ00sTUFBTSxDQUFFLFdBQVVSLEtBQU0sRUFBQyxFQUFFQyxPQUFPLENBQUM7RUFDM0Q7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1LLFVBQVUsU0FBU1QsaURBQUksQ0FBQztBQUVyQ0MsTUFBTSxDQUFDUSxVQUFVLEdBQUdBLFVBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvbW9kZWxzLm1qcz9mN2EyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IFBhZ2UgfSBmcm9tIFwiLi4vcGFnaW5hdGlvbi5tanNcIjtcbmV4cG9ydCBjbGFzcyBNb2RlbHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgbW9kZWwgaW5zdGFuY2UsIHByb3ZpZGluZyBiYXNpYyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbW9kZWwgc3VjaCBhc1xuICAgICAqIHRoZSBvd25lciBhbmQgcGVybWlzc2lvbmluZy5cbiAgICAgKi9cbiAgICByZXRyaWV2ZShtb2RlbCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL21vZGVscy8ke21vZGVsfWAsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaXN0cyB0aGUgY3VycmVudGx5IGF2YWlsYWJsZSBtb2RlbHMsIGFuZCBwcm92aWRlcyBiYXNpYyBpbmZvcm1hdGlvbiBhYm91dCBlYWNoXG4gICAgICogb25lIHN1Y2ggYXMgdGhlIG93bmVyIGFuZCBhdmFpbGFiaWxpdHkuXG4gICAgICovXG4gICAgbGlzdChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdCgnL21vZGVscycsIE1vZGVsc1BhZ2UsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBmaW5lLXR1bmVkIG1vZGVsLiBZb3UgbXVzdCBoYXZlIHRoZSBPd25lciByb2xlIGluIHlvdXIgb3JnYW5pemF0aW9uIHRvXG4gICAgICogZGVsZXRlIGEgbW9kZWwuXG4gICAgICovXG4gICAgZGVsKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZGVsZXRlKGAvbW9kZWxzLyR7bW9kZWx9YCwgb3B0aW9ucyk7XG4gICAgfVxufVxuLyoqXG4gKiBOb3RlOiBubyBwYWdpbmF0aW9uIGFjdHVhbGx5IG9jY3VycyB5ZXQsIHRoaXMgaXMgZm9yIGZvcndhcmRzLWNvbXBhdGliaWxpdHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBNb2RlbHNQYWdlIGV4dGVuZHMgUGFnZSB7XG59XG5Nb2RlbHMuTW9kZWxzUGFnZSA9IE1vZGVsc1BhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2RlbHMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIlBhZ2UiLCJNb2RlbHMiLCJyZXRyaWV2ZSIsIm1vZGVsIiwib3B0aW9ucyIsIl9jbGllbnQiLCJnZXQiLCJsaXN0IiwiZ2V0QVBJTGlzdCIsIk1vZGVsc1BhZ2UiLCJkZWwiLCJkZWxldGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/models.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/moderations.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/resources/moderations.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Moderations: () => (/* binding */ Moderations)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass Moderations extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  /**\n   * Classifies if text and/or image inputs are potentially harmful. Learn more in\n   * the [moderation guide](https://platform.openai.com/docs/guides/moderation).\n   */\n  create(body, options) {\n    return this._client.post('/moderations', {\n      body,\n      ...options\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9tb2RlcmF0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUM4QztBQUN2QyxNQUFNQyxXQUFXLFNBQVNELHNEQUFXLENBQUM7RUFDekM7QUFDSjtBQUNBO0FBQ0E7RUFDSUUsTUFBTUEsQ0FBQ0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7SUFDbEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLGNBQWMsRUFBRTtNQUFFSCxJQUFJO01BQUUsR0FBR0M7SUFBUSxDQUFDLENBQUM7RUFDbEU7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9tb2RlcmF0aW9ucy5tanM/YWZlNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vcmVzb3VyY2UubWpzXCI7XG5leHBvcnQgY2xhc3MgTW9kZXJhdGlvbnMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogQ2xhc3NpZmllcyBpZiB0ZXh0IGFuZC9vciBpbWFnZSBpbnB1dHMgYXJlIHBvdGVudGlhbGx5IGhhcm1mdWwuIExlYXJuIG1vcmUgaW5cbiAgICAgKiB0aGUgW21vZGVyYXRpb24gZ3VpZGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9tb2RlcmF0aW9uKS5cbiAgICAgKi9cbiAgICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9tb2RlcmF0aW9ucycsIHsgYm9keSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2RlcmF0aW9ucy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiTW9kZXJhdGlvbnMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/moderations.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/responses/input-items.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/openai/resources/responses/input-items.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InputItems: () => (/* binding */ InputItems),\n/* harmony export */   ResponseItemsPage: () => (/* reexport safe */ _responses_mjs__WEBPACK_IMPORTED_MODULE_2__.ResponseItemsPage)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _responses_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./responses.mjs */ \"(rsc)/./node_modules/openai/resources/responses/responses.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass InputItems extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  list(responseId, query = {}, options) {\n    if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n      return this.list(responseId, {}, query);\n    }\n    return this._client.getAPIList(`/responses/${responseId}/input_items`, _responses_mjs__WEBPACK_IMPORTED_MODULE_2__.ResponseItemsPage, {\n      query,\n      ...options\n    });\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9yZXNwb25zZXMvaW5wdXQtaXRlbXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDaUQ7QUFDQztBQUNFO0FBQzdDLE1BQU1HLFVBQVUsU0FBU0gsc0RBQVcsQ0FBQztFQUN4Q0ksSUFBSUEsQ0FBQ0MsVUFBVSxFQUFFQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUVDLE9BQU8sRUFBRTtJQUNsQyxJQUFJTiwyREFBZ0IsQ0FBQ0ssS0FBSyxDQUFDLEVBQUU7TUFDekIsT0FBTyxJQUFJLENBQUNGLElBQUksQ0FBQ0MsVUFBVSxFQUFFLENBQUMsQ0FBQyxFQUFFQyxLQUFLLENBQUM7SUFDM0M7SUFDQSxPQUFPLElBQUksQ0FBQ0UsT0FBTyxDQUFDQyxVQUFVLENBQUUsY0FBYUosVUFBVyxjQUFhLEVBQUVILDZEQUFpQixFQUFFO01BQ3RGSSxLQUFLO01BQ0wsR0FBR0M7SUFDUCxDQUFDLENBQUM7RUFDTjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL3Jlc3BvbnNlcy9pbnB1dC1pdGVtcy5tanM/Yzc3YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSBcIi4uLy4uL2NvcmUubWpzXCI7XG5pbXBvcnQgeyBSZXNwb25zZUl0ZW1zUGFnZSB9IGZyb20gXCIuL3Jlc3BvbnNlcy5tanNcIjtcbmV4cG9ydCBjbGFzcyBJbnB1dEl0ZW1zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGxpc3QocmVzcG9uc2VJZCwgcXVlcnkgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhxdWVyeSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3QocmVzcG9uc2VJZCwge30sIHF1ZXJ5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoYC9yZXNwb25zZXMvJHtyZXNwb25zZUlkfS9pbnB1dF9pdGVtc2AsIFJlc3BvbnNlSXRlbXNQYWdlLCB7XG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCB7IFJlc3BvbnNlSXRlbXNQYWdlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnB1dC1pdGVtcy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiaXNSZXF1ZXN0T3B0aW9ucyIsIlJlc3BvbnNlSXRlbXNQYWdlIiwiSW5wdXRJdGVtcyIsImxpc3QiLCJyZXNwb25zZUlkIiwicXVlcnkiLCJvcHRpb25zIiwiX2NsaWVudCIsImdldEFQSUxpc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/responses/input-items.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/responses/responses.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/openai/resources/responses/responses.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResponseItemsPage: () => (/* binding */ ResponseItemsPage),\n/* harmony export */   Responses: () => (/* binding */ Responses)\n/* harmony export */ });\n/* harmony import */ var _lib_ResponsesParser_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/ResponsesParser.mjs */ \"(rsc)/./node_modules/openai/lib/ResponsesParser.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _input_items_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./input-items.mjs */ \"(rsc)/./node_modules/openai/resources/responses/input-items.mjs\");\n/* harmony import */ var _lib_responses_ResponseStream_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/responses/ResponseStream.mjs */ \"(rsc)/./node_modules/openai/lib/responses/ResponseStream.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\nclass Responses extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  constructor() {\n    super(...arguments);\n    this.inputItems = new _input_items_mjs__WEBPACK_IMPORTED_MODULE_1__.InputItems(this._client);\n  }\n  create(body, options) {\n    return this._client.post('/responses', {\n      body,\n      ...options,\n      stream: body.stream ?? false\n    })._thenUnwrap(rsp => {\n      if ('object' in rsp && rsp.object === 'response') {\n        (0,_lib_ResponsesParser_mjs__WEBPACK_IMPORTED_MODULE_2__.addOutputText)(rsp);\n      }\n      return rsp;\n    });\n  }\n  retrieve(responseId, query = {}, options) {\n    if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_3__.isRequestOptions)(query)) {\n      return this.retrieve(responseId, {}, query);\n    }\n    return this._client.get(`/responses/${responseId}`, {\n      query,\n      ...options\n    });\n  }\n  /**\n   * Deletes a model response with the given ID.\n   */\n  del(responseId, options) {\n    return this._client.delete(`/responses/${responseId}`, {\n      ...options,\n      headers: {\n        Accept: '*/*',\n        ...options?.headers\n      }\n    });\n  }\n  parse(body, options) {\n    return this._client.responses.create(body, options)._thenUnwrap(response => (0,_lib_ResponsesParser_mjs__WEBPACK_IMPORTED_MODULE_2__.parseResponse)(response, body));\n  }\n  /**\n   * Creates a model response stream\n   */\n  stream(body, options) {\n    return _lib_responses_ResponseStream_mjs__WEBPACK_IMPORTED_MODULE_4__.ResponseStream.createResponse(this._client, body, options);\n  }\n}\nclass ResponseItemsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_5__.CursorPage {}\nResponses.InputItems = _input_items_mjs__WEBPACK_IMPORTED_MODULE_1__.InputItems;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9yZXNwb25zZXMvcmVzcG9uc2VzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQzhFO0FBQzVCO0FBQ0Q7QUFDRTtBQUNKO0FBQ3lCO0FBQ3RCO0FBQzNDLE1BQU1RLFNBQVMsU0FBU0wsc0RBQVcsQ0FBQztFQUN2Q00sV0FBV0EsQ0FBQSxFQUFHO0lBQ1YsS0FBSyxDQUFDLEdBQUdDLFNBQVMsQ0FBQztJQUNuQixJQUFJLENBQUNDLFVBQVUsR0FBRyxJQUFJUCx3REFBd0IsQ0FBQyxJQUFJLENBQUNRLE9BQU8sQ0FBQztFQUNoRTtFQUNBQyxNQUFNQSxDQUFDQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtJQUNsQixPQUFPLElBQUksQ0FBQ0gsT0FBTyxDQUFDSSxJQUFJLENBQUMsWUFBWSxFQUFFO01BQUVGLElBQUk7TUFBRSxHQUFHQyxPQUFPO01BQUVFLE1BQU0sRUFBRUgsSUFBSSxDQUFDRyxNQUFNLElBQUk7SUFBTSxDQUFDLENBQUMsQ0FBQ0MsV0FBVyxDQUFFQyxHQUFHLElBQUs7TUFDNUcsSUFBSSxRQUFRLElBQUlBLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxNQUFNLEtBQUssVUFBVSxFQUFFO1FBQzlDbkIsdUVBQWEsQ0FBQ2tCLEdBQUcsQ0FBQztNQUN0QjtNQUNBLE9BQU9BLEdBQUc7SUFDZCxDQUFDLENBQUM7RUFDTjtFQUNBRSxRQUFRQSxDQUFDQyxVQUFVLEVBQUVDLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRVIsT0FBTyxFQUFFO0lBQ3RDLElBQUliLDJEQUFnQixDQUFDcUIsS0FBSyxDQUFDLEVBQUU7TUFDekIsT0FBTyxJQUFJLENBQUNGLFFBQVEsQ0FBQ0MsVUFBVSxFQUFFLENBQUMsQ0FBQyxFQUFFQyxLQUFLLENBQUM7SUFDL0M7SUFDQSxPQUFPLElBQUksQ0FBQ1gsT0FBTyxDQUFDWSxHQUFHLENBQUUsY0FBYUYsVUFBVyxFQUFDLEVBQUU7TUFBRUMsS0FBSztNQUFFLEdBQUdSO0lBQVEsQ0FBQyxDQUFDO0VBQzlFO0VBQ0E7QUFDSjtBQUNBO0VBQ0lVLEdBQUdBLENBQUNILFVBQVUsRUFBRVAsT0FBTyxFQUFFO0lBQ3JCLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNjLE1BQU0sQ0FBRSxjQUFhSixVQUFXLEVBQUMsRUFBRTtNQUNuRCxHQUFHUCxPQUFPO01BQ1ZZLE9BQU8sRUFBRTtRQUFFQyxNQUFNLEVBQUUsS0FBSztRQUFFLEdBQUdiLE9BQU8sRUFBRVk7TUFBUTtJQUNsRCxDQUFDLENBQUM7RUFDTjtFQUNBRSxLQUFLQSxDQUFDZixJQUFJLEVBQUVDLE9BQU8sRUFBRTtJQUNqQixPQUFPLElBQUksQ0FBQ0gsT0FBTyxDQUFDa0IsU0FBUyxDQUN4QmpCLE1BQU0sQ0FBQ0MsSUFBSSxFQUFFQyxPQUFPLENBQUMsQ0FDckJHLFdBQVcsQ0FBRWEsUUFBUSxJQUFLL0IsdUVBQWEsQ0FBQytCLFFBQVEsRUFBRWpCLElBQUksQ0FBQyxDQUFDO0VBQ2pFO0VBQ0E7QUFDSjtBQUNBO0VBQ0lHLE1BQU1BLENBQUNILElBQUksRUFBRUMsT0FBTyxFQUFFO0lBQ2xCLE9BQU9ULDZFQUFjLENBQUMwQixjQUFjLENBQUMsSUFBSSxDQUFDcEIsT0FBTyxFQUFFRSxJQUFJLEVBQUVDLE9BQU8sQ0FBQztFQUNyRTtBQUNKO0FBQ08sTUFBTWtCLGlCQUFpQixTQUFTMUIsdURBQVUsQ0FBQztBQUVsREMsU0FBUyxDQUFDSCxVQUFVLEdBQUdBLHdEQUFVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL3Jlc3BvbnNlcy9yZXNwb25zZXMubWpzPzMxODUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IHBhcnNlUmVzcG9uc2UsIGFkZE91dHB1dFRleHQsIH0gZnJvbSBcIi4uLy4uL2xpYi9SZXNwb25zZXNQYXJzZXIubWpzXCI7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSBcIi4uLy4uL2NvcmUubWpzXCI7XG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCAqIGFzIElucHV0SXRlbXNBUEkgZnJvbSBcIi4vaW5wdXQtaXRlbXMubWpzXCI7XG5pbXBvcnQgeyBJbnB1dEl0ZW1zIH0gZnJvbSBcIi4vaW5wdXQtaXRlbXMubWpzXCI7XG5pbXBvcnQgeyBSZXNwb25zZVN0cmVhbSB9IGZyb20gXCIuLi8uLi9saWIvcmVzcG9uc2VzL1Jlc3BvbnNlU3RyZWFtLm1qc1wiO1xuaW1wb3J0IHsgQ3Vyc29yUGFnZSB9IGZyb20gXCIuLi8uLi9wYWdpbmF0aW9uLm1qc1wiO1xuZXhwb3J0IGNsYXNzIFJlc3BvbnNlcyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5pbnB1dEl0ZW1zID0gbmV3IElucHV0SXRlbXNBUEkuSW5wdXRJdGVtcyh0aGlzLl9jbGllbnQpO1xuICAgIH1cbiAgICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9yZXNwb25zZXMnLCB7IGJvZHksIC4uLm9wdGlvbnMsIHN0cmVhbTogYm9keS5zdHJlYW0gPz8gZmFsc2UgfSkuX3RoZW5VbndyYXAoKHJzcCkgPT4ge1xuICAgICAgICAgICAgaWYgKCdvYmplY3QnIGluIHJzcCAmJiByc3Aub2JqZWN0ID09PSAncmVzcG9uc2UnKSB7XG4gICAgICAgICAgICAgICAgYWRkT3V0cHV0VGV4dChyc3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJzcDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHJpZXZlKHJlc3BvbnNlSWQsIHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXRyaWV2ZShyZXNwb25zZUlkLCB7fSwgcXVlcnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvcmVzcG9uc2VzLyR7cmVzcG9uc2VJZH1gLCB7IHF1ZXJ5LCAuLi5vcHRpb25zIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGVzIGEgbW9kZWwgcmVzcG9uc2Ugd2l0aCB0aGUgZ2l2ZW4gSUQuXG4gICAgICovXG4gICAgZGVsKHJlc3BvbnNlSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5kZWxldGUoYC9yZXNwb25zZXMvJHtyZXNwb25zZUlkfWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7IEFjY2VwdDogJyovKicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHBhcnNlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5yZXNwb25zZXNcbiAgICAgICAgICAgIC5jcmVhdGUoYm9keSwgb3B0aW9ucylcbiAgICAgICAgICAgIC5fdGhlblVud3JhcCgocmVzcG9uc2UpID0+IHBhcnNlUmVzcG9uc2UocmVzcG9uc2UsIGJvZHkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG1vZGVsIHJlc3BvbnNlIHN0cmVhbVxuICAgICAqL1xuICAgIHN0cmVhbShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBSZXNwb25zZVN0cmVhbS5jcmVhdGVSZXNwb25zZSh0aGlzLl9jbGllbnQsIGJvZHksIG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBSZXNwb25zZUl0ZW1zUGFnZSBleHRlbmRzIEN1cnNvclBhZ2Uge1xufVxuUmVzcG9uc2VzLklucHV0SXRlbXMgPSBJbnB1dEl0ZW1zO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzcG9uc2VzLm1qcy5tYXAiXSwibmFtZXMiOlsicGFyc2VSZXNwb25zZSIsImFkZE91dHB1dFRleHQiLCJpc1JlcXVlc3RPcHRpb25zIiwiQVBJUmVzb3VyY2UiLCJJbnB1dEl0ZW1zQVBJIiwiSW5wdXRJdGVtcyIsIlJlc3BvbnNlU3RyZWFtIiwiQ3Vyc29yUGFnZSIsIlJlc3BvbnNlcyIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiaW5wdXRJdGVtcyIsIl9jbGllbnQiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsInBvc3QiLCJzdHJlYW0iLCJfdGhlblVud3JhcCIsInJzcCIsIm9iamVjdCIsInJldHJpZXZlIiwicmVzcG9uc2VJZCIsInF1ZXJ5IiwiZ2V0IiwiZGVsIiwiZGVsZXRlIiwiaGVhZGVycyIsIkFjY2VwdCIsInBhcnNlIiwicmVzcG9uc2VzIiwicmVzcG9uc2UiLCJjcmVhdGVSZXNwb25zZSIsIlJlc3BvbnNlSXRlbXNQYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/responses/responses.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/uploads/parts.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/openai/resources/uploads/parts.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Parts: () => (/* binding */ Parts)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.mjs */ \"(rsc)/./node_modules/openai/uploads.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Parts extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  /**\n   * Adds a\n   * [Part](https://platform.openai.com/docs/api-reference/uploads/part-object) to an\n   * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object.\n   * A Part represents a chunk of bytes from the file you are trying to upload.\n   *\n   * Each Part can be at most 64 MB, and you can add Parts until you hit the Upload\n   * maximum of 8 GB.\n   *\n   * It is possible to add multiple Parts in parallel. You can decide the intended\n   * order of the Parts when you\n   * [complete the Upload](https://platform.openai.com/docs/api-reference/uploads/complete).\n   */\n  create(uploadId, body, options) {\n    return this._client.post(`/uploads/${uploadId}/parts`, _core_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions({\n      body,\n      ...options\n    }));\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy91cGxvYWRzL3BhcnRzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNpRDtBQUNWO0FBQ2hDLE1BQU1FLEtBQUssU0FBU0Ysc0RBQVcsQ0FBQztFQUNuQztBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNJRyxNQUFNQSxDQUFDQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsT0FBTyxFQUFFO0lBQzVCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBRSxZQUFXSixRQUFTLFFBQU8sRUFBRUgsa0VBQWdDLENBQUM7TUFBRUksSUFBSTtNQUFFLEdBQUdDO0lBQVEsQ0FBQyxDQUFDLENBQUM7RUFDbEg7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy91cGxvYWRzL3BhcnRzLm1qcz9iZDc4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCAqIGFzIENvcmUgZnJvbSBcIi4uLy4uL2NvcmUubWpzXCI7XG5leHBvcnQgY2xhc3MgUGFydHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogQWRkcyBhXG4gICAgICogW1BhcnRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdXBsb2Fkcy9wYXJ0LW9iamVjdCkgdG8gYW5cbiAgICAgKiBbVXBsb2FkXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3VwbG9hZHMvb2JqZWN0KSBvYmplY3QuXG4gICAgICogQSBQYXJ0IHJlcHJlc2VudHMgYSBjaHVuayBvZiBieXRlcyBmcm9tIHRoZSBmaWxlIHlvdSBhcmUgdHJ5aW5nIHRvIHVwbG9hZC5cbiAgICAgKlxuICAgICAqIEVhY2ggUGFydCBjYW4gYmUgYXQgbW9zdCA2NCBNQiwgYW5kIHlvdSBjYW4gYWRkIFBhcnRzIHVudGlsIHlvdSBoaXQgdGhlIFVwbG9hZFxuICAgICAqIG1heGltdW0gb2YgOCBHQi5cbiAgICAgKlxuICAgICAqIEl0IGlzIHBvc3NpYmxlIHRvIGFkZCBtdWx0aXBsZSBQYXJ0cyBpbiBwYXJhbGxlbC4gWW91IGNhbiBkZWNpZGUgdGhlIGludGVuZGVkXG4gICAgICogb3JkZXIgb2YgdGhlIFBhcnRzIHdoZW4geW91XG4gICAgICogW2NvbXBsZXRlIHRoZSBVcGxvYWRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdXBsb2Fkcy9jb21wbGV0ZSkuXG4gICAgICovXG4gICAgY3JlYXRlKHVwbG9hZElkLCBib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL3VwbG9hZHMvJHt1cGxvYWRJZH0vcGFydHNgLCBDb3JlLm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyh7IGJvZHksIC4uLm9wdGlvbnMgfSkpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnRzLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJDb3JlIiwiUGFydHMiLCJjcmVhdGUiLCJ1cGxvYWRJZCIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiLCJtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/uploads/parts.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/uploads/uploads.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/openai/resources/uploads/uploads.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Uploads: () => (/* binding */ Uploads)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _parts_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parts.mjs */ \"(rsc)/./node_modules/openai/resources/uploads/parts.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Uploads extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  constructor() {\n    super(...arguments);\n    this.parts = new _parts_mjs__WEBPACK_IMPORTED_MODULE_1__.Parts(this._client);\n  }\n  /**\n   * Creates an intermediate\n   * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object\n   * that you can add\n   * [Parts](https://platform.openai.com/docs/api-reference/uploads/part-object) to.\n   * Currently, an Upload can accept at most 8 GB in total and expires after an hour\n   * after you create it.\n   *\n   * Once you complete the Upload, we will create a\n   * [File](https://platform.openai.com/docs/api-reference/files/object) object that\n   * contains all the parts you uploaded. This File is usable in the rest of our\n   * platform as a regular File object.\n   *\n   * For certain `purpose` values, the correct `mime_type` must be specified. Please\n   * refer to documentation for the\n   * [supported MIME types for your use case](https://platform.openai.com/docs/assistants/tools/file-search#supported-files).\n   *\n   * For guidance on the proper filename extensions for each purpose, please follow\n   * the documentation on\n   * [creating a File](https://platform.openai.com/docs/api-reference/files/create).\n   */\n  create(body, options) {\n    return this._client.post('/uploads', {\n      body,\n      ...options\n    });\n  }\n  /**\n   * Cancels the Upload. No Parts may be added after an Upload is cancelled.\n   */\n  cancel(uploadId, options) {\n    return this._client.post(`/uploads/${uploadId}/cancel`, options);\n  }\n  /**\n   * Completes the\n   * [Upload](https://platform.openai.com/docs/api-reference/uploads/object).\n   *\n   * Within the returned Upload object, there is a nested\n   * [File](https://platform.openai.com/docs/api-reference/files/object) object that\n   * is ready to use in the rest of the platform.\n   *\n   * You can specify the order of the Parts by passing in an ordered list of the Part\n   * IDs.\n   *\n   * The number of bytes uploaded upon completion must match the number of bytes\n   * initially specified when creating the Upload object. No Parts may be added after\n   * an Upload is completed.\n   */\n  complete(uploadId, body, options) {\n    return this._client.post(`/uploads/${uploadId}/complete`, {\n      body,\n      ...options\n    });\n  }\n}\nUploads.Parts = _parts_mjs__WEBPACK_IMPORTED_MODULE_1__.Parts;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy91cGxvYWRzL3VwbG9hZHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ2lEO0FBQ1Q7QUFDSjtBQUM3QixNQUFNRyxPQUFPLFNBQVNILHNEQUFXLENBQUM7RUFDckNJLFdBQVdBLENBQUEsRUFBRztJQUNWLEtBQUssQ0FBQyxHQUFHQyxTQUFTLENBQUM7SUFDbkIsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSUwsNkNBQWMsQ0FBQyxJQUFJLENBQUNNLE9BQU8sQ0FBQztFQUNqRDtFQUNBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNJQyxNQUFNQSxDQUFDQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtJQUNsQixPQUFPLElBQUksQ0FBQ0gsT0FBTyxDQUFDSSxJQUFJLENBQUMsVUFBVSxFQUFFO01BQUVGLElBQUk7TUFBRSxHQUFHQztJQUFRLENBQUMsQ0FBQztFQUM5RDtFQUNBO0FBQ0o7QUFDQTtFQUNJRSxNQUFNQSxDQUFDQyxRQUFRLEVBQUVILE9BQU8sRUFBRTtJQUN0QixPQUFPLElBQUksQ0FBQ0gsT0FBTyxDQUFDSSxJQUFJLENBQUUsWUFBV0UsUUFBUyxTQUFRLEVBQUVILE9BQU8sQ0FBQztFQUNwRTtFQUNBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNJSSxRQUFRQSxDQUFDRCxRQUFRLEVBQUVKLElBQUksRUFBRUMsT0FBTyxFQUFFO0lBQzlCLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNJLElBQUksQ0FBRSxZQUFXRSxRQUFTLFdBQVUsRUFBRTtNQUFFSixJQUFJO01BQUUsR0FBR0M7SUFBUSxDQUFDLENBQUM7RUFDbkY7QUFDSjtBQUNBUCxPQUFPLENBQUNELEtBQUssR0FBR0EsNkNBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvdXBsb2Fkcy91cGxvYWRzLm1qcz9jMjFkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCAqIGFzIFBhcnRzQVBJIGZyb20gXCIuL3BhcnRzLm1qc1wiO1xuaW1wb3J0IHsgUGFydHMgfSBmcm9tIFwiLi9wYXJ0cy5tanNcIjtcbmV4cG9ydCBjbGFzcyBVcGxvYWRzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnBhcnRzID0gbmV3IFBhcnRzQVBJLlBhcnRzKHRoaXMuX2NsaWVudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW50ZXJtZWRpYXRlXG4gICAgICogW1VwbG9hZF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS91cGxvYWRzL29iamVjdCkgb2JqZWN0XG4gICAgICogdGhhdCB5b3UgY2FuIGFkZFxuICAgICAqIFtQYXJ0c10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS91cGxvYWRzL3BhcnQtb2JqZWN0KSB0by5cbiAgICAgKiBDdXJyZW50bHksIGFuIFVwbG9hZCBjYW4gYWNjZXB0IGF0IG1vc3QgOCBHQiBpbiB0b3RhbCBhbmQgZXhwaXJlcyBhZnRlciBhbiBob3VyXG4gICAgICogYWZ0ZXIgeW91IGNyZWF0ZSBpdC5cbiAgICAgKlxuICAgICAqIE9uY2UgeW91IGNvbXBsZXRlIHRoZSBVcGxvYWQsIHdlIHdpbGwgY3JlYXRlIGFcbiAgICAgKiBbRmlsZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maWxlcy9vYmplY3QpIG9iamVjdCB0aGF0XG4gICAgICogY29udGFpbnMgYWxsIHRoZSBwYXJ0cyB5b3UgdXBsb2FkZWQuIFRoaXMgRmlsZSBpcyB1c2FibGUgaW4gdGhlIHJlc3Qgb2Ygb3VyXG4gICAgICogcGxhdGZvcm0gYXMgYSByZWd1bGFyIEZpbGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogRm9yIGNlcnRhaW4gYHB1cnBvc2VgIHZhbHVlcywgdGhlIGNvcnJlY3QgYG1pbWVfdHlwZWAgbXVzdCBiZSBzcGVjaWZpZWQuIFBsZWFzZVxuICAgICAqIHJlZmVyIHRvIGRvY3VtZW50YXRpb24gZm9yIHRoZVxuICAgICAqIFtzdXBwb3J0ZWQgTUlNRSB0eXBlcyBmb3IgeW91ciB1c2UgY2FzZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXNzaXN0YW50cy90b29scy9maWxlLXNlYXJjaCNzdXBwb3J0ZWQtZmlsZXMpLlxuICAgICAqXG4gICAgICogRm9yIGd1aWRhbmNlIG9uIHRoZSBwcm9wZXIgZmlsZW5hbWUgZXh0ZW5zaW9ucyBmb3IgZWFjaCBwdXJwb3NlLCBwbGVhc2UgZm9sbG93XG4gICAgICogdGhlIGRvY3VtZW50YXRpb24gb25cbiAgICAgKiBbY3JlYXRpbmcgYSBGaWxlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2ZpbGVzL2NyZWF0ZSkuXG4gICAgICovXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvdXBsb2FkcycsIHsgYm9keSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FuY2VscyB0aGUgVXBsb2FkLiBObyBQYXJ0cyBtYXkgYmUgYWRkZWQgYWZ0ZXIgYW4gVXBsb2FkIGlzIGNhbmNlbGxlZC5cbiAgICAgKi9cbiAgICBjYW5jZWwodXBsb2FkSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvdXBsb2Fkcy8ke3VwbG9hZElkfS9jYW5jZWxgLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcGxldGVzIHRoZVxuICAgICAqIFtVcGxvYWRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdXBsb2Fkcy9vYmplY3QpLlxuICAgICAqXG4gICAgICogV2l0aGluIHRoZSByZXR1cm5lZCBVcGxvYWQgb2JqZWN0LCB0aGVyZSBpcyBhIG5lc3RlZFxuICAgICAqIFtGaWxlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2ZpbGVzL29iamVjdCkgb2JqZWN0IHRoYXRcbiAgICAgKiBpcyByZWFkeSB0byB1c2UgaW4gdGhlIHJlc3Qgb2YgdGhlIHBsYXRmb3JtLlxuICAgICAqXG4gICAgICogWW91IGNhbiBzcGVjaWZ5IHRoZSBvcmRlciBvZiB0aGUgUGFydHMgYnkgcGFzc2luZyBpbiBhbiBvcmRlcmVkIGxpc3Qgb2YgdGhlIFBhcnRcbiAgICAgKiBJRHMuXG4gICAgICpcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGJ5dGVzIHVwbG9hZGVkIHVwb24gY29tcGxldGlvbiBtdXN0IG1hdGNoIHRoZSBudW1iZXIgb2YgYnl0ZXNcbiAgICAgKiBpbml0aWFsbHkgc3BlY2lmaWVkIHdoZW4gY3JlYXRpbmcgdGhlIFVwbG9hZCBvYmplY3QuIE5vIFBhcnRzIG1heSBiZSBhZGRlZCBhZnRlclxuICAgICAqIGFuIFVwbG9hZCBpcyBjb21wbGV0ZWQuXG4gICAgICovXG4gICAgY29tcGxldGUodXBsb2FkSWQsIGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvdXBsb2Fkcy8ke3VwbG9hZElkfS9jb21wbGV0ZWAsIHsgYm9keSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG59XG5VcGxvYWRzLlBhcnRzID0gUGFydHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cGxvYWRzLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJQYXJ0c0FQSSIsIlBhcnRzIiwiVXBsb2FkcyIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwicGFydHMiLCJfY2xpZW50IiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJwb3N0IiwiY2FuY2VsIiwidXBsb2FkSWQiLCJjb21wbGV0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/uploads/uploads.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/vector-stores/file-batches.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/openai/resources/vector-stores/file-batches.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FileBatches: () => (/* binding */ FileBatches),\n/* harmony export */   VectorStoreFilesPage: () => (/* reexport safe */ _files_mjs__WEBPACK_IMPORTED_MODULE_2__.VectorStoreFilesPage)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _lib_Util_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/Util.mjs */ \"(rsc)/./node_modules/openai/lib/Util.mjs\");\n/* harmony import */ var _files_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./files.mjs */ \"(rsc)/./node_modules/openai/resources/vector-stores/files.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\nclass FileBatches extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  /**\n   * Create a vector store file batch.\n   */\n  create(vectorStoreId, body, options) {\n    return this._client.post(`/vector_stores/${vectorStoreId}/file_batches`, {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Retrieves a vector store file batch.\n   */\n  retrieve(vectorStoreId, batchId, options) {\n    return this._client.get(`/vector_stores/${vectorStoreId}/file_batches/${batchId}`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Cancel a vector store file batch. This attempts to cancel the processing of\n   * files in this batch as soon as possible.\n   */\n  cancel(vectorStoreId, batchId, options) {\n    return this._client.post(`/vector_stores/${vectorStoreId}/file_batches/${batchId}/cancel`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Create a vector store batch and poll until all files have been processed.\n   */\n  async createAndPoll(vectorStoreId, body, options) {\n    const batch = await this.create(vectorStoreId, body);\n    return await this.poll(vectorStoreId, batch.id, options);\n  }\n  listFiles(vectorStoreId, batchId, query = {}, options) {\n    if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n      return this.listFiles(vectorStoreId, batchId, {}, query);\n    }\n    return this._client.getAPIList(`/vector_stores/${vectorStoreId}/file_batches/${batchId}/files`, _files_mjs__WEBPACK_IMPORTED_MODULE_2__.VectorStoreFilesPage, {\n      query,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Wait for the given file batch to be processed.\n   *\n   * Note: this will return even if one of the files failed to process, you need to\n   * check batch.file_counts.failed_count to handle this case.\n   */\n  async poll(vectorStoreId, batchId, options) {\n    const headers = {\n      ...options?.headers,\n      'X-Stainless-Poll-Helper': 'true'\n    };\n    if (options?.pollIntervalMs) {\n      headers['X-Stainless-Custom-Poll-Interval'] = options.pollIntervalMs.toString();\n    }\n    while (true) {\n      const {\n        data: batch,\n        response\n      } = await this.retrieve(vectorStoreId, batchId, {\n        ...options,\n        headers\n      }).withResponse();\n      switch (batch.status) {\n        case 'in_progress':\n          let sleepInterval = 5000;\n          if (options?.pollIntervalMs) {\n            sleepInterval = options.pollIntervalMs;\n          } else {\n            const headerInterval = response.headers.get('openai-poll-after-ms');\n            if (headerInterval) {\n              const headerIntervalMs = parseInt(headerInterval);\n              if (!isNaN(headerIntervalMs)) {\n                sleepInterval = headerIntervalMs;\n              }\n            }\n          }\n          await (0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.sleep)(sleepInterval);\n          break;\n        case 'failed':\n        case 'cancelled':\n        case 'completed':\n          return batch;\n      }\n    }\n  }\n  /**\n   * Uploads the given files concurrently and then creates a vector store file batch.\n   *\n   * The concurrency limit is configurable using the `maxConcurrency` parameter.\n   */\n  async uploadAndPoll(vectorStoreId, {\n    files,\n    fileIds = []\n  }, options) {\n    if (files == null || files.length == 0) {\n      throw new Error(`No \\`files\\` provided to process. If you've already uploaded files you should use \\`.createAndPoll()\\` instead`);\n    }\n    const configuredConcurrency = options?.maxConcurrency ?? 5;\n    // We cap the number of workers at the number of files (so we don't start any unnecessary workers)\n    const concurrencyLimit = Math.min(configuredConcurrency, files.length);\n    const client = this._client;\n    const fileIterator = files.values();\n    const allFileIds = [...fileIds];\n    // This code is based on this design. The libraries don't accommodate our environment limits.\n    // https://stackoverflow.com/questions/40639432/what-is-the-best-way-to-limit-concurrency-when-using-es6s-promise-all\n    async function processFiles(iterator) {\n      for (let item of iterator) {\n        const fileObj = await client.files.create({\n          file: item,\n          purpose: 'assistants'\n        }, options);\n        allFileIds.push(fileObj.id);\n      }\n    }\n    // Start workers to process results\n    const workers = Array(concurrencyLimit).fill(fileIterator).map(processFiles);\n    // Wait for all processing to complete.\n    await (0,_lib_Util_mjs__WEBPACK_IMPORTED_MODULE_3__.allSettledWithThrow)(workers);\n    return await this.createAndPoll(vectorStoreId, {\n      file_ids: allFileIds\n    });\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy92ZWN0b3Itc3RvcmVzL2ZpbGUtYmF0Y2hlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDaUQ7QUFDQztBQUNYO0FBQ2tCO0FBQ047QUFDNUMsTUFBTUssV0FBVyxTQUFTTCxzREFBVyxDQUFDO0VBQ3pDO0FBQ0o7QUFDQTtFQUNJTSxNQUFNQSxDQUFDQyxhQUFhLEVBQUVDLElBQUksRUFBRUMsT0FBTyxFQUFFO0lBQ2pDLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBRSxrQkFBaUJKLGFBQWMsZUFBYyxFQUFFO01BQ3JFQyxJQUFJO01BQ0osR0FBR0MsT0FBTztNQUNWRyxPQUFPLEVBQUU7UUFBRSxhQUFhLEVBQUUsZUFBZTtRQUFFLEdBQUdILE9BQU8sRUFBRUc7TUFBUTtJQUNuRSxDQUFDLENBQUM7RUFDTjtFQUNBO0FBQ0o7QUFDQTtFQUNJQyxRQUFRQSxDQUFDTixhQUFhLEVBQUVPLE9BQU8sRUFBRUwsT0FBTyxFQUFFO0lBQ3RDLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNLLEdBQUcsQ0FBRSxrQkFBaUJSLGFBQWMsaUJBQWdCTyxPQUFRLEVBQUMsRUFBRTtNQUMvRSxHQUFHTCxPQUFPO01BQ1ZHLE9BQU8sRUFBRTtRQUFFLGFBQWEsRUFBRSxlQUFlO1FBQUUsR0FBR0gsT0FBTyxFQUFFRztNQUFRO0lBQ25FLENBQUMsQ0FBQztFQUNOO0VBQ0E7QUFDSjtBQUNBO0FBQ0E7RUFDSUksTUFBTUEsQ0FBQ1QsYUFBYSxFQUFFTyxPQUFPLEVBQUVMLE9BQU8sRUFBRTtJQUNwQyxPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUUsa0JBQWlCSixhQUFjLGlCQUFnQk8sT0FBUSxTQUFRLEVBQUU7TUFDdkYsR0FBR0wsT0FBTztNQUNWRyxPQUFPLEVBQUU7UUFBRSxhQUFhLEVBQUUsZUFBZTtRQUFFLEdBQUdILE9BQU8sRUFBRUc7TUFBUTtJQUNu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SyxDQUFFLGdIQUErRyxDQUFDO0lBQ3JJO0lBQ0EsTUFBTUMscUJBQXFCLEdBQUcvQixPQUFPLEVBQUVnQyxjQUFjLElBQUksQ0FBQztJQUMxRDtJQUNBLE1BQU1DLGdCQUFnQixHQUFHQyxJQUFJLENBQUNDLEdBQUcsQ0FBQ0oscUJBQXFCLEVBQUVKLEtBQUssQ0FBQ0UsTUFBTSxDQUFDO0lBQ3RFLE1BQU1PLE1BQU0sR0FBRyxJQUFJLENBQUNuQyxPQUFPO0lBQzNCLE1BQU1vQyxZQUFZLEdBQUdWLEtBQUssQ0FBQ1csTUFBTSxDQUFDLENBQUM7SUFDbkMsTUFBTUMsVUFBVSxHQUFHLENBQUMsR0FBR1gsT0FBTyxDQUFDO0lBQy9CO0lBQ0E7SUFDQSxlQUFlWSxZQUFZQSxDQUFDQyxRQUFRLEVBQUU7TUFDbEMsS0FBSyxJQUFJQyxJQUFJLElBQUlELFFBQVEsRUFBRTtRQUN2QixNQUFNRSxPQUFPLEdBQUcsTUFBTVAsTUFBTSxDQUFDVCxLQUFLLENBQUM5QixNQUFNLENBQUM7VUFBRStDLElBQUksRUFBRUYsSUFBSTtVQUFFRyxPQUFPLEVBQUU7UUFBYSxDQUFDLEVBQUU3QyxPQUFPLENBQUM7UUFDekZ1QyxVQUFVLENBQUNPLElBQUksQ0FBQ0gsT0FBTyxDQUFDaEMsRUFBRSxDQUFDO01BQy9CO0lBQ0o7SUFDQTtJQUNBLE1BQU1vQyxPQUFPLEdBQUdDLEtBQUssQ0FBQ2YsZ0JBQWdCLENBQUMsQ0FBQ2dCLElBQUksQ0FBQ1osWUFBWSxDQUFDLENBQUNhLEdBQUcsQ0FBQ1YsWUFBWSxDQUFDO0lBQzVFO0lBQ0EsTUFBTTlDLGtFQUFtQixDQUFDcUQsT0FBTyxDQUFDO0lBQ2xDLE9BQU8sTUFBTSxJQUFJLENBQUN2QyxhQUFhLENBQUNWLGFBQWEsRUFBRTtNQUMzQ3FELFFBQVEsRUFBRVo7SUFDZCxDQUFDLENBQUM7RUFDTjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL3ZlY3Rvci1zdG9yZXMvZmlsZS1iYXRjaGVzLm1qcz9mODU2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IGlzUmVxdWVzdE9wdGlvbnMgfSBmcm9tIFwiLi4vLi4vY29yZS5tanNcIjtcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSBcIi4uLy4uL2NvcmUubWpzXCI7XG5pbXBvcnQgeyBhbGxTZXR0bGVkV2l0aFRocm93IH0gZnJvbSBcIi4uLy4uL2xpYi9VdGlsLm1qc1wiO1xuaW1wb3J0IHsgVmVjdG9yU3RvcmVGaWxlc1BhZ2UgfSBmcm9tIFwiLi9maWxlcy5tanNcIjtcbmV4cG9ydCBjbGFzcyBGaWxlQmF0Y2hlcyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSB2ZWN0b3Igc3RvcmUgZmlsZSBiYXRjaC5cbiAgICAgKi9cbiAgICBjcmVhdGUodmVjdG9yU3RvcmVJZCwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC92ZWN0b3Jfc3RvcmVzLyR7dmVjdG9yU3RvcmVJZH0vZmlsZV9iYXRjaGVzYCwge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgdmVjdG9yIHN0b3JlIGZpbGUgYmF0Y2guXG4gICAgICovXG4gICAgcmV0cmlldmUodmVjdG9yU3RvcmVJZCwgYmF0Y2hJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL3ZlY3Rvcl9zdG9yZXMvJHt2ZWN0b3JTdG9yZUlkfS9maWxlX2JhdGNoZXMvJHtiYXRjaElkfWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FuY2VsIGEgdmVjdG9yIHN0b3JlIGZpbGUgYmF0Y2guIFRoaXMgYXR0ZW1wdHMgdG8gY2FuY2VsIHRoZSBwcm9jZXNzaW5nIG9mXG4gICAgICogZmlsZXMgaW4gdGhpcyBiYXRjaCBhcyBzb29uIGFzIHBvc3NpYmxlLlxuICAgICAqL1xuICAgIGNhbmNlbCh2ZWN0b3JTdG9yZUlkLCBiYXRjaElkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL3ZlY3Rvcl9zdG9yZXMvJHt2ZWN0b3JTdG9yZUlkfS9maWxlX2JhdGNoZXMvJHtiYXRjaElkfS9jYW5jZWxgLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHZlY3RvciBzdG9yZSBiYXRjaCBhbmQgcG9sbCB1bnRpbCBhbGwgZmlsZXMgaGF2ZSBiZWVuIHByb2Nlc3NlZC5cbiAgICAgKi9cbiAgICBhc3luYyBjcmVhdGVBbmRQb2xsKHZlY3RvclN0b3JlSWQsIGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYmF0Y2ggPSBhd2FpdCB0aGlzLmNyZWF0ZSh2ZWN0b3JTdG9yZUlkLCBib2R5KTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucG9sbCh2ZWN0b3JTdG9yZUlkLCBiYXRjaC5pZCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGxpc3RGaWxlcyh2ZWN0b3JTdG9yZUlkLCBiYXRjaElkLCBxdWVyeSA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdEZpbGVzKHZlY3RvclN0b3JlSWQsIGJhdGNoSWQsIHt9LCBxdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KGAvdmVjdG9yX3N0b3Jlcy8ke3ZlY3RvclN0b3JlSWR9L2ZpbGVfYmF0Y2hlcy8ke2JhdGNoSWR9L2ZpbGVzYCwgVmVjdG9yU3RvcmVGaWxlc1BhZ2UsIHsgcXVlcnksIC4uLm9wdGlvbnMsIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0gfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdhaXQgZm9yIHRoZSBnaXZlbiBmaWxlIGJhdGNoIHRvIGJlIHByb2Nlc3NlZC5cbiAgICAgKlxuICAgICAqIE5vdGU6IHRoaXMgd2lsbCByZXR1cm4gZXZlbiBpZiBvbmUgb2YgdGhlIGZpbGVzIGZhaWxlZCB0byBwcm9jZXNzLCB5b3UgbmVlZCB0b1xuICAgICAqIGNoZWNrIGJhdGNoLmZpbGVfY291bnRzLmZhaWxlZF9jb3VudCB0byBoYW5kbGUgdGhpcyBjYXNlLlxuICAgICAqL1xuICAgIGFzeW5jIHBvbGwodmVjdG9yU3RvcmVJZCwgYmF0Y2hJZCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBoZWFkZXJzID0geyAuLi5vcHRpb25zPy5oZWFkZXJzLCAnWC1TdGFpbmxlc3MtUG9sbC1IZWxwZXInOiAndHJ1ZScgfTtcbiAgICAgICAgaWYgKG9wdGlvbnM/LnBvbGxJbnRlcnZhbE1zKSB7XG4gICAgICAgICAgICBoZWFkZXJzWydYLVN0YWlubGVzcy1DdXN0b20tUG9sbC1JbnRlcnZhbCddID0gb3B0aW9ucy5wb2xsSW50ZXJ2YWxNcy50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGE6IGJhdGNoLCByZXNwb25zZSB9ID0gYXdhaXQgdGhpcy5yZXRyaWV2ZSh2ZWN0b3JTdG9yZUlkLCBiYXRjaElkLCB7XG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgICAgfSkud2l0aFJlc3BvbnNlKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGJhdGNoLnN0YXR1cykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2luX3Byb2dyZXNzJzpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNsZWVwSW50ZXJ2YWwgPSA1MDAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucz8ucG9sbEludGVydmFsTXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsZWVwSW50ZXJ2YWwgPSBvcHRpb25zLnBvbGxJbnRlcnZhbE1zO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVhZGVySW50ZXJ2YWwgPSByZXNwb25zZS5oZWFkZXJzLmdldCgnb3BlbmFpLXBvbGwtYWZ0ZXItbXMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoZWFkZXJJbnRlcnZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlckludGVydmFsTXMgPSBwYXJzZUludChoZWFkZXJJbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTihoZWFkZXJJbnRlcnZhbE1zKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGVlcEludGVydmFsID0gaGVhZGVySW50ZXJ2YWxNcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2xlZXAoc2xlZXBJbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2ZhaWxlZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnY2FuY2VsbGVkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdjb21wbGV0ZWQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmF0Y2g7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBsb2FkcyB0aGUgZ2l2ZW4gZmlsZXMgY29uY3VycmVudGx5IGFuZCB0aGVuIGNyZWF0ZXMgYSB2ZWN0b3Igc3RvcmUgZmlsZSBiYXRjaC5cbiAgICAgKlxuICAgICAqIFRoZSBjb25jdXJyZW5jeSBsaW1pdCBpcyBjb25maWd1cmFibGUgdXNpbmcgdGhlIGBtYXhDb25jdXJyZW5jeWAgcGFyYW1ldGVyLlxuICAgICAqL1xuICAgIGFzeW5jIHVwbG9hZEFuZFBvbGwodmVjdG9yU3RvcmVJZCwgeyBmaWxlcywgZmlsZUlkcyA9IFtdIH0sIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGZpbGVzID09IG51bGwgfHwgZmlsZXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gXFxgZmlsZXNcXGAgcHJvdmlkZWQgdG8gcHJvY2Vzcy4gSWYgeW91J3ZlIGFscmVhZHkgdXBsb2FkZWQgZmlsZXMgeW91IHNob3VsZCB1c2UgXFxgLmNyZWF0ZUFuZFBvbGwoKVxcYCBpbnN0ZWFkYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29uZmlndXJlZENvbmN1cnJlbmN5ID0gb3B0aW9ucz8ubWF4Q29uY3VycmVuY3kgPz8gNTtcbiAgICAgICAgLy8gV2UgY2FwIHRoZSBudW1iZXIgb2Ygd29ya2VycyBhdCB0aGUgbnVtYmVyIG9mIGZpbGVzIChzbyB3ZSBkb24ndCBzdGFydCBhbnkgdW5uZWNlc3Nhcnkgd29ya2VycylcbiAgICAgICAgY29uc3QgY29uY3VycmVuY3lMaW1pdCA9IE1hdGgubWluKGNvbmZpZ3VyZWRDb25jdXJyZW5jeSwgZmlsZXMubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgY2xpZW50ID0gdGhpcy5fY2xpZW50O1xuICAgICAgICBjb25zdCBmaWxlSXRlcmF0b3IgPSBmaWxlcy52YWx1ZXMoKTtcbiAgICAgICAgY29uc3QgYWxsRmlsZUlkcyA9IFsuLi5maWxlSWRzXTtcbiAgICAgICAgLy8gVGhpcyBjb2RlIGlzIGJhc2VkIG9uIHRoaXMgZGVzaWduLiBUaGUgbGlicmFyaWVzIGRvbid0IGFjY29tbW9kYXRlIG91ciBlbnZpcm9ubWVudCBsaW1pdHMuXG4gICAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQwNjM5NDMyL3doYXQtaXMtdGhlLWJlc3Qtd2F5LXRvLWxpbWl0LWNvbmN1cnJlbmN5LXdoZW4tdXNpbmctZXM2cy1wcm9taXNlLWFsbFxuICAgICAgICBhc3luYyBmdW5jdGlvbiBwcm9jZXNzRmlsZXMoaXRlcmF0b3IpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGl0ZW0gb2YgaXRlcmF0b3IpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlT2JqID0gYXdhaXQgY2xpZW50LmZpbGVzLmNyZWF0ZSh7IGZpbGU6IGl0ZW0sIHB1cnBvc2U6ICdhc3Npc3RhbnRzJyB9LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBhbGxGaWxlSWRzLnB1c2goZmlsZU9iai5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gU3RhcnQgd29ya2VycyB0byBwcm9jZXNzIHJlc3VsdHNcbiAgICAgICAgY29uc3Qgd29ya2VycyA9IEFycmF5KGNvbmN1cnJlbmN5TGltaXQpLmZpbGwoZmlsZUl0ZXJhdG9yKS5tYXAocHJvY2Vzc0ZpbGVzKTtcbiAgICAgICAgLy8gV2FpdCBmb3IgYWxsIHByb2Nlc3NpbmcgdG8gY29tcGxldGUuXG4gICAgICAgIGF3YWl0IGFsbFNldHRsZWRXaXRoVGhyb3cod29ya2Vycyk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNyZWF0ZUFuZFBvbGwodmVjdG9yU3RvcmVJZCwge1xuICAgICAgICAgICAgZmlsZV9pZHM6IGFsbEZpbGVJZHMsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCB7IFZlY3RvclN0b3JlRmlsZXNQYWdlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWxlLWJhdGNoZXMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsImlzUmVxdWVzdE9wdGlvbnMiLCJzbGVlcCIsImFsbFNldHRsZWRXaXRoVGhyb3ciLCJWZWN0b3JTdG9yZUZpbGVzUGFnZSIsIkZpbGVCYXRjaGVzIiwiY3JlYXRlIiwidmVjdG9yU3RvcmVJZCIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiLCJoZWFkZXJzIiwicmV0cmlldmUiLCJiYXRjaElkIiwiZ2V0IiwiY2FuY2VsIiwiY3JlYXRlQW5kUG9sbCIsImJhdGNoIiwicG9sbCIsImlkIiwibGlzdEZpbGVzIiwicXVlcnkiLCJnZXRBUElMaXN0IiwicG9sbEludGVydmFsTXMiLCJ0b1N0cmluZyIsImRhdGEiLCJyZXNwb25zZSIsIndpdGhSZXNwb25zZSIsInN0YXR1cyIsInNsZWVwSW50ZXJ2YWwiLCJoZWFkZXJJbnRlcnZhbCIsImhlYWRlckludGVydmFsTXMiLCJwYXJzZUludCIsImlzTmFOIiwidXBsb2FkQW5kUG9sbCIsImZpbGVzIiwiZmlsZUlkcyIsImxlbmd0aCIsIkVycm9yIiwiY29uZmlndXJlZENvbmN1cnJlbmN5IiwibWF4Q29uY3VycmVuY3kiLCJjb25jdXJyZW5jeUxpbWl0IiwiTWF0aCIsIm1pbiIsImNsaWVudCIsImZpbGVJdGVyYXRvciIsInZhbHVlcyIsImFsbEZpbGVJZHMiLCJwcm9jZXNzRmlsZXMiLCJpdGVyYXRvciIsIml0ZW0iLCJmaWxlT2JqIiwiZmlsZSIsInB1cnBvc2UiLCJwdXNoIiwid29ya2VycyIsIkFycmF5IiwiZmlsbCIsIm1hcCIsImZpbGVfaWRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/vector-stores/file-batches.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/vector-stores/files.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/openai/resources/vector-stores/files.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FileContentResponsesPage: () => (/* binding */ FileContentResponsesPage),\n/* harmony export */   Files: () => (/* binding */ Files),\n/* harmony export */   VectorStoreFilesPage: () => (/* binding */ VectorStoreFilesPage)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Files extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  /**\n   * Create a vector store file by attaching a\n   * [File](https://platform.openai.com/docs/api-reference/files) to a\n   * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object).\n   */\n  create(vectorStoreId, body, options) {\n    return this._client.post(`/vector_stores/${vectorStoreId}/files`, {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Retrieves a vector store file.\n   */\n  retrieve(vectorStoreId, fileId, options) {\n    return this._client.get(`/vector_stores/${vectorStoreId}/files/${fileId}`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Update attributes on a vector store file.\n   */\n  update(vectorStoreId, fileId, body, options) {\n    return this._client.post(`/vector_stores/${vectorStoreId}/files/${fileId}`, {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  list(vectorStoreId, query = {}, options) {\n    if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n      return this.list(vectorStoreId, {}, query);\n    }\n    return this._client.getAPIList(`/vector_stores/${vectorStoreId}/files`, VectorStoreFilesPage, {\n      query,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Delete a vector store file. This will remove the file from the vector store but\n   * the file itself will not be deleted. To delete the file, use the\n   * [delete file](https://platform.openai.com/docs/api-reference/files/delete)\n   * endpoint.\n   */\n  del(vectorStoreId, fileId, options) {\n    return this._client.delete(`/vector_stores/${vectorStoreId}/files/${fileId}`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Attach a file to the given vector store and wait for it to be processed.\n   */\n  async createAndPoll(vectorStoreId, body, options) {\n    const file = await this.create(vectorStoreId, body, options);\n    return await this.poll(vectorStoreId, file.id, options);\n  }\n  /**\n   * Wait for the vector store file to finish processing.\n   *\n   * Note: this will return even if the file failed to process, you need to check\n   * file.last_error and file.status to handle these cases\n   */\n  async poll(vectorStoreId, fileId, options) {\n    const headers = {\n      ...options?.headers,\n      'X-Stainless-Poll-Helper': 'true'\n    };\n    if (options?.pollIntervalMs) {\n      headers['X-Stainless-Custom-Poll-Interval'] = options.pollIntervalMs.toString();\n    }\n    while (true) {\n      const fileResponse = await this.retrieve(vectorStoreId, fileId, {\n        ...options,\n        headers\n      }).withResponse();\n      const file = fileResponse.data;\n      switch (file.status) {\n        case 'in_progress':\n          let sleepInterval = 5000;\n          if (options?.pollIntervalMs) {\n            sleepInterval = options.pollIntervalMs;\n          } else {\n            const headerInterval = fileResponse.response.headers.get('openai-poll-after-ms');\n            if (headerInterval) {\n              const headerIntervalMs = parseInt(headerInterval);\n              if (!isNaN(headerIntervalMs)) {\n                sleepInterval = headerIntervalMs;\n              }\n            }\n          }\n          await (0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.sleep)(sleepInterval);\n          break;\n        case 'failed':\n        case 'completed':\n          return file;\n      }\n    }\n  }\n  /**\n   * Upload a file to the `files` API and then attach it to the given vector store.\n   *\n   * Note the file will be asynchronously processed (you can use the alternative\n   * polling helper method to wait for processing to complete).\n   */\n  async upload(vectorStoreId, file, options) {\n    const fileInfo = await this._client.files.create({\n      file: file,\n      purpose: 'assistants'\n    }, options);\n    return this.create(vectorStoreId, {\n      file_id: fileInfo.id\n    }, options);\n  }\n  /**\n   * Add a file to a vector store and poll until processing is complete.\n   */\n  async uploadAndPoll(vectorStoreId, file, options) {\n    const fileInfo = await this.upload(vectorStoreId, file, options);\n    return await this.poll(vectorStoreId, fileInfo.id, options);\n  }\n  /**\n   * Retrieve the parsed contents of a vector store file.\n   */\n  content(vectorStoreId, fileId, options) {\n    return this._client.getAPIList(`/vector_stores/${vectorStoreId}/files/${fileId}/content`, FileContentResponsesPage, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n}\nclass VectorStoreFilesPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage {}\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nclass FileContentResponsesPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.Page {}\nFiles.VectorStoreFilesPage = VectorStoreFilesPage;\nFiles.FileContentResponsesPage = FileContentResponsesPage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/vector-stores/files.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/resources/vector-stores/vector-stores.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/openai/resources/vector-stores/vector-stores.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VectorStoreSearchResponsesPage: () => (/* binding */ VectorStoreSearchResponsesPage),\n/* harmony export */   VectorStores: () => (/* binding */ VectorStores),\n/* harmony export */   VectorStoresPage: () => (/* binding */ VectorStoresPage)\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(rsc)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _file_batches_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./file-batches.mjs */ \"(rsc)/./node_modules/openai/resources/vector-stores/file-batches.mjs\");\n/* harmony import */ var _files_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./files.mjs */ \"(rsc)/./node_modules/openai/resources/vector-stores/files.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../pagination.mjs */ \"(rsc)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\nclass VectorStores extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n  constructor() {\n    super(...arguments);\n    this.files = new _files_mjs__WEBPACK_IMPORTED_MODULE_1__.Files(this._client);\n    this.fileBatches = new _file_batches_mjs__WEBPACK_IMPORTED_MODULE_2__.FileBatches(this._client);\n  }\n  /**\n   * Create a vector store.\n   */\n  create(body, options) {\n    return this._client.post('/vector_stores', {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Retrieves a vector store.\n   */\n  retrieve(vectorStoreId, options) {\n    return this._client.get(`/vector_stores/${vectorStoreId}`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Modifies a vector store.\n   */\n  update(vectorStoreId, body, options) {\n    return this._client.post(`/vector_stores/${vectorStoreId}`, {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  list(query = {}, options) {\n    if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_3__.isRequestOptions)(query)) {\n      return this.list({}, query);\n    }\n    return this._client.getAPIList('/vector_stores', VectorStoresPage, {\n      query,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Delete a vector store.\n   */\n  del(vectorStoreId, options) {\n    return this._client.delete(`/vector_stores/${vectorStoreId}`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Search a vector store for relevant chunks based on a query and file attributes\n   * filter.\n   */\n  search(vectorStoreId, body, options) {\n    return this._client.getAPIList(`/vector_stores/${vectorStoreId}/search`, VectorStoreSearchResponsesPage, {\n      body,\n      method: 'post',\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n}\nclass VectorStoresPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__.CursorPage {}\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nclass VectorStoreSearchResponsesPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__.Page {}\nVectorStores.VectorStoresPage = VectorStoresPage;\nVectorStores.VectorStoreSearchResponsesPage = VectorStoreSearchResponsesPage;\nVectorStores.Files = _files_mjs__WEBPACK_IMPORTED_MODULE_1__.Files;\nVectorStores.VectorStoreFilesPage = _files_mjs__WEBPACK_IMPORTED_MODULE_1__.VectorStoreFilesPage;\nVectorStores.FileContentResponsesPage = _files_mjs__WEBPACK_IMPORTED_MODULE_1__.FileContentResponsesPage;\nVectorStores.FileBatches = _file_batches_mjs__WEBPACK_IMPORTED_MODULE_2__.FileBatches;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/resources/vector-stores/vector-stores.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/streaming.mjs":
/*!*******************************************!*\
  !*** ./node_modules/openai/streaming.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Stream: () => (/* binding */ Stream),\n/* harmony export */   _iterSSEMessages: () => (/* binding */ _iterSSEMessages)\n/* harmony export */ });\n/* harmony import */ var _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_shims/index.mjs */ \"(rsc)/./node_modules/openai/_shims/index.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error.mjs */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _internal_decoders_line_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/decoders/line.mjs */ \"(rsc)/./node_modules/openai/internal/decoders/line.mjs\");\n/* harmony import */ var _internal_stream_utils_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/stream-utils.mjs */ \"(rsc)/./node_modules/openai/internal/stream-utils.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core.mjs */ \"(rsc)/./node_modules/openai/core.mjs\");\n\n\n\n\n\n\nclass Stream {\n  constructor(iterator, controller) {\n    this.iterator = iterator;\n    this.controller = controller;\n  }\n  static fromSSEResponse(response, controller) {\n    let consumed = false;\n    async function* iterator() {\n      if (consumed) {\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n      }\n      consumed = true;\n      let done = false;\n      try {\n        for await (const sse of _iterSSEMessages(response, controller)) {\n          if (done) continue;\n          if (sse.data.startsWith('[DONE]')) {\n            done = true;\n            continue;\n          }\n          if (sse.event === null || sse.event.startsWith('response.') || sse.event.startsWith('transcript.')) {\n            let data;\n            try {\n              data = JSON.parse(sse.data);\n            } catch (e) {\n              console.error(`Could not parse message into JSON:`, sse.data);\n              console.error(`From chunk:`, sse.raw);\n              throw e;\n            }\n            if (data && data.error) {\n              throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIError(undefined, data.error, undefined, (0,_core_mjs__WEBPACK_IMPORTED_MODULE_2__.createResponseHeaders)(response.headers));\n            }\n            yield data;\n          } else {\n            let data;\n            try {\n              data = JSON.parse(sse.data);\n            } catch (e) {\n              console.error(`Could not parse message into JSON:`, sse.data);\n              console.error(`From chunk:`, sse.raw);\n              throw e;\n            }\n            // TODO: Is this where the error should be thrown?\n            if (sse.event == 'error') {\n              throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIError(undefined, data.error, data.message, undefined);\n            }\n            yield {\n              event: sse.event,\n              data: data\n            };\n          }\n        }\n        done = true;\n      } catch (e) {\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\n        if (e instanceof Error && e.name === 'AbortError') return;\n        throw e;\n      } finally {\n        // If the user `break`s, abort the ongoing request.\n        if (!done) controller.abort();\n      }\n    }\n    return new Stream(iterator, controller);\n  }\n  /**\n   * Generates a Stream from a newline-separated ReadableStream\n   * where each item is a JSON value.\n   */\n  static fromReadableStream(readableStream, controller) {\n    let consumed = false;\n    async function* iterLines() {\n      const lineDecoder = new _internal_decoders_line_mjs__WEBPACK_IMPORTED_MODULE_3__.LineDecoder();\n      const iter = (0,_internal_stream_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.ReadableStreamToAsyncIterable)(readableStream);\n      for await (const chunk of iter) {\n        for (const line of lineDecoder.decode(chunk)) {\n          yield line;\n        }\n      }\n      for (const line of lineDecoder.flush()) {\n        yield line;\n      }\n    }\n    async function* iterator() {\n      if (consumed) {\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n      }\n      consumed = true;\n      let done = false;\n      try {\n        for await (const line of iterLines()) {\n          if (done) continue;\n          if (line) yield JSON.parse(line);\n        }\n        done = true;\n      } catch (e) {\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\n        if (e instanceof Error && e.name === 'AbortError') return;\n        throw e;\n      } finally {\n        // If the user `break`s, abort the ongoing request.\n        if (!done) controller.abort();\n      }\n    }\n    return new Stream(iterator, controller);\n  }\n  [Symbol.asyncIterator]() {\n    return this.iterator();\n  }\n  /**\n   * Splits the stream into two streams which can be\n   * independently read from at different speeds.\n   */\n  tee() {\n    const left = [];\n    const right = [];\n    const iterator = this.iterator();\n    const teeIterator = queue => {\n      return {\n        next: () => {\n          if (queue.length === 0) {\n            const result = iterator.next();\n            left.push(result);\n            right.push(result);\n          }\n          return queue.shift();\n        }\n      };\n    };\n    return [new Stream(() => teeIterator(left), this.controller), new Stream(() => teeIterator(right), this.controller)];\n  }\n  /**\n   * Converts this stream to a newline-separated ReadableStream of\n   * JSON stringified values in the stream\n   * which can be turned back into a Stream with `Stream.fromReadableStream()`.\n   */\n  toReadableStream() {\n    const self = this;\n    let iter;\n    const encoder = new TextEncoder();\n    return new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.ReadableStream({\n      async start() {\n        iter = self[Symbol.asyncIterator]();\n      },\n      async pull(ctrl) {\n        try {\n          const {\n            value,\n            done\n          } = await iter.next();\n          if (done) return ctrl.close();\n          const bytes = encoder.encode(JSON.stringify(value) + '\\n');\n          ctrl.enqueue(bytes);\n        } catch (err) {\n          ctrl.error(err);\n        }\n      },\n      async cancel() {\n        await iter.return?.();\n      }\n    });\n  }\n}\nasync function* _iterSSEMessages(response, controller) {\n  if (!response.body) {\n    controller.abort();\n    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`Attempted to iterate over a response with no body`);\n  }\n  const sseDecoder = new SSEDecoder();\n  const lineDecoder = new _internal_decoders_line_mjs__WEBPACK_IMPORTED_MODULE_3__.LineDecoder();\n  const iter = (0,_internal_stream_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.ReadableStreamToAsyncIterable)(response.body);\n  for await (const sseChunk of iterSSEChunks(iter)) {\n    for (const line of lineDecoder.decode(sseChunk)) {\n      const sse = sseDecoder.decode(line);\n      if (sse) yield sse;\n    }\n  }\n  for (const line of lineDecoder.flush()) {\n    const sse = sseDecoder.decode(line);\n    if (sse) yield sse;\n  }\n}\n/**\n * Given an async iterable iterator, iterates over it and yields full\n * SSE chunks, i.e. yields when a double new-line is encountered.\n */\nasync function* iterSSEChunks(iterator) {\n  let data = new Uint8Array();\n  for await (const chunk of iterator) {\n    if (chunk == null) {\n      continue;\n    }\n    const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk) : typeof chunk === 'string' ? new TextEncoder().encode(chunk) : chunk;\n    let newData = new Uint8Array(data.length + binaryChunk.length);\n    newData.set(data);\n    newData.set(binaryChunk, data.length);\n    data = newData;\n    let patternIndex;\n    while ((patternIndex = (0,_internal_decoders_line_mjs__WEBPACK_IMPORTED_MODULE_3__.findDoubleNewlineIndex)(data)) !== -1) {\n      yield data.slice(0, patternIndex);\n      data = data.slice(patternIndex);\n    }\n  }\n  if (data.length > 0) {\n    yield data;\n  }\n}\nclass SSEDecoder {\n  constructor() {\n    this.event = null;\n    this.data = [];\n    this.chunks = [];\n  }\n  decode(line) {\n    if (line.endsWith('\\r')) {\n      line = line.substring(0, line.length - 1);\n    }\n    if (!line) {\n      // empty line and we didn't previously encounter any messages\n      if (!this.event && !this.data.length) return null;\n      const sse = {\n        event: this.event,\n        data: this.data.join('\\n'),\n        raw: this.chunks\n      };\n      this.event = null;\n      this.data = [];\n      this.chunks = [];\n      return sse;\n    }\n    this.chunks.push(line);\n    if (line.startsWith(':')) {\n      return null;\n    }\n    let [fieldname, _, value] = partition(line, ':');\n    if (value.startsWith(' ')) {\n      value = value.substring(1);\n    }\n    if (fieldname === 'event') {\n      this.event = value;\n    } else if (fieldname === 'data') {\n      this.data.push(value);\n    }\n    return null;\n  }\n}\nfunction partition(str, delimiter) {\n  const index = str.indexOf(delimiter);\n  if (index !== -1) {\n    return [str.substring(0, index), delimiter, str.substring(index + delimiter.length)];\n  }\n  return [str, '', ''];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3N0cmVhbWluZy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFvRDtBQUNWO0FBQ3lDO0FBQ1A7QUFDekI7QUFDWjtBQUNoQyxNQUFNTyxNQUFNLENBQUM7RUFDaEJDLFdBQVdBLENBQUNDLFFBQVEsRUFBRUMsVUFBVSxFQUFFO0lBQzlCLElBQUksQ0FBQ0QsUUFBUSxHQUFHQSxRQUFRO0lBQ3hCLElBQUksQ0FBQ0MsVUFBVSxHQUFHQSxVQUFVO0VBQ2hDO0VBQ0EsT0FBT0MsZUFBZUEsQ0FBQ0MsUUFBUSxFQUFFRixVQUFVLEVBQUU7SUFDekMsSUFBSUcsUUFBUSxHQUFHLEtBQUs7SUFDcEIsZ0JBQWdCSixRQUFRQSxDQUFBLEVBQUc7TUFDdkIsSUFBSUksUUFBUSxFQUFFO1FBQ1YsTUFBTSxJQUFJQyxLQUFLLENBQUMsMEVBQTBFLENBQUM7TUFDL0Y7TUFDQUQsUUFBUSxHQUFHLElBQUk7TUFDZixJQUFJRSxJQUFJLEdBQUcsS0FBSztNQUNoQixJQUFJO1FBQ0EsV0FBVyxNQUFNQyxHQUFHLElBQUlDLGdCQUFnQixDQUFDTCxRQUFRLEVBQUVGLFVBQVUsQ0FBQyxFQUFFO1VBQzVELElBQUlLLElBQUksRUFDSjtVQUNKLElBQUlDLEdBQUcsQ0FBQ0UsSUFBSSxDQUFDQyxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDL0JKLElBQUksR0FBRyxJQUFJO1lBQ1g7VUFDSjtVQUNBLElBQUlDLEdBQUcsQ0FBQ0ksS0FBSyxLQUFLLElBQUksSUFDbEJKLEdBQUcsQ0FBQ0ksS0FBSyxDQUFDRCxVQUFVLENBQUMsV0FBVyxDQUFDLElBQ2pDSCxHQUFHLENBQUNJLEtBQUssQ0FBQ0QsVUFBVSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQ3JDLElBQUlELElBQUk7WUFDUixJQUFJO2NBQ0FBLElBQUksR0FBR0csSUFBSSxDQUFDQyxLQUFLLENBQUNOLEdBQUcsQ0FBQ0UsSUFBSSxDQUFDO1lBQy9CLENBQUMsQ0FDRCxP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LENBQUNpQyxJQUFJLENBQUNTLEtBQUssQ0FBQztJQUN6QjtJQUNBLE9BQU8sSUFBSTtFQUNmO0FBQ0o7QUFDQSxTQUFTMkIsU0FBU0EsQ0FBQ0MsR0FBRyxFQUFFQyxTQUFTLEVBQUU7RUFDL0IsTUFBTUMsS0FBSyxHQUFHRixHQUFHLENBQUNHLE9BQU8sQ0FBQ0YsU0FBUyxDQUFDO0VBQ3BDLElBQUlDLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtJQUNkLE9BQU8sQ0FBQ0YsR0FBRyxDQUFDTCxTQUFTLENBQUMsQ0FBQyxFQUFFTyxLQUFLLENBQUMsRUFBRUQsU0FBUyxFQUFFRCxHQUFHLENBQUNMLFNBQVMsQ0FBQ08sS0FBSyxHQUFHRCxTQUFTLENBQUN4QyxNQUFNLENBQUMsQ0FBQztFQUN4RjtFQUNBLE9BQU8sQ0FBQ3VDLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvc3RyZWFtaW5nLm1qcz9hNzc5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlYWRhYmxlU3RyZWFtIH0gZnJvbSBcIi4vX3NoaW1zL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgT3BlbkFJRXJyb3IgfSBmcm9tIFwiLi9lcnJvci5tanNcIjtcbmltcG9ydCB7IGZpbmREb3VibGVOZXdsaW5lSW5kZXgsIExpbmVEZWNvZGVyIH0gZnJvbSBcIi4vaW50ZXJuYWwvZGVjb2RlcnMvbGluZS5tanNcIjtcbmltcG9ydCB7IFJlYWRhYmxlU3RyZWFtVG9Bc3luY0l0ZXJhYmxlIH0gZnJvbSBcIi4vaW50ZXJuYWwvc3RyZWFtLXV0aWxzLm1qc1wiO1xuaW1wb3J0IHsgY3JlYXRlUmVzcG9uc2VIZWFkZXJzIH0gZnJvbSBcIi4vY29yZS5tanNcIjtcbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSBcIi4vZXJyb3IubWpzXCI7XG5leHBvcnQgY2xhc3MgU3RyZWFtIHtcbiAgICBjb25zdHJ1Y3RvcihpdGVyYXRvciwgY29udHJvbGxlcikge1xuICAgICAgICB0aGlzLml0ZXJhdG9yID0gaXRlcmF0b3I7XG4gICAgICAgIHRoaXMuY29udHJvbGxlciA9IGNvbnRyb2xsZXI7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tU1NFUmVzcG9uc2UocmVzcG9uc2UsIGNvbnRyb2xsZXIpIHtcbiAgICAgICAgbGV0IGNvbnN1bWVkID0gZmFsc2U7XG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uKiBpdGVyYXRvcigpIHtcbiAgICAgICAgICAgIGlmIChjb25zdW1lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGl0ZXJhdGUgb3ZlciBhIGNvbnN1bWVkIHN0cmVhbSwgdXNlIGAudGVlKClgIHRvIHNwbGl0IHRoZSBzdHJlYW0uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdW1lZCA9IHRydWU7XG4gICAgICAgICAgICBsZXQgZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IHNzZSBvZiBfaXRlclNTRU1lc3NhZ2VzKHJlc3BvbnNlLCBjb250cm9sbGVyKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3NlLmRhdGEuc3RhcnRzV2l0aCgnW0RPTkVdJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNzZS5ldmVudCA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgc3NlLmV2ZW50LnN0YXJ0c1dpdGgoJ3Jlc3BvbnNlLicpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBzc2UuZXZlbnQuc3RhcnRzV2l0aCgndHJhbnNjcmlwdC4nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKHNzZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgQ291bGQgbm90IHBhcnNlIG1lc3NhZ2UgaW50byBKU09OOmAsIHNzZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBGcm9tIGNodW5rOmAsIHNzZS5yYXcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFQSUVycm9yKHVuZGVmaW5lZCwgZGF0YS5lcnJvciwgdW5kZWZpbmVkLCBjcmVhdGVSZXNwb25zZUhlYWRlcnMocmVzcG9uc2UuaGVhZGVycykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShzc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYENvdWxkIG5vdCBwYXJzZSBtZXNzYWdlIGludG8gSlNPTjpgLCBzc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRnJvbSBjaHVuazpgLCBzc2UucmF3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogSXMgdGhpcyB3aGVyZSB0aGUgZXJyb3Igc2hvdWxkIGJlIHRocm93bj9cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzc2UuZXZlbnQgPT0gJ2Vycm9yJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBBUElFcnJvcih1bmRlZmluZWQsIGRhdGEuZXJyb3IsIGRhdGEubWVzc2FnZSwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIHsgZXZlbnQ6IHNzZS5ldmVudCwgZGF0YTogZGF0YSB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdXNlciBjYWxscyBgc3RyZWFtLmNvbnRyb2xsZXIuYWJvcnQoKWAsIHdlIHNob3VsZCBleGl0IHdpdGhvdXQgdGhyb3dpbmcuXG4gICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvciAmJiBlLm5hbWUgPT09ICdBYm9ydEVycm9yJylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdXNlciBgYnJlYWtgcywgYWJvcnQgdGhlIG9uZ29pbmcgcmVxdWVzdC5cbiAgICAgICAgICAgICAgICBpZiAoIWRvbmUpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFN0cmVhbShpdGVyYXRvciwgY29udHJvbGxlcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIFN0cmVhbSBmcm9tIGEgbmV3bGluZS1zZXBhcmF0ZWQgUmVhZGFibGVTdHJlYW1cbiAgICAgKiB3aGVyZSBlYWNoIGl0ZW0gaXMgYSBKU09OIHZhbHVlLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tUmVhZGFibGVTdHJlYW0ocmVhZGFibGVTdHJlYW0sIGNvbnRyb2xsZXIpIHtcbiAgICAgICAgbGV0IGNvbnN1bWVkID0gZmFsc2U7XG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uKiBpdGVyTGluZXMoKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5lRGVjb2RlciA9IG5ldyBMaW5lRGVjb2RlcigpO1xuICAgICAgICAgICAgY29uc3QgaXRlciA9IFJlYWRhYmxlU3RyZWFtVG9Bc3luY0l0ZXJhYmxlKHJlYWRhYmxlU3RyZWFtKTtcbiAgICAgICAgICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2YgaXRlcikge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lRGVjb2Rlci5kZWNvZGUoY2h1bmspKSB7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIGxpbmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVEZWNvZGVyLmZsdXNoKCkpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCBsaW5lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uKiBpdGVyYXRvcigpIHtcbiAgICAgICAgICAgIGlmIChjb25zdW1lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGl0ZXJhdGUgb3ZlciBhIGNvbnN1bWVkIHN0cmVhbSwgdXNlIGAudGVlKClgIHRvIHNwbGl0IHRoZSBzdHJlYW0uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdW1lZCA9IHRydWU7XG4gICAgICAgICAgICBsZXQgZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGxpbmUgb2YgaXRlckxpbmVzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvbmUpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmUpXG4gICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCBKU09OLnBhcnNlKGxpbmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHVzZXIgY2FsbHMgYHN0cmVhbS5jb250cm9sbGVyLmFib3J0KClgLCB3ZSBzaG91bGQgZXhpdCB3aXRob3V0IHRocm93aW5nLlxuICAgICAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3IgJiYgZS5uYW1lID09PSAnQWJvcnRFcnJvcicpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHVzZXIgYGJyZWFrYHMsIGFib3J0IHRoZSBvbmdvaW5nIHJlcXVlc3QuXG4gICAgICAgICAgICAgICAgaWYgKCFkb25lKVxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmFib3J0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0oaXRlcmF0b3IsIGNvbnRyb2xsZXIpO1xuICAgIH1cbiAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVyYXRvcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGxpdHMgdGhlIHN0cmVhbSBpbnRvIHR3byBzdHJlYW1zIHdoaWNoIGNhbiBiZVxuICAgICAqIGluZGVwZW5kZW50bHkgcmVhZCBmcm9tIGF0IGRpZmZlcmVudCBzcGVlZHMuXG4gICAgICovXG4gICAgdGVlKCkge1xuICAgICAgICBjb25zdCBsZWZ0ID0gW107XG4gICAgICAgIGNvbnN0IHJpZ2h0ID0gW107XG4gICAgICAgIGNvbnN0IGl0ZXJhdG9yID0gdGhpcy5pdGVyYXRvcigpO1xuICAgICAgICBjb25zdCB0ZWVJdGVyYXRvciA9IChxdWV1ZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuZXh0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQucHVzaChyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQucHVzaChyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBxdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbmV3IFN0cmVhbSgoKSA9PiB0ZWVJdGVyYXRvcihsZWZ0KSwgdGhpcy5jb250cm9sbGVyKSxcbiAgICAgICAgICAgIG5ldyBTdHJlYW0oKCkgPT4gdGVlSXRlcmF0b3IocmlnaHQpLCB0aGlzLmNvbnRyb2xsZXIpLFxuICAgICAgICBdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGlzIHN0cmVhbSB0byBhIG5ld2xpbmUtc2VwYXJhdGVkIFJlYWRhYmxlU3RyZWFtIG9mXG4gICAgICogSlNPTiBzdHJpbmdpZmllZCB2YWx1ZXMgaW4gdGhlIHN0cmVhbVxuICAgICAqIHdoaWNoIGNhbiBiZSB0dXJuZWQgYmFjayBpbnRvIGEgU3RyZWFtIHdpdGggYFN0cmVhbS5mcm9tUmVhZGFibGVTdHJlYW0oKWAuXG4gICAgICovXG4gICAgdG9SZWFkYWJsZVN0cmVhbSgpIHtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGxldCBpdGVyO1xuICAgICAgICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgICAgIHJldHVybiBuZXcgUmVhZGFibGVTdHJlYW0oe1xuICAgICAgICAgICAgYXN5bmMgc3RhcnQoKSB7XG4gICAgICAgICAgICAgICAgaXRlciA9IHNlbGZbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXN5bmMgcHVsbChjdHJsKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gYXdhaXQgaXRlci5uZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb25lKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN0cmwuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnl0ZXMgPSBlbmNvZGVyLmVuY29kZShKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnXFxuJyk7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuZW5xdWV1ZShieXRlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhc3luYyBjYW5jZWwoKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgaXRlci5yZXR1cm4/LigpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uKiBfaXRlclNTRU1lc3NhZ2VzKHJlc3BvbnNlLCBjb250cm9sbGVyKSB7XG4gICAgaWYgKCFyZXNwb25zZS5ib2R5KSB7XG4gICAgICAgIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBBdHRlbXB0ZWQgdG8gaXRlcmF0ZSBvdmVyIGEgcmVzcG9uc2Ugd2l0aCBubyBib2R5YCk7XG4gICAgfVxuICAgIGNvbnN0IHNzZURlY29kZXIgPSBuZXcgU1NFRGVjb2RlcigpO1xuICAgIGNvbnN0IGxpbmVEZWNvZGVyID0gbmV3IExpbmVEZWNvZGVyKCk7XG4gICAgY29uc3QgaXRlciA9IFJlYWRhYmxlU3RyZWFtVG9Bc3luY0l0ZXJhYmxlKHJlc3BvbnNlLmJvZHkpO1xuICAgIGZvciBhd2FpdCAoY29uc3Qgc3NlQ2h1bmsgb2YgaXRlclNTRUNodW5rcyhpdGVyKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZURlY29kZXIuZGVjb2RlKHNzZUNodW5rKSkge1xuICAgICAgICAgICAgY29uc3Qgc3NlID0gc3NlRGVjb2Rlci5kZWNvZGUobGluZSk7XG4gICAgICAgICAgICBpZiAoc3NlKVxuICAgICAgICAgICAgICAgIHlpZWxkIHNzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZURlY29kZXIuZmx1c2goKSkge1xuICAgICAgICBjb25zdCBzc2UgPSBzc2VEZWNvZGVyLmRlY29kZShsaW5lKTtcbiAgICAgICAgaWYgKHNzZSlcbiAgICAgICAgICAgIHlpZWxkIHNzZTtcbiAgICB9XG59XG4vKipcbiAqIEdpdmVuIGFuIGFzeW5jIGl0ZXJhYmxlIGl0ZXJhdG9yLCBpdGVyYXRlcyBvdmVyIGl0IGFuZCB5aWVsZHMgZnVsbFxuICogU1NFIGNodW5rcywgaS5lLiB5aWVsZHMgd2hlbiBhIGRvdWJsZSBuZXctbGluZSBpcyBlbmNvdW50ZXJlZC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24qIGl0ZXJTU0VDaHVua3MoaXRlcmF0b3IpIHtcbiAgICBsZXQgZGF0YSA9IG5ldyBVaW50OEFycmF5KCk7XG4gICAgZm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiBpdGVyYXRvcikge1xuICAgICAgICBpZiAoY2h1bmsgPT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmluYXJ5Q2h1bmsgPSBjaHVuayBpbnN0YW5jZW9mIEFycmF5QnVmZmVyID8gbmV3IFVpbnQ4QXJyYXkoY2h1bmspXG4gICAgICAgICAgICA6IHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycgPyBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoY2h1bmspXG4gICAgICAgICAgICAgICAgOiBjaHVuaztcbiAgICAgICAgbGV0IG5ld0RhdGEgPSBuZXcgVWludDhBcnJheShkYXRhLmxlbmd0aCArIGJpbmFyeUNodW5rLmxlbmd0aCk7XG4gICAgICAgIG5ld0RhdGEuc2V0KGRhdGEpO1xuICAgICAgICBuZXdEYXRhLnNldChiaW5hcnlDaHVuaywgZGF0YS5sZW5ndGgpO1xuICAgICAgICBkYXRhID0gbmV3RGF0YTtcbiAgICAgICAgbGV0IHBhdHRlcm5JbmRleDtcbiAgICAgICAgd2hpbGUgKChwYXR0ZXJuSW5kZXggPSBmaW5kRG91YmxlTmV3bGluZUluZGV4KGRhdGEpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHlpZWxkIGRhdGEuc2xpY2UoMCwgcGF0dGVybkluZGV4KTtcbiAgICAgICAgICAgIGRhdGEgPSBkYXRhLnNsaWNlKHBhdHRlcm5JbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICB5aWVsZCBkYXRhO1xuICAgIH1cbn1cbmNsYXNzIFNTRURlY29kZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmV2ZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5kYXRhID0gW107XG4gICAgICAgIHRoaXMuY2h1bmtzID0gW107XG4gICAgfVxuICAgIGRlY29kZShsaW5lKSB7XG4gICAgICAgIGlmIChsaW5lLmVuZHNXaXRoKCdcXHInKSkge1xuICAgICAgICAgICAgbGluZSA9IGxpbmUuc3Vic3RyaW5nKDAsIGxpbmUubGVuZ3RoIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFsaW5lKSB7XG4gICAgICAgICAgICAvLyBlbXB0eSBsaW5lIGFuZCB3ZSBkaWRuJ3QgcHJldmlvdXNseSBlbmNvdW50ZXIgYW55IG1lc3NhZ2VzXG4gICAgICAgICAgICBpZiAoIXRoaXMuZXZlbnQgJiYgIXRoaXMuZGF0YS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBjb25zdCBzc2UgPSB7XG4gICAgICAgICAgICAgICAgZXZlbnQ6IHRoaXMuZXZlbnQsXG4gICAgICAgICAgICAgICAgZGF0YTogdGhpcy5kYXRhLmpvaW4oJ1xcbicpLFxuICAgICAgICAgICAgICAgIHJhdzogdGhpcy5jaHVua3MsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5ldmVudCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuY2h1bmtzID0gW107XG4gICAgICAgICAgICByZXR1cm4gc3NlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2h1bmtzLnB1c2gobGluZSk7XG4gICAgICAgIGlmIChsaW5lLnN0YXJ0c1dpdGgoJzonKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IFtmaWVsZG5hbWUsIF8sIHZhbHVlXSA9IHBhcnRpdGlvbihsaW5lLCAnOicpO1xuICAgICAgICBpZiAodmFsdWUuc3RhcnRzV2l0aCgnICcpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmllbGRuYW1lID09PSAnZXZlbnQnKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZmllbGRuYW1lID09PSAnZGF0YScpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5mdW5jdGlvbiBwYXJ0aXRpb24oc3RyLCBkZWxpbWl0ZXIpIHtcbiAgICBjb25zdCBpbmRleCA9IHN0ci5pbmRleE9mKGRlbGltaXRlcik7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gW3N0ci5zdWJzdHJpbmcoMCwgaW5kZXgpLCBkZWxpbWl0ZXIsIHN0ci5zdWJzdHJpbmcoaW5kZXggKyBkZWxpbWl0ZXIubGVuZ3RoKV07XG4gICAgfVxuICAgIHJldHVybiBbc3RyLCAnJywgJyddO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyZWFtaW5nLm1qcy5tYXAiXSwibmFtZXMiOlsiUmVhZGFibGVTdHJlYW0iLCJPcGVuQUlFcnJvciIsImZpbmREb3VibGVOZXdsaW5lSW5kZXgiLCJMaW5lRGVjb2RlciIsIlJlYWRhYmxlU3RyZWFtVG9Bc3luY0l0ZXJhYmxlIiwiY3JlYXRlUmVzcG9uc2VIZWFkZXJzIiwiQVBJRXJyb3IiLCJTdHJlYW0iLCJjb25zdHJ1Y3RvciIsIml0ZXJhdG9yIiwiY29udHJvbGxlciIsImZyb21TU0VSZXNwb25zZSIsInJlc3BvbnNlIiwiY29uc3VtZWQiLCJFcnJvciIsImRvbmUiLCJzc2UiLCJfaXRlclNTRU1lc3NhZ2VzIiwiZGF0YSIsInN0YXJ0c1dpdGgiLCJldmVudCIsIkpTT04iLCJwYXJzZSIsImUiLCJjb25zb2xlIiwiZXJyb3IiLCJyYXciLCJ1bmRlZmluZWQiLCJoZWFkZXJzIiwibWVzc2FnZSIsIm5hbWUiLCJhYm9ydCIsImZyb21SZWFkYWJsZVN0cmVhbSIsInJlYWRhYmxlU3RyZWFtIiwiaXRlckxpbmVzIiwibGluZURlY29kZXIiLCJpdGVyIiwiY2h1bmsiLCJsaW5lIiwiZGVjb2RlIiwiZmx1c2giLCJTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidGVlIiwibGVmdCIsInJpZ2h0IiwidGVlSXRlcmF0b3IiLCJxdWV1ZSIsIm5leHQiLCJsZW5ndGgiLCJyZXN1bHQiLCJwdXNoIiwic2hpZnQiLCJ0b1JlYWRhYmxlU3RyZWFtIiwic2VsZiIsImVuY29kZXIiLCJUZXh0RW5jb2RlciIsInN0YXJ0IiwicHVsbCIsImN0cmwiLCJ2YWx1ZSIsImNsb3NlIiwiYnl0ZXMiLCJlbmNvZGUiLCJzdHJpbmdpZnkiLCJlbnF1ZXVlIiwiZXJyIiwiY2FuY2VsIiwicmV0dXJuIiwiYm9keSIsInNzZURlY29kZXIiLCJTU0VEZWNvZGVyIiwic3NlQ2h1bmsiLCJpdGVyU1NFQ2h1bmtzIiwiVWludDhBcnJheSIsImJpbmFyeUNodW5rIiwiQXJyYXlCdWZmZXIiLCJuZXdEYXRhIiwic2V0IiwicGF0dGVybkluZGV4Iiwic2xpY2UiLCJjaHVua3MiLCJlbmRzV2l0aCIsInN1YnN0cmluZyIsImpvaW4iLCJmaWVsZG5hbWUiLCJfIiwicGFydGl0aW9uIiwic3RyIiwiZGVsaW1pdGVyIiwiaW5kZXgiLCJpbmRleE9mIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/streaming.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/uploads.mjs":
/*!*****************************************!*\
  !*** ./node_modules/openai/uploads.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createForm: () => (/* binding */ createForm),\n/* harmony export */   fileFromPath: () => (/* reexport safe */ _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.fileFromPath),\n/* harmony export */   isBlobLike: () => (/* binding */ isBlobLike),\n/* harmony export */   isFileLike: () => (/* binding */ isFileLike),\n/* harmony export */   isMultipartBody: () => (/* binding */ isMultipartBody),\n/* harmony export */   isResponseLike: () => (/* binding */ isResponseLike),\n/* harmony export */   isUploadable: () => (/* binding */ isUploadable),\n/* harmony export */   maybeMultipartFormRequestOptions: () => (/* binding */ maybeMultipartFormRequestOptions),\n/* harmony export */   multipartFormRequestOptions: () => (/* binding */ multipartFormRequestOptions),\n/* harmony export */   toFile: () => (/* binding */ toFile)\n/* harmony export */ });\n/* harmony import */ var _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_shims/index.mjs */ \"(rsc)/./node_modules/openai/_shims/index.mjs\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"buffer\")[\"Buffer\"];\n\n\nconst isResponseLike = value => value != null && typeof value === 'object' && typeof value.url === 'string' && typeof value.blob === 'function';\nconst isFileLike = value => value != null && typeof value === 'object' && typeof value.name === 'string' && typeof value.lastModified === 'number' && isBlobLike(value);\n/**\n * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check\n * adds the arrayBuffer() method type because it is available and used at runtime\n */\nconst isBlobLike = value => value != null && typeof value === 'object' && typeof value.size === 'number' && typeof value.type === 'string' && typeof value.text === 'function' && typeof value.slice === 'function' && typeof value.arrayBuffer === 'function';\nconst isUploadable = value => {\n  return isFileLike(value) || isResponseLike(value) || (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isFsReadStream)(value);\n};\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */\nasync function toFile(value, name, options) {\n  // If it's a promise, resolve it.\n  value = await value;\n  // If we've been given a `File` we don't need to do anything\n  if (isFileLike(value)) {\n    return value;\n  }\n  if (isResponseLike(value)) {\n    const blob = await value.blob();\n    name || (name = new URL(value.url).pathname.split(/[\\\\/]/).pop() ?? 'unknown_file');\n    // we need to convert the `Blob` into an array buffer because the `Blob` class\n    // that `node-fetch` defines is incompatible with the web standard which results\n    // in `new File` interpreting it as a string instead of binary data.\n    const data = isBlobLike(blob) ? [await blob.arrayBuffer()] : [blob];\n    return new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.File(data, name, options);\n  }\n  const bits = await getBytes(value);\n  name || (name = getName(value) ?? 'unknown_file');\n  if (!options?.type) {\n    const type = bits[0]?.type;\n    if (typeof type === 'string') {\n      options = {\n        ...options,\n        type\n      };\n    }\n  }\n  return new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.File(bits, name, options);\n}\nasync function getBytes(value) {\n  let parts = [];\n  if (typeof value === 'string' || ArrayBuffer.isView(value) ||\n  // includes Uint8Array, Buffer, etc.\n  value instanceof ArrayBuffer) {\n    parts.push(value);\n  } else if (isBlobLike(value)) {\n    parts.push(await value.arrayBuffer());\n  } else if (isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.\n  ) {\n    for await (const chunk of value) {\n      parts.push(chunk); // TODO, consider validating?\n    }\n  } else {\n    throw new Error(`Unexpected data type: ${typeof value}; constructor: ${value?.constructor?.name}; props: ${propsForError(value)}`);\n  }\n  return parts;\n}\nfunction propsForError(value) {\n  const props = Object.getOwnPropertyNames(value);\n  return `[${props.map(p => `\"${p}\"`).join(', ')}]`;\n}\nfunction getName(value) {\n  return getStringFromMaybeBuffer(value.name) || getStringFromMaybeBuffer(value.filename) ||\n  // For fs.ReadStream\n  getStringFromMaybeBuffer(value.path)?.split(/[\\\\/]/).pop();\n}\nconst getStringFromMaybeBuffer = x => {\n  if (typeof x === 'string') return x;\n  if (typeof Buffer !== 'undefined' && x instanceof Buffer) return String(x);\n  return undefined;\n};\nconst isAsyncIterableIterator = value => value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';\nconst isMultipartBody = body => body && typeof body === 'object' && body.body && body[Symbol.toStringTag] === 'MultipartBody';\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */\nconst maybeMultipartFormRequestOptions = async opts => {\n  if (!hasUploadableValue(opts.body)) return opts;\n  const form = await createForm(opts.body);\n  return (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getMultipartRequestOptions)(form, opts);\n};\nconst multipartFormRequestOptions = async opts => {\n  const form = await createForm(opts.body);\n  return (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getMultipartRequestOptions)(form, opts);\n};\nconst createForm = async body => {\n  const form = new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.FormData();\n  await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));\n  return form;\n};\nconst hasUploadableValue = value => {\n  if (isUploadable(value)) return true;\n  if (Array.isArray(value)) return value.some(hasUploadableValue);\n  if (value && typeof value === 'object') {\n    for (const k in value) {\n      if (hasUploadableValue(value[k])) return true;\n    }\n  }\n  return false;\n};\nconst addFormValue = async (form, key, value) => {\n  if (value === undefined) return;\n  if (value == null) {\n    throw new TypeError(`Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`);\n  }\n  // TODO: make nested formats configurable\n  if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n    form.append(key, String(value));\n  } else if (isUploadable(value)) {\n    const file = await toFile(value);\n    form.append(key, file);\n  } else if (Array.isArray(value)) {\n    await Promise.all(value.map(entry => addFormValue(form, key + '[]', entry)));\n  } else if (typeof value === 'object') {\n    await Promise.all(Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)));\n  } else {\n    throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/uploads.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/version.mjs":
/*!*****************************************!*\
  !*** ./node_modules/openai/version.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\nconst VERSION = '4.93.0'; // x-release-please-version//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3ZlcnNpb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxPQUFPLEdBQUcsUUFBUSxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS92ZXJzaW9uLm1qcz9kYzJmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBWRVJTSU9OID0gJzQuOTMuMCc7IC8vIHgtcmVsZWFzZS1wbGVhc2UtdmVyc2lvblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5tanMubWFwIl0sIm5hbWVzIjpbIlZFUlNJT04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/version.mjs\n");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-edge-app-route-loader/index.js?absolutePagePath=%2FUsers%2Fjimmullen%2FCascadeProjects%2Fpinelands-wildfire-app%2Fapp%2Fapi%2Fchat%2Froute.ts&page=%2Fapi%2Fchat%2Froute&appDirLoader=bmV4dC1hcHAtbG9hZGVyP25hbWU9YXBwJTJGYXBpJTJGY2hhdCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGY2hhdCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmNoYXQlMkZyb3V0ZS50cyZhcHBEaXI9JTJGVXNlcnMlMkZqaW1tdWxsZW4lMkZDYXNjYWRlUHJvamVjdHMlMkZwaW5lbGFuZHMtd2lsZGZpcmUtYXBwJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRmppbW11bGxlbiUyRkNhc2NhZGVQcm9qZWN0cyUyRnBpbmVsYW5kcy13aWxkZmlyZS1hcHAmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0Qh&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!"));
/******/ (_ENTRIES = typeof _ENTRIES === "undefined" ? {} : _ENTRIES)["middleware_app/api/chat/route"] = __webpack_exports__;
/******/ }
]);