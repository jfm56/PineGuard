"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_app_components_LeafletMap_tsx"],{

/***/ "(app-pages-browser)/./app/components/LeafletMap.tsx":
/*!***************************************!*\
  !*** ./app/components/LeafletMap.tsx ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ LeafletMap; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _MapLayers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MapLayers */ \"(app-pages-browser)/./app/components/MapLayers.tsx\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ var _s = $RefreshSig$();\nvar _s1 = $RefreshSig$();\n\n\n\nfunction LeafletMap() {\n    _s();\n    _s1();\n    const mapRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const layersRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var // Add event listeners\n        _document_getElementById, _document_getElementById1, _document_getElementById2, _document_getElementById3, _document_getElementById4;\n        // Wait for Leaflet to be available\n        if ( false || !window.L) {\n            console.error(\"Leaflet not loaded\");\n            return;\n        }\n        // Initialize map\n        const map = window.L.map(\"map\").setView([\n            39.8,\n            -74.5\n        ], 9);\n        mapRef.current = map;\n        // Add OpenStreetMap tiles\n        window.L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n            attribution: \"\\xa9 OpenStreetMap contributors\"\n        }).addTo(map);\n        // Initialize layer groups\n        const layers = {\n            fireRisk: window.L.layerGroup().addTo(map),\n            evacuationRoutes: window.L.layerGroup(),\n            fireStations: window.L.layerGroup(),\n            waterSources: window.L.layerGroup()\n        };\n        layersRef.current = layers;\n        // Initialize icons\n        const icons = {\n            fireStation: window.L.icon({\n                iconUrl: \"/static/icons/fire-station.png\",\n                iconSize: [\n                    32,\n                    32\n                ],\n                iconAnchor: [\n                    16,\n                    32\n                ],\n                popupAnchor: [\n                    0,\n                    -32\n                ]\n            }),\n            waterSource: window.L.icon({\n                iconUrl: \"/static/icons/water-source.png\",\n                iconSize: [\n                    32,\n                    32\n                ],\n                iconAnchor: [\n                    16,\n                    32\n                ],\n                popupAnchor: [\n                    0,\n                    -32\n                ]\n            })\n        };\n        // Load initial map data\n        const loadMapData = async ()=>{\n            try {\n                const response = await fetch(\"/api/map-data\");\n                const data = await response.json();\n                if (typeof data === \"object\" && data !== null && Array.isArray(data.fireStations) && Array.isArray(data.waterSources) && Array.isArray(data.evacuationRoutes)) {\n                    const mapData = data;\n                    // Add fire stations\n                    mapData.fireStations.forEach((station)=>{\n                        if (Array.isArray(station.coords) && station.coords.length === 2 && typeof station.name === \"string\") {\n                            window.L.marker(station.coords, {\n                                icon: icons.fireStation\n                            }).bindPopup(\"<b>\".concat(station.name, \"</b>\")).addTo(layers.fireStations);\n                        }\n                    });\n                    // Add water sources\n                    mapData.waterSources.forEach((source)=>{\n                        if (Array.isArray(source.coords) && source.coords.length === 2 && typeof source.name === \"string\") {\n                            window.L.marker(source.coords, {\n                                icon: icons.waterSource\n                            }).bindPopup(\"<b>\".concat(source.name, \"</b>\")).addTo(layers.waterSources);\n                        }\n                    });\n                    // Add evacuation routes\n                    mapData.evacuationRoutes.forEach((route)=>{\n                        if (Array.isArray(route.path) && typeof route.name === \"string\") {\n                            window.L.polyline(route.path, {\n                                color: \"blue\",\n                                weight: 3,\n                                opacity: 0.7\n                            }).bindPopup(\"<b>\".concat(route.name, \"</b>\")).addTo(layers.evacuationRoutes);\n                        }\n                    });\n                    // Initial risk areas update\n                    void updateRiskAreas();\n                } else {\n                    throw new Error(\"Invalid map data format\");\n                }\n            } catch (error) {\n                console.error(\"Error loading map data:\", error);\n            }\n        };\n        // Update risk areas\n        const updateRiskAreas = async ()=>{\n            try {\n                var _document_getElementById;\n                const timeRange = ((_document_getElementById = document.getElementById(\"timeRange\")) === null || _document_getElementById === void 0 ? void 0 : _document_getElementById.value) || \"24h\";\n                layers.fireRisk.clearLayers();\n                const response = await fetch(\"/api/fire-risk?timeRange=\".concat(timeRange));\n                const data = await response.json();\n                // Get current weather data first\n                const weatherResponse = await fetch(\"/api/current-weather\");\n                const currentWeatherRaw = await weatherResponse.json();\n                let currentWeather = {\n                    windSpeed: 0,\n                    windDirection: \"\",\n                    humidity: 0,\n                    temperature: 0\n                };\n                if (typeof currentWeatherRaw === \"object\" && currentWeatherRaw !== null && typeof currentWeatherRaw.windSpeed === \"number\" && typeof currentWeatherRaw.windDirection === \"string\" && typeof currentWeatherRaw.humidity === \"number\" && typeof currentWeatherRaw.temperature === \"number\") {\n                    currentWeather = currentWeatherRaw;\n                }\n                if (typeof data === \"object\" && data !== null && Array.isArray(data.riskAreas)) {\n                    const fireRiskData = data;\n                    fireRiskData.riskAreas.forEach((area)=>{\n                        if (Array.isArray(area.coords) && area.coords.length === 2 && typeof area.severity === \"number\" && typeof area.riskLevel === \"string\") {\n                            // Use current weather data to update risk levels\n                            const windSpeed = currentWeather.windSpeed;\n                            const humidity = currentWeather.humidity;\n                            // Update area's weather factors\n                            area.factors = [\n                                {\n                                    name: \"Temperature\",\n                                    value: \"\".concat(currentWeather.temperature, \"\\xb0F\")\n                                },\n                                {\n                                    name: \"Wind Speed\",\n                                    value: \"\".concat(windSpeed, \" mph \").concat(currentWeather.windDirection)\n                                },\n                                {\n                                    name: \"Humidity\",\n                                    value: \"\".concat(humidity, \"%\")\n                                }\n                            ];\n                            // Adjust risk level based on current conditions\n                            if (humidity < 30 && windSpeed > 15) {\n                                area.riskLevel = \"extreme\";\n                            } else if (humidity < 40 && windSpeed > 10) {\n                                area.riskLevel = \"high\";\n                            } else if (humidity > 60 && currentWeather.temperature < 50) {\n                                area.riskLevel = \"low\";\n                            }\n                            const color = getRiskColor(area.riskLevel);\n                            const radius = area.severity * 1000; // Convert to meters\n                            window.L.circle(area.coords, {\n                                color: color,\n                                fillColor: color,\n                                fillOpacity: 0.4,\n                                radius: radius\n                            }).bindPopup('\\n              <div class=\"p-2\">\\n                <div class=\"font-bold text-lg mb-2 capitalize\">Risk Level: '.concat(String(area.riskLevel), '</div>\\n                <div class=\"font-bold mt-2\">Current Conditions:</div>\\n                <ul class=\"mt-1\">\\n                  ').concat((Array.isArray(area.factors) ? area.factors : []).map((f)=>\"<li>• \".concat(f.name, \": \").concat(f.value, \"</li>\")).join(\"\"), \"\\n                </ul>\\n              </div>\\n            \"), {\n                                className: \"custom-popup\",\n                                closeButton: true,\n                                autoPan: true\n                            }).addTo(layers.fireRisk);\n                        }\n                    });\n                } else {\n                    throw new Error(\"Invalid fire risk data format\");\n                }\n            } catch (error) {\n                console.error(\"Error updating risk areas:\", error);\n            }\n        };\n        // Get color based on risk level\n        const getRiskColor = (riskLevel)=>{\n            switch(riskLevel.toLowerCase()){\n                case \"extreme\":\n                    return \"#ff0000\";\n                case \"high\":\n                    return \"#ff6600\";\n                case \"moderate\":\n                    return \"#ffcc00\";\n                case \"low\":\n                    return \"#00cc00\";\n                default:\n                    return \"#00ff00\";\n            }\n        };\n        (_document_getElementById = document.getElementById(\"fireRiskLayer\")) === null || _document_getElementById === void 0 ? void 0 : _document_getElementById.addEventListener(\"change\", (e)=>{\n            const target = e.target;\n            if (target.checked) {\n                map.addLayer(layers.fireRisk);\n            } else {\n                map.removeLayer(layers.fireRisk);\n            }\n        });\n        (_document_getElementById1 = document.getElementById(\"evacuationRoutes\")) === null || _document_getElementById1 === void 0 ? void 0 : _document_getElementById1.addEventListener(\"change\", (e)=>{\n            const target = e.target;\n            if (target.checked) {\n                map.addLayer(layers.evacuationRoutes);\n            } else {\n                map.removeLayer(layers.evacuationRoutes);\n            }\n        });\n        (_document_getElementById2 = document.getElementById(\"fireStations\")) === null || _document_getElementById2 === void 0 ? void 0 : _document_getElementById2.addEventListener(\"change\", (e)=>{\n            const target = e.target;\n            if (target.checked) {\n                map.addLayer(layers.fireStations);\n            } else {\n                map.removeLayer(layers.fireStations);\n            }\n        });\n        (_document_getElementById3 = document.getElementById(\"waterSources\")) === null || _document_getElementById3 === void 0 ? void 0 : _document_getElementById3.addEventListener(\"change\", (e)=>{\n            const target = e.target;\n            if (target.checked) {\n                map.addLayer(layers.waterSources);\n            } else {\n                map.removeLayer(layers.waterSources);\n            }\n        });\n        (_document_getElementById4 = document.getElementById(\"timeRange\")) === null || _document_getElementById4 === void 0 ? void 0 : _document_getElementById4.addEventListener(\"change\", ()=>{\n            void updateRiskAreas();\n        });\n        // Load initial data\n        void loadMapData();\n        // Cleanup\n        return ()=>{\n            map.remove();\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", {\n        className: \"w-full h-full relative\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n                id: \"map\",\n                className: \"w-full h-full rounded-lg overflow-hidden shadow-lg\"\n            }),\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n                className: \"absolute top-4 right-4 z-[1000]\",\n                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_MapLayers__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {})\n            })\n        ]\n    });\n}\n_s(LeafletMap, \"vWzsBvb7Xyp21ifmTUtqwqJ9O2s=\");\n_c1 = LeafletMap;\n_s1(LeafletMap, \"vWzsBvb7Xyp21ifmTUtqwqJ9O2s=\");\n_c = LeafletMap;\nvar _c;\n$RefreshReg$(_c, \"LeafletMap\");\nvar _c1;\n$RefreshReg$(_c1, \"LeafletMap\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/LeafletMap.tsx\n"));

/***/ })

}]);