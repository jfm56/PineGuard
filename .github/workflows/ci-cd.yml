name: PineGuard CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install GDAL dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gdal-bin libgdal-dev
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov flake8
        pip install -r requirements.txt
        
    - name: Lint with flake8
      run: |
        flake8 . --count --max-line-length=100 --statistics
        
    - name: Run tests with pytest
      run: |
        pytest --cov=app tests/ --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        registry: docker.io
        username: jmullen029
        password: ${{ secrets.DOCKER_TOKEN }}
        
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          jmullen029/pineguard:latest
          jmullen029/pineguard:${{ github.event.release.tag_name }}
        cache-from: type=registry,ref=jmullen029/pineguard:buildcache
        cache-to: type=registry,ref=jmullen029/pineguard:buildcache,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying version ${{ github.event.release.tag_name }} to production"
        # Add deployment steps here
        # For example, updating k8s deployment or triggering cloud deployment
